
SAME70NFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008464  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408464  00408464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  0040846c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000cc8  204009c8  00408e34  000209c8  2**2
                  ALLOC
  4 .stack        00002000  20401690  00409afc  000209c8  2**0
                  ALLOC
  5 .heap         00000200  20403690  0040bafc  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001db9b  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004053  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cf8  00000000  00000000  0004263d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d20  00000000  00000000  00043335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000207a4  00000000  00000000  00044055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010f95  00000000  00000000  000647f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087458  00000000  00000000  0007578e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003048  00000000  00000000  000fcbe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006d7e  00000000  00000000  000ffc30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 36 40 20 89 1d 40 00 85 1d 40 00 85 1d 40 00     .6@ ..@...@...@.
  400010:	85 1d 40 00 85 1d 40 00 85 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	85 1d 40 00 85 1d 40 00 00 00 00 00 85 1d 40 00     ..@...@.......@.
  40003c:	25 06 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     %.@...@...@...@.
  40004c:	85 1d 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     ..@...@...@...@.
  40005c:	85 1d 40 00 85 1d 40 00 00 00 00 00 2d 18 40 00     ..@...@.....-.@.
  40006c:	41 18 40 00 00 00 00 00 29 0b 40 00 85 1d 40 00     A.@.....).@...@.
  40007c:	85 1d 40 00 55 18 40 00 00 00 00 00 85 1d 40 00     ..@.U.@.......@.
  40008c:	85 1d 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     ..@...@...@...@.
  40009c:	85 1d 40 00 cd 05 40 00 85 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	71 02 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     q.@...@...@...@.
  4000c4:	85 1d 40 00 85 1d 40 00 85 1d 40 00 00 00 00 00     ..@...@...@.....
  4000d4:	85 1d 40 00 00 00 00 00 85 1d 40 00 85 02 40 00     ..@.......@...@.
  4000e4:	85 1d 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     ..@...@...@...@.
  4000f4:	85 1d 40 00 85 1d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400104:	00 00 00 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     ......@...@...@.
	...
  400120:	85 1d 40 00 85 1d 40 00 85 1d 40 00 85 1d 40 00     ..@...@...@...@.
  400130:	85 1d 40 00 00 00 00 00 00 00 00 00 85 1d 40 00     ..@...........@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c8 	.word	0x204009c8
  40015c:	00000000 	.word	0x00000000
  400160:	0040846c 	.word	0x0040846c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040846c 	.word	0x0040846c
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	0040846c 	.word	0x0040846c
  4001a8:	00000000 	.word	0x00000000

004001ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001b0:	b980      	cbnz	r0, 4001d4 <_read+0x28>
  4001b2:	460c      	mov	r4, r1
  4001b4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001b6:	2a00      	cmp	r2, #0
  4001b8:	dd0f      	ble.n	4001da <_read+0x2e>
  4001ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001bc:	4e08      	ldr	r6, [pc, #32]	; (4001e0 <_read+0x34>)
  4001be:	4d09      	ldr	r5, [pc, #36]	; (4001e4 <_read+0x38>)
  4001c0:	6830      	ldr	r0, [r6, #0]
  4001c2:	4621      	mov	r1, r4
  4001c4:	682b      	ldr	r3, [r5, #0]
  4001c6:	4798      	blx	r3
		ptr++;
  4001c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ca:	42bc      	cmp	r4, r7
  4001cc:	d1f8      	bne.n	4001c0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ce:	4640      	mov	r0, r8
  4001d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001d4:	f04f 38ff 	mov.w	r8, #4294967295
  4001d8:	e7f9      	b.n	4001ce <_read+0x22>
	for (; len > 0; --len) {
  4001da:	4680      	mov	r8, r0
  4001dc:	e7f7      	b.n	4001ce <_read+0x22>
  4001de:	bf00      	nop
  4001e0:	20401664 	.word	0x20401664
  4001e4:	204015dc 	.word	0x204015dc

004001e8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e8:	b570      	push	{r4, r5, r6, lr}
  4001ea:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001f0:	4013      	ands	r3, r2
  4001f2:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f4:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001f6:	4e1c      	ldr	r6, [pc, #112]	; (400268 <afec_process_callback+0x80>)
  4001f8:	4d1c      	ldr	r5, [pc, #112]	; (40026c <afec_process_callback+0x84>)
  4001fa:	42a8      	cmp	r0, r5
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	0105      	lsls	r5, r0, #4
  400204:	e00b      	b.n	40021e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400206:	2c0e      	cmp	r4, #14
  400208:	d81e      	bhi.n	400248 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40020a:	9a01      	ldr	r2, [sp, #4]
  40020c:	f104 010c 	add.w	r1, r4, #12
  400210:	2301      	movs	r3, #1
  400212:	408b      	lsls	r3, r1
  400214:	4213      	tst	r3, r2
  400216:	d110      	bne.n	40023a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400218:	3401      	adds	r4, #1
  40021a:	2c10      	cmp	r4, #16
  40021c:	d022      	beq.n	400264 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40021e:	2c0b      	cmp	r4, #11
  400220:	d8f1      	bhi.n	400206 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400222:	9a01      	ldr	r2, [sp, #4]
  400224:	2301      	movs	r3, #1
  400226:	40a3      	lsls	r3, r4
  400228:	4213      	tst	r3, r2
  40022a:	d0f5      	beq.n	400218 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	2b00      	cmp	r3, #0
  400234:	d0f0      	beq.n	400218 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400236:	4798      	blx	r3
  400238:	e7ee      	b.n	400218 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40023a:	192b      	adds	r3, r5, r4
  40023c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400240:	2b00      	cmp	r3, #0
  400242:	d0e9      	beq.n	400218 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400244:	4798      	blx	r3
  400246:	e7e7      	b.n	400218 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400248:	9a01      	ldr	r2, [sp, #4]
  40024a:	f104 010f 	add.w	r1, r4, #15
  40024e:	2301      	movs	r3, #1
  400250:	408b      	lsls	r3, r1
  400252:	4213      	tst	r3, r2
  400254:	d0e0      	beq.n	400218 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400256:	192b      	adds	r3, r5, r4
  400258:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40025c:	2b00      	cmp	r3, #0
  40025e:	d0db      	beq.n	400218 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400260:	4798      	blx	r3
  400262:	e7d9      	b.n	400218 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400264:	b002      	add	sp, #8
  400266:	bd70      	pop	{r4, r5, r6, pc}
  400268:	204015e0 	.word	0x204015e0
  40026c:	40064000 	.word	0x40064000

00400270 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <AFEC0_Handler+0xc>)
  400274:	4b02      	ldr	r3, [pc, #8]	; (400280 <AFEC0_Handler+0x10>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	4003c000 	.word	0x4003c000
  400280:	004001e9 	.word	0x004001e9

00400284 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400284:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400286:	4802      	ldr	r0, [pc, #8]	; (400290 <AFEC1_Handler+0xc>)
  400288:	4b02      	ldr	r3, [pc, #8]	; (400294 <AFEC1_Handler+0x10>)
  40028a:	4798      	blx	r3
  40028c:	bd08      	pop	{r3, pc}
  40028e:	bf00      	nop
  400290:	40064000 	.word	0x40064000
  400294:	004001e9 	.word	0x004001e9

00400298 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400298:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40029a:	4b07      	ldr	r3, [pc, #28]	; (4002b8 <spi_enable_clock+0x20>)
  40029c:	4298      	cmp	r0, r3
  40029e:	d003      	beq.n	4002a8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4002a0:	4b06      	ldr	r3, [pc, #24]	; (4002bc <spi_enable_clock+0x24>)
  4002a2:	4298      	cmp	r0, r3
  4002a4:	d004      	beq.n	4002b0 <spi_enable_clock+0x18>
  4002a6:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002a8:	2015      	movs	r0, #21
  4002aa:	4b05      	ldr	r3, [pc, #20]	; (4002c0 <spi_enable_clock+0x28>)
  4002ac:	4798      	blx	r3
  4002ae:	bd08      	pop	{r3, pc}
  4002b0:	202a      	movs	r0, #42	; 0x2a
  4002b2:	4b03      	ldr	r3, [pc, #12]	; (4002c0 <spi_enable_clock+0x28>)
  4002b4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4002b6:	e7f6      	b.n	4002a6 <spi_enable_clock+0xe>
  4002b8:	40008000 	.word	0x40008000
  4002bc:	40058000 	.word	0x40058000
  4002c0:	00401a85 	.word	0x00401a85

004002c4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4002c4:	6843      	ldr	r3, [r0, #4]
  4002c6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002ca:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002cc:	6843      	ldr	r3, [r0, #4]
  4002ce:	0409      	lsls	r1, r1, #16
  4002d0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002d4:	4319      	orrs	r1, r3
  4002d6:	6041      	str	r1, [r0, #4]
  4002d8:	4770      	bx	lr

004002da <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4002da:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4002dc:	f643 2399 	movw	r3, #15001	; 0x3a99
  4002e0:	6904      	ldr	r4, [r0, #16]
  4002e2:	f014 0f01 	tst.w	r4, #1
  4002e6:	d103      	bne.n	4002f0 <spi_read+0x16>
		if (!timeout--) {
  4002e8:	3b01      	subs	r3, #1
  4002ea:	d1f9      	bne.n	4002e0 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4002ec:	2001      	movs	r0, #1
  4002ee:	e009      	b.n	400304 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4002f0:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002f2:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4002f4:	f010 0f02 	tst.w	r0, #2
  4002f8:	d002      	beq.n	400300 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4002fa:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4002fe:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400300:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  400302:	2000      	movs	r0, #0
}
  400304:	f85d 4b04 	ldr.w	r4, [sp], #4
  400308:	4770      	bx	lr

0040030a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40030a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40030c:	f643 2499 	movw	r4, #15001	; 0x3a99
  400310:	6905      	ldr	r5, [r0, #16]
  400312:	f015 0f02 	tst.w	r5, #2
  400316:	d103      	bne.n	400320 <spi_write+0x16>
		if (!timeout--) {
  400318:	3c01      	subs	r4, #1
  40031a:	d1f9      	bne.n	400310 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40031c:	2001      	movs	r0, #1
  40031e:	e00c      	b.n	40033a <spi_write+0x30>
  400320:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400322:	f014 0f02 	tst.w	r4, #2
  400326:	d006      	beq.n	400336 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400328:	0412      	lsls	r2, r2, #16
  40032a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40032e:	4311      	orrs	r1, r2
		if (uc_last) {
  400330:	b10b      	cbz	r3, 400336 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400332:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400336:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400338:	2000      	movs	r0, #0
}
  40033a:	bc30      	pop	{r4, r5}
  40033c:	4770      	bx	lr

0040033e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40033e:	b932      	cbnz	r2, 40034e <spi_set_clock_polarity+0x10>
  400340:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400344:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400346:	f023 0301 	bic.w	r3, r3, #1
  40034a:	6303      	str	r3, [r0, #48]	; 0x30
  40034c:	4770      	bx	lr
  40034e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400352:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400354:	f043 0301 	orr.w	r3, r3, #1
  400358:	6303      	str	r3, [r0, #48]	; 0x30
  40035a:	4770      	bx	lr

0040035c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40035c:	b932      	cbnz	r2, 40036c <spi_set_clock_phase+0x10>
  40035e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400362:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400364:	f023 0302 	bic.w	r3, r3, #2
  400368:	6303      	str	r3, [r0, #48]	; 0x30
  40036a:	4770      	bx	lr
  40036c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400370:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400372:	f043 0302 	orr.w	r3, r3, #2
  400376:	6303      	str	r3, [r0, #48]	; 0x30
  400378:	4770      	bx	lr

0040037a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40037a:	2a04      	cmp	r2, #4
  40037c:	d003      	beq.n	400386 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40037e:	b16a      	cbz	r2, 40039c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400380:	2a08      	cmp	r2, #8
  400382:	d016      	beq.n	4003b2 <spi_configure_cs_behavior+0x38>
  400384:	4770      	bx	lr
  400386:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40038a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40038c:	f023 0308 	bic.w	r3, r3, #8
  400390:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400392:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400394:	f043 0304 	orr.w	r3, r3, #4
  400398:	6303      	str	r3, [r0, #48]	; 0x30
  40039a:	4770      	bx	lr
  40039c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4003a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003a2:	f023 0308 	bic.w	r3, r3, #8
  4003a6:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4003a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003aa:	f023 0304 	bic.w	r3, r3, #4
  4003ae:	6303      	str	r3, [r0, #48]	; 0x30
  4003b0:	4770      	bx	lr
  4003b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4003b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003b8:	f043 0308 	orr.w	r3, r3, #8
  4003bc:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4003be:	e7e1      	b.n	400384 <spi_configure_cs_behavior+0xa>

004003c0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4003c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4003c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4003ca:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4003cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003ce:	431a      	orrs	r2, r3
  4003d0:	630a      	str	r2, [r1, #48]	; 0x30
  4003d2:	4770      	bx	lr

004003d4 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider) {
  4003d4:	b17a      	cbz	r2, 4003f6 <spi_set_baudrate_div+0x22>
{
  4003d6:	b410      	push	{r4}
  4003d8:	4614      	mov	r4, r2
  4003da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
    }
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4003de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003e4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003e8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003ec:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ee:	2000      	movs	r0, #0
}
  4003f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003f4:	4770      	bx	lr
        return -1;
  4003f6:	f04f 30ff 	mov.w	r0, #4294967295
  4003fa:	4770      	bx	lr

004003fc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4003fc:	b410      	push	{r4}
  4003fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400402:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400404:	b280      	uxth	r0, r0
  400406:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400408:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40040a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40040e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400412:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400414:	f85d 4b04 	ldr.w	r4, [sp], #4
  400418:	4770      	bx	lr
	...

0040041c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40041c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40041e:	b083      	sub	sp, #12
  400420:	4605      	mov	r5, r0
  400422:	460c      	mov	r4, r1
	uint32_t val = 0;
  400424:	2300      	movs	r3, #0
  400426:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400428:	4b2a      	ldr	r3, [pc, #168]	; (4004d4 <usart_serial_getchar+0xb8>)
  40042a:	4298      	cmp	r0, r3
  40042c:	d013      	beq.n	400456 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40042e:	4b2a      	ldr	r3, [pc, #168]	; (4004d8 <usart_serial_getchar+0xbc>)
  400430:	4298      	cmp	r0, r3
  400432:	d018      	beq.n	400466 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400434:	4b29      	ldr	r3, [pc, #164]	; (4004dc <usart_serial_getchar+0xc0>)
  400436:	4298      	cmp	r0, r3
  400438:	d01d      	beq.n	400476 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40043a:	4b29      	ldr	r3, [pc, #164]	; (4004e0 <usart_serial_getchar+0xc4>)
  40043c:	429d      	cmp	r5, r3
  40043e:	d022      	beq.n	400486 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400440:	4b28      	ldr	r3, [pc, #160]	; (4004e4 <usart_serial_getchar+0xc8>)
  400442:	429d      	cmp	r5, r3
  400444:	d027      	beq.n	400496 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400446:	4b28      	ldr	r3, [pc, #160]	; (4004e8 <usart_serial_getchar+0xcc>)
  400448:	429d      	cmp	r5, r3
  40044a:	d02e      	beq.n	4004aa <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40044c:	4b27      	ldr	r3, [pc, #156]	; (4004ec <usart_serial_getchar+0xd0>)
  40044e:	429d      	cmp	r5, r3
  400450:	d035      	beq.n	4004be <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400452:	b003      	add	sp, #12
  400454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400456:	461f      	mov	r7, r3
  400458:	4e25      	ldr	r6, [pc, #148]	; (4004f0 <usart_serial_getchar+0xd4>)
  40045a:	4621      	mov	r1, r4
  40045c:	4638      	mov	r0, r7
  40045e:	47b0      	blx	r6
  400460:	2800      	cmp	r0, #0
  400462:	d1fa      	bne.n	40045a <usart_serial_getchar+0x3e>
  400464:	e7e9      	b.n	40043a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400466:	461f      	mov	r7, r3
  400468:	4e21      	ldr	r6, [pc, #132]	; (4004f0 <usart_serial_getchar+0xd4>)
  40046a:	4621      	mov	r1, r4
  40046c:	4638      	mov	r0, r7
  40046e:	47b0      	blx	r6
  400470:	2800      	cmp	r0, #0
  400472:	d1fa      	bne.n	40046a <usart_serial_getchar+0x4e>
  400474:	e7e4      	b.n	400440 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400476:	461f      	mov	r7, r3
  400478:	4e1d      	ldr	r6, [pc, #116]	; (4004f0 <usart_serial_getchar+0xd4>)
  40047a:	4621      	mov	r1, r4
  40047c:	4638      	mov	r0, r7
  40047e:	47b0      	blx	r6
  400480:	2800      	cmp	r0, #0
  400482:	d1fa      	bne.n	40047a <usart_serial_getchar+0x5e>
  400484:	e7df      	b.n	400446 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400486:	461f      	mov	r7, r3
  400488:	4e19      	ldr	r6, [pc, #100]	; (4004f0 <usart_serial_getchar+0xd4>)
  40048a:	4621      	mov	r1, r4
  40048c:	4638      	mov	r0, r7
  40048e:	47b0      	blx	r6
  400490:	2800      	cmp	r0, #0
  400492:	d1fa      	bne.n	40048a <usart_serial_getchar+0x6e>
  400494:	e7da      	b.n	40044c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400496:	461e      	mov	r6, r3
  400498:	4d16      	ldr	r5, [pc, #88]	; (4004f4 <usart_serial_getchar+0xd8>)
  40049a:	a901      	add	r1, sp, #4
  40049c:	4630      	mov	r0, r6
  40049e:	47a8      	blx	r5
  4004a0:	2800      	cmp	r0, #0
  4004a2:	d1fa      	bne.n	40049a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4004a4:	9b01      	ldr	r3, [sp, #4]
  4004a6:	7023      	strb	r3, [r4, #0]
  4004a8:	e7d3      	b.n	400452 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4004aa:	461e      	mov	r6, r3
  4004ac:	4d11      	ldr	r5, [pc, #68]	; (4004f4 <usart_serial_getchar+0xd8>)
  4004ae:	a901      	add	r1, sp, #4
  4004b0:	4630      	mov	r0, r6
  4004b2:	47a8      	blx	r5
  4004b4:	2800      	cmp	r0, #0
  4004b6:	d1fa      	bne.n	4004ae <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4004b8:	9b01      	ldr	r3, [sp, #4]
  4004ba:	7023      	strb	r3, [r4, #0]
  4004bc:	e7c9      	b.n	400452 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4004be:	461e      	mov	r6, r3
  4004c0:	4d0c      	ldr	r5, [pc, #48]	; (4004f4 <usart_serial_getchar+0xd8>)
  4004c2:	a901      	add	r1, sp, #4
  4004c4:	4630      	mov	r0, r6
  4004c6:	47a8      	blx	r5
  4004c8:	2800      	cmp	r0, #0
  4004ca:	d1fa      	bne.n	4004c2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4004cc:	9b01      	ldr	r3, [sp, #4]
  4004ce:	7023      	strb	r3, [r4, #0]
}
  4004d0:	e7bf      	b.n	400452 <usart_serial_getchar+0x36>
  4004d2:	bf00      	nop
  4004d4:	400e0800 	.word	0x400e0800
  4004d8:	400e0a00 	.word	0x400e0a00
  4004dc:	400e1a00 	.word	0x400e1a00
  4004e0:	400e1c00 	.word	0x400e1c00
  4004e4:	40024000 	.word	0x40024000
  4004e8:	40028000 	.word	0x40028000
  4004ec:	4002c000 	.word	0x4002c000
  4004f0:	00401b55 	.word	0x00401b55
  4004f4:	00401883 	.word	0x00401883

004004f8 <usart_serial_putchar>:
{
  4004f8:	b570      	push	{r4, r5, r6, lr}
  4004fa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4004fc:	4b2a      	ldr	r3, [pc, #168]	; (4005a8 <usart_serial_putchar+0xb0>)
  4004fe:	4298      	cmp	r0, r3
  400500:	d013      	beq.n	40052a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400502:	4b2a      	ldr	r3, [pc, #168]	; (4005ac <usart_serial_putchar+0xb4>)
  400504:	4298      	cmp	r0, r3
  400506:	d019      	beq.n	40053c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400508:	4b29      	ldr	r3, [pc, #164]	; (4005b0 <usart_serial_putchar+0xb8>)
  40050a:	4298      	cmp	r0, r3
  40050c:	d01f      	beq.n	40054e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40050e:	4b29      	ldr	r3, [pc, #164]	; (4005b4 <usart_serial_putchar+0xbc>)
  400510:	4298      	cmp	r0, r3
  400512:	d025      	beq.n	400560 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400514:	4b28      	ldr	r3, [pc, #160]	; (4005b8 <usart_serial_putchar+0xc0>)
  400516:	4298      	cmp	r0, r3
  400518:	d02b      	beq.n	400572 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40051a:	4b28      	ldr	r3, [pc, #160]	; (4005bc <usart_serial_putchar+0xc4>)
  40051c:	4298      	cmp	r0, r3
  40051e:	d031      	beq.n	400584 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400520:	4b27      	ldr	r3, [pc, #156]	; (4005c0 <usart_serial_putchar+0xc8>)
  400522:	4298      	cmp	r0, r3
  400524:	d037      	beq.n	400596 <usart_serial_putchar+0x9e>
	return 0;
  400526:	2000      	movs	r0, #0
}
  400528:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40052a:	461e      	mov	r6, r3
  40052c:	4d25      	ldr	r5, [pc, #148]	; (4005c4 <usart_serial_putchar+0xcc>)
  40052e:	4621      	mov	r1, r4
  400530:	4630      	mov	r0, r6
  400532:	47a8      	blx	r5
  400534:	2800      	cmp	r0, #0
  400536:	d1fa      	bne.n	40052e <usart_serial_putchar+0x36>
		return 1;
  400538:	2001      	movs	r0, #1
  40053a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40053c:	461e      	mov	r6, r3
  40053e:	4d21      	ldr	r5, [pc, #132]	; (4005c4 <usart_serial_putchar+0xcc>)
  400540:	4621      	mov	r1, r4
  400542:	4630      	mov	r0, r6
  400544:	47a8      	blx	r5
  400546:	2800      	cmp	r0, #0
  400548:	d1fa      	bne.n	400540 <usart_serial_putchar+0x48>
		return 1;
  40054a:	2001      	movs	r0, #1
  40054c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40054e:	461e      	mov	r6, r3
  400550:	4d1c      	ldr	r5, [pc, #112]	; (4005c4 <usart_serial_putchar+0xcc>)
  400552:	4621      	mov	r1, r4
  400554:	4630      	mov	r0, r6
  400556:	47a8      	blx	r5
  400558:	2800      	cmp	r0, #0
  40055a:	d1fa      	bne.n	400552 <usart_serial_putchar+0x5a>
		return 1;
  40055c:	2001      	movs	r0, #1
  40055e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400560:	461e      	mov	r6, r3
  400562:	4d18      	ldr	r5, [pc, #96]	; (4005c4 <usart_serial_putchar+0xcc>)
  400564:	4621      	mov	r1, r4
  400566:	4630      	mov	r0, r6
  400568:	47a8      	blx	r5
  40056a:	2800      	cmp	r0, #0
  40056c:	d1fa      	bne.n	400564 <usart_serial_putchar+0x6c>
		return 1;
  40056e:	2001      	movs	r0, #1
  400570:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400572:	461e      	mov	r6, r3
  400574:	4d14      	ldr	r5, [pc, #80]	; (4005c8 <usart_serial_putchar+0xd0>)
  400576:	4621      	mov	r1, r4
  400578:	4630      	mov	r0, r6
  40057a:	47a8      	blx	r5
  40057c:	2800      	cmp	r0, #0
  40057e:	d1fa      	bne.n	400576 <usart_serial_putchar+0x7e>
		return 1;
  400580:	2001      	movs	r0, #1
  400582:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400584:	461e      	mov	r6, r3
  400586:	4d10      	ldr	r5, [pc, #64]	; (4005c8 <usart_serial_putchar+0xd0>)
  400588:	4621      	mov	r1, r4
  40058a:	4630      	mov	r0, r6
  40058c:	47a8      	blx	r5
  40058e:	2800      	cmp	r0, #0
  400590:	d1fa      	bne.n	400588 <usart_serial_putchar+0x90>
		return 1;
  400592:	2001      	movs	r0, #1
  400594:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400596:	461e      	mov	r6, r3
  400598:	4d0b      	ldr	r5, [pc, #44]	; (4005c8 <usart_serial_putchar+0xd0>)
  40059a:	4621      	mov	r1, r4
  40059c:	4630      	mov	r0, r6
  40059e:	47a8      	blx	r5
  4005a0:	2800      	cmp	r0, #0
  4005a2:	d1fa      	bne.n	40059a <usart_serial_putchar+0xa2>
		return 1;
  4005a4:	2001      	movs	r0, #1
  4005a6:	bd70      	pop	{r4, r5, r6, pc}
  4005a8:	400e0800 	.word	0x400e0800
  4005ac:	400e0a00 	.word	0x400e0a00
  4005b0:	400e1a00 	.word	0x400e1a00
  4005b4:	400e1c00 	.word	0x400e1c00
  4005b8:	40024000 	.word	0x40024000
  4005bc:	40028000 	.word	0x40028000
  4005c0:	4002c000 	.word	0x4002c000
  4005c4:	00401b43 	.word	0x00401b43
  4005c8:	0040186d 	.word	0x0040186d

004005cc <TC1_Handler>:

/**
 * \brief Interrupt handler for Timer 3
 */
void TC_1MS_Handler(void)
{
  4005cc:	b508      	push	{r3, lr}
	/* Clear status bit to acknowledge interrupt */
	tc_get_status(TC_1MS, TC_1MS_CHN);
  4005ce:	2101      	movs	r1, #1
  4005d0:	480e      	ldr	r0, [pc, #56]	; (40060c <TC1_Handler+0x40>)
  4005d2:	4b0f      	ldr	r3, [pc, #60]	; (400610 <TC1_Handler+0x44>)
  4005d4:	4798      	blx	r3

	/* Update ms counter to blink led 0 */
	if (!sul_count_ms--) {
  4005d6:	4b0f      	ldr	r3, [pc, #60]	; (400614 <TC1_Handler+0x48>)
  4005d8:	681b      	ldr	r3, [r3, #0]
  4005da:	b16b      	cbz	r3, 4005f8 <TC1_Handler+0x2c>
  4005dc:	3b01      	subs	r3, #1
  4005de:	4a0d      	ldr	r2, [pc, #52]	; (400614 <TC1_Handler+0x48>)
  4005e0:	6013      	str	r3, [r2, #0]
		sul_count_ms = COUNT_MS_SWAP_LED;
		suc_led_swap++;
	}

	/* Update ms counter to blink led 1 when a PLC message is received */
	if (sul_ind_count_ms) {
  4005e2:	4b0d      	ldr	r3, [pc, #52]	; (400618 <TC1_Handler+0x4c>)
  4005e4:	681b      	ldr	r3, [r3, #0]
  4005e6:	b113      	cbz	r3, 4005ee <TC1_Handler+0x22>
		if (!--sul_ind_count_ms) {
  4005e8:	3b01      	subs	r3, #1
  4005ea:	4a0b      	ldr	r2, [pc, #44]	; (400618 <TC1_Handler+0x4c>)
  4005ec:	6013      	str	r3, [r2, #0]
			sb_ind_led_swap = true;
		}
	}

	/* One ms counter, used to track transmission speeds */
	one_ms_cnt++;
  4005ee:	4a0b      	ldr	r2, [pc, #44]	; (40061c <TC1_Handler+0x50>)
  4005f0:	6813      	ldr	r3, [r2, #0]
  4005f2:	3301      	adds	r3, #1
  4005f4:	6013      	str	r3, [r2, #0]
  4005f6:	bd08      	pop	{r3, pc}
		sul_count_ms = COUNT_MS_SWAP_LED;
  4005f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4005fc:	4b05      	ldr	r3, [pc, #20]	; (400614 <TC1_Handler+0x48>)
  4005fe:	601a      	str	r2, [r3, #0]
		suc_led_swap++;
  400600:	4a07      	ldr	r2, [pc, #28]	; (400620 <TC1_Handler+0x54>)
  400602:	7813      	ldrb	r3, [r2, #0]
  400604:	3301      	adds	r3, #1
  400606:	7013      	strb	r3, [r2, #0]
  400608:	e7eb      	b.n	4005e2 <TC1_Handler+0x16>
  40060a:	bf00      	nop
  40060c:	4000c000 	.word	0x4000c000
  400610:	00401b0b 	.word	0x00401b0b
  400614:	2040000c 	.word	0x2040000c
  400618:	204009f0 	.word	0x204009f0
  40061c:	204009e8 	.word	0x204009e8
  400620:	204009ed 	.word	0x204009ed

00400624 <SysTick_Handler>:
 * \brief SysTick_Handler implementation
 */
volatile uint32_t g_ul_ms_ticks = 0;
void SysTick_Handler(void)
{
    g_ul_ms_ticks++;
  400624:	4a02      	ldr	r2, [pc, #8]	; (400630 <SysTick_Handler+0xc>)
  400626:	6813      	ldr	r3, [r2, #0]
  400628:	3301      	adds	r3, #1
  40062a:	6013      	str	r3, [r2, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009e4 	.word	0x204009e4
  400634:	00000000 	.word	0x00000000

00400638 <main>:

/**
 * \brief Main code entry point.
 */
int main(void)
{
  400638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40063c:	b086      	sub	sp, #24
	sysclk_init();
  40063e:	4bba      	ldr	r3, [pc, #744]	; (400928 <main+0x2f0>)
  400640:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  400642:	4fba      	ldr	r7, [pc, #744]	; (40092c <main+0x2f4>)
  400644:	68fa      	ldr	r2, [r7, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  400646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  40064a:	0412      	lsls	r2, r2, #16
  40064c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                 |
  40064e:	4bb8      	ldr	r3, [pc, #736]	; (400930 <main+0x2f8>)
  400650:	4313      	orrs	r3, r2
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  400652:	60fb      	str	r3, [r7, #12]
	board_init();
  400654:	4bb7      	ldr	r3, [pc, #732]	; (400934 <main+0x2fc>)
  400656:	4798      	blx	r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400658:	4bb7      	ldr	r3, [pc, #732]	; (400938 <main+0x300>)
  40065a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40065c:	f3c3 4340 	ubfx	r3, r3, #17, #1
	/* Prepare the hardware */
    prvSetupHardware();
   
    /* Determine hardware role via hardware pin strapping */
	role = ioport_get_pin_level(CTRL_NDEV);
  400660:	4ab6      	ldr	r2, [pc, #728]	; (40093c <main+0x304>)
  400662:	7013      	strb	r3, [r2, #0]
	pmc_enable_periph_clk(ID_TC_1MS);
  400664:	2018      	movs	r0, #24
  400666:	4eb6      	ldr	r6, [pc, #728]	; (400940 <main+0x308>)
  400668:	47b0      	blx	r6
	tc_init(TC_1MS, TC_1MS_CHN, ul_tcclks | TC_CMR_CPCTRG);
  40066a:	4db6      	ldr	r5, [pc, #728]	; (400944 <main+0x30c>)
  40066c:	f244 0203 	movw	r2, #16387	; 0x4003
  400670:	2101      	movs	r1, #1
  400672:	4628      	mov	r0, r5
  400674:	4bb4      	ldr	r3, [pc, #720]	; (400948 <main+0x310>)
  400676:	4798      	blx	r3
	tc_write_rc(TC_1MS, TC_1MS_CHN, ul_div);
  400678:	f240 4294 	movw	r2, #1172	; 0x494
  40067c:	2101      	movs	r1, #1
  40067e:	4628      	mov	r0, r5
  400680:	4bb2      	ldr	r3, [pc, #712]	; (40094c <main+0x314>)
  400682:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400684:	4bb2      	ldr	r3, [pc, #712]	; (400950 <main+0x318>)
  400686:	2400      	movs	r4, #0
  400688:	f883 4318 	strb.w	r4, [r3, #792]	; 0x318
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40068c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400690:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC_1MS, TC_1MS_CHN, TC_IER_CPCS);
  400692:	2210      	movs	r2, #16
  400694:	2101      	movs	r1, #1
  400696:	4628      	mov	r0, r5
  400698:	4bae      	ldr	r3, [pc, #696]	; (400954 <main+0x31c>)
  40069a:	4798      	blx	r3
	tc_start(TC_1MS, TC_1MS_CHN);
  40069c:	2101      	movs	r1, #1
  40069e:	4628      	mov	r0, r5
  4006a0:	4bad      	ldr	r3, [pc, #692]	; (400958 <main+0x320>)
  4006a2:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4006a4:	4bad      	ldr	r3, [pc, #692]	; (40095c <main+0x324>)
  4006a6:	4aae      	ldr	r2, [pc, #696]	; (400960 <main+0x328>)
  4006a8:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4006aa:	22e0      	movs	r2, #224	; 0xe0
  4006ac:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4006b0:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4006b2:	2507      	movs	r5, #7
  4006b4:	601d      	str	r5, [r3, #0]
  4006b6:	4628      	mov	r0, r5
  4006b8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4006ba:	4faa      	ldr	r7, [pc, #680]	; (400964 <main+0x32c>)
  4006bc:	4baa      	ldr	r3, [pc, #680]	; (400968 <main+0x330>)
  4006be:	601f      	str	r7, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4006c0:	4aaa      	ldr	r2, [pc, #680]	; (40096c <main+0x334>)
  4006c2:	4bab      	ldr	r3, [pc, #684]	; (400970 <main+0x338>)
  4006c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4006c6:	4aab      	ldr	r2, [pc, #684]	; (400974 <main+0x33c>)
  4006c8:	4bab      	ldr	r3, [pc, #684]	; (400978 <main+0x340>)
  4006ca:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4006cc:	4bab      	ldr	r3, [pc, #684]	; (40097c <main+0x344>)
  4006ce:	9302      	str	r3, [sp, #8]
	uart_settings.ul_baudrate = opt->baudrate;
  4006d0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  4006d4:	9303      	str	r3, [sp, #12]
	uart_settings.ul_mode = opt->paritytype;
  4006d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006da:	9304      	str	r3, [sp, #16]
  4006dc:	4628      	mov	r0, r5
  4006de:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  4006e0:	a902      	add	r1, sp, #8
  4006e2:	4638      	mov	r0, r7
  4006e4:	4ba6      	ldr	r3, [pc, #664]	; (400980 <main+0x348>)
  4006e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4006e8:	4ea6      	ldr	r6, [pc, #664]	; (400984 <main+0x34c>)
  4006ea:	6833      	ldr	r3, [r6, #0]
  4006ec:	4621      	mov	r1, r4
  4006ee:	6898      	ldr	r0, [r3, #8]
  4006f0:	4da5      	ldr	r5, [pc, #660]	; (400988 <main+0x350>)
  4006f2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4006f4:	6833      	ldr	r3, [r6, #0]
  4006f6:	4621      	mov	r1, r4
  4006f8:	6858      	ldr	r0, [r3, #4]
  4006fa:	47a8      	blx	r5
        while (1);
    }

	/* Initialize UART debug */
	configure_dbg_console();
	puts(STRING_HEADER);
  4006fc:	48a3      	ldr	r0, [pc, #652]	; (40098c <main+0x354>)
  4006fe:	4ba4      	ldr	r3, [pc, #656]	; (400990 <main+0x358>)
  400700:	4798      	blx	r3

    if (ul_cpuhz % gs_ul_pplc_clock) {
        uc_div++;
    }

    sampleSpiInit();
  400702:	4ba4      	ldr	r3, [pc, #656]	; (400994 <main+0x35c>)
  400704:	4798      	blx	r3
    
    uint8_t incData, incData3 = 0;
  400706:	f88d 4016 	strb.w	r4, [sp, #22]
    uint8_t incData2 = 0x80;
  40070a:	2380      	movs	r3, #128	; 0x80
  40070c:	f88d 3015 	strb.w	r3, [sp, #21]
    
    while (1) {
        char charVal = getchar();
  400710:	4635      	mov	r5, r6
  400712:	4ca1      	ldr	r4, [pc, #644]	; (400998 <main+0x360>)
                    DV_info("SPI communication interface successful!");
                }
                break;   
                
            case 'l':
                initLDC();
  400714:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 4009d0 <main+0x398>
                DV_info("IR Value: %.2f", (3.3*getIrAnalogVal())/4095);
  400718:	f20f 19fc 	addw	r9, pc, #508	; 0x1fc
  40071c:	e9d9 8900 	ldrd	r8, r9, [r9]
  400720:	e007      	b.n	400732 <main+0xfa>
        char charVal = getchar();
  400722:	6842      	ldr	r2, [r0, #4]
  400724:	6813      	ldr	r3, [r2, #0]
  400726:	1c59      	adds	r1, r3, #1
  400728:	6011      	str	r1, [r2, #0]
  40072a:	7818      	ldrb	r0, [r3, #0]
  40072c:	e00b      	b.n	400746 <main+0x10e>
                enableIr();
  40072e:	4b9b      	ldr	r3, [pc, #620]	; (40099c <main+0x364>)
  400730:	4798      	blx	r3
        char charVal = getchar();
  400732:	6828      	ldr	r0, [r5, #0]
  400734:	6842      	ldr	r2, [r0, #4]
  400736:	6853      	ldr	r3, [r2, #4]
  400738:	3b01      	subs	r3, #1
  40073a:	6053      	str	r3, [r2, #4]
  40073c:	2b00      	cmp	r3, #0
  40073e:	daf0      	bge.n	400722 <main+0xea>
  400740:	6841      	ldr	r1, [r0, #4]
  400742:	47a0      	blx	r4
  400744:	b2c0      	uxtb	r0, r0
        switch(charVal) {
  400746:	3830      	subs	r0, #48	; 0x30
  400748:	2849      	cmp	r0, #73	; 0x49
  40074a:	d8f2      	bhi.n	400732 <main+0xfa>
  40074c:	a301      	add	r3, pc, #4	; (adr r3, 400754 <main+0x11c>)
  40074e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
  400752:	bf00      	nop
  400754:	004008a9 	.word	0x004008a9
  400758:	004008b1 	.word	0x004008b1
  40075c:	00400733 	.word	0x00400733
  400760:	00400733 	.word	0x00400733
  400764:	00400733 	.word	0x00400733
  400768:	00400733 	.word	0x00400733
  40076c:	00400733 	.word	0x00400733
  400770:	00400733 	.word	0x00400733
  400774:	004009ed 	.word	0x004009ed
  400778:	00400733 	.word	0x00400733
  40077c:	00400733 	.word	0x00400733
  400780:	00400733 	.word	0x00400733
  400784:	00400733 	.word	0x00400733
  400788:	00400733 	.word	0x00400733
  40078c:	00400733 	.word	0x00400733
  400790:	00400733 	.word	0x00400733
  400794:	00400733 	.word	0x00400733
  400798:	00400733 	.word	0x00400733
  40079c:	00400733 	.word	0x00400733
  4007a0:	00400733 	.word	0x00400733
  4007a4:	00400733 	.word	0x00400733
  4007a8:	00400733 	.word	0x00400733
  4007ac:	00400733 	.word	0x00400733
  4007b0:	00400733 	.word	0x00400733
  4007b4:	00400733 	.word	0x00400733
  4007b8:	00400733 	.word	0x00400733
  4007bc:	00400733 	.word	0x00400733
  4007c0:	00400733 	.word	0x00400733
  4007c4:	00400733 	.word	0x00400733
  4007c8:	00400733 	.word	0x00400733
  4007cc:	00400733 	.word	0x00400733
  4007d0:	00400733 	.word	0x00400733
  4007d4:	00400733 	.word	0x00400733
  4007d8:	00400733 	.word	0x00400733
  4007dc:	00400733 	.word	0x00400733
  4007e0:	00400733 	.word	0x00400733
  4007e4:	00400733 	.word	0x00400733
  4007e8:	00400733 	.word	0x00400733
  4007ec:	00400733 	.word	0x00400733
  4007f0:	00400733 	.word	0x00400733
  4007f4:	00400733 	.word	0x00400733
  4007f8:	00400733 	.word	0x00400733
  4007fc:	00400733 	.word	0x00400733
  400800:	00400733 	.word	0x00400733
  400804:	00400733 	.word	0x00400733
  400808:	00400733 	.word	0x00400733
  40080c:	00400733 	.word	0x00400733
  400810:	00400733 	.word	0x00400733
  400814:	00400733 	.word	0x00400733
  400818:	004008b9 	.word	0x004008b9
  40081c:	00400733 	.word	0x00400733
  400820:	00400733 	.word	0x00400733
  400824:	004008c9 	.word	0x004008c9
  400828:	00400733 	.word	0x00400733
  40082c:	004008d1 	.word	0x004008d1
  400830:	00400733 	.word	0x00400733
  400834:	00400733 	.word	0x00400733
  400838:	004009db 	.word	0x004009db
  40083c:	00400733 	.word	0x00400733
  400840:	00400733 	.word	0x00400733
  400844:	004009ff 	.word	0x004009ff
  400848:	00400733 	.word	0x00400733
  40084c:	00400733 	.word	0x00400733
  400850:	004009e1 	.word	0x004009e1
  400854:	004009e7 	.word	0x004009e7
  400858:	00400907 	.word	0x00400907
  40085c:	004008d9 	.word	0x004008d9
  400860:	004008c1 	.word	0x004008c1
  400864:	004008f5 	.word	0x004008f5
  400868:	004009d5 	.word	0x004009d5
  40086c:	00400733 	.word	0x00400733
  400870:	00400883 	.word	0x00400883
  400874:	0040072f 	.word	0x0040072f
  400878:	0040087d 	.word	0x0040087d
                disableIr();
  40087c:	4b48      	ldr	r3, [pc, #288]	; (4009a0 <main+0x368>)
  40087e:	4798      	blx	r3
                break;
  400880:	e757      	b.n	400732 <main+0xfa>
                DV_info("IR Value: %.2f", (3.3*getIrAnalogVal())/4095);
  400882:	4b48      	ldr	r3, [pc, #288]	; (4009a4 <main+0x36c>)
  400884:	4798      	blx	r3
  400886:	4b48      	ldr	r3, [pc, #288]	; (4009a8 <main+0x370>)
  400888:	4798      	blx	r3
  40088a:	a325      	add	r3, pc, #148	; (adr r3, 400920 <main+0x2e8>)
  40088c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400890:	4e46      	ldr	r6, [pc, #280]	; (4009ac <main+0x374>)
  400892:	47b0      	blx	r6
  400894:	4642      	mov	r2, r8
  400896:	464b      	mov	r3, r9
  400898:	4e45      	ldr	r6, [pc, #276]	; (4009b0 <main+0x378>)
  40089a:	47b0      	blx	r6
  40089c:	4602      	mov	r2, r0
  40089e:	460b      	mov	r3, r1
  4008a0:	4844      	ldr	r0, [pc, #272]	; (4009b4 <main+0x37c>)
  4008a2:	4945      	ldr	r1, [pc, #276]	; (4009b8 <main+0x380>)
  4008a4:	4788      	blx	r1
                break;
  4008a6:	e744      	b.n	400732 <main+0xfa>
                getAnalogVal(0);
  4008a8:	2000      	movs	r0, #0
  4008aa:	4b44      	ldr	r3, [pc, #272]	; (4009bc <main+0x384>)
  4008ac:	4798      	blx	r3
                break;
  4008ae:	e740      	b.n	400732 <main+0xfa>
                getAnalogVal(1);                
  4008b0:	2001      	movs	r0, #1
  4008b2:	4b42      	ldr	r3, [pc, #264]	; (4009bc <main+0x384>)
  4008b4:	4798      	blx	r3
                break;
  4008b6:	e73c      	b.n	400732 <main+0xfa>
                getSpineBoardAdc(0);
  4008b8:	2000      	movs	r0, #0
  4008ba:	4b41      	ldr	r3, [pc, #260]	; (4009c0 <main+0x388>)
  4008bc:	4798      	blx	r3
                break;                    
  4008be:	e738      	b.n	400732 <main+0xfa>
                getSpineBoardAdc(1);
  4008c0:	2001      	movs	r0, #1
  4008c2:	4b3f      	ldr	r3, [pc, #252]	; (4009c0 <main+0x388>)
  4008c4:	4798      	blx	r3
                break;
  4008c6:	e734      	b.n	400732 <main+0xfa>
                getSpineBoardAdc(2);
  4008c8:	2002      	movs	r0, #2
  4008ca:	4b3d      	ldr	r3, [pc, #244]	; (4009c0 <main+0x388>)
  4008cc:	4798      	blx	r3
                break;
  4008ce:	e730      	b.n	400732 <main+0xfa>
                getSpineBoardAdc(3);
  4008d0:	2003      	movs	r0, #3
  4008d2:	4b3b      	ldr	r3, [pc, #236]	; (4009c0 <main+0x388>)
  4008d4:	4798      	blx	r3
                break;   
  4008d6:	e72c      	b.n	400732 <main+0xfa>
                readZBoardMulti(I2C0_COM, 0x6F, 0x00, &incData, 1);
  4008d8:	2001      	movs	r0, #1
  4008da:	9000      	str	r0, [sp, #0]
  4008dc:	f10d 0317 	add.w	r3, sp, #23
  4008e0:	2200      	movs	r2, #0
  4008e2:	216f      	movs	r1, #111	; 0x6f
  4008e4:	4e37      	ldr	r6, [pc, #220]	; (4009c4 <main+0x38c>)
  4008e6:	47b0      	blx	r6
                DV_info("RTC Data: 0x%02X\r\n", incData);
  4008e8:	f89d 1017 	ldrb.w	r1, [sp, #23]
  4008ec:	4836      	ldr	r0, [pc, #216]	; (4009c8 <main+0x390>)
  4008ee:	4b32      	ldr	r3, [pc, #200]	; (4009b8 <main+0x380>)
  4008f0:	4798      	blx	r3
                break;  
  4008f2:	e71e      	b.n	400732 <main+0xfa>
                writeZBoardMulti(I2C0_COM, 0x6F, 0x00, &incData2, 1);
  4008f4:	2001      	movs	r0, #1
  4008f6:	9000      	str	r0, [sp, #0]
  4008f8:	f10d 0315 	add.w	r3, sp, #21
  4008fc:	2200      	movs	r2, #0
  4008fe:	216f      	movs	r1, #111	; 0x6f
  400900:	4e32      	ldr	r6, [pc, #200]	; (4009cc <main+0x394>)
  400902:	47b0      	blx	r6
                break;                
  400904:	e715      	b.n	400732 <main+0xfa>
                writeZBoardMulti(I2C0_COM, 0x6F, 0x00, &incData3, 1);
  400906:	2001      	movs	r0, #1
  400908:	9000      	str	r0, [sp, #0]
  40090a:	f10d 0316 	add.w	r3, sp, #22
  40090e:	2200      	movs	r2, #0
  400910:	216f      	movs	r1, #111	; 0x6f
  400912:	4e2e      	ldr	r6, [pc, #184]	; (4009cc <main+0x394>)
  400914:	47b0      	blx	r6
                break;                
  400916:	e70c      	b.n	400732 <main+0xfa>
  400918:	00000000 	.word	0x00000000
  40091c:	40affe00 	.word	0x40affe00
  400920:	66666666 	.word	0x66666666
  400924:	400a6666 	.word	0x400a6666
  400928:	004018ed 	.word	0x004018ed
  40092c:	e000ed00 	.word	0xe000ed00
  400930:	05fa0300 	.word	0x05fa0300
  400934:	00401b69 	.word	0x00401b69
  400938:	400e0e00 	.word	0x400e0e00
  40093c:	204009ec 	.word	0x204009ec
  400940:	00401a85 	.word	0x00401a85
  400944:	4000c000 	.word	0x4000c000
  400948:	00401ad9 	.word	0x00401ad9
  40094c:	00401afb 	.word	0x00401afb
  400950:	e000e100 	.word	0xe000e100
  400954:	00401b03 	.word	0x00401b03
  400958:	00401af3 	.word	0x00401af3
  40095c:	e000e010 	.word	0xe000e010
  400960:	000493df 	.word	0x000493df
  400964:	400e0800 	.word	0x400e0800
  400968:	20401664 	.word	0x20401664
  40096c:	004004f9 	.word	0x004004f9
  400970:	20401660 	.word	0x20401660
  400974:	0040041d 	.word	0x0040041d
  400978:	204015dc 	.word	0x204015dc
  40097c:	08f0d180 	.word	0x08f0d180
  400980:	00401b13 	.word	0x00401b13
  400984:	20400018 	.word	0x20400018
  400988:	00402e05 	.word	0x00402e05
  40098c:	00407a2c 	.word	0x00407a2c
  400990:	00402dc1 	.word	0x00402dc1
  400994:	00400c61 	.word	0x00400c61
  400998:	00402dd1 	.word	0x00402dd1
  40099c:	00401291 	.word	0x00401291
  4009a0:	004012d5 	.word	0x004012d5
  4009a4:	0040141d 	.word	0x0040141d
  4009a8:	004022dd 	.word	0x004022dd
  4009ac:	004023a9 	.word	0x004023a9
  4009b0:	004025fd 	.word	0x004025fd
  4009b4:	00407af8 	.word	0x00407af8
  4009b8:	00402cfd 	.word	0x00402cfd
  4009bc:	00401461 	.word	0x00401461
  4009c0:	00401519 	.word	0x00401519
  4009c4:	004011d9 	.word	0x004011d9
  4009c8:	00407b10 	.word	0x00407b10
  4009cc:	00401121 	.word	0x00401121
  4009d0:	00401691 	.word	0x00401691
                enableGLed();
  4009d4:	4b0d      	ldr	r3, [pc, #52]	; (400a0c <main+0x3d4>)
  4009d6:	4798      	blx	r3
                break;
  4009d8:	e6ab      	b.n	400732 <main+0xfa>
                disableGLed();
  4009da:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <main+0x3d8>)
  4009dc:	4798      	blx	r3
                break;
  4009de:	e6a8      	b.n	400732 <main+0xfa>
                enableRLed();
  4009e0:	4b0c      	ldr	r3, [pc, #48]	; (400a14 <main+0x3dc>)
  4009e2:	4798      	blx	r3
                break;
  4009e4:	e6a5      	b.n	400732 <main+0xfa>
                disableRLed();
  4009e6:	4b0c      	ldr	r3, [pc, #48]	; (400a18 <main+0x3e0>)
  4009e8:	4798      	blx	r3
                break;                                                    
  4009ea:	e6a2      	b.n	400732 <main+0xfa>
                if (testZBoardIntf() != SPI_SUCCESS) {
  4009ec:	4b0b      	ldr	r3, [pc, #44]	; (400a1c <main+0x3e4>)
  4009ee:	4798      	blx	r3
  4009f0:	2801      	cmp	r0, #1
                    DV_info("SPI communication interface failed!");
  4009f2:	bf14      	ite	ne
  4009f4:	480a      	ldrne	r0, [pc, #40]	; (400a20 <main+0x3e8>)
                    DV_info("SPI communication interface successful!");
  4009f6:	480b      	ldreq	r0, [pc, #44]	; (400a24 <main+0x3ec>)
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <main+0x3f0>)
  4009fa:	4798      	blx	r3
  4009fc:	e699      	b.n	400732 <main+0xfa>
                initLDC();
  4009fe:	47d0      	blx	sl
                DV_info("Finished executing LDC1614 initialization routine");
  400a00:	480a      	ldr	r0, [pc, #40]	; (400a2c <main+0x3f4>)
  400a02:	4e09      	ldr	r6, [pc, #36]	; (400a28 <main+0x3f0>)
  400a04:	47b0      	blx	r6
                
                uint32_t testArray[4];
                //getCoilValues(testArray);
                DV_info("Finished getting coil values");       
  400a06:	480a      	ldr	r0, [pc, #40]	; (400a30 <main+0x3f8>)
  400a08:	47b0      	blx	r6
                //for (uint8_t i = 0; i < 4; i++) {
                    //DV_info("coil[%i]: %lu\r\n", i, testArray[i]);
                //}
                break;
  400a0a:	e692      	b.n	400732 <main+0xfa>
  400a0c:	00401315 	.word	0x00401315
  400a10:	00401355 	.word	0x00401355
  400a14:	00401399 	.word	0x00401399
  400a18:	004013d9 	.word	0x004013d9
  400a1c:	00401601 	.word	0x00401601
  400a20:	00407b2c 	.word	0x00407b2c
  400a24:	00407b58 	.word	0x00407b58
  400a28:	00402dc1 	.word	0x00402dc1
  400a2c:	00407b88 	.word	0x00407b88
  400a30:	00407bc4 	.word	0x00407bc4

00400a34 <readFromRingBuffer>:
    ringBuffer->m_tailIndex = 0;
    ringBuffer->m_bytesRemaining = RING_BUFFER_SIZE;
    memset(ringBuffer->buffer, 0, sizeof(ringBuffer->buffer));
}

static int readFromRingBuffer(RingBuffer* ringBuffer, char* buffer, uint16_t readSize) {
  400a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int numFormerBytes = 0;
    int numLatterBytes = 0;

    int bytesLeftToRead = RING_BUFFER_SIZE - ringBuffer->m_bytesRemaining;
  400a38:	8884      	ldrh	r4, [r0, #4]

    if (bytesLeftToRead == 0) {
  400a3a:	f5d4 6480 	rsbs	r4, r4, #1024	; 0x400
  400a3e:	d028      	beq.n	400a92 <readFromRingBuffer+0x5e>
  400a40:	4605      	mov	r5, r0
  400a42:	460f      	mov	r7, r1
        DV_info("Nothing to read...");
        return 0;
    }

    // adjust new read size depending on how much new data is available to be handled
    readSize = readSize > bytesLeftToRead ? bytesLeftToRead : readSize;
  400a44:	4294      	cmp	r4, r2
  400a46:	bfa8      	it	ge
  400a48:	4614      	movge	r4, r2
  400a4a:	b2a6      	uxth	r6, r4

    if (readSize > 0) {
  400a4c:	b1d6      	cbz	r6, 400a84 <readFromRingBuffer+0x50>
        // wrapping will occur
        if (ringBuffer->m_tailIndex + readSize > sizeof(ringBuffer->buffer)) {
  400a4e:	8843      	ldrh	r3, [r0, #2]
  400a50:	199a      	adds	r2, r3, r6
  400a52:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  400a56:	d920      	bls.n	400a9a <readFromRingBuffer+0x66>
            numFormerBytes = sizeof(ringBuffer->buffer) - ringBuffer->m_tailIndex;
  400a58:	f5c3 6a80 	rsb	sl, r3, #1024	; 0x400
            numLatterBytes = readSize - numFormerBytes;        

            // move ring buffer data to buffer
            memcpy(buffer, ringBuffer->buffer + ringBuffer->m_tailIndex, numFormerBytes);
  400a5c:	f100 0906 	add.w	r9, r0, #6
  400a60:	4652      	mov	r2, sl
  400a62:	eb09 0103 	add.w	r1, r9, r3
  400a66:	4638      	mov	r0, r7
  400a68:	f8df b044 	ldr.w	fp, [pc, #68]	; 400ab0 <readFromRingBuffer+0x7c>
  400a6c:	47d8      	blx	fp
            memcpy(buffer + numFormerBytes, ringBuffer->buffer, numLatterBytes);
  400a6e:	eba6 020a 	sub.w	r2, r6, sl
  400a72:	4649      	mov	r1, r9
  400a74:	eb07 000a 	add.w	r0, r7, sl
  400a78:	47d8      	blx	fp
        else {
            memcpy(buffer, ringBuffer->buffer + ringBuffer->m_tailIndex, readSize);
        }

        // update tail index
        ringBuffer->m_tailIndex = ((ringBuffer->m_tailIndex + readSize) % sizeof(ringBuffer->buffer));
  400a7a:	886b      	ldrh	r3, [r5, #2]
  400a7c:	4433      	add	r3, r6
  400a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  400a82:	806b      	strh	r3, [r5, #2]
    }

    // update ring buffer size
    ringBuffer->m_bytesRemaining += readSize;
  400a84:	88ab      	ldrh	r3, [r5, #4]
  400a86:	441e      	add	r6, r3
  400a88:	80ae      	strh	r6, [r5, #4]
  400a8a:	b2a4      	uxth	r4, r4
	
	return readSize;
}
  400a8c:	4620      	mov	r0, r4
  400a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        DV_info("Nothing to read...");
  400a92:	4805      	ldr	r0, [pc, #20]	; (400aa8 <readFromRingBuffer+0x74>)
  400a94:	4b05      	ldr	r3, [pc, #20]	; (400aac <readFromRingBuffer+0x78>)
  400a96:	4798      	blx	r3
        return 0;
  400a98:	e7f8      	b.n	400a8c <readFromRingBuffer+0x58>
            memcpy(buffer, ringBuffer->buffer + ringBuffer->m_tailIndex, readSize);
  400a9a:	1d81      	adds	r1, r0, #6
  400a9c:	4632      	mov	r2, r6
  400a9e:	4419      	add	r1, r3
  400aa0:	4638      	mov	r0, r7
  400aa2:	4b03      	ldr	r3, [pc, #12]	; (400ab0 <readFromRingBuffer+0x7c>)
  400aa4:	4798      	blx	r3
  400aa6:	e7e8      	b.n	400a7a <readFromRingBuffer+0x46>
  400aa8:	00407c20 	.word	0x00407c20
  400aac:	00402dc1 	.word	0x00402dc1
  400ab0:	00402b2d 	.word	0x00402b2d

00400ab4 <writeToRingBuffer>:

static int writeToRingBuffer(RingBuffer* ringBuffer, char* buffer, uint16_t writeSize) {
  400ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int numFormerBytes = 0;
    int numLatterBytes = 0;
    
    if (ringBuffer->m_bytesRemaining == 0) {
  400ab8:	8884      	ldrh	r4, [r0, #4]
  400aba:	b31c      	cbz	r4, 400b04 <writeToRingBuffer+0x50>
  400abc:	4605      	mov	r5, r0
  400abe:	460e      	mov	r6, r1
        DV_error("Ring buffer full, ignoring writes!");
        return 0;
    }

    // adjust write size depending on space remaining in ring buffer
    writeSize = ringBuffer->m_bytesRemaining > writeSize ? writeSize : ringBuffer->m_bytesRemaining;
  400ac0:	4294      	cmp	r4, r2
  400ac2:	bf28      	it	cs
  400ac4:	4614      	movcs	r4, r2
    
    if (writeSize > 0) {
  400ac6:	b1bc      	cbz	r4, 400af8 <writeToRingBuffer+0x44>
        // wrapping will occur
        if (ringBuffer->m_headIndex + writeSize > sizeof(ringBuffer->buffer)) {
  400ac8:	8803      	ldrh	r3, [r0, #0]
  400aca:	191a      	adds	r2, r3, r4
  400acc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  400ad0:	d91e      	bls.n	400b10 <writeToRingBuffer+0x5c>
            numFormerBytes = sizeof(ringBuffer->buffer) - ringBuffer->m_headIndex;
  400ad2:	f5c3 6880 	rsb	r8, r3, #1024	; 0x400
            numLatterBytes = writeSize - numFormerBytes;

            // move buffer data to ring buffer
            memcpy(ringBuffer->buffer + ringBuffer->m_headIndex, buffer, numFormerBytes);
  400ad6:	1d87      	adds	r7, r0, #6
  400ad8:	4642      	mov	r2, r8
  400ada:	18f8      	adds	r0, r7, r3
  400adc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 400b24 <writeToRingBuffer+0x70>
  400ae0:	47c8      	blx	r9
            memcpy(ringBuffer->buffer, buffer + numFormerBytes, numLatterBytes);
  400ae2:	eba4 0208 	sub.w	r2, r4, r8
  400ae6:	eb06 0108 	add.w	r1, r6, r8
  400aea:	4638      	mov	r0, r7
  400aec:	47c8      	blx	r9
            // move buffer data to ring buffer
            memcpy(ringBuffer->buffer + ringBuffer->m_headIndex, buffer, writeSize);
        }

        // update head index
        ringBuffer->m_headIndex = (ringBuffer->m_headIndex + writeSize) % sizeof(ringBuffer->buffer);
  400aee:	882b      	ldrh	r3, [r5, #0]
  400af0:	4423      	add	r3, r4
  400af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  400af6:	802b      	strh	r3, [r5, #0]
    }

    // update ring buffer size
    ringBuffer->m_bytesRemaining -= writeSize;
  400af8:	88ab      	ldrh	r3, [r5, #4]
  400afa:	1b1b      	subs	r3, r3, r4
  400afc:	80ab      	strh	r3, [r5, #4]

	return writeSize;
  400afe:	4620      	mov	r0, r4
}
  400b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        DV_error("Ring buffer full, ignoring writes!");
  400b04:	4805      	ldr	r0, [pc, #20]	; (400b1c <writeToRingBuffer+0x68>)
  400b06:	4b06      	ldr	r3, [pc, #24]	; (400b20 <writeToRingBuffer+0x6c>)
  400b08:	4798      	blx	r3
        return 0;
  400b0a:	2000      	movs	r0, #0
  400b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            memcpy(ringBuffer->buffer + ringBuffer->m_headIndex, buffer, writeSize);
  400b10:	3006      	adds	r0, #6
  400b12:	4622      	mov	r2, r4
  400b14:	4418      	add	r0, r3
  400b16:	4b03      	ldr	r3, [pc, #12]	; (400b24 <writeToRingBuffer+0x70>)
  400b18:	4798      	blx	r3
  400b1a:	e7e8      	b.n	400aee <writeToRingBuffer+0x3a>
  400b1c:	00407c3c 	.word	0x00407c3c
  400b20:	00402dc1 	.word	0x00402dc1
  400b24:	00402b2d 	.word	0x00402b2d

00400b28 <USART0_Handler>:
 * \param   None
 *
 * \retval  None 
 */
 void USART0_Handler(void)
 {
  400b28:	b510      	push	{r4, lr}
     static uint16_t numTotalTxBytes;
     static volatile uint16_t spiTxCounter = 0;
     static volatile bool writeCompleted = false;
     
     /* Get interrupt source */
     uint32_t dvSpiInterruptStatus = usart_get_status(USART0);
  400b2a:	4839      	ldr	r0, [pc, #228]	; (400c10 <USART0_Handler+0xe8>)
  400b2c:	4b39      	ldr	r3, [pc, #228]	; (400c14 <USART0_Handler+0xec>)
  400b2e:	4798      	blx	r3
     
     /* When nCS is asserted, do this */
     if (dvSpiInterruptStatus & US_IER_CTSIC) {
  400b30:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400b34:	d033      	beq.n	400b9e <USART0_Handler+0x76>
         
         /* Falling edge of nCS */
         if (++edgeCnt == 1) {
  400b36:	4a38      	ldr	r2, [pc, #224]	; (400c18 <USART0_Handler+0xf0>)
  400b38:	7813      	ldrb	r3, [r2, #0]
  400b3a:	3301      	adds	r3, #1
  400b3c:	b2db      	uxtb	r3, r3
  400b3e:	7013      	strb	r3, [r2, #0]
  400b40:	2b01      	cmp	r3, #1
  400b42:	d002      	beq.n	400b4a <USART0_Handler+0x22>
             writeCompleted = false;
             spiTxCounter = 0;
         }

         /* Rising edge of nCS */
         else if (edgeCnt == 2) {
  400b44:	2b02      	cmp	r3, #2
  400b46:	d006      	beq.n	400b56 <USART0_Handler+0x2e>
  400b48:	bd10      	pop	{r4, pc}
             writeCompleted = false;
  400b4a:	2300      	movs	r3, #0
  400b4c:	4a33      	ldr	r2, [pc, #204]	; (400c1c <USART0_Handler+0xf4>)
  400b4e:	7013      	strb	r3, [r2, #0]
             spiTxCounter = 0;
  400b50:	4a33      	ldr	r2, [pc, #204]	; (400c20 <USART0_Handler+0xf8>)
  400b52:	8013      	strh	r3, [r2, #0]
  400b54:	e027      	b.n	400ba6 <USART0_Handler+0x7e>
             /* The transmit buffer is loaded from txRingBuffer when CS is idle, otherwise there are timing issues
              *
              * Generate packet = header + data from ring buffer + crc (of header + data) 
              */
                
             numTxBytesData = readFromRingBuffer(&txRingBuffer, txData + 3, MAX_SPI_PACKET_XFER_SIZE);
  400b56:	22ff      	movs	r2, #255	; 0xff
  400b58:	4932      	ldr	r1, [pc, #200]	; (400c24 <USART0_Handler+0xfc>)
  400b5a:	4833      	ldr	r0, [pc, #204]	; (400c28 <USART0_Handler+0x100>)
  400b5c:	4b33      	ldr	r3, [pc, #204]	; (400c2c <USART0_Handler+0x104>)
  400b5e:	4798      	blx	r3
  400b60:	b2c3      	uxtb	r3, r0
  400b62:	4a33      	ldr	r2, [pc, #204]	; (400c30 <USART0_Handler+0x108>)
  400b64:	7013      	strb	r3, [r2, #0]

             if (numTxBytesData > 0) {
  400b66:	b943      	cbnz	r3, 400b7a <USART0_Handler+0x52>
             }

             /* Queue write hold register so that the PoEM receives the correct first byte on the first read 
              * Read and writes are done simultaneously in a SPI transfer
              */
             usart_write(USART0, txData[0]);
  400b68:	4b32      	ldr	r3, [pc, #200]	; (400c34 <USART0_Handler+0x10c>)
  400b6a:	7819      	ldrb	r1, [r3, #0]
  400b6c:	4828      	ldr	r0, [pc, #160]	; (400c10 <USART0_Handler+0xe8>)
  400b6e:	4b32      	ldr	r3, [pc, #200]	; (400c38 <USART0_Handler+0x110>)
  400b70:	4798      	blx	r3

             /* Reset falling/rising flag */
             edgeCnt = 0;
  400b72:	2200      	movs	r2, #0
  400b74:	4b28      	ldr	r3, [pc, #160]	; (400c18 <USART0_Handler+0xf0>)
  400b76:	701a      	strb	r2, [r3, #0]
  400b78:	bd10      	pop	{r4, pc}
                 memset(txData, 0x00, 2);
  400b7a:	4c2e      	ldr	r4, [pc, #184]	; (400c34 <USART0_Handler+0x10c>)
  400b7c:	2200      	movs	r2, #0
  400b7e:	8022      	strh	r2, [r4, #0]
                 memcpy(txData + 2, &numTxBytesData, 1);
  400b80:	70a3      	strb	r3, [r4, #2]
                 const uint16_t crc16 = calcTelemDataCrc(txData, 3 + numTxBytesData);
  400b82:	4619      	mov	r1, r3
  400b84:	3103      	adds	r1, #3
  400b86:	4620      	mov	r0, r4
  400b88:	4b2c      	ldr	r3, [pc, #176]	; (400c3c <USART0_Handler+0x114>)
  400b8a:	4798      	blx	r3
                 memcpy(txData + 3 + numTxBytesData, &crc16, sizeof(crc16));
  400b8c:	4b28      	ldr	r3, [pc, #160]	; (400c30 <USART0_Handler+0x108>)
  400b8e:	781b      	ldrb	r3, [r3, #0]
  400b90:	441c      	add	r4, r3
  400b92:	f8a4 0003 	strh.w	r0, [r4, #3]
                 numTotalTxBytes = 3 + numTxBytesData + sizeof(crc16);
  400b96:	3305      	adds	r3, #5
  400b98:	4a29      	ldr	r2, [pc, #164]	; (400c40 <USART0_Handler+0x118>)
  400b9a:	8013      	strh	r3, [r2, #0]
  400b9c:	e7e4      	b.n	400b68 <USART0_Handler+0x40>
         }
     }
     
     /* Falling edge of nCS */
     if (edgeCnt == 1) {
  400b9e:	4b1e      	ldr	r3, [pc, #120]	; (400c18 <USART0_Handler+0xf0>)
  400ba0:	781b      	ldrb	r3, [r3, #0]
  400ba2:	2b01      	cmp	r3, #1
  400ba4:	d1d0      	bne.n	400b48 <USART0_Handler+0x20>
         if (dvSpiInterruptStatus & US_IER_RXRDY) {
  400ba6:	f010 0f01 	tst.w	r0, #1
  400baa:	d0cd      	beq.n	400b48 <USART0_Handler+0x20>
             
             /* Store incoming data into rxRingBuffer */
             if(usart_read(USART0, &rxData32) == 0) {
  400bac:	4925      	ldr	r1, [pc, #148]	; (400c44 <USART0_Handler+0x11c>)
  400bae:	4818      	ldr	r0, [pc, #96]	; (400c10 <USART0_Handler+0xe8>)
  400bb0:	4b25      	ldr	r3, [pc, #148]	; (400c48 <USART0_Handler+0x120>)
  400bb2:	4798      	blx	r3
  400bb4:	b1a0      	cbz	r0, 400be0 <USART0_Handler+0xb8>
                 rxData8 = rxData32 & 0x000000FF;
                 writeToRingBuffer(&rxRingBuffer, (char *)&rxData8, 1);
             }

             /* Queue up next byte to SPI interface */
             if ((numTxBytesData > 0) && (!writeCompleted)) {
  400bb6:	4b1e      	ldr	r3, [pc, #120]	; (400c30 <USART0_Handler+0x108>)
  400bb8:	781b      	ldrb	r3, [r3, #0]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d0c4      	beq.n	400b48 <USART0_Handler+0x20>
  400bbe:	4b17      	ldr	r3, [pc, #92]	; (400c1c <USART0_Handler+0xf4>)
  400bc0:	781b      	ldrb	r3, [r3, #0]
  400bc2:	2b00      	cmp	r3, #0
  400bc4:	d1c0      	bne.n	400b48 <USART0_Handler+0x20>

                 // done transfer packet of data
                 if (++spiTxCounter > numTotalTxBytes) {
  400bc6:	4a16      	ldr	r2, [pc, #88]	; (400c20 <USART0_Handler+0xf8>)
  400bc8:	8813      	ldrh	r3, [r2, #0]
  400bca:	3301      	adds	r3, #1
  400bcc:	b29b      	uxth	r3, r3
  400bce:	8013      	strh	r3, [r2, #0]
  400bd0:	4a1b      	ldr	r2, [pc, #108]	; (400c40 <USART0_Handler+0x118>)
  400bd2:	8812      	ldrh	r2, [r2, #0]
  400bd4:	429a      	cmp	r2, r3
  400bd6:	d20c      	bcs.n	400bf2 <USART0_Handler+0xca>
                     writeCompleted = true;
  400bd8:	2201      	movs	r2, #1
  400bda:	4b10      	ldr	r3, [pc, #64]	; (400c1c <USART0_Handler+0xf4>)
  400bdc:	701a      	strb	r2, [r3, #0]
  400bde:	bd10      	pop	{r4, pc}
                 rxData8 = rxData32 & 0x000000FF;
  400be0:	491a      	ldr	r1, [pc, #104]	; (400c4c <USART0_Handler+0x124>)
  400be2:	4b18      	ldr	r3, [pc, #96]	; (400c44 <USART0_Handler+0x11c>)
  400be4:	681b      	ldr	r3, [r3, #0]
  400be6:	700b      	strb	r3, [r1, #0]
                 writeToRingBuffer(&rxRingBuffer, (char *)&rxData8, 1);
  400be8:	2201      	movs	r2, #1
  400bea:	4819      	ldr	r0, [pc, #100]	; (400c50 <USART0_Handler+0x128>)
  400bec:	4b19      	ldr	r3, [pc, #100]	; (400c54 <USART0_Handler+0x12c>)
  400bee:	4798      	blx	r3
  400bf0:	e7e1      	b.n	400bb6 <USART0_Handler+0x8e>
                 }
                 else {
                     // write to SPI interface
                     if (usart_write(USART0, txData[spiTxCounter]) != 0) {
  400bf2:	4b0b      	ldr	r3, [pc, #44]	; (400c20 <USART0_Handler+0xf8>)
  400bf4:	881b      	ldrh	r3, [r3, #0]
  400bf6:	b29b      	uxth	r3, r3
  400bf8:	4a0e      	ldr	r2, [pc, #56]	; (400c34 <USART0_Handler+0x10c>)
  400bfa:	5cd1      	ldrb	r1, [r2, r3]
  400bfc:	4804      	ldr	r0, [pc, #16]	; (400c10 <USART0_Handler+0xe8>)
  400bfe:	4b0e      	ldr	r3, [pc, #56]	; (400c38 <USART0_Handler+0x110>)
  400c00:	4798      	blx	r3
  400c02:	2800      	cmp	r0, #0
  400c04:	d0a0      	beq.n	400b48 <USART0_Handler+0x20>
                         DV_error("Problems writing to PoEM board via SPI!");
  400c06:	4814      	ldr	r0, [pc, #80]	; (400c58 <USART0_Handler+0x130>)
  400c08:	4b14      	ldr	r3, [pc, #80]	; (400c5c <USART0_Handler+0x134>)
  400c0a:	4798      	blx	r3
                     }
                 }
             }
         }
     }
 }
  400c0c:	e79c      	b.n	400b48 <USART0_Handler+0x20>
  400c0e:	bf00      	nop
  400c10:	40024000 	.word	0x40024000
  400c14:	00401869 	.word	0x00401869
  400c18:	204009f4 	.word	0x204009f4
  400c1c:	20401316 	.word	0x20401316
  400c20:	20400e0a 	.word	0x20400e0a
  400c24:	20400e0f 	.word	0x20400e0f
  400c28:	20400f10 	.word	0x20400f10
  400c2c:	00400a35 	.word	0x00400a35
  400c30:	204009f8 	.word	0x204009f8
  400c34:	20400e0c 	.word	0x20400e0c
  400c38:	0040186d 	.word	0x0040186d
  400c3c:	00401759 	.word	0x00401759
  400c40:	204009f6 	.word	0x204009f6
  400c44:	204009fc 	.word	0x204009fc
  400c48:	00401883 	.word	0x00401883
  400c4c:	20400a00 	.word	0x20400a00
  400c50:	20400a04 	.word	0x20400a04
  400c54:	00400ab5 	.word	0x00400ab5
  400c58:	00407bec 	.word	0x00407bec
  400c5c:	00402dc1 	.word	0x00402dc1

00400c60 <sampleSpiInit>:
#define SPI0_PCS        3       /* Chip select channel */
#define SPI0_DLYBS      1       /* Delay before SPCK */
#define SPI0_DLYBBCT    0       /* Delay between consecutive transfers */

#pragma message("@TODO: change SPI interface as required, this will need to be done on both sides if it differs from this sample init")
void sampleSpiInit(void) {
  400c60:	b538      	push	{r3, r4, r5, lr}
    /* Enable SPI peripheral. */
    spi_enable_clock(SPI0);
  400c62:	4c1b      	ldr	r4, [pc, #108]	; (400cd0 <sampleSpiInit+0x70>)
  400c64:	4620      	mov	r0, r4
  400c66:	4b1b      	ldr	r3, [pc, #108]	; (400cd4 <sampleSpiInit+0x74>)
  400c68:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400c6a:	2302      	movs	r3, #2
  400c6c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400c6e:	2380      	movs	r3, #128	; 0x80
  400c70:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400c72:	6863      	ldr	r3, [r4, #4]
  400c74:	f043 0301 	orr.w	r3, r3, #1
  400c78:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400c7a:	6863      	ldr	r3, [r4, #4]
  400c7c:	f043 0310 	orr.w	r3, r3, #16
  400c80:	6063      	str	r3, [r4, #4]
    spi_reset(SPI0);

    /* Configure SPI */
    spi_set_master_mode(SPI0);
    spi_disable_mode_fault_detect(SPI0);
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(SPI0_PCS));
  400c82:	2107      	movs	r1, #7
  400c84:	4620      	mov	r0, r4
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <sampleSpiInit+0x78>)
  400c88:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, SPI0_PCS, 0);
  400c8a:	2200      	movs	r2, #0
  400c8c:	2103      	movs	r1, #3
  400c8e:	4620      	mov	r0, r4
  400c90:	4b12      	ldr	r3, [pc, #72]	; (400cdc <sampleSpiInit+0x7c>)
  400c92:	4798      	blx	r3
    spi_set_clock_phase(SPI0, SPI0_PCS, 1);
  400c94:	2201      	movs	r2, #1
  400c96:	2103      	movs	r1, #3
  400c98:	4620      	mov	r0, r4
  400c9a:	4b11      	ldr	r3, [pc, #68]	; (400ce0 <sampleSpiInit+0x80>)
  400c9c:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, SPI0_PCS, SPI_CSR_BITS_8_BIT);
  400c9e:	2200      	movs	r2, #0
  400ca0:	2103      	movs	r1, #3
  400ca2:	4620      	mov	r0, r4
  400ca4:	4b0f      	ldr	r3, [pc, #60]	; (400ce4 <sampleSpiInit+0x84>)
  400ca6:	4798      	blx	r3
    spi_set_baudrate_div(SPI0, SPI0_PCS, 255);
  400ca8:	22ff      	movs	r2, #255	; 0xff
  400caa:	2103      	movs	r1, #3
  400cac:	4620      	mov	r0, r4
  400cae:	4b0e      	ldr	r3, [pc, #56]	; (400ce8 <sampleSpiInit+0x88>)
  400cb0:	4798      	blx	r3
    //spi_set_baudrate_dv(SPI0, SPI0_PCS, 400);
    spi_set_transfer_delay(SPI0, SPI0_PCS, SPI0_DLYBS, SPI0_DLYBBCT);
  400cb2:	2300      	movs	r3, #0
  400cb4:	2201      	movs	r2, #1
  400cb6:	2103      	movs	r1, #3
  400cb8:	4620      	mov	r0, r4
  400cba:	4d0c      	ldr	r5, [pc, #48]	; (400cec <sampleSpiInit+0x8c>)
  400cbc:	47a8      	blx	r5
    spi_configure_cs_behavior(SPI0, SPI0_PCS, SPI_CS_RISE_NO_TX);
  400cbe:	2200      	movs	r2, #0
  400cc0:	2103      	movs	r1, #3
  400cc2:	4620      	mov	r0, r4
  400cc4:	4b0a      	ldr	r3, [pc, #40]	; (400cf0 <sampleSpiInit+0x90>)
  400cc6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400cc8:	2301      	movs	r3, #1
  400cca:	6023      	str	r3, [r4, #0]
  400ccc:	bd38      	pop	{r3, r4, r5, pc}
  400cce:	bf00      	nop
  400cd0:	40008000 	.word	0x40008000
  400cd4:	00400299 	.word	0x00400299
  400cd8:	004002c5 	.word	0x004002c5
  400cdc:	0040033f 	.word	0x0040033f
  400ce0:	0040035d 	.word	0x0040035d
  400ce4:	004003c1 	.word	0x004003c1
  400ce8:	004003d5 	.word	0x004003d5
  400cec:	004003fd 	.word	0x004003fd
  400cf0:	0040037b 	.word	0x0040037b

00400cf4 <writeZBoard>:
 *  /param  data        Pointer to data to send to destination
 *  /param  numBytes    1 or 2 byte transaction
 *  
 *  /retval boolean to determine if transaction was valid
 */
spiState writeZBoard(uint8_t intf, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint8_t numBytes) {
  400cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cf8:	b083      	sub	sp, #12
  400cfa:	9201      	str	r2, [sp, #4]
  400cfc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    static uint8_t header = 0x00;
    static uint8_t read_cs = 0;
    static commPacket packet;
    static uint16_t tempVal = 0;     
    
    if (intf > 3) {
  400d00:	2803      	cmp	r0, #3
  400d02:	f200 8098 	bhi.w	400e36 <writeZBoard+0x142>
  400d06:	468b      	mov	fp, r1
  400d08:	461c      	mov	r4, r3
        DV_error("Incorrect write interface to Z-Board");
        return SPI_FAILED;
    }
    else if ((numBytes > 2) || (numBytes == 0)) {
  400d0a:	1e53      	subs	r3, r2, #1
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	2b01      	cmp	r3, #1
  400d10:	f200 8096 	bhi.w	400e40 <writeZBoard+0x14c>
    else {
        /* Set interface */
        header = intf;
        
        /* Set number of bytes */
        if (numBytes == 1) {
  400d14:	2a01      	cmp	r2, #1
  400d16:	f000 809a 	beq.w	400e4e <writeZBoard+0x15a>
            clearBit(POS_BITS, &header);
        }
        else if (numBytes == 2) {
  400d1a:	2a02      	cmp	r2, #2
  400d1c:	f000 80c5 	beq.w	400eaa <writeZBoard+0x1b6>
        header = intf;
  400d20:	4b6d      	ldr	r3, [pc, #436]	; (400ed8 <writeZBoard+0x1e4>)
  400d22:	7018      	strb	r0, [r3, #0]
    *data &= ~(1 << pos);
  400d24:	4b6c      	ldr	r3, [pc, #432]	; (400ed8 <writeZBoard+0x1e4>)
  400d26:	7819      	ldrb	r1, [r3, #0]
  400d28:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
  400d2c:	7019      	strb	r1, [r3, #0]
    }
           
    //spi_write(SPI0, STROFFRAME, CS_ASSERTED, 0);
    //delay_us(SPI_DBC);
        
    spi_write(SPI0, header, CS_ASSERTED, 0);
  400d2e:	4f6b      	ldr	r7, [pc, #428]	; (400edc <writeZBoard+0x1e8>)
  400d30:	2300      	movs	r3, #0
  400d32:	2201      	movs	r2, #1
  400d34:	4638      	mov	r0, r7
  400d36:	4e6a      	ldr	r6, [pc, #424]	; (400ee0 <writeZBoard+0x1ec>)
  400d38:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400d3a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d3e:	4d69      	ldr	r5, [pc, #420]	; (400ee4 <writeZBoard+0x1f0>)
  400d40:	47a8      	blx	r5
    
    spi_write(SPI0, devAddr, CS_ASSERTED, 0);
  400d42:	2300      	movs	r3, #0
  400d44:	2201      	movs	r2, #1
  400d46:	4659      	mov	r1, fp
  400d48:	4638      	mov	r0, r7
  400d4a:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400d4c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d50:	47a8      	blx	r5
        
    spi_write(SPI0, regAddr, CS_ASSERTED, 0);
  400d52:	2300      	movs	r3, #0
  400d54:	2201      	movs	r2, #1
  400d56:	9901      	ldr	r1, [sp, #4]
  400d58:	4638      	mov	r0, r7
  400d5a:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400d5c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d60:	47a8      	blx	r5
        
        spi_write(SPI0, 0x00, CS_DEASSERTED, 1);
        delay_us(SPI_DBC);        
    }
    else {
        spi_write(SPI0, data[0], CS_ASSERTED, 0);
  400d62:	2300      	movs	r3, #0
  400d64:	2201      	movs	r2, #1
  400d66:	7821      	ldrb	r1, [r4, #0]
  400d68:	4638      	mov	r0, r7
  400d6a:	47b0      	blx	r6
        delay_us(SPI_DBC);
  400d6c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d70:	47a8      	blx	r5
        
        spi_write(SPI0, data[1], CS_DEASSERTED, 1);
  400d72:	2301      	movs	r3, #1
  400d74:	2200      	movs	r2, #0
  400d76:	7861      	ldrb	r1, [r4, #1]
  400d78:	4638      	mov	r0, r7
  400d7a:	47b0      	blx	r6
        delay_us(SPI_DBC);        
  400d7c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d80:	47a8      	blx	r5
    }
        
    /* Check whether command has been received by reading back ACK and data */
    delay_us(PROCESS_TIME);   
  400d82:	f248 0069 	movw	r0, #32873	; 0x8069
  400d86:	4f57      	ldr	r7, [pc, #348]	; (400ee4 <writeZBoard+0x1f0>)
  400d88:	47b8      	blx	r7
    
    spi_write(SPI0, 0xAA, CS_ASSERTED, 0);
  400d8a:	4d54      	ldr	r5, [pc, #336]	; (400edc <writeZBoard+0x1e8>)
  400d8c:	2300      	movs	r3, #0
  400d8e:	2201      	movs	r2, #1
  400d90:	21aa      	movs	r1, #170	; 0xaa
  400d92:	4628      	mov	r0, r5
  400d94:	f8df a148 	ldr.w	sl, [pc, #328]	; 400ee0 <writeZBoard+0x1ec>
  400d98:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400d9a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400d9e:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read header
  400da0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 400efc <writeZBoard+0x208>
  400da4:	4c50      	ldr	r4, [pc, #320]	; (400ee8 <writeZBoard+0x1f4>)
  400da6:	464a      	mov	r2, r9
  400da8:	4621      	mov	r1, r4
  400daa:	4628      	mov	r0, r5
  400dac:	f8df 8150 	ldr.w	r8, [pc, #336]	; 400f00 <writeZBoard+0x20c>
  400db0:	47c0      	blx	r8
    packet.header = (uint8_t)tempVal;
  400db2:	4e4e      	ldr	r6, [pc, #312]	; (400eec <writeZBoard+0x1f8>)
  400db4:	8823      	ldrh	r3, [r4, #0]
  400db6:	7033      	strb	r3, [r6, #0]
    
    spi_write(SPI0, 0xBB, CS_ASSERTED, 0);
  400db8:	2300      	movs	r3, #0
  400dba:	2201      	movs	r2, #1
  400dbc:	21bb      	movs	r1, #187	; 0xbb
  400dbe:	4628      	mov	r0, r5
  400dc0:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400dc2:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400dc6:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read device address
  400dc8:	464a      	mov	r2, r9
  400dca:	4621      	mov	r1, r4
  400dcc:	4628      	mov	r0, r5
  400dce:	47c0      	blx	r8
    packet.devAddr = (uint8_t)tempVal;
  400dd0:	8823      	ldrh	r3, [r4, #0]
  400dd2:	7073      	strb	r3, [r6, #1]

    spi_write(SPI0, 0xCC, CS_ASSERTED, 0);
  400dd4:	2300      	movs	r3, #0
  400dd6:	2201      	movs	r2, #1
  400dd8:	21cc      	movs	r1, #204	; 0xcc
  400dda:	4628      	mov	r0, r5
  400ddc:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400dde:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400de2:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read register address
  400de4:	464a      	mov	r2, r9
  400de6:	4621      	mov	r1, r4
  400de8:	4628      	mov	r0, r5
  400dea:	47c0      	blx	r8
    packet.regAddr = (uint8_t)tempVal;
  400dec:	8823      	ldrh	r3, [r4, #0]
  400dee:	70b3      	strb	r3, [r6, #2]
    
    spi_write(SPI0, 0xDD, CS_ASSERTED, 0);
  400df0:	2300      	movs	r3, #0
  400df2:	2201      	movs	r2, #1
  400df4:	21dd      	movs	r1, #221	; 0xdd
  400df6:	4628      	mov	r0, r5
  400df8:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400dfa:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400dfe:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read MSB
  400e00:	464a      	mov	r2, r9
  400e02:	4621      	mov	r1, r4
  400e04:	4628      	mov	r0, r5
  400e06:	47c0      	blx	r8
    packet.data[0] = (uint8_t)tempVal;
  400e08:	8823      	ldrh	r3, [r4, #0]
  400e0a:	70f3      	strb	r3, [r6, #3]
    
    spi_write(SPI0, 0xEE, CS_DEASSERTED, 1);
  400e0c:	2301      	movs	r3, #1
  400e0e:	2200      	movs	r2, #0
  400e10:	21ee      	movs	r1, #238	; 0xee
  400e12:	4628      	mov	r0, r5
  400e14:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400e16:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400e1a:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read LSB
  400e1c:	464a      	mov	r2, r9
  400e1e:	4621      	mov	r1, r4
  400e20:	4628      	mov	r0, r5
  400e22:	47c0      	blx	r8
    packet.data[1] = (uint8_t)tempVal;   
  400e24:	8823      	ldrh	r3, [r4, #0]
  400e26:	7133      	strb	r3, [r6, #4]
    
    /* Error check return packet */
    if (packet.header != header) {
  400e28:	7832      	ldrb	r2, [r6, #0]
  400e2a:	4b2b      	ldr	r3, [pc, #172]	; (400ed8 <writeZBoard+0x1e4>)
  400e2c:	781b      	ldrb	r3, [r3, #0]
  400e2e:	429a      	cmp	r2, r3
  400e30:	d040      	beq.n	400eb4 <writeZBoard+0x1c0>
        //DV_error("Write header does not match; header: 0x%02X, expected: 0x%02X", packet.header, header);
        return SPI_FAILED;
  400e32:	2000      	movs	r0, #0
  400e34:	e008      	b.n	400e48 <writeZBoard+0x154>
        DV_error("Incorrect write interface to Z-Board");
  400e36:	482e      	ldr	r0, [pc, #184]	; (400ef0 <writeZBoard+0x1fc>)
  400e38:	4b2e      	ldr	r3, [pc, #184]	; (400ef4 <writeZBoard+0x200>)
  400e3a:	4798      	blx	r3
        return SPI_FAILED;
  400e3c:	2000      	movs	r0, #0
  400e3e:	e003      	b.n	400e48 <writeZBoard+0x154>
        DV_error("Incorrect write byte transfer length to Z-Board");
  400e40:	482d      	ldr	r0, [pc, #180]	; (400ef8 <writeZBoard+0x204>)
  400e42:	4b2c      	ldr	r3, [pc, #176]	; (400ef4 <writeZBoard+0x200>)
  400e44:	4798      	blx	r3
        return SPI_FAILED;
  400e46:	2000      	movs	r0, #0
        //DV_error("No ACK from Z-position board received! ack response: 0x%02X, expected: 0x%02X", packet.data[0], ACK);
        return SPI_FAILED;
    }    
            
    return SPI_SUCCESS;
}
  400e48:	b003      	add	sp, #12
  400e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *data &= ~(1 << pos);
  400e4e:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  400e52:	4b21      	ldr	r3, [pc, #132]	; (400ed8 <writeZBoard+0x1e4>)
  400e54:	7019      	strb	r1, [r3, #0]
    spi_write(SPI0, header, CS_ASSERTED, 0);
  400e56:	4f21      	ldr	r7, [pc, #132]	; (400edc <writeZBoard+0x1e8>)
  400e58:	2300      	movs	r3, #0
  400e5a:	4638      	mov	r0, r7
  400e5c:	4e20      	ldr	r6, [pc, #128]	; (400ee0 <writeZBoard+0x1ec>)
  400e5e:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400e60:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400e64:	4d1f      	ldr	r5, [pc, #124]	; (400ee4 <writeZBoard+0x1f0>)
  400e66:	47a8      	blx	r5
    spi_write(SPI0, devAddr, CS_ASSERTED, 0);
  400e68:	2300      	movs	r3, #0
  400e6a:	2201      	movs	r2, #1
  400e6c:	4659      	mov	r1, fp
  400e6e:	4638      	mov	r0, r7
  400e70:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400e72:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400e76:	47a8      	blx	r5
    spi_write(SPI0, regAddr, CS_ASSERTED, 0);
  400e78:	2300      	movs	r3, #0
  400e7a:	2201      	movs	r2, #1
  400e7c:	9901      	ldr	r1, [sp, #4]
  400e7e:	4638      	mov	r0, r7
  400e80:	47b0      	blx	r6
    delay_us(SPI_DBC);
  400e82:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400e86:	47a8      	blx	r5
        spi_write(SPI0, data[0], CS_ASSERTED, 0);
  400e88:	2300      	movs	r3, #0
  400e8a:	2201      	movs	r2, #1
  400e8c:	7821      	ldrb	r1, [r4, #0]
  400e8e:	4638      	mov	r0, r7
  400e90:	47b0      	blx	r6
        delay_us(SPI_DBC);
  400e92:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400e96:	47a8      	blx	r5
        spi_write(SPI0, 0x00, CS_DEASSERTED, 1);
  400e98:	2301      	movs	r3, #1
  400e9a:	2200      	movs	r2, #0
  400e9c:	4611      	mov	r1, r2
  400e9e:	4638      	mov	r0, r7
  400ea0:	47b0      	blx	r6
        delay_us(SPI_DBC);        
  400ea2:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400ea6:	47a8      	blx	r5
  400ea8:	e76b      	b.n	400d82 <writeZBoard+0x8e>
    *data |= (1 << pos);
  400eaa:	f040 0008 	orr.w	r0, r0, #8
  400eae:	4b0a      	ldr	r3, [pc, #40]	; (400ed8 <writeZBoard+0x1e4>)
  400eb0:	7018      	strb	r0, [r3, #0]
  400eb2:	e737      	b.n	400d24 <writeZBoard+0x30>
    else if (packet.devAddr!= devAddr) {
  400eb4:	7873      	ldrb	r3, [r6, #1]
  400eb6:	455b      	cmp	r3, fp
  400eb8:	d001      	beq.n	400ebe <writeZBoard+0x1ca>
        return SPI_FAILED;
  400eba:	2000      	movs	r0, #0
  400ebc:	e7c4      	b.n	400e48 <writeZBoard+0x154>
    else if (packet.regAddr!= regAddr) {
  400ebe:	78b3      	ldrb	r3, [r6, #2]
  400ec0:	9a01      	ldr	r2, [sp, #4]
  400ec2:	4293      	cmp	r3, r2
  400ec4:	d001      	beq.n	400eca <writeZBoard+0x1d6>
        return SPI_FAILED;
  400ec6:	2000      	movs	r0, #0
  400ec8:	e7be      	b.n	400e48 <writeZBoard+0x154>
    else if (packet.data[0]!= ACK) {
  400eca:	78f0      	ldrb	r0, [r6, #3]
        return SPI_FAILED;
  400ecc:	28aa      	cmp	r0, #170	; 0xaa
  400ece:	bf14      	ite	ne
  400ed0:	2000      	movne	r0, #0
  400ed2:	2001      	moveq	r0, #1
  400ed4:	e7b8      	b.n	400e48 <writeZBoard+0x154>
  400ed6:	bf00      	nop
  400ed8:	20401317 	.word	0x20401317
  400edc:	40008000 	.word	0x40008000
  400ee0:	0040030b 	.word	0x0040030b
  400ee4:	20400001 	.word	0x20400001
  400ee8:	2040132c 	.word	0x2040132c
  400eec:	2040131c 	.word	0x2040131c
  400ef0:	0040801c 	.word	0x0040801c
  400ef4:	00402dc1 	.word	0x00402dc1
  400ef8:	0040804c 	.word	0x0040804c
  400efc:	20401329 	.word	0x20401329
  400f00:	004002db 	.word	0x004002db

00400f04 <readZBoard>:
 *  /param  data        Pointer to data to send to destination
 *  /param  numBytes    1 or 2 byte transaction
 *  
 *  /retval Boolean to determine if transaction was valid
 */
spiState readZBoard(uint8_t intf, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint8_t numBytes) {
  400f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f08:	b083      	sub	sp, #12
  400f0a:	9100      	str	r1, [sp, #0]
  400f0c:	9201      	str	r2, [sp, #4]
  400f0e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    static uint8_t header = 0x00;
    static uint8_t read_cs = 0;
    static commPacket packet;
    static uint16_t tempVal = 0;    
    
    if (intf > 3) {
  400f12:	2803      	cmp	r0, #3
  400f14:	f200 8099 	bhi.w	40104a <readZBoard+0x146>
  400f18:	469b      	mov	fp, r3
        DV_error("Incorrect read interface from Z-Board");
        return SPI_FAILED;
    }
    else if ((numBytes > 2) || (numBytes == 0)) {
  400f1a:	1e53      	subs	r3, r2, #1
  400f1c:	b2db      	uxtb	r3, r3
  400f1e:	2b01      	cmp	r3, #1
  400f20:	f200 8098 	bhi.w	401054 <readZBoard+0x150>
    else {
        /* Set interface */
        header = intf;
        
        /* Set number of bytes */
        if (numBytes == 1) {
  400f24:	2a01      	cmp	r2, #1
  400f26:	f000 809c 	beq.w	401062 <readZBoard+0x15e>
            clearBit(POS_BITS, &header);
        }
        else if (numBytes == 2) {
  400f2a:	2a02      	cmp	r2, #2
  400f2c:	f000 80ca 	beq.w	4010c4 <readZBoard+0x1c0>
        header = intf;
  400f30:	4b70      	ldr	r3, [pc, #448]	; (4010f4 <readZBoard+0x1f0>)
  400f32:	7018      	strb	r0, [r3, #0]
    *data |= (1 << pos);
  400f34:	4b6f      	ldr	r3, [pc, #444]	; (4010f4 <readZBoard+0x1f0>)
  400f36:	7819      	ldrb	r1, [r3, #0]
  400f38:	f041 0104 	orr.w	r1, r1, #4
  400f3c:	7019      	strb	r1, [r3, #0]
    
        /* Set read command */
        setBit(POS_RW, &header);        
    }
        
    spi_write(SPI0, header, CS_ASSERTED, 0);
  400f3e:	4e6e      	ldr	r6, [pc, #440]	; (4010f8 <readZBoard+0x1f4>)
  400f40:	2300      	movs	r3, #0
  400f42:	2201      	movs	r2, #1
  400f44:	4630      	mov	r0, r6
  400f46:	4d6d      	ldr	r5, [pc, #436]	; (4010fc <readZBoard+0x1f8>)
  400f48:	47a8      	blx	r5
    delay_us(SPI_DBC);
  400f4a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400f4e:	4c6c      	ldr	r4, [pc, #432]	; (401100 <readZBoard+0x1fc>)
  400f50:	47a0      	blx	r4
    spi_write(SPI0, devAddr, CS_ASSERTED, 0);
  400f52:	2300      	movs	r3, #0
  400f54:	2201      	movs	r2, #1
  400f56:	9900      	ldr	r1, [sp, #0]
  400f58:	4630      	mov	r0, r6
  400f5a:	47a8      	blx	r5
    delay_us(SPI_DBC);
  400f5c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400f60:	47a0      	blx	r4
    spi_write(SPI0, regAddr, CS_ASSERTED, 0);
  400f62:	2300      	movs	r3, #0
  400f64:	2201      	movs	r2, #1
  400f66:	9901      	ldr	r1, [sp, #4]
  400f68:	4630      	mov	r0, r6
  400f6a:	47a8      	blx	r5
    delay_us(SPI_DBC);
  400f6c:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400f70:	47a0      	blx	r4
        delay_us(SPI_DBC);
        spi_write(SPI0, 0x00, CS_DEASSERTED, 1);
        delay_us(SPI_DBC);        
    }
    else {
        spi_write(SPI0, data[0], CS_ASSERTED, 0);
  400f72:	2300      	movs	r3, #0
  400f74:	2201      	movs	r2, #1
  400f76:	f89b 1000 	ldrb.w	r1, [fp]
  400f7a:	4630      	mov	r0, r6
  400f7c:	47a8      	blx	r5
        delay_us(SPI_DBC);
  400f7e:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400f82:	47a0      	blx	r4
        spi_write(SPI0, data[1], CS_DEASSERTED, 1);
  400f84:	2301      	movs	r3, #1
  400f86:	2200      	movs	r2, #0
  400f88:	f89b 1001 	ldrb.w	r1, [fp, #1]
  400f8c:	4630      	mov	r0, r6
  400f8e:	47a8      	blx	r5
        delay_us(SPI_DBC);        
  400f90:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400f94:	47a0      	blx	r4
    }
    
    delay_us(PROCESS_TIME);
  400f96:	f248 0069 	movw	r0, #32873	; 0x8069
  400f9a:	4f59      	ldr	r7, [pc, #356]	; (401100 <readZBoard+0x1fc>)
  400f9c:	47b8      	blx	r7
        
    spi_write(SPI0, 0x00, CS_ASSERTED, 0);
  400f9e:	4d56      	ldr	r5, [pc, #344]	; (4010f8 <readZBoard+0x1f4>)
  400fa0:	2300      	movs	r3, #0
  400fa2:	2201      	movs	r2, #1
  400fa4:	4619      	mov	r1, r3
  400fa6:	4628      	mov	r0, r5
  400fa8:	f8df a150 	ldr.w	sl, [pc, #336]	; 4010fc <readZBoard+0x1f8>
  400fac:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400fae:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400fb2:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read header
  400fb4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 401118 <readZBoard+0x214>
  400fb8:	4c52      	ldr	r4, [pc, #328]	; (401104 <readZBoard+0x200>)
  400fba:	464a      	mov	r2, r9
  400fbc:	4621      	mov	r1, r4
  400fbe:	4628      	mov	r0, r5
  400fc0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 40111c <readZBoard+0x218>
  400fc4:	47c0      	blx	r8
    packet.header = (uint8_t)tempVal;       
  400fc6:	4e50      	ldr	r6, [pc, #320]	; (401108 <readZBoard+0x204>)
  400fc8:	8823      	ldrh	r3, [r4, #0]
  400fca:	7033      	strb	r3, [r6, #0]
    
    spi_write(SPI0, 0x00, CS_ASSERTED, 0);
  400fcc:	2300      	movs	r3, #0
  400fce:	2201      	movs	r2, #1
  400fd0:	4619      	mov	r1, r3
  400fd2:	4628      	mov	r0, r5
  400fd4:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400fd6:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400fda:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read device address
  400fdc:	464a      	mov	r2, r9
  400fde:	4621      	mov	r1, r4
  400fe0:	4628      	mov	r0, r5
  400fe2:	47c0      	blx	r8
    packet.devAddr = (uint8_t)tempVal;      
  400fe4:	8823      	ldrh	r3, [r4, #0]
  400fe6:	7073      	strb	r3, [r6, #1]

    spi_write(SPI0, 0x00, CS_ASSERTED, 0);
  400fe8:	2300      	movs	r3, #0
  400fea:	2201      	movs	r2, #1
  400fec:	4619      	mov	r1, r3
  400fee:	4628      	mov	r0, r5
  400ff0:	47d0      	blx	sl
    delay_us(SPI_DBC);
  400ff2:	f240 50ee 	movw	r0, #1518	; 0x5ee
  400ff6:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read register address
  400ff8:	464a      	mov	r2, r9
  400ffa:	4621      	mov	r1, r4
  400ffc:	4628      	mov	r0, r5
  400ffe:	47c0      	blx	r8
    packet.regAddr = (uint8_t)tempVal;
  401000:	8823      	ldrh	r3, [r4, #0]
  401002:	70b3      	strb	r3, [r6, #2]
    
    spi_write(SPI0, 0x00, CS_ASSERTED, 0);
  401004:	2300      	movs	r3, #0
  401006:	2201      	movs	r2, #1
  401008:	4619      	mov	r1, r3
  40100a:	4628      	mov	r0, r5
  40100c:	47d0      	blx	sl
    delay_us(SPI_DBC);
  40100e:	f240 50ee 	movw	r0, #1518	; 0x5ee
  401012:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read MSB
  401014:	464a      	mov	r2, r9
  401016:	4621      	mov	r1, r4
  401018:	4628      	mov	r0, r5
  40101a:	47c0      	blx	r8
    packet.data[0] = (uint8_t)tempVal;
  40101c:	8823      	ldrh	r3, [r4, #0]
  40101e:	70f3      	strb	r3, [r6, #3]
    
    spi_write(SPI0, 0x00, CS_DEASSERTED, 1);
  401020:	2301      	movs	r3, #1
  401022:	2200      	movs	r2, #0
  401024:	4611      	mov	r1, r2
  401026:	4628      	mov	r0, r5
  401028:	47d0      	blx	sl
    delay_us(SPI_DBC);
  40102a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  40102e:	47b8      	blx	r7
    spi_read(SPI0, &tempVal, &read_cs);     // read LSB
  401030:	464a      	mov	r2, r9
  401032:	4621      	mov	r1, r4
  401034:	4628      	mov	r0, r5
  401036:	47c0      	blx	r8
    packet.data[1] = (uint8_t)tempVal;
  401038:	7823      	ldrb	r3, [r4, #0]
  40103a:	7133      	strb	r3, [r6, #4]
   
    /* Error check return packet */
    if (packet.header != header) {
  40103c:	7831      	ldrb	r1, [r6, #0]
  40103e:	4a2d      	ldr	r2, [pc, #180]	; (4010f4 <readZBoard+0x1f0>)
  401040:	7812      	ldrb	r2, [r2, #0]
  401042:	4291      	cmp	r1, r2
  401044:	d043      	beq.n	4010ce <readZBoard+0x1ca>
        //DV_error("Read header does not match; header: 0x%02X, expected: 0x%02X", packet.header, header);
        return SPI_FAILED;
  401046:	2000      	movs	r0, #0
  401048:	e008      	b.n	40105c <readZBoard+0x158>
        DV_error("Incorrect read interface from Z-Board");
  40104a:	4830      	ldr	r0, [pc, #192]	; (40110c <readZBoard+0x208>)
  40104c:	4b30      	ldr	r3, [pc, #192]	; (401110 <readZBoard+0x20c>)
  40104e:	4798      	blx	r3
        return SPI_FAILED;
  401050:	2000      	movs	r0, #0
  401052:	e003      	b.n	40105c <readZBoard+0x158>
        DV_error("Incorrect read byte transfer length to Z-Board");
  401054:	482f      	ldr	r0, [pc, #188]	; (401114 <readZBoard+0x210>)
  401056:	4b2e      	ldr	r3, [pc, #184]	; (401110 <readZBoard+0x20c>)
  401058:	4798      	blx	r3
        return SPI_FAILED;
  40105a:	2000      	movs	r0, #0
    /* Return values from read */
    data[0] = packet.data[0];
    data[1] = packet.data[1];
    
    return SPI_SUCCESS;
}
  40105c:	b003      	add	sp, #12
  40105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *data &= ~(1 << pos);
  401062:	f020 0008 	bic.w	r0, r0, #8
    *data |= (1 << pos);
  401066:	f040 0104 	orr.w	r1, r0, #4
  40106a:	4b22      	ldr	r3, [pc, #136]	; (4010f4 <readZBoard+0x1f0>)
  40106c:	7019      	strb	r1, [r3, #0]
    spi_write(SPI0, header, CS_ASSERTED, 0);
  40106e:	4e22      	ldr	r6, [pc, #136]	; (4010f8 <readZBoard+0x1f4>)
  401070:	2300      	movs	r3, #0
  401072:	4630      	mov	r0, r6
  401074:	4d21      	ldr	r5, [pc, #132]	; (4010fc <readZBoard+0x1f8>)
  401076:	47a8      	blx	r5
    delay_us(SPI_DBC);
  401078:	f240 50ee 	movw	r0, #1518	; 0x5ee
  40107c:	4c20      	ldr	r4, [pc, #128]	; (401100 <readZBoard+0x1fc>)
  40107e:	47a0      	blx	r4
    spi_write(SPI0, devAddr, CS_ASSERTED, 0);
  401080:	2300      	movs	r3, #0
  401082:	2201      	movs	r2, #1
  401084:	9900      	ldr	r1, [sp, #0]
  401086:	4630      	mov	r0, r6
  401088:	47a8      	blx	r5
    delay_us(SPI_DBC);
  40108a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  40108e:	47a0      	blx	r4
    spi_write(SPI0, regAddr, CS_ASSERTED, 0);
  401090:	2300      	movs	r3, #0
  401092:	2201      	movs	r2, #1
  401094:	9901      	ldr	r1, [sp, #4]
  401096:	4630      	mov	r0, r6
  401098:	47a8      	blx	r5
    delay_us(SPI_DBC);
  40109a:	f240 50ee 	movw	r0, #1518	; 0x5ee
  40109e:	47a0      	blx	r4
        spi_write(SPI0, data[0], CS_ASSERTED, 0);
  4010a0:	2300      	movs	r3, #0
  4010a2:	2201      	movs	r2, #1
  4010a4:	f89b 1000 	ldrb.w	r1, [fp]
  4010a8:	4630      	mov	r0, r6
  4010aa:	47a8      	blx	r5
        delay_us(SPI_DBC);
  4010ac:	f240 50ee 	movw	r0, #1518	; 0x5ee
  4010b0:	47a0      	blx	r4
        spi_write(SPI0, 0x00, CS_DEASSERTED, 1);
  4010b2:	2301      	movs	r3, #1
  4010b4:	2200      	movs	r2, #0
  4010b6:	4611      	mov	r1, r2
  4010b8:	4630      	mov	r0, r6
  4010ba:	47a8      	blx	r5
        delay_us(SPI_DBC);        
  4010bc:	f240 50ee 	movw	r0, #1518	; 0x5ee
  4010c0:	47a0      	blx	r4
  4010c2:	e768      	b.n	400f96 <readZBoard+0x92>
    *data |= (1 << pos);
  4010c4:	f040 0008 	orr.w	r0, r0, #8
  4010c8:	4b0a      	ldr	r3, [pc, #40]	; (4010f4 <readZBoard+0x1f0>)
  4010ca:	7018      	strb	r0, [r3, #0]
  4010cc:	e732      	b.n	400f34 <readZBoard+0x30>
    else if (packet.devAddr!= devAddr) {
  4010ce:	7872      	ldrb	r2, [r6, #1]
  4010d0:	9900      	ldr	r1, [sp, #0]
  4010d2:	428a      	cmp	r2, r1
  4010d4:	d001      	beq.n	4010da <readZBoard+0x1d6>
        return SPI_FAILED;
  4010d6:	2000      	movs	r0, #0
  4010d8:	e7c0      	b.n	40105c <readZBoard+0x158>
    else if (packet.regAddr!= regAddr) {
  4010da:	78b2      	ldrb	r2, [r6, #2]
  4010dc:	9901      	ldr	r1, [sp, #4]
  4010de:	428a      	cmp	r2, r1
  4010e0:	d001      	beq.n	4010e6 <readZBoard+0x1e2>
        return SPI_FAILED;
  4010e2:	2000      	movs	r0, #0
  4010e4:	e7ba      	b.n	40105c <readZBoard+0x158>
    data[0] = packet.data[0];
  4010e6:	78f2      	ldrb	r2, [r6, #3]
  4010e8:	f88b 2000 	strb.w	r2, [fp]
    data[1] = packet.data[1];
  4010ec:	f88b 3001 	strb.w	r3, [fp, #1]
    return SPI_SUCCESS;
  4010f0:	2001      	movs	r0, #1
  4010f2:	e7b3      	b.n	40105c <readZBoard+0x158>
  4010f4:	20401318 	.word	0x20401318
  4010f8:	40008000 	.word	0x40008000
  4010fc:	0040030b 	.word	0x0040030b
  401100:	20400001 	.word	0x20400001
  401104:	2040132e 	.word	0x2040132e
  401108:	20401324 	.word	0x20401324
  40110c:	00407f80 	.word	0x00407f80
  401110:	00402dc1 	.word	0x00402dc1
  401114:	00407fb0 	.word	0x00407fb0
  401118:	2040132a 	.word	0x2040132a
  40111c:	004002db 	.word	0x004002db

00401120 <writeZBoardMulti>:
 *  /param  data        Pointer to data to send to destination
 *  /param  numBytes    1 or 2 byte transaction
 *  
 *  /retval boolean to determine if transaction was valid
 */
spiState writeZBoardMulti(uint8_t intf, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint8_t numBytes) {
  401120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401124:	b087      	sub	sp, #28
  401126:	9002      	str	r0, [sp, #8]
  401128:	9103      	str	r1, [sp, #12]
  40112a:	9204      	str	r2, [sp, #16]
  40112c:	9305      	str	r3, [sp, #20]
  40112e:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
  401132:	260a      	movs	r6, #10
  401134:	a523      	add	r5, pc, #140	; (adr r5, 4011c4 <writeZBoardMulti+0xa4>)
  401136:	e9d5 4500 	ldrd	r4, r5, [r5]
    const uint8_t maxNumRetries = 3;
    uint8_t numRetries = 0;
    
    while(numRetries < maxNumRetries) {
        if (writeZBoard(intf, devAddr, regAddr, data, numBytes) == 0) {
  40113a:	f8df a098 	ldr.w	sl, [pc, #152]	; 4011d4 <writeZBoardMulti+0xb4>
            numRetries++;
            if (numRetries == maxNumRetries) {
  40113e:	f20f 098c 	addw	r9, pc, #140	; 0x8c
  401142:	e9d9 8900 	ldrd	r8, r9, [r9]
        if (writeZBoard(intf, devAddr, regAddr, data, numBytes) == 0) {
  401146:	f8cd b000 	str.w	fp, [sp]
  40114a:	9b05      	ldr	r3, [sp, #20]
  40114c:	9a04      	ldr	r2, [sp, #16]
  40114e:	9903      	ldr	r1, [sp, #12]
  401150:	9802      	ldr	r0, [sp, #8]
  401152:	47d0      	blx	sl
  401154:	4607      	mov	r7, r0
  401156:	bb20      	cbnz	r0, 4011a2 <writeZBoardMulti+0x82>
            if (numRetries == maxNumRetries) {
  401158:	454d      	cmp	r5, r9
  40115a:	bf08      	it	eq
  40115c:	4544      	cmpeq	r4, r8
  40115e:	d014      	beq.n	40118a <writeZBoardMulti+0x6a>
                DV_error("Bad Z-Board SPI write after %u retries!", maxNumRetries);                   
                return SPI_FAILED;
            }
            delay_us(numRetries*10);
  401160:	b1de      	cbz	r6, 40119a <writeZBoardMulti+0x7a>
  401162:	4a13      	ldr	r2, [pc, #76]	; (4011b0 <writeZBoardMulti+0x90>)
  401164:	2300      	movs	r3, #0
  401166:	4620      	mov	r0, r4
  401168:	4629      	mov	r1, r5
  40116a:	4f12      	ldr	r7, [pc, #72]	; (4011b4 <writeZBoardMulti+0x94>)
  40116c:	47b8      	blx	r7
  40116e:	4b12      	ldr	r3, [pc, #72]	; (4011b8 <writeZBoardMulti+0x98>)
  401170:	4798      	blx	r3
  401172:	a30d      	add	r3, pc, #52	; (adr r3, 4011a8 <writeZBoardMulti+0x88>)
  401174:	e9d3 2300 	ldrd	r2, r3, [r3]
  401178:	1912      	adds	r2, r2, r4
  40117a:	416b      	adcs	r3, r5
  40117c:	4614      	mov	r4, r2
  40117e:	461d      	mov	r5, r3
  401180:	360a      	adds	r6, #10
    while(numRetries < maxNumRetries) {
  401182:	2e28      	cmp	r6, #40	; 0x28
  401184:	d1df      	bne.n	401146 <writeZBoardMulti+0x26>
        else {
            break;            
        }
    }
    
    return SPI_SUCCESS;
  401186:	2701      	movs	r7, #1
  401188:	e003      	b.n	401192 <writeZBoardMulti+0x72>
                DV_error("Bad Z-Board SPI write after %u retries!", maxNumRetries);                   
  40118a:	2103      	movs	r1, #3
  40118c:	480b      	ldr	r0, [pc, #44]	; (4011bc <writeZBoardMulti+0x9c>)
  40118e:	4b0c      	ldr	r3, [pc, #48]	; (4011c0 <writeZBoardMulti+0xa0>)
  401190:	4798      	blx	r3
}
  401192:	4638      	mov	r0, r7
  401194:	b007      	add	sp, #28
  401196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            delay_us(numRetries*10);
  40119a:	2033      	movs	r0, #51	; 0x33
  40119c:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <writeZBoardMulti+0x98>)
  40119e:	4798      	blx	r3
  4011a0:	e7e7      	b.n	401172 <writeZBoardMulti+0x52>
    return SPI_SUCCESS;
  4011a2:	2701      	movs	r7, #1
  4011a4:	e7f5      	b.n	401192 <writeZBoardMulti+0x72>
  4011a6:	bf00      	nop
  4011a8:	b2d05e00 	.word	0xb2d05e00
  4011ac:	00000000 	.word	0x00000000
  4011b0:	005a83e0 	.word	0x005a83e0
  4011b4:	004027cd 	.word	0x004027cd
  4011b8:	20400001 	.word	0x20400001
  4011bc:	00408088 	.word	0x00408088
  4011c0:	00402cfd 	.word	0x00402cfd
  4011c4:	b32ae1df 	.word	0xb32ae1df
  4011c8:	00000000 	.word	0x00000000
  4011cc:	18cb9ddf 	.word	0x18cb9ddf
  4011d0:	00000002 	.word	0x00000002
  4011d4:	00400cf5 	.word	0x00400cf5

004011d8 <readZBoardMulti>:
 *  /param  data        Pointer to data to send to destination
 *  /param  numBytes    1 or 2 byte transaction
 *  
 *  /retval boolean to determine if transaction was valid
 */
spiState readZBoardMulti(uint8_t intf, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint8_t numBytes) {
  4011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011dc:	b087      	sub	sp, #28
  4011de:	9002      	str	r0, [sp, #8]
  4011e0:	9103      	str	r1, [sp, #12]
  4011e2:	9204      	str	r2, [sp, #16]
  4011e4:	9305      	str	r3, [sp, #20]
  4011e6:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
  4011ea:	260a      	movs	r6, #10
  4011ec:	a523      	add	r5, pc, #140	; (adr r5, 40127c <readZBoardMulti+0xa4>)
  4011ee:	e9d5 4500 	ldrd	r4, r5, [r5]
    const uint8_t maxNumRetries = 3;
    uint8_t numRetries = 0;
    
    while(numRetries < maxNumRetries) {
        if (readZBoard(intf, devAddr, regAddr, data, numBytes) == 0) {
  4011f2:	f8df a098 	ldr.w	sl, [pc, #152]	; 40128c <readZBoardMulti+0xb4>
            numRetries++;
            if (numRetries == maxNumRetries) {
  4011f6:	f20f 098c 	addw	r9, pc, #140	; 0x8c
  4011fa:	e9d9 8900 	ldrd	r8, r9, [r9]
        if (readZBoard(intf, devAddr, regAddr, data, numBytes) == 0) {
  4011fe:	f8cd b000 	str.w	fp, [sp]
  401202:	9b05      	ldr	r3, [sp, #20]
  401204:	9a04      	ldr	r2, [sp, #16]
  401206:	9903      	ldr	r1, [sp, #12]
  401208:	9802      	ldr	r0, [sp, #8]
  40120a:	47d0      	blx	sl
  40120c:	4607      	mov	r7, r0
  40120e:	bb20      	cbnz	r0, 40125a <readZBoardMulti+0x82>
            if (numRetries == maxNumRetries) {
  401210:	454d      	cmp	r5, r9
  401212:	bf08      	it	eq
  401214:	4544      	cmpeq	r4, r8
  401216:	d014      	beq.n	401242 <readZBoardMulti+0x6a>
                DV_error("Bad Z-Board SPI read after %u retries!", maxNumRetries);   
                return SPI_FAILED;
            }
            delay_us(numRetries*10);
  401218:	b1de      	cbz	r6, 401252 <readZBoardMulti+0x7a>
  40121a:	4a13      	ldr	r2, [pc, #76]	; (401268 <readZBoardMulti+0x90>)
  40121c:	2300      	movs	r3, #0
  40121e:	4620      	mov	r0, r4
  401220:	4629      	mov	r1, r5
  401222:	4f12      	ldr	r7, [pc, #72]	; (40126c <readZBoardMulti+0x94>)
  401224:	47b8      	blx	r7
  401226:	4b12      	ldr	r3, [pc, #72]	; (401270 <readZBoardMulti+0x98>)
  401228:	4798      	blx	r3
  40122a:	a30d      	add	r3, pc, #52	; (adr r3, 401260 <readZBoardMulti+0x88>)
  40122c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401230:	1912      	adds	r2, r2, r4
  401232:	416b      	adcs	r3, r5
  401234:	4614      	mov	r4, r2
  401236:	461d      	mov	r5, r3
  401238:	360a      	adds	r6, #10
    while(numRetries < maxNumRetries) {
  40123a:	2e28      	cmp	r6, #40	; 0x28
  40123c:	d1df      	bne.n	4011fe <readZBoardMulti+0x26>
        else {
            break;
        }
    }
    
    return SPI_SUCCESS;
  40123e:	2701      	movs	r7, #1
  401240:	e003      	b.n	40124a <readZBoardMulti+0x72>
                DV_error("Bad Z-Board SPI read after %u retries!", maxNumRetries);   
  401242:	2103      	movs	r1, #3
  401244:	480b      	ldr	r0, [pc, #44]	; (401274 <readZBoardMulti+0x9c>)
  401246:	4b0c      	ldr	r3, [pc, #48]	; (401278 <readZBoardMulti+0xa0>)
  401248:	4798      	blx	r3
}
  40124a:	4638      	mov	r0, r7
  40124c:	b007      	add	sp, #28
  40124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            delay_us(numRetries*10);
  401252:	2033      	movs	r0, #51	; 0x33
  401254:	4b06      	ldr	r3, [pc, #24]	; (401270 <readZBoardMulti+0x98>)
  401256:	4798      	blx	r3
  401258:	e7e7      	b.n	40122a <readZBoardMulti+0x52>
    return SPI_SUCCESS;
  40125a:	2701      	movs	r7, #1
  40125c:	e7f5      	b.n	40124a <readZBoardMulti+0x72>
  40125e:	bf00      	nop
  401260:	b2d05e00 	.word	0xb2d05e00
  401264:	00000000 	.word	0x00000000
  401268:	005a83e0 	.word	0x005a83e0
  40126c:	004027cd 	.word	0x004027cd
  401270:	20400001 	.word	0x20400001
  401274:	00407fe8 	.word	0x00407fe8
  401278:	00402cfd 	.word	0x00402cfd
  40127c:	b32ae1df 	.word	0xb32ae1df
  401280:	00000000 	.word	0x00000000
  401284:	18cb9ddf 	.word	0x18cb9ddf
  401288:	00000002 	.word	0x00000002
  40128c:	00400f05 	.word	0x00400f05

00401290 <enableIr>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void enableIr(void) {
  401290:	b510      	push	{r4, lr}
  401292:	b084      	sub	sp, #16
    uint8_t command[2] = {0x01, 0x00};
  401294:	2301      	movs	r3, #1
  401296:	f88d 300c 	strb.w	r3, [sp, #12]
  40129a:	2000      	movs	r0, #0
  40129c:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_IR_CTRL, command, 2)) {
  4012a0:	2302      	movs	r3, #2
  4012a2:	9300      	str	r3, [sp, #0]
  4012a4:	ab03      	add	r3, sp, #12
  4012a6:	4602      	mov	r2, r0
  4012a8:	4601      	mov	r1, r0
  4012aa:	4c06      	ldr	r4, [pc, #24]	; (4012c4 <enableIr+0x34>)
  4012ac:	47a0      	blx	r4
  4012ae:	b920      	cbnz	r0, 4012ba <enableIr+0x2a>
        DV_info("IR turned on!");
    } 
    else {
        DV_error("IR did not turn on successfully!");
  4012b0:	4805      	ldr	r0, [pc, #20]	; (4012c8 <enableIr+0x38>)
  4012b2:	4b06      	ldr	r3, [pc, #24]	; (4012cc <enableIr+0x3c>)
  4012b4:	4798      	blx	r3
    }
}
  4012b6:	b004      	add	sp, #16
  4012b8:	bd10      	pop	{r4, pc}
        DV_info("IR turned on!");
  4012ba:	4805      	ldr	r0, [pc, #20]	; (4012d0 <enableIr+0x40>)
  4012bc:	4b03      	ldr	r3, [pc, #12]	; (4012cc <enableIr+0x3c>)
  4012be:	4798      	blx	r3
  4012c0:	e7f9      	b.n	4012b6 <enableIr+0x26>
  4012c2:	bf00      	nop
  4012c4:	00401121 	.word	0x00401121
  4012c8:	00407db8 	.word	0x00407db8
  4012cc:	00402dc1 	.word	0x00402dc1
  4012d0:	00407da0 	.word	0x00407da0

004012d4 <disableIr>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void disableIr(void) {
  4012d4:	b510      	push	{r4, lr}
  4012d6:	b084      	sub	sp, #16
    uint8_t command[2] = {0x00, 0x00};
  4012d8:	2000      	movs	r0, #0
  4012da:	f88d 000c 	strb.w	r0, [sp, #12]
  4012de:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_IR_CTRL, command, 2)) {
  4012e2:	2302      	movs	r3, #2
  4012e4:	9300      	str	r3, [sp, #0]
  4012e6:	ab03      	add	r3, sp, #12
  4012e8:	4602      	mov	r2, r0
  4012ea:	4601      	mov	r1, r0
  4012ec:	4c05      	ldr	r4, [pc, #20]	; (401304 <disableIr+0x30>)
  4012ee:	47a0      	blx	r4
  4012f0:	b920      	cbnz	r0, 4012fc <disableIr+0x28>
        DV_info("IR turned off!");
    }
    else {
        DV_error("IR did not turn off successfully!");
  4012f2:	4805      	ldr	r0, [pc, #20]	; (401308 <disableIr+0x34>)
  4012f4:	4b05      	ldr	r3, [pc, #20]	; (40130c <disableIr+0x38>)
  4012f6:	4798      	blx	r3
    }
}
  4012f8:	b004      	add	sp, #16
  4012fa:	bd10      	pop	{r4, pc}
        DV_info("IR turned off!");
  4012fc:	4804      	ldr	r0, [pc, #16]	; (401310 <disableIr+0x3c>)
  4012fe:	4b03      	ldr	r3, [pc, #12]	; (40130c <disableIr+0x38>)
  401300:	4798      	blx	r3
  401302:	e7f9      	b.n	4012f8 <disableIr+0x24>
  401304:	00401121 	.word	0x00401121
  401308:	00407cd4 	.word	0x00407cd4
  40130c:	00402dc1 	.word	0x00402dc1
  401310:	00407cbc 	.word	0x00407cbc

00401314 <enableGLed>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void enableGLed(void) {
  401314:	b510      	push	{r4, lr}
  401316:	b084      	sub	sp, #16
    uint8_t command[2] = {0x00, 0x00};
  401318:	2000      	movs	r0, #0
  40131a:	f88d 000c 	strb.w	r0, [sp, #12]
  40131e:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_G_LED, command, 2)) {
  401322:	2302      	movs	r3, #2
  401324:	9300      	str	r3, [sp, #0]
  401326:	ab03      	add	r3, sp, #12
  401328:	2204      	movs	r2, #4
  40132a:	4601      	mov	r1, r0
  40132c:	4c05      	ldr	r4, [pc, #20]	; (401344 <enableGLed+0x30>)
  40132e:	47a0      	blx	r4
  401330:	b920      	cbnz	r0, 40133c <enableGLed+0x28>
        DV_info("Green LED turned on!");
    } 
    else {
        DV_error("Green LED did not turn on successfully!");
  401332:	4805      	ldr	r0, [pc, #20]	; (401348 <enableGLed+0x34>)
  401334:	4b05      	ldr	r3, [pc, #20]	; (40134c <enableGLed+0x38>)
  401336:	4798      	blx	r3
    }
}
  401338:	b004      	add	sp, #16
  40133a:	bd10      	pop	{r4, pc}
        DV_info("Green LED turned on!");
  40133c:	4804      	ldr	r0, [pc, #16]	; (401350 <enableGLed+0x3c>)
  40133e:	4b03      	ldr	r3, [pc, #12]	; (40134c <enableGLed+0x38>)
  401340:	4798      	blx	r3
  401342:	e7f9      	b.n	401338 <enableGLed+0x24>
  401344:	00401121 	.word	0x00401121
  401348:	00407d6c 	.word	0x00407d6c
  40134c:	00402dc1 	.word	0x00402dc1
  401350:	00407d4c 	.word	0x00407d4c

00401354 <disableGLed>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void disableGLed(void) {
  401354:	b510      	push	{r4, lr}
  401356:	b084      	sub	sp, #16
    uint8_t command[2] = {0x01, 0x00};
  401358:	2301      	movs	r3, #1
  40135a:	f88d 300c 	strb.w	r3, [sp, #12]
  40135e:	2000      	movs	r0, #0
  401360:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_G_LED, command, 2)) {
  401364:	2302      	movs	r3, #2
  401366:	9300      	str	r3, [sp, #0]
  401368:	ab03      	add	r3, sp, #12
  40136a:	2204      	movs	r2, #4
  40136c:	4601      	mov	r1, r0
  40136e:	4c06      	ldr	r4, [pc, #24]	; (401388 <disableGLed+0x34>)
  401370:	47a0      	blx	r4
  401372:	b920      	cbnz	r0, 40137e <disableGLed+0x2a>
        DV_info("Green LED turned off!");
    }
    else {
        DV_error("Green LED did not turn off successfully!");
  401374:	4805      	ldr	r0, [pc, #20]	; (40138c <disableGLed+0x38>)
  401376:	4b06      	ldr	r3, [pc, #24]	; (401390 <disableGLed+0x3c>)
  401378:	4798      	blx	r3
    }
}
  40137a:	b004      	add	sp, #16
  40137c:	bd10      	pop	{r4, pc}
        DV_info("Green LED turned off!");
  40137e:	4805      	ldr	r0, [pc, #20]	; (401394 <disableGLed+0x40>)
  401380:	4b03      	ldr	r3, [pc, #12]	; (401390 <disableGLed+0x3c>)
  401382:	4798      	blx	r3
  401384:	e7f9      	b.n	40137a <disableGLed+0x26>
  401386:	bf00      	nop
  401388:	00401121 	.word	0x00401121
  40138c:	00407c88 	.word	0x00407c88
  401390:	00402dc1 	.word	0x00402dc1
  401394:	00407c68 	.word	0x00407c68

00401398 <enableRLed>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void enableRLed(void) {
  401398:	b510      	push	{r4, lr}
  40139a:	b084      	sub	sp, #16
    uint8_t command[2] = {0x00, 0x00};
  40139c:	2000      	movs	r0, #0
  40139e:	f88d 000c 	strb.w	r0, [sp, #12]
  4013a2:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_G_LED, command, 2)) {
  4013a6:	2302      	movs	r3, #2
  4013a8:	9300      	str	r3, [sp, #0]
  4013aa:	ab03      	add	r3, sp, #12
  4013ac:	2204      	movs	r2, #4
  4013ae:	4601      	mov	r1, r0
  4013b0:	4c05      	ldr	r4, [pc, #20]	; (4013c8 <enableRLed+0x30>)
  4013b2:	47a0      	blx	r4
  4013b4:	b920      	cbnz	r0, 4013c0 <enableRLed+0x28>
        DV_info("Red LED turned on!");
    } 
    else {
        DV_error("Red LED did not turn on successfully!");
  4013b6:	4805      	ldr	r0, [pc, #20]	; (4013cc <enableRLed+0x34>)
  4013b8:	4b05      	ldr	r3, [pc, #20]	; (4013d0 <enableRLed+0x38>)
  4013ba:	4798      	blx	r3
    }
}
  4013bc:	b004      	add	sp, #16
  4013be:	bd10      	pop	{r4, pc}
        DV_info("Red LED turned on!");
  4013c0:	4804      	ldr	r0, [pc, #16]	; (4013d4 <enableRLed+0x3c>)
  4013c2:	4b03      	ldr	r3, [pc, #12]	; (4013d0 <enableRLed+0x38>)
  4013c4:	4798      	blx	r3
  4013c6:	e7f9      	b.n	4013bc <enableRLed+0x24>
  4013c8:	00401121 	.word	0x00401121
  4013cc:	00407e00 	.word	0x00407e00
  4013d0:	00402dc1 	.word	0x00402dc1
  4013d4:	00407de4 	.word	0x00407de4

004013d8 <disableRLed>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void disableRLed(void) {
  4013d8:	b510      	push	{r4, lr}
  4013da:	b084      	sub	sp, #16
    uint8_t command[2] = {0x01, 0x00};
  4013dc:	2301      	movs	r3, #1
  4013de:	f88d 300c 	strb.w	r3, [sp, #12]
  4013e2:	2000      	movs	r0, #0
  4013e4:	f88d 000d 	strb.w	r0, [sp, #13]
    
    if (writeZBoardMulti(SPI_COM, 0x00, REG_G_LED, command, 2)) {
  4013e8:	2302      	movs	r3, #2
  4013ea:	9300      	str	r3, [sp, #0]
  4013ec:	ab03      	add	r3, sp, #12
  4013ee:	2204      	movs	r2, #4
  4013f0:	4601      	mov	r1, r0
  4013f2:	4c06      	ldr	r4, [pc, #24]	; (40140c <disableRLed+0x34>)
  4013f4:	47a0      	blx	r4
  4013f6:	b920      	cbnz	r0, 401402 <disableRLed+0x2a>
        DV_info("Red LED turned off!");
    }
    else {
        DV_error("Red LED did not turn off successfully!");
  4013f8:	4805      	ldr	r0, [pc, #20]	; (401410 <disableRLed+0x38>)
  4013fa:	4b06      	ldr	r3, [pc, #24]	; (401414 <disableRLed+0x3c>)
  4013fc:	4798      	blx	r3
    }
}
  4013fe:	b004      	add	sp, #16
  401400:	bd10      	pop	{r4, pc}
        DV_info("Red LED turned off!");
  401402:	4805      	ldr	r0, [pc, #20]	; (401418 <disableRLed+0x40>)
  401404:	4b03      	ldr	r3, [pc, #12]	; (401414 <disableRLed+0x3c>)
  401406:	4798      	blx	r3
  401408:	e7f9      	b.n	4013fe <disableRLed+0x26>
  40140a:	bf00      	nop
  40140c:	00401121 	.word	0x00401121
  401410:	00407d1c 	.word	0x00407d1c
  401414:	00402dc1 	.word	0x00402dc1
  401418:	00407d00 	.word	0x00407d00

0040141c <getIrAnalogVal>:
*  
*  /param  none
*  
*  /retval 12-bit ADC value
*/   
uint16_t getIrAnalogVal(void) {
  40141c:	b510      	push	{r4, lr}
  40141e:	b084      	sub	sp, #16
    uint8_t rxData[2] = {0x00, 0x00};
  401420:	2000      	movs	r0, #0
  401422:	f88d 000c 	strb.w	r0, [sp, #12]
  401426:	f88d 000d 	strb.w	r0, [sp, #13]
    uint16_t rawAdc = 0;

    if (readZBoardMulti(SPI_COM, 0x00, REG_IR_VAL, rxData, 2)) {
  40142a:	2302      	movs	r3, #2
  40142c:	9300      	str	r3, [sp, #0]
  40142e:	ab03      	add	r3, sp, #12
  401430:	2201      	movs	r2, #1
  401432:	4601      	mov	r1, r0
  401434:	4c07      	ldr	r4, [pc, #28]	; (401454 <getIrAnalogVal+0x38>)
  401436:	47a0      	blx	r4
  401438:	b138      	cbz	r0, 40144a <getIrAnalogVal+0x2e>
        rawAdc = (rxData[0] << 8) | rxData[1];
  40143a:	f89d 300c 	ldrb.w	r3, [sp, #12]
  40143e:	f89d 000d 	ldrb.w	r0, [sp, #13]
  401442:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
        DV_error("Unable to read IR value");
        return 0;        
    }    
    
    return rawAdc;
}
  401446:	b004      	add	sp, #16
  401448:	bd10      	pop	{r4, pc}
        DV_error("Unable to read IR value");
  40144a:	4803      	ldr	r0, [pc, #12]	; (401458 <getIrAnalogVal+0x3c>)
  40144c:	4b03      	ldr	r3, [pc, #12]	; (40145c <getIrAnalogVal+0x40>)
  40144e:	4798      	blx	r3
        return 0;        
  401450:	2000      	movs	r0, #0
  401452:	e7f8      	b.n	401446 <getIrAnalogVal+0x2a>
  401454:	004011d9 	.word	0x004011d9
  401458:	00407ec0 	.word	0x00407ec0
  40145c:	00402dc1 	.word	0x00402dc1

00401460 <getAnalogVal>:
*  
*  /param  channel     Channel to obtain result from 0 or 1
*  
*  /retval 12-bit ADC value from specific channel
*/   
uint16_t getAnalogVal(uint8_t channel) {
  401460:	b570      	push	{r4, r5, r6, lr}
  401462:	b084      	sub	sp, #16
    uint8_t rxData[2] = {0x00, 0x00};
  401464:	2300      	movs	r3, #0
  401466:	f88d 300c 	strb.w	r3, [sp, #12]
  40146a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint16_t rawAdc = 0;
    uint8_t reg = REG_ANALOG0;  
    
    if (channel == 0) {
  40146e:	4605      	mov	r5, r0
  401470:	b130      	cbz	r0, 401480 <getAnalogVal+0x20>
        reg = REG_ANALOG0;
    }
    else if (channel == 1) {
  401472:	2801      	cmp	r0, #1
  401474:	d015      	beq.n	4014a2 <getAnalogVal+0x42>
        reg = REG_ANALOG1;
    }
    else {
        DV_error("getIrAnalogVal channel not supported!");
  401476:	481e      	ldr	r0, [pc, #120]	; (4014f0 <getAnalogVal+0x90>)
  401478:	4b1e      	ldr	r3, [pc, #120]	; (4014f4 <getAnalogVal+0x94>)
  40147a:	4798      	blx	r3
    uint8_t reg = REG_ANALOG0;  
  40147c:	2202      	movs	r2, #2
  40147e:	e000      	b.n	401482 <getAnalogVal+0x22>
        reg = REG_ANALOG0;
  401480:	2202      	movs	r2, #2
    }
    
    if (readZBoardMulti(SPI_COM, 0x00, reg, rxData, 2)) {
  401482:	2302      	movs	r3, #2
  401484:	9300      	str	r3, [sp, #0]
  401486:	ab03      	add	r3, sp, #12
  401488:	2100      	movs	r1, #0
  40148a:	4608      	mov	r0, r1
  40148c:	4c1a      	ldr	r4, [pc, #104]	; (4014f8 <getAnalogVal+0x98>)
  40148e:	47a0      	blx	r4
  401490:	b948      	cbnz	r0, 4014a6 <getAnalogVal+0x46>
        rawAdc = (rxData[0] << 8) | rxData[1];
        DV_info("Analog Value[%u]: %.2f", channel, (3.3*rawAdc)/4095);        
    }
    else {
        DV_error("Unable to read Z-board analog value on channel: %u", channel);
  401492:	4629      	mov	r1, r5
  401494:	4819      	ldr	r0, [pc, #100]	; (4014fc <getAnalogVal+0x9c>)
  401496:	4b1a      	ldr	r3, [pc, #104]	; (401500 <getAnalogVal+0xa0>)
  401498:	4798      	blx	r3
        return 0;
  40149a:	2400      	movs	r4, #0
    }
    
    return rawAdc;
}
  40149c:	4620      	mov	r0, r4
  40149e:	b004      	add	sp, #16
  4014a0:	bd70      	pop	{r4, r5, r6, pc}
        reg = REG_ANALOG1;
  4014a2:	2203      	movs	r2, #3
  4014a4:	e7ed      	b.n	401482 <getAnalogVal+0x22>
        rawAdc = (rxData[0] << 8) | rxData[1];
  4014a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
  4014aa:	f89d 400d 	ldrb.w	r4, [sp, #13]
  4014ae:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
        DV_info("Analog Value[%u]: %.2f", channel, (3.3*rawAdc)/4095);        
  4014b2:	4620      	mov	r0, r4
  4014b4:	4b13      	ldr	r3, [pc, #76]	; (401504 <getAnalogVal+0xa4>)
  4014b6:	4798      	blx	r3
  4014b8:	a309      	add	r3, pc, #36	; (adr r3, 4014e0 <getAnalogVal+0x80>)
  4014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014be:	4e12      	ldr	r6, [pc, #72]	; (401508 <getAnalogVal+0xa8>)
  4014c0:	47b0      	blx	r6
  4014c2:	a309      	add	r3, pc, #36	; (adr r3, 4014e8 <getAnalogVal+0x88>)
  4014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014c8:	4e10      	ldr	r6, [pc, #64]	; (40150c <getAnalogVal+0xac>)
  4014ca:	47b0      	blx	r6
  4014cc:	4602      	mov	r2, r0
  4014ce:	460b      	mov	r3, r1
  4014d0:	4629      	mov	r1, r5
  4014d2:	480f      	ldr	r0, [pc, #60]	; (401510 <getAnalogVal+0xb0>)
  4014d4:	4d0a      	ldr	r5, [pc, #40]	; (401500 <getAnalogVal+0xa0>)
  4014d6:	47a8      	blx	r5
    return rawAdc;
  4014d8:	e7e0      	b.n	40149c <getAnalogVal+0x3c>
  4014da:	bf00      	nop
  4014dc:	f3af 8000 	nop.w
  4014e0:	66666666 	.word	0x66666666
  4014e4:	400a6666 	.word	0x400a6666
  4014e8:	00000000 	.word	0x00000000
  4014ec:	40affe00 	.word	0x40affe00
  4014f0:	00407e30 	.word	0x00407e30
  4014f4:	00402dc1 	.word	0x00402dc1
  4014f8:	004011d9 	.word	0x004011d9
  4014fc:	00407e80 	.word	0x00407e80
  401500:	00402cfd 	.word	0x00402cfd
  401504:	004022dd 	.word	0x004022dd
  401508:	004023a9 	.word	0x004023a9
  40150c:	004025fd 	.word	0x004025fd
  401510:	00407e60 	.word	0x00407e60
  401514:	00000000 	.word	0x00000000

00401518 <getSpineBoardAdc>:
*  
*  /param  channel     Channel to obtain result from 0, 1, 2, or 3
*  
*  /retval 12-bit ADC value from specific channel
*/   
uint16_t getSpineBoardAdc(uint8_t channel) {
  401518:	b570      	push	{r4, r5, r6, lr}
  40151a:	b084      	sub	sp, #16
    uint8_t rxData[2] = {0x00, 0x00};
  40151c:	2300      	movs	r3, #0
  40151e:	f88d 300c 	strb.w	r3, [sp, #12]
  401522:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8_t txData;
    uint16_t rawAdc = 0;
    uint8_t returnCh = 0;           // holds which channel the raw ADC came from
    
    switch (channel) {
  401526:	2803      	cmp	r0, #3
  401528:	d806      	bhi.n	401538 <getSpineBoardAdc+0x20>
  40152a:	e8df f000 	tbb	[pc, r0]
  40152e:	1c02      	.short	0x1c02
  401530:	2420      	.short	0x2420
        case 0:
            txData = 0x10;
  401532:	2310      	movs	r3, #16
  401534:	f88d 300b 	strb.w	r3, [sp, #11]
        default:
            break;        
    }
    
    /*  Write configuration byte to select channel */
    if(writeZBoardMulti(I2C0_COM, DEV_ID_AD7991_1, 0x00, &txData, 1) == 0) {
  401538:	2001      	movs	r0, #1
  40153a:	9000      	str	r0, [sp, #0]
  40153c:	f10d 030b 	add.w	r3, sp, #11
  401540:	2200      	movs	r2, #0
  401542:	2129      	movs	r1, #41	; 0x29
  401544:	4c24      	ldr	r4, [pc, #144]	; (4015d8 <getSpineBoardAdc+0xc0>)
  401546:	47a0      	blx	r4
  401548:	b1c8      	cbz	r0, 40157e <getSpineBoardAdc+0x66>
    }

    /*  The AD7991 ADC does not follow the standard I2C protocol of having a register address so using 0x00 in place
     *  The operation will be adjusted and accounted for on the Z-board firmware
     */        
    if(readZBoardMulti(I2C0_COM, DEV_ID_AD7991_1, 0x00, rxData, 2)) {
  40154a:	2302      	movs	r3, #2
  40154c:	9300      	str	r3, [sp, #0]
  40154e:	ab03      	add	r3, sp, #12
  401550:	2200      	movs	r2, #0
  401552:	2129      	movs	r1, #41	; 0x29
  401554:	2001      	movs	r0, #1
  401556:	4c21      	ldr	r4, [pc, #132]	; (4015dc <getSpineBoardAdc+0xc4>)
  401558:	47a0      	blx	r4
  40155a:	b9b8      	cbnz	r0, 40158c <getSpineBoardAdc+0x74>
        
        DV_info("Spine Board Analog Value[%u]: %.2f", returnCh, (3.3*rawAdc)/4095);          
        return rawAdc;
    }
    else {
        DV_error("Not able read from spine board ADC!");
  40155c:	4820      	ldr	r0, [pc, #128]	; (4015e0 <getSpineBoardAdc+0xc8>)
  40155e:	4b21      	ldr	r3, [pc, #132]	; (4015e4 <getSpineBoardAdc+0xcc>)
  401560:	4798      	blx	r3
        return 0;
  401562:	2400      	movs	r4, #0
  401564:	e00f      	b.n	401586 <getSpineBoardAdc+0x6e>
            txData = 0x20;        
  401566:	2320      	movs	r3, #32
  401568:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
  40156c:	e7e4      	b.n	401538 <getSpineBoardAdc+0x20>
            txData = 0x40;        
  40156e:	2340      	movs	r3, #64	; 0x40
  401570:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
  401574:	e7e0      	b.n	401538 <getSpineBoardAdc+0x20>
            txData = 0x80;                
  401576:	2380      	movs	r3, #128	; 0x80
  401578:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
  40157c:	e7dc      	b.n	401538 <getSpineBoardAdc+0x20>
        DV_error("Not able write configuration byte to spine board ADC!");
  40157e:	481a      	ldr	r0, [pc, #104]	; (4015e8 <getSpineBoardAdc+0xd0>)
  401580:	4b18      	ldr	r3, [pc, #96]	; (4015e4 <getSpineBoardAdc+0xcc>)
  401582:	4798      	blx	r3
        return 0;
  401584:	2400      	movs	r4, #0
    }        
}
  401586:	4620      	mov	r0, r4
  401588:	b004      	add	sp, #16
  40158a:	bd70      	pop	{r4, r5, r6, pc}
        returnCh = rxData[0] >> 4;
  40158c:	f89d 500c 	ldrb.w	r5, [sp, #12]
        rawAdc = ((rxData[0] & 0x0F) << 8) | rxData[1];    
  401590:	022c      	lsls	r4, r5, #8
  401592:	f404 6370 	and.w	r3, r4, #3840	; 0xf00
  401596:	f89d 400d 	ldrb.w	r4, [sp, #13]
  40159a:	431c      	orrs	r4, r3
        DV_info("Spine Board Analog Value[%u]: %.2f", returnCh, (3.3*rawAdc)/4095);          
  40159c:	4620      	mov	r0, r4
  40159e:	4b13      	ldr	r3, [pc, #76]	; (4015ec <getSpineBoardAdc+0xd4>)
  4015a0:	4798      	blx	r3
  4015a2:	a309      	add	r3, pc, #36	; (adr r3, 4015c8 <getSpineBoardAdc+0xb0>)
  4015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a8:	4e11      	ldr	r6, [pc, #68]	; (4015f0 <getSpineBoardAdc+0xd8>)
  4015aa:	47b0      	blx	r6
  4015ac:	a308      	add	r3, pc, #32	; (adr r3, 4015d0 <getSpineBoardAdc+0xb8>)
  4015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015b2:	4e10      	ldr	r6, [pc, #64]	; (4015f4 <getSpineBoardAdc+0xdc>)
  4015b4:	47b0      	blx	r6
  4015b6:	4602      	mov	r2, r0
  4015b8:	460b      	mov	r3, r1
  4015ba:	0929      	lsrs	r1, r5, #4
  4015bc:	480e      	ldr	r0, [pc, #56]	; (4015f8 <getSpineBoardAdc+0xe0>)
  4015be:	4d0f      	ldr	r5, [pc, #60]	; (4015fc <getSpineBoardAdc+0xe4>)
  4015c0:	47a8      	blx	r5
        return rawAdc;
  4015c2:	e7e0      	b.n	401586 <getSpineBoardAdc+0x6e>
  4015c4:	f3af 8000 	nop.w
  4015c8:	66666666 	.word	0x66666666
  4015cc:	400a6666 	.word	0x400a6666
  4015d0:	00000000 	.word	0x00000000
  4015d4:	40affe00 	.word	0x40affe00
  4015d8:	00401121 	.word	0x00401121
  4015dc:	004011d9 	.word	0x004011d9
  4015e0:	00407f50 	.word	0x00407f50
  4015e4:	00402dc1 	.word	0x00402dc1
  4015e8:	00407ee4 	.word	0x00407ee4
  4015ec:	004022dd 	.word	0x004022dd
  4015f0:	004023a9 	.word	0x004023a9
  4015f4:	004025fd 	.word	0x004025fd
  4015f8:	00407f24 	.word	0x00407f24
  4015fc:	00402cfd 	.word	0x00402cfd

00401600 <testZBoardIntf>:
*
*  /param  none
*
*  /retval SPI_SUCCESS if communication OK, otherwise, SPI_FAILED
*/
spiState testZBoardIntf(void) {
  401600:	b570      	push	{r4, r5, r6, lr}
  401602:	b084      	sub	sp, #16
    uint8_t txData[2] = {0x01, 0x00};
  401604:	2501      	movs	r5, #1
  401606:	f88d 500c 	strb.w	r5, [sp, #12]
  40160a:	2400      	movs	r4, #0
  40160c:	f88d 400d 	strb.w	r4, [sp, #13]
    uint8_t rxData[2] = {0x00, 0x00};
  401610:	f88d 4008 	strb.w	r4, [sp, #8]
  401614:	f88d 4009 	strb.w	r4, [sp, #9]
    writeZBoardMulti(SPI_COM, 0x00, REG_R_LED, txData, 1);
  401618:	9500      	str	r5, [sp, #0]
  40161a:	ab03      	add	r3, sp, #12
  40161c:	2205      	movs	r2, #5
  40161e:	4621      	mov	r1, r4
  401620:	4620      	mov	r0, r4
  401622:	4e19      	ldr	r6, [pc, #100]	; (401688 <testZBoardIntf+0x88>)
  401624:	47b0      	blx	r6
    readZBoardMulti(SPI_COM, 0x00, REG_R_LED, rxData, 1);
  401626:	9500      	str	r5, [sp, #0]
  401628:	ab02      	add	r3, sp, #8
  40162a:	2205      	movs	r2, #5
  40162c:	4621      	mov	r1, r4
  40162e:	4620      	mov	r0, r4
  401630:	4c16      	ldr	r4, [pc, #88]	; (40168c <testZBoardIntf+0x8c>)
  401632:	47a0      	blx	r4
    
    if (rxData[0] != txData[0]) {
  401634:	f89d 2008 	ldrb.w	r2, [sp, #8]
  401638:	f89d 300c 	ldrb.w	r3, [sp, #12]
  40163c:	429a      	cmp	r2, r3
  40163e:	d002      	beq.n	401646 <testZBoardIntf+0x46>
        return SPI_FAILED;
  401640:	2000      	movs	r0, #0
    if (rxData[0] != txData[0]) {
        return SPI_FAILED;
    }
    
    return SPI_SUCCESS;
  401642:	b004      	add	sp, #16
  401644:	bd70      	pop	{r4, r5, r6, pc}
    txData[0] = 0x00;
  401646:	2400      	movs	r4, #0
  401648:	f88d 400c 	strb.w	r4, [sp, #12]
    txData[1] = 0x00;
  40164c:	f88d 400d 	strb.w	r4, [sp, #13]
    rxData[0] = 0xFF;
  401650:	23ff      	movs	r3, #255	; 0xff
  401652:	f88d 3008 	strb.w	r3, [sp, #8]
    rxData[1] = 0x00;
  401656:	f88d 4009 	strb.w	r4, [sp, #9]
    writeZBoardMulti(SPI_COM, 0x00, REG_R_LED, txData, 1);
  40165a:	9500      	str	r5, [sp, #0]
  40165c:	ab03      	add	r3, sp, #12
  40165e:	2205      	movs	r2, #5
  401660:	4621      	mov	r1, r4
  401662:	4620      	mov	r0, r4
  401664:	47b0      	blx	r6
    readZBoardMulti(SPI_COM, 0x00, REG_R_LED, rxData, 1);
  401666:	9500      	str	r5, [sp, #0]
  401668:	ab02      	add	r3, sp, #8
  40166a:	2205      	movs	r2, #5
  40166c:	4621      	mov	r1, r4
  40166e:	4620      	mov	r0, r4
  401670:	4c06      	ldr	r4, [pc, #24]	; (40168c <testZBoardIntf+0x8c>)
  401672:	47a0      	blx	r4
    if (rxData[0] != txData[0]) {
  401674:	f89d 0008 	ldrb.w	r0, [sp, #8]
  401678:	f89d 300c 	ldrb.w	r3, [sp, #12]
        return SPI_FAILED;
  40167c:	4298      	cmp	r0, r3
  40167e:	bf14      	ite	ne
  401680:	2000      	movne	r0, #0
  401682:	2001      	moveq	r0, #1
  401684:	e7dd      	b.n	401642 <testZBoardIntf+0x42>
  401686:	bf00      	nop
  401688:	00401121 	.word	0x00401121
  40168c:	004011d9 	.word	0x004011d9

00401690 <initLDC>:
 *  
 *  /param  none
 *  
 *  /retval none
 */
void initLDC(void) {
  401690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401694:	b085      	sub	sp, #20
    uint8_t i;
	uint8_t rx_data[2] = {0};
  401696:	2300      	movs	r3, #0
  401698:	f8ad 300c 	strh.w	r3, [sp, #12]
  40169c:	4b25      	ldr	r3, [pc, #148]	; (401734 <initLDC+0xa4>)
  40169e:	1e5e      	subs	r6, r3, #1
  4016a0:	4f25      	ldr	r7, [pc, #148]	; (401738 <initLDC+0xa8>)
  4016a2:	f103 080e 	add.w	r8, r3, #14
  4016a6:	463d      	mov	r5, r7
  4016a8:	4634      	mov	r4, r6
        
    /* Write default configuration to LDC1614 */  
      
	for (i = 0; i < TX_CONFIG_LENGTH; i++) {
    	if (writeZBoardMulti(I2C0_COM, LDC1614_ID_ADDR, tx_config_addr[i], (uint8_t *)&tx_config_value[2*i], 2) != SPI_SUCCESS) {
  4016aa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 401748 <initLDC+0xb8>
        	DV_error("Writing individual LDC1614 default configuration failed!");
  4016ae:	f8df b09c 	ldr.w	fp, [pc, #156]	; 40174c <initLDC+0xbc>
  4016b2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 401740 <initLDC+0xb0>
  4016b6:	e002      	b.n	4016be <initLDC+0x2e>
  4016b8:	3502      	adds	r5, #2
	for (i = 0; i < TX_CONFIG_LENGTH; i++) {
  4016ba:	4544      	cmp	r4, r8
  4016bc:	d00c      	beq.n	4016d8 <initLDC+0x48>
    	if (writeZBoardMulti(I2C0_COM, LDC1614_ID_ADDR, tx_config_addr[i], (uint8_t *)&tx_config_value[2*i], 2) != SPI_SUCCESS) {
  4016be:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  4016c2:	2302      	movs	r3, #2
  4016c4:	9300      	str	r3, [sp, #0]
  4016c6:	462b      	mov	r3, r5
  4016c8:	212a      	movs	r1, #42	; 0x2a
  4016ca:	2001      	movs	r0, #1
  4016cc:	47c8      	blx	r9
  4016ce:	2801      	cmp	r0, #1
  4016d0:	d0f2      	beq.n	4016b8 <initLDC+0x28>
        	DV_error("Writing individual LDC1614 default configuration failed!");
  4016d2:	4658      	mov	r0, fp
  4016d4:	47d0      	blx	sl
  4016d6:	e7ef      	b.n	4016b8 <initLDC+0x28>
  4016d8:	2500      	movs	r5, #0
	}                 
    
	/* Read back configuration */

	for (i = 0; i < RX_CONFIG_LENGTH; i++) {
    	if (readZBoardMulti(I2C0_COM, LDC1614_ID_ADDR, tx_config_addr[i], rx_data, 2) != SPI_SUCCESS) {
  4016da:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401750 <initLDC+0xc0>
                //2*i, rx_data[0],
                //(2*i)+1, tx_config_value[(2*i)+1],
                //(2*i)+1, rx_data[1]);

    	/* Compare values originally sent and values read from device */
    	if ((tx_config_value[2*i] != rx_data[0]) || (tx_config_value[(2*i)+1] != rx_data[1])) {
  4016de:	f8df a058 	ldr.w	sl, [pc, #88]	; 401738 <initLDC+0xa8>
        	DV_error("Coil board configuration read-back error at index i = %u!", i);
  4016e2:	f8df b070 	ldr.w	fp, [pc, #112]	; 401754 <initLDC+0xc4>
  4016e6:	e00d      	b.n	401704 <initLDC+0x74>
        	DV_error("Reading individual LDC1614 default configuration failed!");
  4016e8:	4814      	ldr	r0, [pc, #80]	; (40173c <initLDC+0xac>)
  4016ea:	4b15      	ldr	r3, [pc, #84]	; (401740 <initLDC+0xb0>)
  4016ec:	4798      	blx	r3
    	}        
	}
}
  4016ee:	b005      	add	sp, #20
  4016f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	DV_error("Coil board configuration read-back error at index i = %u!", i);
  4016f4:	4641      	mov	r1, r8
  4016f6:	4658      	mov	r0, fp
  4016f8:	4b12      	ldr	r3, [pc, #72]	; (401744 <initLDC+0xb4>)
  4016fa:	4798      	blx	r3
  4016fc:	3501      	adds	r5, #1
  4016fe:	3702      	adds	r7, #2
	for (i = 0; i < RX_CONFIG_LENGTH; i++) {
  401700:	42a6      	cmp	r6, r4
  401702:	d0f4      	beq.n	4016ee <initLDC+0x5e>
    	if (readZBoardMulti(I2C0_COM, LDC1614_ID_ADDR, tx_config_addr[i], rx_data, 2) != SPI_SUCCESS) {
  401704:	46a8      	mov	r8, r5
  401706:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  40170a:	2302      	movs	r3, #2
  40170c:	9300      	str	r3, [sp, #0]
  40170e:	ab03      	add	r3, sp, #12
  401710:	212a      	movs	r1, #42	; 0x2a
  401712:	2001      	movs	r0, #1
  401714:	47c8      	blx	r9
  401716:	2801      	cmp	r0, #1
  401718:	d1e6      	bne.n	4016e8 <initLDC+0x58>
    	if ((tx_config_value[2*i] != rx_data[0]) || (tx_config_value[(2*i)+1] != rx_data[1])) {
  40171a:	f81a 3015 	ldrb.w	r3, [sl, r5, lsl #1]
  40171e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401722:	4293      	cmp	r3, r2
  401724:	d1e6      	bne.n	4016f4 <initLDC+0x64>
  401726:	787a      	ldrb	r2, [r7, #1]
  401728:	f89d 300d 	ldrb.w	r3, [sp, #13]
  40172c:	429a      	cmp	r2, r3
  40172e:	d1e1      	bne.n	4016f4 <initLDC+0x64>
  401730:	e7e4      	b.n	4016fc <initLDC+0x6c>
  401732:	bf00      	nop
  401734:	00408188 	.word	0x00408188
  401738:	00408198 	.word	0x00408198
  40173c:	00408100 	.word	0x00408100
  401740:	00402dc1 	.word	0x00402dc1
  401744:	00402cfd 	.word	0x00402cfd
  401748:	00401121 	.word	0x00401121
  40174c:	004080bc 	.word	0x004080bc
  401750:	004011d9 	.word	0x004011d9
  401754:	00408144 	.word	0x00408144

00401758 <calcTelemDataCrc>:
        }
        s_crcTable[dividend] = remainder;
    }
}

uint16_t calcTelemDataCrc(const void* data, int size) {
  401758:	b5f0      	push	{r4, r5, r6, r7, lr}
    static bool initCrc = false;
    if (!initCrc) {
  40175a:	4b1e      	ldr	r3, [pc, #120]	; (4017d4 <calcTelemDataCrc+0x7c>)
  40175c:	781b      	ldrb	r3, [r3, #0]
  40175e:	b193      	cbz	r3, 401786 <calcTelemDataCrc+0x2e>
        crcInit();
        initCrc = true;
    }
    unsigned char* const message = (unsigned char*)data;
    uint16_t remainder = (uint16_t)(INITIAL_REMAINDER);
    for (int byte = 0; byte < size; ++byte) {
  401760:	2900      	cmp	r1, #0
  401762:	dd33      	ble.n	4017cc <calcTelemDataCrc+0x74>
  401764:	4602      	mov	r2, r0
  401766:	4401      	add	r1, r0
  401768:	f64f 70ff 	movw	r0, #65535	; 0xffff
        unsigned char index = (unsigned char)(REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8)));
        remainder = (uint16_t)(s_crcTable[index] ^ (remainder << 8));
  40176c:	4c1a      	ldr	r4, [pc, #104]	; (4017d8 <calcTelemDataCrc+0x80>)
        unsigned char index = (unsigned char)(REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8)));
  40176e:	f812 3b01 	ldrb.w	r3, [r2], #1
        remainder = (uint16_t)(s_crcTable[index] ^ (remainder << 8));
  401772:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
  401776:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  40177a:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  40177e:	b280      	uxth	r0, r0
    for (int byte = 0; byte < size; ++byte) {
  401780:	4291      	cmp	r1, r2
  401782:	d1f4      	bne.n	40176e <calcTelemDataCrc+0x16>
  401784:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401786:	4f14      	ldr	r7, [pc, #80]	; (4017d8 <calcTelemDataCrc+0x80>)
  401788:	1ebd      	subs	r5, r7, #2
  40178a:	f507 77ff 	add.w	r7, r7, #510	; 0x1fe
    if (!initCrc) {
  40178e:	2400      	movs	r4, #0
        remainder = (uint16_t)(dividend << (WIDTH - 8));
  401790:	f04f 0e08 	mov.w	lr, #8
                remainder = (uint16_t)((remainder << 1) ^ POLYNOMIAL);
  401794:	f648 76db 	movw	r6, #36827	; 0x8fdb
  401798:	e006      	b.n	4017a8 <calcTelemDataCrc+0x50>
        s_crcTable[dividend] = remainder;
  40179a:	f825 3f02 	strh.w	r3, [r5, #2]!
  40179e:	f504 7480 	add.w	r4, r4, #256	; 0x100
  4017a2:	b2a4      	uxth	r4, r4
    for (int dividend = 0; dividend < 256; ++dividend) {
  4017a4:	42bd      	cmp	r5, r7
  4017a6:	d00d      	beq.n	4017c4 <calcTelemDataCrc+0x6c>
        remainder = (uint16_t)(dividend << (WIDTH - 8));
  4017a8:	4623      	mov	r3, r4
  4017aa:	4672      	mov	r2, lr
            if (remainder & TOPBIT) {
  4017ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                remainder = (uint16_t)((remainder << 1) ^ POLYNOMIAL);
  4017b0:	bf14      	ite	ne
  4017b2:	ea86 0343 	eorne.w	r3, r6, r3, lsl #1
                remainder = (uint16_t)(remainder << 1);
  4017b6:	005b      	lsleq	r3, r3, #1
  4017b8:	b29b      	uxth	r3, r3
  4017ba:	3a01      	subs	r2, #1
        for (bit = 8; bit > 0; --bit) {
  4017bc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  4017c0:	d1f4      	bne.n	4017ac <calcTelemDataCrc+0x54>
  4017c2:	e7ea      	b.n	40179a <calcTelemDataCrc+0x42>
        initCrc = true;
  4017c4:	2201      	movs	r2, #1
  4017c6:	4b03      	ldr	r3, [pc, #12]	; (4017d4 <calcTelemDataCrc+0x7c>)
  4017c8:	701a      	strb	r2, [r3, #0]
  4017ca:	e7c9      	b.n	401760 <calcTelemDataCrc+0x8>
    uint16_t remainder = (uint16_t)(INITIAL_REMAINDER);
  4017cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    }
    return (uint16_t)(REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
}
  4017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017d2:	bf00      	nop
  4017d4:	20401330 	.word	0x20401330
  4017d8:	20401334 	.word	0x20401334

004017dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4017dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017e0:	4604      	mov	r4, r0
  4017e2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4017e4:	4b0e      	ldr	r3, [pc, #56]	; (401820 <pio_handler_process+0x44>)
  4017e6:	4798      	blx	r3
  4017e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4017ea:	4620      	mov	r0, r4
  4017ec:	4b0d      	ldr	r3, [pc, #52]	; (401824 <pio_handler_process+0x48>)
  4017ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4017f0:	4005      	ands	r5, r0
  4017f2:	d013      	beq.n	40181c <pio_handler_process+0x40>
  4017f4:	4c0c      	ldr	r4, [pc, #48]	; (401828 <pio_handler_process+0x4c>)
  4017f6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4017fa:	e003      	b.n	401804 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4017fc:	42b4      	cmp	r4, r6
  4017fe:	d00d      	beq.n	40181c <pio_handler_process+0x40>
  401800:	3410      	adds	r4, #16
		while (status != 0) {
  401802:	b15d      	cbz	r5, 40181c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401804:	6820      	ldr	r0, [r4, #0]
  401806:	4540      	cmp	r0, r8
  401808:	d1f8      	bne.n	4017fc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40180a:	6861      	ldr	r1, [r4, #4]
  40180c:	4229      	tst	r1, r5
  40180e:	d0f5      	beq.n	4017fc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401810:	68e3      	ldr	r3, [r4, #12]
  401812:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401814:	6863      	ldr	r3, [r4, #4]
  401816:	ea25 0503 	bic.w	r5, r5, r3
  40181a:	e7ef      	b.n	4017fc <pio_handler_process+0x20>
  40181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401820:	0040195d 	.word	0x0040195d
  401824:	00401961 	.word	0x00401961
  401828:	20401534 	.word	0x20401534

0040182c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40182c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40182e:	210a      	movs	r1, #10
  401830:	4801      	ldr	r0, [pc, #4]	; (401838 <PIOA_Handler+0xc>)
  401832:	4b02      	ldr	r3, [pc, #8]	; (40183c <PIOA_Handler+0x10>)
  401834:	4798      	blx	r3
  401836:	bd08      	pop	{r3, pc}
  401838:	400e0e00 	.word	0x400e0e00
  40183c:	004017dd 	.word	0x004017dd

00401840 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401840:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401842:	210b      	movs	r1, #11
  401844:	4801      	ldr	r0, [pc, #4]	; (40184c <PIOB_Handler+0xc>)
  401846:	4b02      	ldr	r3, [pc, #8]	; (401850 <PIOB_Handler+0x10>)
  401848:	4798      	blx	r3
  40184a:	bd08      	pop	{r3, pc}
  40184c:	400e1000 	.word	0x400e1000
  401850:	004017dd 	.word	0x004017dd

00401854 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401854:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401856:	2110      	movs	r1, #16
  401858:	4801      	ldr	r0, [pc, #4]	; (401860 <PIOD_Handler+0xc>)
  40185a:	4b02      	ldr	r3, [pc, #8]	; (401864 <PIOD_Handler+0x10>)
  40185c:	4798      	blx	r3
  40185e:	bd08      	pop	{r3, pc}
  401860:	400e1400 	.word	0x400e1400
  401864:	004017dd 	.word	0x004017dd

00401868 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  401868:	6940      	ldr	r0, [r0, #20]
}
  40186a:	4770      	bx	lr

0040186c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40186c:	6943      	ldr	r3, [r0, #20]
  40186e:	f013 0f02 	tst.w	r3, #2
  401872:	d004      	beq.n	40187e <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401874:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401878:	61c1      	str	r1, [r0, #28]
	return 0;
  40187a:	2000      	movs	r0, #0
  40187c:	4770      	bx	lr
		return 1;
  40187e:	2001      	movs	r0, #1
}
  401880:	4770      	bx	lr

00401882 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401882:	6943      	ldr	r3, [r0, #20]
  401884:	f013 0f01 	tst.w	r3, #1
  401888:	d005      	beq.n	401896 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40188a:	6983      	ldr	r3, [r0, #24]
  40188c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401890:	600b      	str	r3, [r1, #0]

	return 0;
  401892:	2000      	movs	r0, #0
  401894:	4770      	bx	lr
		return 1;
  401896:	2001      	movs	r0, #1
}
  401898:	4770      	bx	lr
	...

0040189c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40189c:	3801      	subs	r0, #1
  40189e:	2802      	cmp	r0, #2
  4018a0:	d815      	bhi.n	4018ce <_write+0x32>
{
  4018a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018a6:	460e      	mov	r6, r1
  4018a8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4018aa:	b19a      	cbz	r2, 4018d4 <_write+0x38>
  4018ac:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4018ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4018e8 <_write+0x4c>
  4018b2:	4f0c      	ldr	r7, [pc, #48]	; (4018e4 <_write+0x48>)
  4018b4:	f8d8 0000 	ldr.w	r0, [r8]
  4018b8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4018bc:	683b      	ldr	r3, [r7, #0]
  4018be:	4798      	blx	r3
  4018c0:	2800      	cmp	r0, #0
  4018c2:	db0a      	blt.n	4018da <_write+0x3e>
  4018c4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4018c6:	3c01      	subs	r4, #1
  4018c8:	d1f4      	bne.n	4018b4 <_write+0x18>
  4018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4018ce:	f04f 30ff 	mov.w	r0, #4294967295
  4018d2:	4770      	bx	lr
	for (; len != 0; --len) {
  4018d4:	4610      	mov	r0, r2
  4018d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4018da:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4018de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018e2:	bf00      	nop
  4018e4:	20401660 	.word	0x20401660
  4018e8:	20401664 	.word	0x20401664

004018ec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4018ec:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4018ee:	4810      	ldr	r0, [pc, #64]	; (401930 <sysclk_init+0x44>)
  4018f0:	4b10      	ldr	r3, [pc, #64]	; (401934 <sysclk_init+0x48>)
  4018f2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4018f4:	213e      	movs	r1, #62	; 0x3e
  4018f6:	2000      	movs	r0, #0
  4018f8:	4b0f      	ldr	r3, [pc, #60]	; (401938 <sysclk_init+0x4c>)
  4018fa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4018fc:	4c0f      	ldr	r4, [pc, #60]	; (40193c <sysclk_init+0x50>)
  4018fe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401900:	2800      	cmp	r0, #0
  401902:	d0fc      	beq.n	4018fe <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401904:	4b0e      	ldr	r3, [pc, #56]	; (401940 <sysclk_init+0x54>)
  401906:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401908:	4a0e      	ldr	r2, [pc, #56]	; (401944 <sysclk_init+0x58>)
  40190a:	4b0f      	ldr	r3, [pc, #60]	; (401948 <sysclk_init+0x5c>)
  40190c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40190e:	4c0f      	ldr	r4, [pc, #60]	; (40194c <sysclk_init+0x60>)
  401910:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401912:	2800      	cmp	r0, #0
  401914:	d0fc      	beq.n	401910 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401916:	2002      	movs	r0, #2
  401918:	4b0d      	ldr	r3, [pc, #52]	; (401950 <sysclk_init+0x64>)
  40191a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40191c:	2000      	movs	r0, #0
  40191e:	4b0d      	ldr	r3, [pc, #52]	; (401954 <sysclk_init+0x68>)
  401920:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401922:	4b0d      	ldr	r3, [pc, #52]	; (401958 <sysclk_init+0x6c>)
  401924:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401926:	4802      	ldr	r0, [pc, #8]	; (401930 <sysclk_init+0x44>)
  401928:	4b02      	ldr	r3, [pc, #8]	; (401934 <sysclk_init+0x48>)
  40192a:	4798      	blx	r3
  40192c:	bd10      	pop	{r4, pc}
  40192e:	bf00      	nop
  401930:	11e1a300 	.word	0x11e1a300
  401934:	00401f5d 	.word	0x00401f5d
  401938:	00401a01 	.word	0x00401a01
  40193c:	00401a55 	.word	0x00401a55
  401940:	00401a65 	.word	0x00401a65
  401944:	20183f01 	.word	0x20183f01
  401948:	400e0600 	.word	0x400e0600
  40194c:	00401a75 	.word	0x00401a75
  401950:	00401965 	.word	0x00401965
  401954:	0040199d 	.word	0x0040199d
  401958:	00401e51 	.word	0x00401e51

0040195c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40195c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40195e:	4770      	bx	lr

00401960 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401960:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401962:	4770      	bx	lr

00401964 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401964:	2803      	cmp	r0, #3
  401966:	d011      	beq.n	40198c <pmc_mck_set_division+0x28>
  401968:	2804      	cmp	r0, #4
  40196a:	d012      	beq.n	401992 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40196c:	2802      	cmp	r0, #2
  40196e:	bf0c      	ite	eq
  401970:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401974:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401976:	4a08      	ldr	r2, [pc, #32]	; (401998 <pmc_mck_set_division+0x34>)
  401978:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40197a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40197e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401980:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401982:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401984:	f013 0f08 	tst.w	r3, #8
  401988:	d0fb      	beq.n	401982 <pmc_mck_set_division+0x1e>
}
  40198a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40198c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401990:	e7f1      	b.n	401976 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401992:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401996:	e7ee      	b.n	401976 <pmc_mck_set_division+0x12>
  401998:	400e0600 	.word	0x400e0600

0040199c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40199c:	4a17      	ldr	r2, [pc, #92]	; (4019fc <pmc_switch_mck_to_pllack+0x60>)
  40199e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4019a4:	4318      	orrs	r0, r3
  4019a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019aa:	f013 0f08 	tst.w	r3, #8
  4019ae:	d10a      	bne.n	4019c6 <pmc_switch_mck_to_pllack+0x2a>
  4019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4019b4:	4911      	ldr	r1, [pc, #68]	; (4019fc <pmc_switch_mck_to_pllack+0x60>)
  4019b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019b8:	f012 0f08 	tst.w	r2, #8
  4019bc:	d103      	bne.n	4019c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019be:	3b01      	subs	r3, #1
  4019c0:	d1f9      	bne.n	4019b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4019c2:	2001      	movs	r0, #1
  4019c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4019c6:	4a0d      	ldr	r2, [pc, #52]	; (4019fc <pmc_switch_mck_to_pllack+0x60>)
  4019c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019ca:	f023 0303 	bic.w	r3, r3, #3
  4019ce:	f043 0302 	orr.w	r3, r3, #2
  4019d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019d6:	f013 0f08 	tst.w	r3, #8
  4019da:	d10a      	bne.n	4019f2 <pmc_switch_mck_to_pllack+0x56>
  4019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4019e0:	4906      	ldr	r1, [pc, #24]	; (4019fc <pmc_switch_mck_to_pllack+0x60>)
  4019e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019e4:	f012 0f08 	tst.w	r2, #8
  4019e8:	d105      	bne.n	4019f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019ea:	3b01      	subs	r3, #1
  4019ec:	d1f9      	bne.n	4019e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4019ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019f0:	4770      	bx	lr
	return 0;
  4019f2:	2000      	movs	r0, #0
  4019f4:	4770      	bx	lr
  4019f6:	2000      	movs	r0, #0
  4019f8:	4770      	bx	lr
  4019fa:	bf00      	nop
  4019fc:	400e0600 	.word	0x400e0600

00401a00 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401a00:	b9a0      	cbnz	r0, 401a2c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a02:	480e      	ldr	r0, [pc, #56]	; (401a3c <pmc_switch_mainck_to_xtal+0x3c>)
  401a04:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401a06:	0209      	lsls	r1, r1, #8
  401a08:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401a0a:	4a0d      	ldr	r2, [pc, #52]	; (401a40 <pmc_switch_mainck_to_xtal+0x40>)
  401a0c:	401a      	ands	r2, r3
  401a0e:	4b0d      	ldr	r3, [pc, #52]	; (401a44 <pmc_switch_mainck_to_xtal+0x44>)
  401a10:	4313      	orrs	r3, r2
  401a12:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a14:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401a16:	4602      	mov	r2, r0
  401a18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a1a:	f013 0f01 	tst.w	r3, #1
  401a1e:	d0fb      	beq.n	401a18 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401a20:	4a06      	ldr	r2, [pc, #24]	; (401a3c <pmc_switch_mainck_to_xtal+0x3c>)
  401a22:	6a11      	ldr	r1, [r2, #32]
  401a24:	4b08      	ldr	r3, [pc, #32]	; (401a48 <pmc_switch_mainck_to_xtal+0x48>)
  401a26:	430b      	orrs	r3, r1
  401a28:	6213      	str	r3, [r2, #32]
  401a2a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a2c:	4903      	ldr	r1, [pc, #12]	; (401a3c <pmc_switch_mainck_to_xtal+0x3c>)
  401a2e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401a30:	4a06      	ldr	r2, [pc, #24]	; (401a4c <pmc_switch_mainck_to_xtal+0x4c>)
  401a32:	401a      	ands	r2, r3
  401a34:	4b06      	ldr	r3, [pc, #24]	; (401a50 <pmc_switch_mainck_to_xtal+0x50>)
  401a36:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a38:	620b      	str	r3, [r1, #32]
  401a3a:	4770      	bx	lr
  401a3c:	400e0600 	.word	0x400e0600
  401a40:	ffc8fffc 	.word	0xffc8fffc
  401a44:	00370001 	.word	0x00370001
  401a48:	01370000 	.word	0x01370000
  401a4c:	fec8fffc 	.word	0xfec8fffc
  401a50:	01370002 	.word	0x01370002

00401a54 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a54:	4b02      	ldr	r3, [pc, #8]	; (401a60 <pmc_osc_is_ready_mainck+0xc>)
  401a56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a58:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	400e0600 	.word	0x400e0600

00401a64 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a68:	4b01      	ldr	r3, [pc, #4]	; (401a70 <pmc_disable_pllack+0xc>)
  401a6a:	629a      	str	r2, [r3, #40]	; 0x28
  401a6c:	4770      	bx	lr
  401a6e:	bf00      	nop
  401a70:	400e0600 	.word	0x400e0600

00401a74 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a74:	4b02      	ldr	r3, [pc, #8]	; (401a80 <pmc_is_locked_pllack+0xc>)
  401a76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a78:	f000 0002 	and.w	r0, r0, #2
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	400e0600 	.word	0x400e0600

00401a84 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401a84:	283f      	cmp	r0, #63	; 0x3f
  401a86:	d81e      	bhi.n	401ac6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a88:	281f      	cmp	r0, #31
  401a8a:	d80c      	bhi.n	401aa6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a8c:	4b11      	ldr	r3, [pc, #68]	; (401ad4 <pmc_enable_periph_clk+0x50>)
  401a8e:	699a      	ldr	r2, [r3, #24]
  401a90:	2301      	movs	r3, #1
  401a92:	4083      	lsls	r3, r0
  401a94:	4393      	bics	r3, r2
  401a96:	d018      	beq.n	401aca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a98:	2301      	movs	r3, #1
  401a9a:	fa03 f000 	lsl.w	r0, r3, r0
  401a9e:	4b0d      	ldr	r3, [pc, #52]	; (401ad4 <pmc_enable_periph_clk+0x50>)
  401aa0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401aa2:	2000      	movs	r0, #0
  401aa4:	4770      	bx	lr
		ul_id -= 32;
  401aa6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401aa8:	4b0a      	ldr	r3, [pc, #40]	; (401ad4 <pmc_enable_periph_clk+0x50>)
  401aaa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401aae:	2301      	movs	r3, #1
  401ab0:	4083      	lsls	r3, r0
  401ab2:	4393      	bics	r3, r2
  401ab4:	d00b      	beq.n	401ace <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401ab6:	2301      	movs	r3, #1
  401ab8:	fa03 f000 	lsl.w	r0, r3, r0
  401abc:	4b05      	ldr	r3, [pc, #20]	; (401ad4 <pmc_enable_periph_clk+0x50>)
  401abe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401ac2:	2000      	movs	r0, #0
  401ac4:	4770      	bx	lr
		return 1;
  401ac6:	2001      	movs	r0, #1
  401ac8:	4770      	bx	lr
	return 0;
  401aca:	2000      	movs	r0, #0
  401acc:	4770      	bx	lr
  401ace:	2000      	movs	r0, #0
}
  401ad0:	4770      	bx	lr
  401ad2:	bf00      	nop
  401ad4:	400e0600 	.word	0x400e0600

00401ad8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401ad8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401ada:	0189      	lsls	r1, r1, #6
  401adc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401ade:	2402      	movs	r4, #2
  401ae0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401ae2:	f04f 31ff 	mov.w	r1, #4294967295
  401ae6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401ae8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401aea:	605a      	str	r2, [r3, #4]
}
  401aec:	f85d 4b04 	ldr.w	r4, [sp], #4
  401af0:	4770      	bx	lr

00401af2 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401af2:	0189      	lsls	r1, r1, #6
  401af4:	2305      	movs	r3, #5
  401af6:	5043      	str	r3, [r0, r1]
  401af8:	4770      	bx	lr

00401afa <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401afa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401afe:	61ca      	str	r2, [r1, #28]
  401b00:	4770      	bx	lr

00401b02 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401b02:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  401b06:	624a      	str	r2, [r1, #36]	; 0x24
  401b08:	4770      	bx	lr

00401b0a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401b0a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  401b0e:	6a08      	ldr	r0, [r1, #32]
}
  401b10:	4770      	bx	lr

00401b12 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401b12:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401b14:	23ac      	movs	r3, #172	; 0xac
  401b16:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401b18:	680b      	ldr	r3, [r1, #0]
  401b1a:	684a      	ldr	r2, [r1, #4]
  401b1c:	fbb3 f3f2 	udiv	r3, r3, r2
  401b20:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401b22:	1e5c      	subs	r4, r3, #1
  401b24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401b28:	4294      	cmp	r4, r2
  401b2a:	d808      	bhi.n	401b3e <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  401b2c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401b2e:	688b      	ldr	r3, [r1, #8]
  401b30:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401b32:	2350      	movs	r3, #80	; 0x50
  401b34:	6003      	str	r3, [r0, #0]

	return 0;
  401b36:	2000      	movs	r0, #0
}
  401b38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b3c:	4770      	bx	lr
		return 1;
  401b3e:	2001      	movs	r0, #1
  401b40:	e7fa      	b.n	401b38 <uart_init+0x26>

00401b42 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401b42:	6943      	ldr	r3, [r0, #20]
  401b44:	f013 0f02 	tst.w	r3, #2
  401b48:	d002      	beq.n	401b50 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401b4a:	61c1      	str	r1, [r0, #28]
	return 0;
  401b4c:	2000      	movs	r0, #0
  401b4e:	4770      	bx	lr
		return 1;
  401b50:	2001      	movs	r0, #1
}
  401b52:	4770      	bx	lr

00401b54 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401b54:	6943      	ldr	r3, [r0, #20]
  401b56:	f013 0f01 	tst.w	r3, #1
  401b5a:	d003      	beq.n	401b64 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401b5c:	6983      	ldr	r3, [r0, #24]
  401b5e:	700b      	strb	r3, [r1, #0]
	return 0;
  401b60:	2000      	movs	r0, #0
  401b62:	4770      	bx	lr
		return 1;
  401b64:	2001      	movs	r0, #1
}
  401b66:	4770      	bx	lr

00401b68 <board_init>:
		ioport_set_pin_sense_mode(pin, sense); \
	} \
	while (0)

void board_init(void)
{
  401b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Disable watchdog for now */
    WDT->WDT_MR = WDT_MR_WDDIS;
  401b6a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  401b6e:	4b81      	ldr	r3, [pc, #516]	; (401d74 <board_init+0x20c>)
  401b70:	605d      	str	r5, [r3, #4]
  401b72:	200a      	movs	r0, #10
  401b74:	4c80      	ldr	r4, [pc, #512]	; (401d78 <board_init+0x210>)
  401b76:	47a0      	blx	r4
  401b78:	200b      	movs	r0, #11
  401b7a:	47a0      	blx	r4
  401b7c:	2010      	movs	r0, #16
  401b7e:	47a0      	blx	r4
		base->PIO_PUDR = mask;
  401b80:	4a7e      	ldr	r2, [pc, #504]	; (401d7c <board_init+0x214>)
  401b82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401b86:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b8c:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401b8e:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401b94:	6f11      	ldr	r1, [r2, #112]	; 0x70
  401b96:	4319      	orrs	r1, r3
  401b98:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b9a:	6f51      	ldr	r1, [r2, #116]	; 0x74
  401b9c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  401ba0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401ba2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  401ba4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  401ba8:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401baa:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bae:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bb0:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bb2:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401bb6:	6f13      	ldr	r3, [r2, #112]	; 0x70
  401bb8:	4323      	orrs	r3, r4
  401bba:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401bbc:	6f53      	ldr	r3, [r2, #116]	; 0x74
  401bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  401bc2:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401bc4:	6054      	str	r4, [r2, #4]
		base->PIO_PUDR = mask;
  401bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401bca:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bd0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bd2:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401bd8:	6f11      	ldr	r1, [r2, #112]	; 0x70
  401bda:	4319      	orrs	r1, r3
  401bdc:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401bde:	6f51      	ldr	r1, [r2, #116]	; 0x74
  401be0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  401be4:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401be6:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  401be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  401bec:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bf2:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bf4:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401bfa:	6f11      	ldr	r1, [r2, #112]	; 0x70
  401bfc:	4319      	orrs	r1, r3
  401bfe:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401c00:	6f51      	ldr	r1, [r2, #116]	; 0x74
  401c02:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  401c06:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c08:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  401c0a:	4b5d      	ldr	r3, [pc, #372]	; (401d80 <board_init+0x218>)
  401c0c:	2102      	movs	r1, #2
  401c0e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c10:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c14:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c16:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c18:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c1e:	f020 0002 	bic.w	r0, r0, #2
  401c22:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c24:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401c26:	4308      	orrs	r0, r1
  401c28:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c2a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401c2c:	2101      	movs	r1, #1
  401c2e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c30:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c34:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c36:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c38:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c3e:	f020 0001 	bic.w	r0, r0, #1
  401c42:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c44:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401c46:	4308      	orrs	r0, r1
  401c48:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c4a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  401c50:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c52:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c56:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c58:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c5a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c5e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401c60:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  401c64:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c66:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401c68:	4306      	orrs	r6, r0
  401c6a:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c6c:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401c6e:	2004      	movs	r0, #4
  401c70:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c72:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c76:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c78:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c7a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c7e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401c80:	f026 0604 	bic.w	r6, r6, #4
  401c84:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c86:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401c88:	4306      	orrs	r6, r0
  401c8a:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c8c:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401c8e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  401c92:	2008      	movs	r0, #8
  401c94:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c96:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c9a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c9c:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c9e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401ca2:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401ca4:	f026 0608 	bic.w	r6, r6, #8
  401ca8:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401caa:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401cac:	f026 0608 	bic.w	r6, r6, #8
  401cb0:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cb2:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401cb4:	2010      	movs	r0, #16
  401cb6:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cb8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cbc:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cbe:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cc0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cc4:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401cc6:	f026 0610 	bic.w	r6, r6, #16
  401cca:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401ccc:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401cce:	f026 0610 	bic.w	r6, r6, #16
  401cd2:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cd4:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401cd6:	f44f 7000 	mov.w	r0, #512	; 0x200
  401cda:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cdc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ce0:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ce2:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ce4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401ce8:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401cea:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  401cee:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401cf0:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401cf2:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  401cf6:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cf8:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401cfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401cfe:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d00:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d04:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d06:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d08:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d0c:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  401d0e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  401d12:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d14:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  401d16:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  401d1a:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d1c:	6058      	str	r0, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d1e:	f44f 7780 	mov.w	r7, #256	; 0x100
  401d22:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d24:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d28:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401d2c:	6116      	str	r6, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d2e:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d32:	631f      	str	r7, [r3, #48]	; 0x30
  401d34:	6316      	str	r6, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d36:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  401d3a:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d3c:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d40:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d42:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401d46:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d48:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d4c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d4e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d50:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401d54:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401d56:	430c      	orrs	r4, r1
  401d58:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d5a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401d5c:	f024 0401 	bic.w	r4, r4, #1
  401d60:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d62:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d64:	6115      	str	r5, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d66:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d6a:	6315      	str	r5, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d6c:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d6e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  401d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d74:	400e1850 	.word	0x400e1850
  401d78:	00401a85 	.word	0x00401a85
  401d7c:	400e1400 	.word	0x400e1400
  401d80:	400e1000 	.word	0x400e1000

00401d84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d84:	e7fe      	b.n	401d84 <Dummy_Handler>
	...

00401d88 <Reset_Handler>:
{
  401d88:	b500      	push	{lr}
  401d8a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401d8c:	4b25      	ldr	r3, [pc, #148]	; (401e24 <Reset_Handler+0x9c>)
  401d8e:	4a26      	ldr	r2, [pc, #152]	; (401e28 <Reset_Handler+0xa0>)
  401d90:	429a      	cmp	r2, r3
  401d92:	d010      	beq.n	401db6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401d94:	4b25      	ldr	r3, [pc, #148]	; (401e2c <Reset_Handler+0xa4>)
  401d96:	4a23      	ldr	r2, [pc, #140]	; (401e24 <Reset_Handler+0x9c>)
  401d98:	429a      	cmp	r2, r3
  401d9a:	d20c      	bcs.n	401db6 <Reset_Handler+0x2e>
  401d9c:	3b01      	subs	r3, #1
  401d9e:	1a9b      	subs	r3, r3, r2
  401da0:	f023 0303 	bic.w	r3, r3, #3
  401da4:	3304      	adds	r3, #4
  401da6:	4413      	add	r3, r2
  401da8:	491f      	ldr	r1, [pc, #124]	; (401e28 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401daa:	f851 0b04 	ldr.w	r0, [r1], #4
  401dae:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401db2:	429a      	cmp	r2, r3
  401db4:	d1f9      	bne.n	401daa <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401db6:	4b1e      	ldr	r3, [pc, #120]	; (401e30 <Reset_Handler+0xa8>)
  401db8:	4a1e      	ldr	r2, [pc, #120]	; (401e34 <Reset_Handler+0xac>)
  401dba:	429a      	cmp	r2, r3
  401dbc:	d20a      	bcs.n	401dd4 <Reset_Handler+0x4c>
  401dbe:	3b01      	subs	r3, #1
  401dc0:	1a9b      	subs	r3, r3, r2
  401dc2:	f023 0303 	bic.w	r3, r3, #3
  401dc6:	3304      	adds	r3, #4
  401dc8:	4413      	add	r3, r2
                *pDest++ = 0;
  401dca:	2100      	movs	r1, #0
  401dcc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401dd0:	4293      	cmp	r3, r2
  401dd2:	d1fb      	bne.n	401dcc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401dd4:	4a18      	ldr	r2, [pc, #96]	; (401e38 <Reset_Handler+0xb0>)
  401dd6:	4b19      	ldr	r3, [pc, #100]	; (401e3c <Reset_Handler+0xb4>)
  401dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ddc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401dde:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401de2:	fab3 f383 	clz	r3, r3
  401de6:	095b      	lsrs	r3, r3, #5
  401de8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401dea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401dec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401df0:	2200      	movs	r2, #0
  401df2:	4b13      	ldr	r3, [pc, #76]	; (401e40 <Reset_Handler+0xb8>)
  401df4:	701a      	strb	r2, [r3, #0]
	return flags;
  401df6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401df8:	4a12      	ldr	r2, [pc, #72]	; (401e44 <Reset_Handler+0xbc>)
  401dfa:	6813      	ldr	r3, [r2, #0]
  401dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401e00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401e06:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401e0a:	b129      	cbz	r1, 401e18 <Reset_Handler+0x90>
		cpu_irq_enable();
  401e0c:	2201      	movs	r2, #1
  401e0e:	4b0c      	ldr	r3, [pc, #48]	; (401e40 <Reset_Handler+0xb8>)
  401e10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401e12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e16:	b662      	cpsie	i
        __libc_init_array();
  401e18:	4b0b      	ldr	r3, [pc, #44]	; (401e48 <Reset_Handler+0xc0>)
  401e1a:	4798      	blx	r3
        main();
  401e1c:	4b0b      	ldr	r3, [pc, #44]	; (401e4c <Reset_Handler+0xc4>)
  401e1e:	4798      	blx	r3
  401e20:	e7fe      	b.n	401e20 <Reset_Handler+0x98>
  401e22:	bf00      	nop
  401e24:	20400000 	.word	0x20400000
  401e28:	0040846c 	.word	0x0040846c
  401e2c:	204009c8 	.word	0x204009c8
  401e30:	20401690 	.word	0x20401690
  401e34:	204009c8 	.word	0x204009c8
  401e38:	e000ed00 	.word	0xe000ed00
  401e3c:	00400000 	.word	0x00400000
  401e40:	20400010 	.word	0x20400010
  401e44:	e000ed88 	.word	0xe000ed88
  401e48:	00402add 	.word	0x00402add
  401e4c:	00400639 	.word	0x00400639

00401e50 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401e50:	4b3b      	ldr	r3, [pc, #236]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e54:	f003 0303 	and.w	r3, r3, #3
  401e58:	2b01      	cmp	r3, #1
  401e5a:	d01d      	beq.n	401e98 <SystemCoreClockUpdate+0x48>
  401e5c:	b183      	cbz	r3, 401e80 <SystemCoreClockUpdate+0x30>
  401e5e:	2b02      	cmp	r3, #2
  401e60:	d036      	beq.n	401ed0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401e62:	4b37      	ldr	r3, [pc, #220]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e6a:	2b70      	cmp	r3, #112	; 0x70
  401e6c:	d05f      	beq.n	401f2e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401e6e:	4b34      	ldr	r3, [pc, #208]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e72:	4934      	ldr	r1, [pc, #208]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401e74:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401e78:	680b      	ldr	r3, [r1, #0]
  401e7a:	40d3      	lsrs	r3, r2
  401e7c:	600b      	str	r3, [r1, #0]
  401e7e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401e80:	4b31      	ldr	r3, [pc, #196]	; (401f48 <SystemCoreClockUpdate+0xf8>)
  401e82:	695b      	ldr	r3, [r3, #20]
  401e84:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401e88:	bf14      	ite	ne
  401e8a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401e8e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401e92:	4b2c      	ldr	r3, [pc, #176]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401e94:	601a      	str	r2, [r3, #0]
  401e96:	e7e4      	b.n	401e62 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401e98:	4b29      	ldr	r3, [pc, #164]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401e9a:	6a1b      	ldr	r3, [r3, #32]
  401e9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ea0:	d003      	beq.n	401eaa <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401ea2:	4a2a      	ldr	r2, [pc, #168]	; (401f4c <SystemCoreClockUpdate+0xfc>)
  401ea4:	4b27      	ldr	r3, [pc, #156]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401ea6:	601a      	str	r2, [r3, #0]
  401ea8:	e7db      	b.n	401e62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401eaa:	4a29      	ldr	r2, [pc, #164]	; (401f50 <SystemCoreClockUpdate+0x100>)
  401eac:	4b25      	ldr	r3, [pc, #148]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401eae:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401eb0:	4b23      	ldr	r3, [pc, #140]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401eb2:	6a1b      	ldr	r3, [r3, #32]
  401eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401eb8:	2b10      	cmp	r3, #16
  401eba:	d005      	beq.n	401ec8 <SystemCoreClockUpdate+0x78>
  401ebc:	2b20      	cmp	r3, #32
  401ebe:	d1d0      	bne.n	401e62 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401ec0:	4a22      	ldr	r2, [pc, #136]	; (401f4c <SystemCoreClockUpdate+0xfc>)
  401ec2:	4b20      	ldr	r3, [pc, #128]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401ec4:	601a      	str	r2, [r3, #0]
          break;
  401ec6:	e7cc      	b.n	401e62 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401ec8:	4a22      	ldr	r2, [pc, #136]	; (401f54 <SystemCoreClockUpdate+0x104>)
  401eca:	4b1e      	ldr	r3, [pc, #120]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401ecc:	601a      	str	r2, [r3, #0]
          break;
  401ece:	e7c8      	b.n	401e62 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401ed0:	4b1b      	ldr	r3, [pc, #108]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401ed2:	6a1b      	ldr	r3, [r3, #32]
  401ed4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ed8:	d016      	beq.n	401f08 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401eda:	4a1c      	ldr	r2, [pc, #112]	; (401f4c <SystemCoreClockUpdate+0xfc>)
  401edc:	4b19      	ldr	r3, [pc, #100]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401ede:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401ee0:	4b17      	ldr	r3, [pc, #92]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ee4:	f003 0303 	and.w	r3, r3, #3
  401ee8:	2b02      	cmp	r3, #2
  401eea:	d1ba      	bne.n	401e62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401eec:	4a14      	ldr	r2, [pc, #80]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401eee:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401ef0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401ef2:	4814      	ldr	r0, [pc, #80]	; (401f44 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401ef4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401ef8:	6803      	ldr	r3, [r0, #0]
  401efa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401efe:	b2d2      	uxtb	r2, r2
  401f00:	fbb3 f3f2 	udiv	r3, r3, r2
  401f04:	6003      	str	r3, [r0, #0]
  401f06:	e7ac      	b.n	401e62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f08:	4a11      	ldr	r2, [pc, #68]	; (401f50 <SystemCoreClockUpdate+0x100>)
  401f0a:	4b0e      	ldr	r3, [pc, #56]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401f0c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f0e:	4b0c      	ldr	r3, [pc, #48]	; (401f40 <SystemCoreClockUpdate+0xf0>)
  401f10:	6a1b      	ldr	r3, [r3, #32]
  401f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f16:	2b10      	cmp	r3, #16
  401f18:	d005      	beq.n	401f26 <SystemCoreClockUpdate+0xd6>
  401f1a:	2b20      	cmp	r3, #32
  401f1c:	d1e0      	bne.n	401ee0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401f1e:	4a0b      	ldr	r2, [pc, #44]	; (401f4c <SystemCoreClockUpdate+0xfc>)
  401f20:	4b08      	ldr	r3, [pc, #32]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401f22:	601a      	str	r2, [r3, #0]
          break;
  401f24:	e7dc      	b.n	401ee0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401f26:	4a0b      	ldr	r2, [pc, #44]	; (401f54 <SystemCoreClockUpdate+0x104>)
  401f28:	4b06      	ldr	r3, [pc, #24]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401f2a:	601a      	str	r2, [r3, #0]
          break;
  401f2c:	e7d8      	b.n	401ee0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401f2e:	4a05      	ldr	r2, [pc, #20]	; (401f44 <SystemCoreClockUpdate+0xf4>)
  401f30:	6813      	ldr	r3, [r2, #0]
  401f32:	4909      	ldr	r1, [pc, #36]	; (401f58 <SystemCoreClockUpdate+0x108>)
  401f34:	fba1 1303 	umull	r1, r3, r1, r3
  401f38:	085b      	lsrs	r3, r3, #1
  401f3a:	6013      	str	r3, [r2, #0]
  401f3c:	4770      	bx	lr
  401f3e:	bf00      	nop
  401f40:	400e0600 	.word	0x400e0600
  401f44:	20400014 	.word	0x20400014
  401f48:	400e1810 	.word	0x400e1810
  401f4c:	00b71b00 	.word	0x00b71b00
  401f50:	003d0900 	.word	0x003d0900
  401f54:	007a1200 	.word	0x007a1200
  401f58:	aaaaaaab 	.word	0xaaaaaaab

00401f5c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401f5c:	4b16      	ldr	r3, [pc, #88]	; (401fb8 <system_init_flash+0x5c>)
  401f5e:	4298      	cmp	r0, r3
  401f60:	d913      	bls.n	401f8a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401f62:	4b16      	ldr	r3, [pc, #88]	; (401fbc <system_init_flash+0x60>)
  401f64:	4298      	cmp	r0, r3
  401f66:	d915      	bls.n	401f94 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401f68:	4b15      	ldr	r3, [pc, #84]	; (401fc0 <system_init_flash+0x64>)
  401f6a:	4298      	cmp	r0, r3
  401f6c:	d916      	bls.n	401f9c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401f6e:	4b15      	ldr	r3, [pc, #84]	; (401fc4 <system_init_flash+0x68>)
  401f70:	4298      	cmp	r0, r3
  401f72:	d917      	bls.n	401fa4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401f74:	4b14      	ldr	r3, [pc, #80]	; (401fc8 <system_init_flash+0x6c>)
  401f76:	4298      	cmp	r0, r3
  401f78:	d918      	bls.n	401fac <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401f7a:	4b14      	ldr	r3, [pc, #80]	; (401fcc <system_init_flash+0x70>)
  401f7c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f7e:	bf94      	ite	ls
  401f80:	4a13      	ldrls	r2, [pc, #76]	; (401fd0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401f82:	4a14      	ldrhi	r2, [pc, #80]	; (401fd4 <system_init_flash+0x78>)
  401f84:	4b14      	ldr	r3, [pc, #80]	; (401fd8 <system_init_flash+0x7c>)
  401f86:	601a      	str	r2, [r3, #0]
  401f88:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f8e:	4b12      	ldr	r3, [pc, #72]	; (401fd8 <system_init_flash+0x7c>)
  401f90:	601a      	str	r2, [r3, #0]
  401f92:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f94:	4a11      	ldr	r2, [pc, #68]	; (401fdc <system_init_flash+0x80>)
  401f96:	4b10      	ldr	r3, [pc, #64]	; (401fd8 <system_init_flash+0x7c>)
  401f98:	601a      	str	r2, [r3, #0]
  401f9a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f9c:	4a10      	ldr	r2, [pc, #64]	; (401fe0 <system_init_flash+0x84>)
  401f9e:	4b0e      	ldr	r3, [pc, #56]	; (401fd8 <system_init_flash+0x7c>)
  401fa0:	601a      	str	r2, [r3, #0]
  401fa2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401fa4:	4a0f      	ldr	r2, [pc, #60]	; (401fe4 <system_init_flash+0x88>)
  401fa6:	4b0c      	ldr	r3, [pc, #48]	; (401fd8 <system_init_flash+0x7c>)
  401fa8:	601a      	str	r2, [r3, #0]
  401faa:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401fac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401fb0:	4b09      	ldr	r3, [pc, #36]	; (401fd8 <system_init_flash+0x7c>)
  401fb2:	601a      	str	r2, [r3, #0]
  401fb4:	4770      	bx	lr
  401fb6:	bf00      	nop
  401fb8:	015ef3bf 	.word	0x015ef3bf
  401fbc:	02bde77f 	.word	0x02bde77f
  401fc0:	041cdb3f 	.word	0x041cdb3f
  401fc4:	057bceff 	.word	0x057bceff
  401fc8:	06dac2bf 	.word	0x06dac2bf
  401fcc:	0839b67f 	.word	0x0839b67f
  401fd0:	04000500 	.word	0x04000500
  401fd4:	04000600 	.word	0x04000600
  401fd8:	400e0c00 	.word	0x400e0c00
  401fdc:	04000100 	.word	0x04000100
  401fe0:	04000200 	.word	0x04000200
  401fe4:	04000300 	.word	0x04000300

00401fe8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401fe8:	4b0a      	ldr	r3, [pc, #40]	; (402014 <_sbrk+0x2c>)
  401fea:	681b      	ldr	r3, [r3, #0]
  401fec:	b153      	cbz	r3, 402004 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401fee:	4b09      	ldr	r3, [pc, #36]	; (402014 <_sbrk+0x2c>)
  401ff0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401ff2:	181a      	adds	r2, r3, r0
  401ff4:	4908      	ldr	r1, [pc, #32]	; (402018 <_sbrk+0x30>)
  401ff6:	4291      	cmp	r1, r2
  401ff8:	db08      	blt.n	40200c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401ffa:	4610      	mov	r0, r2
  401ffc:	4a05      	ldr	r2, [pc, #20]	; (402014 <_sbrk+0x2c>)
  401ffe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402000:	4618      	mov	r0, r3
  402002:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402004:	4a05      	ldr	r2, [pc, #20]	; (40201c <_sbrk+0x34>)
  402006:	4b03      	ldr	r3, [pc, #12]	; (402014 <_sbrk+0x2c>)
  402008:	601a      	str	r2, [r3, #0]
  40200a:	e7f0      	b.n	401fee <_sbrk+0x6>
		return (caddr_t) -1;	
  40200c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402010:	4770      	bx	lr
  402012:	bf00      	nop
  402014:	204015a4 	.word	0x204015a4
  402018:	2045fffc 	.word	0x2045fffc
  40201c:	20403890 	.word	0x20403890

00402020 <_close>:

extern int _close(int file)
{   
    (void)file;
	return -1;
}
  402020:	f04f 30ff 	mov.w	r0, #4294967295
  402024:	4770      	bx	lr

00402026 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    (void)file;
	st->st_mode = S_IFCHR;
  402026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40202a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40202c:	2000      	movs	r0, #0
  40202e:	4770      	bx	lr

00402030 <_isatty>:

extern int _isatty(int file)
{
    (void)file;
	return 1;
}
  402030:	2001      	movs	r0, #1
  402032:	4770      	bx	lr

00402034 <_lseek>:
{
    (void)file;
    (void)ptr;
    (void)dir;
	return 0;
}
  402034:	2000      	movs	r0, #0
  402036:	4770      	bx	lr

00402038 <__aeabi_drsub>:
  402038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40203c:	e002      	b.n	402044 <__adddf3>
  40203e:	bf00      	nop

00402040 <__aeabi_dsub>:
  402040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402044 <__adddf3>:
  402044:	b530      	push	{r4, r5, lr}
  402046:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40204a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40204e:	ea94 0f05 	teq	r4, r5
  402052:	bf08      	it	eq
  402054:	ea90 0f02 	teqeq	r0, r2
  402058:	bf1f      	itttt	ne
  40205a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40205e:	ea55 0c02 	orrsne.w	ip, r5, r2
  402062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40206a:	f000 80e2 	beq.w	402232 <__adddf3+0x1ee>
  40206e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402076:	bfb8      	it	lt
  402078:	426d      	neglt	r5, r5
  40207a:	dd0c      	ble.n	402096 <__adddf3+0x52>
  40207c:	442c      	add	r4, r5
  40207e:	ea80 0202 	eor.w	r2, r0, r2
  402082:	ea81 0303 	eor.w	r3, r1, r3
  402086:	ea82 0000 	eor.w	r0, r2, r0
  40208a:	ea83 0101 	eor.w	r1, r3, r1
  40208e:	ea80 0202 	eor.w	r2, r0, r2
  402092:	ea81 0303 	eor.w	r3, r1, r3
  402096:	2d36      	cmp	r5, #54	; 0x36
  402098:	bf88      	it	hi
  40209a:	bd30      	pophi	{r4, r5, pc}
  40209c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4020a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4020a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4020a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4020ac:	d002      	beq.n	4020b4 <__adddf3+0x70>
  4020ae:	4240      	negs	r0, r0
  4020b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4020b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4020b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4020bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4020c0:	d002      	beq.n	4020c8 <__adddf3+0x84>
  4020c2:	4252      	negs	r2, r2
  4020c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4020c8:	ea94 0f05 	teq	r4, r5
  4020cc:	f000 80a7 	beq.w	40221e <__adddf3+0x1da>
  4020d0:	f1a4 0401 	sub.w	r4, r4, #1
  4020d4:	f1d5 0e20 	rsbs	lr, r5, #32
  4020d8:	db0d      	blt.n	4020f6 <__adddf3+0xb2>
  4020da:	fa02 fc0e 	lsl.w	ip, r2, lr
  4020de:	fa22 f205 	lsr.w	r2, r2, r5
  4020e2:	1880      	adds	r0, r0, r2
  4020e4:	f141 0100 	adc.w	r1, r1, #0
  4020e8:	fa03 f20e 	lsl.w	r2, r3, lr
  4020ec:	1880      	adds	r0, r0, r2
  4020ee:	fa43 f305 	asr.w	r3, r3, r5
  4020f2:	4159      	adcs	r1, r3
  4020f4:	e00e      	b.n	402114 <__adddf3+0xd0>
  4020f6:	f1a5 0520 	sub.w	r5, r5, #32
  4020fa:	f10e 0e20 	add.w	lr, lr, #32
  4020fe:	2a01      	cmp	r2, #1
  402100:	fa03 fc0e 	lsl.w	ip, r3, lr
  402104:	bf28      	it	cs
  402106:	f04c 0c02 	orrcs.w	ip, ip, #2
  40210a:	fa43 f305 	asr.w	r3, r3, r5
  40210e:	18c0      	adds	r0, r0, r3
  402110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402118:	d507      	bpl.n	40212a <__adddf3+0xe6>
  40211a:	f04f 0e00 	mov.w	lr, #0
  40211e:	f1dc 0c00 	rsbs	ip, ip, #0
  402122:	eb7e 0000 	sbcs.w	r0, lr, r0
  402126:	eb6e 0101 	sbc.w	r1, lr, r1
  40212a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40212e:	d31b      	bcc.n	402168 <__adddf3+0x124>
  402130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402134:	d30c      	bcc.n	402150 <__adddf3+0x10c>
  402136:	0849      	lsrs	r1, r1, #1
  402138:	ea5f 0030 	movs.w	r0, r0, rrx
  40213c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402140:	f104 0401 	add.w	r4, r4, #1
  402144:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40214c:	f080 809a 	bcs.w	402284 <__adddf3+0x240>
  402150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402154:	bf08      	it	eq
  402156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40215a:	f150 0000 	adcs.w	r0, r0, #0
  40215e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402162:	ea41 0105 	orr.w	r1, r1, r5
  402166:	bd30      	pop	{r4, r5, pc}
  402168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40216c:	4140      	adcs	r0, r0
  40216e:	eb41 0101 	adc.w	r1, r1, r1
  402172:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402176:	f1a4 0401 	sub.w	r4, r4, #1
  40217a:	d1e9      	bne.n	402150 <__adddf3+0x10c>
  40217c:	f091 0f00 	teq	r1, #0
  402180:	bf04      	itt	eq
  402182:	4601      	moveq	r1, r0
  402184:	2000      	moveq	r0, #0
  402186:	fab1 f381 	clz	r3, r1
  40218a:	bf08      	it	eq
  40218c:	3320      	addeq	r3, #32
  40218e:	f1a3 030b 	sub.w	r3, r3, #11
  402192:	f1b3 0220 	subs.w	r2, r3, #32
  402196:	da0c      	bge.n	4021b2 <__adddf3+0x16e>
  402198:	320c      	adds	r2, #12
  40219a:	dd08      	ble.n	4021ae <__adddf3+0x16a>
  40219c:	f102 0c14 	add.w	ip, r2, #20
  4021a0:	f1c2 020c 	rsb	r2, r2, #12
  4021a4:	fa01 f00c 	lsl.w	r0, r1, ip
  4021a8:	fa21 f102 	lsr.w	r1, r1, r2
  4021ac:	e00c      	b.n	4021c8 <__adddf3+0x184>
  4021ae:	f102 0214 	add.w	r2, r2, #20
  4021b2:	bfd8      	it	le
  4021b4:	f1c2 0c20 	rsble	ip, r2, #32
  4021b8:	fa01 f102 	lsl.w	r1, r1, r2
  4021bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4021c0:	bfdc      	itt	le
  4021c2:	ea41 010c 	orrle.w	r1, r1, ip
  4021c6:	4090      	lslle	r0, r2
  4021c8:	1ae4      	subs	r4, r4, r3
  4021ca:	bfa2      	ittt	ge
  4021cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4021d0:	4329      	orrge	r1, r5
  4021d2:	bd30      	popge	{r4, r5, pc}
  4021d4:	ea6f 0404 	mvn.w	r4, r4
  4021d8:	3c1f      	subs	r4, #31
  4021da:	da1c      	bge.n	402216 <__adddf3+0x1d2>
  4021dc:	340c      	adds	r4, #12
  4021de:	dc0e      	bgt.n	4021fe <__adddf3+0x1ba>
  4021e0:	f104 0414 	add.w	r4, r4, #20
  4021e4:	f1c4 0220 	rsb	r2, r4, #32
  4021e8:	fa20 f004 	lsr.w	r0, r0, r4
  4021ec:	fa01 f302 	lsl.w	r3, r1, r2
  4021f0:	ea40 0003 	orr.w	r0, r0, r3
  4021f4:	fa21 f304 	lsr.w	r3, r1, r4
  4021f8:	ea45 0103 	orr.w	r1, r5, r3
  4021fc:	bd30      	pop	{r4, r5, pc}
  4021fe:	f1c4 040c 	rsb	r4, r4, #12
  402202:	f1c4 0220 	rsb	r2, r4, #32
  402206:	fa20 f002 	lsr.w	r0, r0, r2
  40220a:	fa01 f304 	lsl.w	r3, r1, r4
  40220e:	ea40 0003 	orr.w	r0, r0, r3
  402212:	4629      	mov	r1, r5
  402214:	bd30      	pop	{r4, r5, pc}
  402216:	fa21 f004 	lsr.w	r0, r1, r4
  40221a:	4629      	mov	r1, r5
  40221c:	bd30      	pop	{r4, r5, pc}
  40221e:	f094 0f00 	teq	r4, #0
  402222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402226:	bf06      	itte	eq
  402228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40222c:	3401      	addeq	r4, #1
  40222e:	3d01      	subne	r5, #1
  402230:	e74e      	b.n	4020d0 <__adddf3+0x8c>
  402232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402236:	bf18      	it	ne
  402238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40223c:	d029      	beq.n	402292 <__adddf3+0x24e>
  40223e:	ea94 0f05 	teq	r4, r5
  402242:	bf08      	it	eq
  402244:	ea90 0f02 	teqeq	r0, r2
  402248:	d005      	beq.n	402256 <__adddf3+0x212>
  40224a:	ea54 0c00 	orrs.w	ip, r4, r0
  40224e:	bf04      	itt	eq
  402250:	4619      	moveq	r1, r3
  402252:	4610      	moveq	r0, r2
  402254:	bd30      	pop	{r4, r5, pc}
  402256:	ea91 0f03 	teq	r1, r3
  40225a:	bf1e      	ittt	ne
  40225c:	2100      	movne	r1, #0
  40225e:	2000      	movne	r0, #0
  402260:	bd30      	popne	{r4, r5, pc}
  402262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402266:	d105      	bne.n	402274 <__adddf3+0x230>
  402268:	0040      	lsls	r0, r0, #1
  40226a:	4149      	adcs	r1, r1
  40226c:	bf28      	it	cs
  40226e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402272:	bd30      	pop	{r4, r5, pc}
  402274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402278:	bf3c      	itt	cc
  40227a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40227e:	bd30      	popcc	{r4, r5, pc}
  402280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40228c:	f04f 0000 	mov.w	r0, #0
  402290:	bd30      	pop	{r4, r5, pc}
  402292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402296:	bf1a      	itte	ne
  402298:	4619      	movne	r1, r3
  40229a:	4610      	movne	r0, r2
  40229c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4022a0:	bf1c      	itt	ne
  4022a2:	460b      	movne	r3, r1
  4022a4:	4602      	movne	r2, r0
  4022a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4022aa:	bf06      	itte	eq
  4022ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4022b0:	ea91 0f03 	teqeq	r1, r3
  4022b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4022b8:	bd30      	pop	{r4, r5, pc}
  4022ba:	bf00      	nop

004022bc <__aeabi_ui2d>:
  4022bc:	f090 0f00 	teq	r0, #0
  4022c0:	bf04      	itt	eq
  4022c2:	2100      	moveq	r1, #0
  4022c4:	4770      	bxeq	lr
  4022c6:	b530      	push	{r4, r5, lr}
  4022c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4022cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4022d0:	f04f 0500 	mov.w	r5, #0
  4022d4:	f04f 0100 	mov.w	r1, #0
  4022d8:	e750      	b.n	40217c <__adddf3+0x138>
  4022da:	bf00      	nop

004022dc <__aeabi_i2d>:
  4022dc:	f090 0f00 	teq	r0, #0
  4022e0:	bf04      	itt	eq
  4022e2:	2100      	moveq	r1, #0
  4022e4:	4770      	bxeq	lr
  4022e6:	b530      	push	{r4, r5, lr}
  4022e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4022ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4022f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4022f4:	bf48      	it	mi
  4022f6:	4240      	negmi	r0, r0
  4022f8:	f04f 0100 	mov.w	r1, #0
  4022fc:	e73e      	b.n	40217c <__adddf3+0x138>
  4022fe:	bf00      	nop

00402300 <__aeabi_f2d>:
  402300:	0042      	lsls	r2, r0, #1
  402302:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402306:	ea4f 0131 	mov.w	r1, r1, rrx
  40230a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40230e:	bf1f      	itttt	ne
  402310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40231c:	4770      	bxne	lr
  40231e:	f092 0f00 	teq	r2, #0
  402322:	bf14      	ite	ne
  402324:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402328:	4770      	bxeq	lr
  40232a:	b530      	push	{r4, r5, lr}
  40232c:	f44f 7460 	mov.w	r4, #896	; 0x380
  402330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402338:	e720      	b.n	40217c <__adddf3+0x138>
  40233a:	bf00      	nop

0040233c <__aeabi_ul2d>:
  40233c:	ea50 0201 	orrs.w	r2, r0, r1
  402340:	bf08      	it	eq
  402342:	4770      	bxeq	lr
  402344:	b530      	push	{r4, r5, lr}
  402346:	f04f 0500 	mov.w	r5, #0
  40234a:	e00a      	b.n	402362 <__aeabi_l2d+0x16>

0040234c <__aeabi_l2d>:
  40234c:	ea50 0201 	orrs.w	r2, r0, r1
  402350:	bf08      	it	eq
  402352:	4770      	bxeq	lr
  402354:	b530      	push	{r4, r5, lr}
  402356:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40235a:	d502      	bpl.n	402362 <__aeabi_l2d+0x16>
  40235c:	4240      	negs	r0, r0
  40235e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402362:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402366:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40236a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40236e:	f43f aedc 	beq.w	40212a <__adddf3+0xe6>
  402372:	f04f 0203 	mov.w	r2, #3
  402376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40237a:	bf18      	it	ne
  40237c:	3203      	addne	r2, #3
  40237e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402382:	bf18      	it	ne
  402384:	3203      	addne	r2, #3
  402386:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40238a:	f1c2 0320 	rsb	r3, r2, #32
  40238e:	fa00 fc03 	lsl.w	ip, r0, r3
  402392:	fa20 f002 	lsr.w	r0, r0, r2
  402396:	fa01 fe03 	lsl.w	lr, r1, r3
  40239a:	ea40 000e 	orr.w	r0, r0, lr
  40239e:	fa21 f102 	lsr.w	r1, r1, r2
  4023a2:	4414      	add	r4, r2
  4023a4:	e6c1      	b.n	40212a <__adddf3+0xe6>
  4023a6:	bf00      	nop

004023a8 <__aeabi_dmul>:
  4023a8:	b570      	push	{r4, r5, r6, lr}
  4023aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4023ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4023b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4023b6:	bf1d      	ittte	ne
  4023b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4023bc:	ea94 0f0c 	teqne	r4, ip
  4023c0:	ea95 0f0c 	teqne	r5, ip
  4023c4:	f000 f8de 	bleq	402584 <__aeabi_dmul+0x1dc>
  4023c8:	442c      	add	r4, r5
  4023ca:	ea81 0603 	eor.w	r6, r1, r3
  4023ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4023d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4023d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4023da:	bf18      	it	ne
  4023dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4023e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4023e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4023e8:	d038      	beq.n	40245c <__aeabi_dmul+0xb4>
  4023ea:	fba0 ce02 	umull	ip, lr, r0, r2
  4023ee:	f04f 0500 	mov.w	r5, #0
  4023f2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4023f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4023fa:	fbe0 e503 	umlal	lr, r5, r0, r3
  4023fe:	f04f 0600 	mov.w	r6, #0
  402402:	fbe1 5603 	umlal	r5, r6, r1, r3
  402406:	f09c 0f00 	teq	ip, #0
  40240a:	bf18      	it	ne
  40240c:	f04e 0e01 	orrne.w	lr, lr, #1
  402410:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402418:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40241c:	d204      	bcs.n	402428 <__aeabi_dmul+0x80>
  40241e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402422:	416d      	adcs	r5, r5
  402424:	eb46 0606 	adc.w	r6, r6, r6
  402428:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40242c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402430:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402434:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402438:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40243c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402440:	bf88      	it	hi
  402442:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402446:	d81e      	bhi.n	402486 <__aeabi_dmul+0xde>
  402448:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40244c:	bf08      	it	eq
  40244e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402452:	f150 0000 	adcs.w	r0, r0, #0
  402456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40245a:	bd70      	pop	{r4, r5, r6, pc}
  40245c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402460:	ea46 0101 	orr.w	r1, r6, r1
  402464:	ea40 0002 	orr.w	r0, r0, r2
  402468:	ea81 0103 	eor.w	r1, r1, r3
  40246c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402470:	bfc2      	ittt	gt
  402472:	ebd4 050c 	rsbsgt	r5, r4, ip
  402476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40247a:	bd70      	popgt	{r4, r5, r6, pc}
  40247c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402480:	f04f 0e00 	mov.w	lr, #0
  402484:	3c01      	subs	r4, #1
  402486:	f300 80ab 	bgt.w	4025e0 <__aeabi_dmul+0x238>
  40248a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40248e:	bfde      	ittt	le
  402490:	2000      	movle	r0, #0
  402492:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402496:	bd70      	pople	{r4, r5, r6, pc}
  402498:	f1c4 0400 	rsb	r4, r4, #0
  40249c:	3c20      	subs	r4, #32
  40249e:	da35      	bge.n	40250c <__aeabi_dmul+0x164>
  4024a0:	340c      	adds	r4, #12
  4024a2:	dc1b      	bgt.n	4024dc <__aeabi_dmul+0x134>
  4024a4:	f104 0414 	add.w	r4, r4, #20
  4024a8:	f1c4 0520 	rsb	r5, r4, #32
  4024ac:	fa00 f305 	lsl.w	r3, r0, r5
  4024b0:	fa20 f004 	lsr.w	r0, r0, r4
  4024b4:	fa01 f205 	lsl.w	r2, r1, r5
  4024b8:	ea40 0002 	orr.w	r0, r0, r2
  4024bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4024c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4024c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4024c8:	fa21 f604 	lsr.w	r6, r1, r4
  4024cc:	eb42 0106 	adc.w	r1, r2, r6
  4024d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4024d4:	bf08      	it	eq
  4024d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4024da:	bd70      	pop	{r4, r5, r6, pc}
  4024dc:	f1c4 040c 	rsb	r4, r4, #12
  4024e0:	f1c4 0520 	rsb	r5, r4, #32
  4024e4:	fa00 f304 	lsl.w	r3, r0, r4
  4024e8:	fa20 f005 	lsr.w	r0, r0, r5
  4024ec:	fa01 f204 	lsl.w	r2, r1, r4
  4024f0:	ea40 0002 	orr.w	r0, r0, r2
  4024f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4024f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4024fc:	f141 0100 	adc.w	r1, r1, #0
  402500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402504:	bf08      	it	eq
  402506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40250a:	bd70      	pop	{r4, r5, r6, pc}
  40250c:	f1c4 0520 	rsb	r5, r4, #32
  402510:	fa00 f205 	lsl.w	r2, r0, r5
  402514:	ea4e 0e02 	orr.w	lr, lr, r2
  402518:	fa20 f304 	lsr.w	r3, r0, r4
  40251c:	fa01 f205 	lsl.w	r2, r1, r5
  402520:	ea43 0302 	orr.w	r3, r3, r2
  402524:	fa21 f004 	lsr.w	r0, r1, r4
  402528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40252c:	fa21 f204 	lsr.w	r2, r1, r4
  402530:	ea20 0002 	bic.w	r0, r0, r2
  402534:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40253c:	bf08      	it	eq
  40253e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402542:	bd70      	pop	{r4, r5, r6, pc}
  402544:	f094 0f00 	teq	r4, #0
  402548:	d10f      	bne.n	40256a <__aeabi_dmul+0x1c2>
  40254a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40254e:	0040      	lsls	r0, r0, #1
  402550:	eb41 0101 	adc.w	r1, r1, r1
  402554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402558:	bf08      	it	eq
  40255a:	3c01      	subeq	r4, #1
  40255c:	d0f7      	beq.n	40254e <__aeabi_dmul+0x1a6>
  40255e:	ea41 0106 	orr.w	r1, r1, r6
  402562:	f095 0f00 	teq	r5, #0
  402566:	bf18      	it	ne
  402568:	4770      	bxne	lr
  40256a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40256e:	0052      	lsls	r2, r2, #1
  402570:	eb43 0303 	adc.w	r3, r3, r3
  402574:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402578:	bf08      	it	eq
  40257a:	3d01      	subeq	r5, #1
  40257c:	d0f7      	beq.n	40256e <__aeabi_dmul+0x1c6>
  40257e:	ea43 0306 	orr.w	r3, r3, r6
  402582:	4770      	bx	lr
  402584:	ea94 0f0c 	teq	r4, ip
  402588:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40258c:	bf18      	it	ne
  40258e:	ea95 0f0c 	teqne	r5, ip
  402592:	d00c      	beq.n	4025ae <__aeabi_dmul+0x206>
  402594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402598:	bf18      	it	ne
  40259a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40259e:	d1d1      	bne.n	402544 <__aeabi_dmul+0x19c>
  4025a0:	ea81 0103 	eor.w	r1, r1, r3
  4025a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4025a8:	f04f 0000 	mov.w	r0, #0
  4025ac:	bd70      	pop	{r4, r5, r6, pc}
  4025ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4025b2:	bf06      	itte	eq
  4025b4:	4610      	moveq	r0, r2
  4025b6:	4619      	moveq	r1, r3
  4025b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4025bc:	d019      	beq.n	4025f2 <__aeabi_dmul+0x24a>
  4025be:	ea94 0f0c 	teq	r4, ip
  4025c2:	d102      	bne.n	4025ca <__aeabi_dmul+0x222>
  4025c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4025c8:	d113      	bne.n	4025f2 <__aeabi_dmul+0x24a>
  4025ca:	ea95 0f0c 	teq	r5, ip
  4025ce:	d105      	bne.n	4025dc <__aeabi_dmul+0x234>
  4025d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4025d4:	bf1c      	itt	ne
  4025d6:	4610      	movne	r0, r2
  4025d8:	4619      	movne	r1, r3
  4025da:	d10a      	bne.n	4025f2 <__aeabi_dmul+0x24a>
  4025dc:	ea81 0103 	eor.w	r1, r1, r3
  4025e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4025e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4025e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4025ec:	f04f 0000 	mov.w	r0, #0
  4025f0:	bd70      	pop	{r4, r5, r6, pc}
  4025f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4025f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4025fa:	bd70      	pop	{r4, r5, r6, pc}

004025fc <__aeabi_ddiv>:
  4025fc:	b570      	push	{r4, r5, r6, lr}
  4025fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40260a:	bf1d      	ittte	ne
  40260c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402610:	ea94 0f0c 	teqne	r4, ip
  402614:	ea95 0f0c 	teqne	r5, ip
  402618:	f000 f8a7 	bleq	40276a <__aeabi_ddiv+0x16e>
  40261c:	eba4 0405 	sub.w	r4, r4, r5
  402620:	ea81 0e03 	eor.w	lr, r1, r3
  402624:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402628:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40262c:	f000 8088 	beq.w	402740 <__aeabi_ddiv+0x144>
  402630:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402634:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402638:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40263c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402640:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402644:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402648:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40264c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402650:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402654:	429d      	cmp	r5, r3
  402656:	bf08      	it	eq
  402658:	4296      	cmpeq	r6, r2
  40265a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40265e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402662:	d202      	bcs.n	40266a <__aeabi_ddiv+0x6e>
  402664:	085b      	lsrs	r3, r3, #1
  402666:	ea4f 0232 	mov.w	r2, r2, rrx
  40266a:	1ab6      	subs	r6, r6, r2
  40266c:	eb65 0503 	sbc.w	r5, r5, r3
  402670:	085b      	lsrs	r3, r3, #1
  402672:	ea4f 0232 	mov.w	r2, r2, rrx
  402676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40267a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40267e:	ebb6 0e02 	subs.w	lr, r6, r2
  402682:	eb75 0e03 	sbcs.w	lr, r5, r3
  402686:	bf22      	ittt	cs
  402688:	1ab6      	subcs	r6, r6, r2
  40268a:	4675      	movcs	r5, lr
  40268c:	ea40 000c 	orrcs.w	r0, r0, ip
  402690:	085b      	lsrs	r3, r3, #1
  402692:	ea4f 0232 	mov.w	r2, r2, rrx
  402696:	ebb6 0e02 	subs.w	lr, r6, r2
  40269a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40269e:	bf22      	ittt	cs
  4026a0:	1ab6      	subcs	r6, r6, r2
  4026a2:	4675      	movcs	r5, lr
  4026a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4026a8:	085b      	lsrs	r3, r3, #1
  4026aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4026ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4026b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4026b6:	bf22      	ittt	cs
  4026b8:	1ab6      	subcs	r6, r6, r2
  4026ba:	4675      	movcs	r5, lr
  4026bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4026c0:	085b      	lsrs	r3, r3, #1
  4026c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4026c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4026ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4026ce:	bf22      	ittt	cs
  4026d0:	1ab6      	subcs	r6, r6, r2
  4026d2:	4675      	movcs	r5, lr
  4026d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4026d8:	ea55 0e06 	orrs.w	lr, r5, r6
  4026dc:	d018      	beq.n	402710 <__aeabi_ddiv+0x114>
  4026de:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4026e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4026e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4026ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4026ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4026f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4026f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4026fa:	d1c0      	bne.n	40267e <__aeabi_ddiv+0x82>
  4026fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402700:	d10b      	bne.n	40271a <__aeabi_ddiv+0x11e>
  402702:	ea41 0100 	orr.w	r1, r1, r0
  402706:	f04f 0000 	mov.w	r0, #0
  40270a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40270e:	e7b6      	b.n	40267e <__aeabi_ddiv+0x82>
  402710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402714:	bf04      	itt	eq
  402716:	4301      	orreq	r1, r0
  402718:	2000      	moveq	r0, #0
  40271a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40271e:	bf88      	it	hi
  402720:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402724:	f63f aeaf 	bhi.w	402486 <__aeabi_dmul+0xde>
  402728:	ebb5 0c03 	subs.w	ip, r5, r3
  40272c:	bf04      	itt	eq
  40272e:	ebb6 0c02 	subseq.w	ip, r6, r2
  402732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402736:	f150 0000 	adcs.w	r0, r0, #0
  40273a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40273e:	bd70      	pop	{r4, r5, r6, pc}
  402740:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402744:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402748:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40274c:	bfc2      	ittt	gt
  40274e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402756:	bd70      	popgt	{r4, r5, r6, pc}
  402758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40275c:	f04f 0e00 	mov.w	lr, #0
  402760:	3c01      	subs	r4, #1
  402762:	e690      	b.n	402486 <__aeabi_dmul+0xde>
  402764:	ea45 0e06 	orr.w	lr, r5, r6
  402768:	e68d      	b.n	402486 <__aeabi_dmul+0xde>
  40276a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40276e:	ea94 0f0c 	teq	r4, ip
  402772:	bf08      	it	eq
  402774:	ea95 0f0c 	teqeq	r5, ip
  402778:	f43f af3b 	beq.w	4025f2 <__aeabi_dmul+0x24a>
  40277c:	ea94 0f0c 	teq	r4, ip
  402780:	d10a      	bne.n	402798 <__aeabi_ddiv+0x19c>
  402782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402786:	f47f af34 	bne.w	4025f2 <__aeabi_dmul+0x24a>
  40278a:	ea95 0f0c 	teq	r5, ip
  40278e:	f47f af25 	bne.w	4025dc <__aeabi_dmul+0x234>
  402792:	4610      	mov	r0, r2
  402794:	4619      	mov	r1, r3
  402796:	e72c      	b.n	4025f2 <__aeabi_dmul+0x24a>
  402798:	ea95 0f0c 	teq	r5, ip
  40279c:	d106      	bne.n	4027ac <__aeabi_ddiv+0x1b0>
  40279e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4027a2:	f43f aefd 	beq.w	4025a0 <__aeabi_dmul+0x1f8>
  4027a6:	4610      	mov	r0, r2
  4027a8:	4619      	mov	r1, r3
  4027aa:	e722      	b.n	4025f2 <__aeabi_dmul+0x24a>
  4027ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4027b0:	bf18      	it	ne
  4027b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4027b6:	f47f aec5 	bne.w	402544 <__aeabi_dmul+0x19c>
  4027ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4027be:	f47f af0d 	bne.w	4025dc <__aeabi_dmul+0x234>
  4027c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4027c6:	f47f aeeb 	bne.w	4025a0 <__aeabi_dmul+0x1f8>
  4027ca:	e712      	b.n	4025f2 <__aeabi_dmul+0x24a>

004027cc <__aeabi_uldivmod>:
  4027cc:	b953      	cbnz	r3, 4027e4 <__aeabi_uldivmod+0x18>
  4027ce:	b94a      	cbnz	r2, 4027e4 <__aeabi_uldivmod+0x18>
  4027d0:	2900      	cmp	r1, #0
  4027d2:	bf08      	it	eq
  4027d4:	2800      	cmpeq	r0, #0
  4027d6:	bf1c      	itt	ne
  4027d8:	f04f 31ff 	movne.w	r1, #4294967295
  4027dc:	f04f 30ff 	movne.w	r0, #4294967295
  4027e0:	f000 b97a 	b.w	402ad8 <__aeabi_idiv0>
  4027e4:	f1ad 0c08 	sub.w	ip, sp, #8
  4027e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4027ec:	f000 f806 	bl	4027fc <__udivmoddi4>
  4027f0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4027f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4027f8:	b004      	add	sp, #16
  4027fa:	4770      	bx	lr

004027fc <__udivmoddi4>:
  4027fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402800:	468c      	mov	ip, r1
  402802:	460d      	mov	r5, r1
  402804:	4604      	mov	r4, r0
  402806:	9e08      	ldr	r6, [sp, #32]
  402808:	2b00      	cmp	r3, #0
  40280a:	d151      	bne.n	4028b0 <__udivmoddi4+0xb4>
  40280c:	428a      	cmp	r2, r1
  40280e:	4617      	mov	r7, r2
  402810:	d96d      	bls.n	4028ee <__udivmoddi4+0xf2>
  402812:	fab2 fe82 	clz	lr, r2
  402816:	f1be 0f00 	cmp.w	lr, #0
  40281a:	d00b      	beq.n	402834 <__udivmoddi4+0x38>
  40281c:	f1ce 0c20 	rsb	ip, lr, #32
  402820:	fa01 f50e 	lsl.w	r5, r1, lr
  402824:	fa20 fc0c 	lsr.w	ip, r0, ip
  402828:	fa02 f70e 	lsl.w	r7, r2, lr
  40282c:	ea4c 0c05 	orr.w	ip, ip, r5
  402830:	fa00 f40e 	lsl.w	r4, r0, lr
  402834:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402838:	0c25      	lsrs	r5, r4, #16
  40283a:	fbbc f8fa 	udiv	r8, ip, sl
  40283e:	fa1f f987 	uxth.w	r9, r7
  402842:	fb0a cc18 	mls	ip, sl, r8, ip
  402846:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40284a:	fb08 f309 	mul.w	r3, r8, r9
  40284e:	42ab      	cmp	r3, r5
  402850:	d90a      	bls.n	402868 <__udivmoddi4+0x6c>
  402852:	19ed      	adds	r5, r5, r7
  402854:	f108 32ff 	add.w	r2, r8, #4294967295
  402858:	f080 8123 	bcs.w	402aa2 <__udivmoddi4+0x2a6>
  40285c:	42ab      	cmp	r3, r5
  40285e:	f240 8120 	bls.w	402aa2 <__udivmoddi4+0x2a6>
  402862:	f1a8 0802 	sub.w	r8, r8, #2
  402866:	443d      	add	r5, r7
  402868:	1aed      	subs	r5, r5, r3
  40286a:	b2a4      	uxth	r4, r4
  40286c:	fbb5 f0fa 	udiv	r0, r5, sl
  402870:	fb0a 5510 	mls	r5, sl, r0, r5
  402874:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402878:	fb00 f909 	mul.w	r9, r0, r9
  40287c:	45a1      	cmp	r9, r4
  40287e:	d909      	bls.n	402894 <__udivmoddi4+0x98>
  402880:	19e4      	adds	r4, r4, r7
  402882:	f100 33ff 	add.w	r3, r0, #4294967295
  402886:	f080 810a 	bcs.w	402a9e <__udivmoddi4+0x2a2>
  40288a:	45a1      	cmp	r9, r4
  40288c:	f240 8107 	bls.w	402a9e <__udivmoddi4+0x2a2>
  402890:	3802      	subs	r0, #2
  402892:	443c      	add	r4, r7
  402894:	eba4 0409 	sub.w	r4, r4, r9
  402898:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40289c:	2100      	movs	r1, #0
  40289e:	2e00      	cmp	r6, #0
  4028a0:	d061      	beq.n	402966 <__udivmoddi4+0x16a>
  4028a2:	fa24 f40e 	lsr.w	r4, r4, lr
  4028a6:	2300      	movs	r3, #0
  4028a8:	6034      	str	r4, [r6, #0]
  4028aa:	6073      	str	r3, [r6, #4]
  4028ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028b0:	428b      	cmp	r3, r1
  4028b2:	d907      	bls.n	4028c4 <__udivmoddi4+0xc8>
  4028b4:	2e00      	cmp	r6, #0
  4028b6:	d054      	beq.n	402962 <__udivmoddi4+0x166>
  4028b8:	2100      	movs	r1, #0
  4028ba:	e886 0021 	stmia.w	r6, {r0, r5}
  4028be:	4608      	mov	r0, r1
  4028c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028c4:	fab3 f183 	clz	r1, r3
  4028c8:	2900      	cmp	r1, #0
  4028ca:	f040 808e 	bne.w	4029ea <__udivmoddi4+0x1ee>
  4028ce:	42ab      	cmp	r3, r5
  4028d0:	d302      	bcc.n	4028d8 <__udivmoddi4+0xdc>
  4028d2:	4282      	cmp	r2, r0
  4028d4:	f200 80fa 	bhi.w	402acc <__udivmoddi4+0x2d0>
  4028d8:	1a84      	subs	r4, r0, r2
  4028da:	eb65 0503 	sbc.w	r5, r5, r3
  4028de:	2001      	movs	r0, #1
  4028e0:	46ac      	mov	ip, r5
  4028e2:	2e00      	cmp	r6, #0
  4028e4:	d03f      	beq.n	402966 <__udivmoddi4+0x16a>
  4028e6:	e886 1010 	stmia.w	r6, {r4, ip}
  4028ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028ee:	b912      	cbnz	r2, 4028f6 <__udivmoddi4+0xfa>
  4028f0:	2701      	movs	r7, #1
  4028f2:	fbb7 f7f2 	udiv	r7, r7, r2
  4028f6:	fab7 fe87 	clz	lr, r7
  4028fa:	f1be 0f00 	cmp.w	lr, #0
  4028fe:	d134      	bne.n	40296a <__udivmoddi4+0x16e>
  402900:	1beb      	subs	r3, r5, r7
  402902:	0c3a      	lsrs	r2, r7, #16
  402904:	fa1f fc87 	uxth.w	ip, r7
  402908:	2101      	movs	r1, #1
  40290a:	fbb3 f8f2 	udiv	r8, r3, r2
  40290e:	0c25      	lsrs	r5, r4, #16
  402910:	fb02 3318 	mls	r3, r2, r8, r3
  402914:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402918:	fb0c f308 	mul.w	r3, ip, r8
  40291c:	42ab      	cmp	r3, r5
  40291e:	d907      	bls.n	402930 <__udivmoddi4+0x134>
  402920:	19ed      	adds	r5, r5, r7
  402922:	f108 30ff 	add.w	r0, r8, #4294967295
  402926:	d202      	bcs.n	40292e <__udivmoddi4+0x132>
  402928:	42ab      	cmp	r3, r5
  40292a:	f200 80d1 	bhi.w	402ad0 <__udivmoddi4+0x2d4>
  40292e:	4680      	mov	r8, r0
  402930:	1aed      	subs	r5, r5, r3
  402932:	b2a3      	uxth	r3, r4
  402934:	fbb5 f0f2 	udiv	r0, r5, r2
  402938:	fb02 5510 	mls	r5, r2, r0, r5
  40293c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402940:	fb0c fc00 	mul.w	ip, ip, r0
  402944:	45a4      	cmp	ip, r4
  402946:	d907      	bls.n	402958 <__udivmoddi4+0x15c>
  402948:	19e4      	adds	r4, r4, r7
  40294a:	f100 33ff 	add.w	r3, r0, #4294967295
  40294e:	d202      	bcs.n	402956 <__udivmoddi4+0x15a>
  402950:	45a4      	cmp	ip, r4
  402952:	f200 80b8 	bhi.w	402ac6 <__udivmoddi4+0x2ca>
  402956:	4618      	mov	r0, r3
  402958:	eba4 040c 	sub.w	r4, r4, ip
  40295c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402960:	e79d      	b.n	40289e <__udivmoddi4+0xa2>
  402962:	4631      	mov	r1, r6
  402964:	4630      	mov	r0, r6
  402966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40296a:	f1ce 0420 	rsb	r4, lr, #32
  40296e:	fa05 f30e 	lsl.w	r3, r5, lr
  402972:	fa07 f70e 	lsl.w	r7, r7, lr
  402976:	fa20 f804 	lsr.w	r8, r0, r4
  40297a:	0c3a      	lsrs	r2, r7, #16
  40297c:	fa25 f404 	lsr.w	r4, r5, r4
  402980:	ea48 0803 	orr.w	r8, r8, r3
  402984:	fbb4 f1f2 	udiv	r1, r4, r2
  402988:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40298c:	fb02 4411 	mls	r4, r2, r1, r4
  402990:	fa1f fc87 	uxth.w	ip, r7
  402994:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402998:	fb01 f30c 	mul.w	r3, r1, ip
  40299c:	42ab      	cmp	r3, r5
  40299e:	fa00 f40e 	lsl.w	r4, r0, lr
  4029a2:	d909      	bls.n	4029b8 <__udivmoddi4+0x1bc>
  4029a4:	19ed      	adds	r5, r5, r7
  4029a6:	f101 30ff 	add.w	r0, r1, #4294967295
  4029aa:	f080 808a 	bcs.w	402ac2 <__udivmoddi4+0x2c6>
  4029ae:	42ab      	cmp	r3, r5
  4029b0:	f240 8087 	bls.w	402ac2 <__udivmoddi4+0x2c6>
  4029b4:	3902      	subs	r1, #2
  4029b6:	443d      	add	r5, r7
  4029b8:	1aeb      	subs	r3, r5, r3
  4029ba:	fa1f f588 	uxth.w	r5, r8
  4029be:	fbb3 f0f2 	udiv	r0, r3, r2
  4029c2:	fb02 3310 	mls	r3, r2, r0, r3
  4029c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4029ca:	fb00 f30c 	mul.w	r3, r0, ip
  4029ce:	42ab      	cmp	r3, r5
  4029d0:	d907      	bls.n	4029e2 <__udivmoddi4+0x1e6>
  4029d2:	19ed      	adds	r5, r5, r7
  4029d4:	f100 38ff 	add.w	r8, r0, #4294967295
  4029d8:	d26f      	bcs.n	402aba <__udivmoddi4+0x2be>
  4029da:	42ab      	cmp	r3, r5
  4029dc:	d96d      	bls.n	402aba <__udivmoddi4+0x2be>
  4029de:	3802      	subs	r0, #2
  4029e0:	443d      	add	r5, r7
  4029e2:	1aeb      	subs	r3, r5, r3
  4029e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4029e8:	e78f      	b.n	40290a <__udivmoddi4+0x10e>
  4029ea:	f1c1 0720 	rsb	r7, r1, #32
  4029ee:	fa22 f807 	lsr.w	r8, r2, r7
  4029f2:	408b      	lsls	r3, r1
  4029f4:	fa05 f401 	lsl.w	r4, r5, r1
  4029f8:	ea48 0303 	orr.w	r3, r8, r3
  4029fc:	fa20 fe07 	lsr.w	lr, r0, r7
  402a00:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402a04:	40fd      	lsrs	r5, r7
  402a06:	ea4e 0e04 	orr.w	lr, lr, r4
  402a0a:	fbb5 f9fc 	udiv	r9, r5, ip
  402a0e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402a12:	fb0c 5519 	mls	r5, ip, r9, r5
  402a16:	fa1f f883 	uxth.w	r8, r3
  402a1a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402a1e:	fb09 f408 	mul.w	r4, r9, r8
  402a22:	42ac      	cmp	r4, r5
  402a24:	fa02 f201 	lsl.w	r2, r2, r1
  402a28:	fa00 fa01 	lsl.w	sl, r0, r1
  402a2c:	d908      	bls.n	402a40 <__udivmoddi4+0x244>
  402a2e:	18ed      	adds	r5, r5, r3
  402a30:	f109 30ff 	add.w	r0, r9, #4294967295
  402a34:	d243      	bcs.n	402abe <__udivmoddi4+0x2c2>
  402a36:	42ac      	cmp	r4, r5
  402a38:	d941      	bls.n	402abe <__udivmoddi4+0x2c2>
  402a3a:	f1a9 0902 	sub.w	r9, r9, #2
  402a3e:	441d      	add	r5, r3
  402a40:	1b2d      	subs	r5, r5, r4
  402a42:	fa1f fe8e 	uxth.w	lr, lr
  402a46:	fbb5 f0fc 	udiv	r0, r5, ip
  402a4a:	fb0c 5510 	mls	r5, ip, r0, r5
  402a4e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402a52:	fb00 f808 	mul.w	r8, r0, r8
  402a56:	45a0      	cmp	r8, r4
  402a58:	d907      	bls.n	402a6a <__udivmoddi4+0x26e>
  402a5a:	18e4      	adds	r4, r4, r3
  402a5c:	f100 35ff 	add.w	r5, r0, #4294967295
  402a60:	d229      	bcs.n	402ab6 <__udivmoddi4+0x2ba>
  402a62:	45a0      	cmp	r8, r4
  402a64:	d927      	bls.n	402ab6 <__udivmoddi4+0x2ba>
  402a66:	3802      	subs	r0, #2
  402a68:	441c      	add	r4, r3
  402a6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402a6e:	eba4 0408 	sub.w	r4, r4, r8
  402a72:	fba0 8902 	umull	r8, r9, r0, r2
  402a76:	454c      	cmp	r4, r9
  402a78:	46c6      	mov	lr, r8
  402a7a:	464d      	mov	r5, r9
  402a7c:	d315      	bcc.n	402aaa <__udivmoddi4+0x2ae>
  402a7e:	d012      	beq.n	402aa6 <__udivmoddi4+0x2aa>
  402a80:	b156      	cbz	r6, 402a98 <__udivmoddi4+0x29c>
  402a82:	ebba 030e 	subs.w	r3, sl, lr
  402a86:	eb64 0405 	sbc.w	r4, r4, r5
  402a8a:	fa04 f707 	lsl.w	r7, r4, r7
  402a8e:	40cb      	lsrs	r3, r1
  402a90:	431f      	orrs	r7, r3
  402a92:	40cc      	lsrs	r4, r1
  402a94:	6037      	str	r7, [r6, #0]
  402a96:	6074      	str	r4, [r6, #4]
  402a98:	2100      	movs	r1, #0
  402a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a9e:	4618      	mov	r0, r3
  402aa0:	e6f8      	b.n	402894 <__udivmoddi4+0x98>
  402aa2:	4690      	mov	r8, r2
  402aa4:	e6e0      	b.n	402868 <__udivmoddi4+0x6c>
  402aa6:	45c2      	cmp	sl, r8
  402aa8:	d2ea      	bcs.n	402a80 <__udivmoddi4+0x284>
  402aaa:	ebb8 0e02 	subs.w	lr, r8, r2
  402aae:	eb69 0503 	sbc.w	r5, r9, r3
  402ab2:	3801      	subs	r0, #1
  402ab4:	e7e4      	b.n	402a80 <__udivmoddi4+0x284>
  402ab6:	4628      	mov	r0, r5
  402ab8:	e7d7      	b.n	402a6a <__udivmoddi4+0x26e>
  402aba:	4640      	mov	r0, r8
  402abc:	e791      	b.n	4029e2 <__udivmoddi4+0x1e6>
  402abe:	4681      	mov	r9, r0
  402ac0:	e7be      	b.n	402a40 <__udivmoddi4+0x244>
  402ac2:	4601      	mov	r1, r0
  402ac4:	e778      	b.n	4029b8 <__udivmoddi4+0x1bc>
  402ac6:	3802      	subs	r0, #2
  402ac8:	443c      	add	r4, r7
  402aca:	e745      	b.n	402958 <__udivmoddi4+0x15c>
  402acc:	4608      	mov	r0, r1
  402ace:	e708      	b.n	4028e2 <__udivmoddi4+0xe6>
  402ad0:	f1a8 0802 	sub.w	r8, r8, #2
  402ad4:	443d      	add	r5, r7
  402ad6:	e72b      	b.n	402930 <__udivmoddi4+0x134>

00402ad8 <__aeabi_idiv0>:
  402ad8:	4770      	bx	lr
  402ada:	bf00      	nop

00402adc <__libc_init_array>:
  402adc:	b570      	push	{r4, r5, r6, lr}
  402ade:	4e0f      	ldr	r6, [pc, #60]	; (402b1c <__libc_init_array+0x40>)
  402ae0:	4d0f      	ldr	r5, [pc, #60]	; (402b20 <__libc_init_array+0x44>)
  402ae2:	1b76      	subs	r6, r6, r5
  402ae4:	10b6      	asrs	r6, r6, #2
  402ae6:	bf18      	it	ne
  402ae8:	2400      	movne	r4, #0
  402aea:	d005      	beq.n	402af8 <__libc_init_array+0x1c>
  402aec:	3401      	adds	r4, #1
  402aee:	f855 3b04 	ldr.w	r3, [r5], #4
  402af2:	4798      	blx	r3
  402af4:	42a6      	cmp	r6, r4
  402af6:	d1f9      	bne.n	402aec <__libc_init_array+0x10>
  402af8:	4e0a      	ldr	r6, [pc, #40]	; (402b24 <__libc_init_array+0x48>)
  402afa:	4d0b      	ldr	r5, [pc, #44]	; (402b28 <__libc_init_array+0x4c>)
  402afc:	1b76      	subs	r6, r6, r5
  402afe:	f005 fc9f 	bl	408440 <_init>
  402b02:	10b6      	asrs	r6, r6, #2
  402b04:	bf18      	it	ne
  402b06:	2400      	movne	r4, #0
  402b08:	d006      	beq.n	402b18 <__libc_init_array+0x3c>
  402b0a:	3401      	adds	r4, #1
  402b0c:	f855 3b04 	ldr.w	r3, [r5], #4
  402b10:	4798      	blx	r3
  402b12:	42a6      	cmp	r6, r4
  402b14:	d1f9      	bne.n	402b0a <__libc_init_array+0x2e>
  402b16:	bd70      	pop	{r4, r5, r6, pc}
  402b18:	bd70      	pop	{r4, r5, r6, pc}
  402b1a:	bf00      	nop
  402b1c:	0040844c 	.word	0x0040844c
  402b20:	0040844c 	.word	0x0040844c
  402b24:	00408454 	.word	0x00408454
  402b28:	0040844c 	.word	0x0040844c

00402b2c <memcpy>:
  402b2c:	4684      	mov	ip, r0
  402b2e:	ea41 0300 	orr.w	r3, r1, r0
  402b32:	f013 0303 	ands.w	r3, r3, #3
  402b36:	d16d      	bne.n	402c14 <memcpy+0xe8>
  402b38:	3a40      	subs	r2, #64	; 0x40
  402b3a:	d341      	bcc.n	402bc0 <memcpy+0x94>
  402b3c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b40:	f840 3b04 	str.w	r3, [r0], #4
  402b44:	f851 3b04 	ldr.w	r3, [r1], #4
  402b48:	f840 3b04 	str.w	r3, [r0], #4
  402b4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b50:	f840 3b04 	str.w	r3, [r0], #4
  402b54:	f851 3b04 	ldr.w	r3, [r1], #4
  402b58:	f840 3b04 	str.w	r3, [r0], #4
  402b5c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b60:	f840 3b04 	str.w	r3, [r0], #4
  402b64:	f851 3b04 	ldr.w	r3, [r1], #4
  402b68:	f840 3b04 	str.w	r3, [r0], #4
  402b6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b70:	f840 3b04 	str.w	r3, [r0], #4
  402b74:	f851 3b04 	ldr.w	r3, [r1], #4
  402b78:	f840 3b04 	str.w	r3, [r0], #4
  402b7c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b80:	f840 3b04 	str.w	r3, [r0], #4
  402b84:	f851 3b04 	ldr.w	r3, [r1], #4
  402b88:	f840 3b04 	str.w	r3, [r0], #4
  402b8c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b90:	f840 3b04 	str.w	r3, [r0], #4
  402b94:	f851 3b04 	ldr.w	r3, [r1], #4
  402b98:	f840 3b04 	str.w	r3, [r0], #4
  402b9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402ba0:	f840 3b04 	str.w	r3, [r0], #4
  402ba4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ba8:	f840 3b04 	str.w	r3, [r0], #4
  402bac:	f851 3b04 	ldr.w	r3, [r1], #4
  402bb0:	f840 3b04 	str.w	r3, [r0], #4
  402bb4:	f851 3b04 	ldr.w	r3, [r1], #4
  402bb8:	f840 3b04 	str.w	r3, [r0], #4
  402bbc:	3a40      	subs	r2, #64	; 0x40
  402bbe:	d2bd      	bcs.n	402b3c <memcpy+0x10>
  402bc0:	3230      	adds	r2, #48	; 0x30
  402bc2:	d311      	bcc.n	402be8 <memcpy+0xbc>
  402bc4:	f851 3b04 	ldr.w	r3, [r1], #4
  402bc8:	f840 3b04 	str.w	r3, [r0], #4
  402bcc:	f851 3b04 	ldr.w	r3, [r1], #4
  402bd0:	f840 3b04 	str.w	r3, [r0], #4
  402bd4:	f851 3b04 	ldr.w	r3, [r1], #4
  402bd8:	f840 3b04 	str.w	r3, [r0], #4
  402bdc:	f851 3b04 	ldr.w	r3, [r1], #4
  402be0:	f840 3b04 	str.w	r3, [r0], #4
  402be4:	3a10      	subs	r2, #16
  402be6:	d2ed      	bcs.n	402bc4 <memcpy+0x98>
  402be8:	320c      	adds	r2, #12
  402bea:	d305      	bcc.n	402bf8 <memcpy+0xcc>
  402bec:	f851 3b04 	ldr.w	r3, [r1], #4
  402bf0:	f840 3b04 	str.w	r3, [r0], #4
  402bf4:	3a04      	subs	r2, #4
  402bf6:	d2f9      	bcs.n	402bec <memcpy+0xc0>
  402bf8:	3204      	adds	r2, #4
  402bfa:	d008      	beq.n	402c0e <memcpy+0xe2>
  402bfc:	07d2      	lsls	r2, r2, #31
  402bfe:	bf1c      	itt	ne
  402c00:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402c04:	f800 3b01 	strbne.w	r3, [r0], #1
  402c08:	d301      	bcc.n	402c0e <memcpy+0xe2>
  402c0a:	880b      	ldrh	r3, [r1, #0]
  402c0c:	8003      	strh	r3, [r0, #0]
  402c0e:	4660      	mov	r0, ip
  402c10:	4770      	bx	lr
  402c12:	bf00      	nop
  402c14:	2a08      	cmp	r2, #8
  402c16:	d313      	bcc.n	402c40 <memcpy+0x114>
  402c18:	078b      	lsls	r3, r1, #30
  402c1a:	d08d      	beq.n	402b38 <memcpy+0xc>
  402c1c:	f010 0303 	ands.w	r3, r0, #3
  402c20:	d08a      	beq.n	402b38 <memcpy+0xc>
  402c22:	f1c3 0304 	rsb	r3, r3, #4
  402c26:	1ad2      	subs	r2, r2, r3
  402c28:	07db      	lsls	r3, r3, #31
  402c2a:	bf1c      	itt	ne
  402c2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402c30:	f800 3b01 	strbne.w	r3, [r0], #1
  402c34:	d380      	bcc.n	402b38 <memcpy+0xc>
  402c36:	f831 3b02 	ldrh.w	r3, [r1], #2
  402c3a:	f820 3b02 	strh.w	r3, [r0], #2
  402c3e:	e77b      	b.n	402b38 <memcpy+0xc>
  402c40:	3a04      	subs	r2, #4
  402c42:	d3d9      	bcc.n	402bf8 <memcpy+0xcc>
  402c44:	3a01      	subs	r2, #1
  402c46:	f811 3b01 	ldrb.w	r3, [r1], #1
  402c4a:	f800 3b01 	strb.w	r3, [r0], #1
  402c4e:	d2f9      	bcs.n	402c44 <memcpy+0x118>
  402c50:	780b      	ldrb	r3, [r1, #0]
  402c52:	7003      	strb	r3, [r0, #0]
  402c54:	784b      	ldrb	r3, [r1, #1]
  402c56:	7043      	strb	r3, [r0, #1]
  402c58:	788b      	ldrb	r3, [r1, #2]
  402c5a:	7083      	strb	r3, [r0, #2]
  402c5c:	4660      	mov	r0, ip
  402c5e:	4770      	bx	lr

00402c60 <memset>:
  402c60:	b470      	push	{r4, r5, r6}
  402c62:	0786      	lsls	r6, r0, #30
  402c64:	d046      	beq.n	402cf4 <memset+0x94>
  402c66:	1e54      	subs	r4, r2, #1
  402c68:	2a00      	cmp	r2, #0
  402c6a:	d041      	beq.n	402cf0 <memset+0x90>
  402c6c:	b2ca      	uxtb	r2, r1
  402c6e:	4603      	mov	r3, r0
  402c70:	e002      	b.n	402c78 <memset+0x18>
  402c72:	f114 34ff 	adds.w	r4, r4, #4294967295
  402c76:	d33b      	bcc.n	402cf0 <memset+0x90>
  402c78:	f803 2b01 	strb.w	r2, [r3], #1
  402c7c:	079d      	lsls	r5, r3, #30
  402c7e:	d1f8      	bne.n	402c72 <memset+0x12>
  402c80:	2c03      	cmp	r4, #3
  402c82:	d92e      	bls.n	402ce2 <memset+0x82>
  402c84:	b2cd      	uxtb	r5, r1
  402c86:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402c8a:	2c0f      	cmp	r4, #15
  402c8c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402c90:	d919      	bls.n	402cc6 <memset+0x66>
  402c92:	f103 0210 	add.w	r2, r3, #16
  402c96:	4626      	mov	r6, r4
  402c98:	3e10      	subs	r6, #16
  402c9a:	2e0f      	cmp	r6, #15
  402c9c:	f842 5c10 	str.w	r5, [r2, #-16]
  402ca0:	f842 5c0c 	str.w	r5, [r2, #-12]
  402ca4:	f842 5c08 	str.w	r5, [r2, #-8]
  402ca8:	f842 5c04 	str.w	r5, [r2, #-4]
  402cac:	f102 0210 	add.w	r2, r2, #16
  402cb0:	d8f2      	bhi.n	402c98 <memset+0x38>
  402cb2:	f1a4 0210 	sub.w	r2, r4, #16
  402cb6:	f022 020f 	bic.w	r2, r2, #15
  402cba:	f004 040f 	and.w	r4, r4, #15
  402cbe:	3210      	adds	r2, #16
  402cc0:	2c03      	cmp	r4, #3
  402cc2:	4413      	add	r3, r2
  402cc4:	d90d      	bls.n	402ce2 <memset+0x82>
  402cc6:	461e      	mov	r6, r3
  402cc8:	4622      	mov	r2, r4
  402cca:	3a04      	subs	r2, #4
  402ccc:	2a03      	cmp	r2, #3
  402cce:	f846 5b04 	str.w	r5, [r6], #4
  402cd2:	d8fa      	bhi.n	402cca <memset+0x6a>
  402cd4:	1f22      	subs	r2, r4, #4
  402cd6:	f022 0203 	bic.w	r2, r2, #3
  402cda:	3204      	adds	r2, #4
  402cdc:	4413      	add	r3, r2
  402cde:	f004 0403 	and.w	r4, r4, #3
  402ce2:	b12c      	cbz	r4, 402cf0 <memset+0x90>
  402ce4:	b2c9      	uxtb	r1, r1
  402ce6:	441c      	add	r4, r3
  402ce8:	f803 1b01 	strb.w	r1, [r3], #1
  402cec:	429c      	cmp	r4, r3
  402cee:	d1fb      	bne.n	402ce8 <memset+0x88>
  402cf0:	bc70      	pop	{r4, r5, r6}
  402cf2:	4770      	bx	lr
  402cf4:	4614      	mov	r4, r2
  402cf6:	4603      	mov	r3, r0
  402cf8:	e7c2      	b.n	402c80 <memset+0x20>
  402cfa:	bf00      	nop

00402cfc <printf>:
  402cfc:	b40f      	push	{r0, r1, r2, r3}
  402cfe:	b500      	push	{lr}
  402d00:	4907      	ldr	r1, [pc, #28]	; (402d20 <printf+0x24>)
  402d02:	b083      	sub	sp, #12
  402d04:	ab04      	add	r3, sp, #16
  402d06:	6808      	ldr	r0, [r1, #0]
  402d08:	f853 2b04 	ldr.w	r2, [r3], #4
  402d0c:	6881      	ldr	r1, [r0, #8]
  402d0e:	9301      	str	r3, [sp, #4]
  402d10:	f000 fa0e 	bl	403130 <_vfprintf_r>
  402d14:	b003      	add	sp, #12
  402d16:	f85d eb04 	ldr.w	lr, [sp], #4
  402d1a:	b004      	add	sp, #16
  402d1c:	4770      	bx	lr
  402d1e:	bf00      	nop
  402d20:	20400018 	.word	0x20400018

00402d24 <_puts_r>:
  402d24:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d26:	4605      	mov	r5, r0
  402d28:	b089      	sub	sp, #36	; 0x24
  402d2a:	4608      	mov	r0, r1
  402d2c:	460c      	mov	r4, r1
  402d2e:	f000 f947 	bl	402fc0 <strlen>
  402d32:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402d34:	4f21      	ldr	r7, [pc, #132]	; (402dbc <_puts_r+0x98>)
  402d36:	9404      	str	r4, [sp, #16]
  402d38:	2601      	movs	r6, #1
  402d3a:	1c44      	adds	r4, r0, #1
  402d3c:	a904      	add	r1, sp, #16
  402d3e:	2202      	movs	r2, #2
  402d40:	9403      	str	r4, [sp, #12]
  402d42:	9005      	str	r0, [sp, #20]
  402d44:	68ac      	ldr	r4, [r5, #8]
  402d46:	9706      	str	r7, [sp, #24]
  402d48:	9607      	str	r6, [sp, #28]
  402d4a:	9101      	str	r1, [sp, #4]
  402d4c:	9202      	str	r2, [sp, #8]
  402d4e:	b353      	cbz	r3, 402da6 <_puts_r+0x82>
  402d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d52:	f013 0f01 	tst.w	r3, #1
  402d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d5a:	b29a      	uxth	r2, r3
  402d5c:	d101      	bne.n	402d62 <_puts_r+0x3e>
  402d5e:	0590      	lsls	r0, r2, #22
  402d60:	d525      	bpl.n	402dae <_puts_r+0x8a>
  402d62:	0491      	lsls	r1, r2, #18
  402d64:	d406      	bmi.n	402d74 <_puts_r+0x50>
  402d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402d6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402d70:	81a3      	strh	r3, [r4, #12]
  402d72:	6662      	str	r2, [r4, #100]	; 0x64
  402d74:	4628      	mov	r0, r5
  402d76:	aa01      	add	r2, sp, #4
  402d78:	4621      	mov	r1, r4
  402d7a:	f003 f811 	bl	405da0 <__sfvwrite_r>
  402d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d80:	2800      	cmp	r0, #0
  402d82:	bf0c      	ite	eq
  402d84:	250a      	moveq	r5, #10
  402d86:	f04f 35ff 	movne.w	r5, #4294967295
  402d8a:	07da      	lsls	r2, r3, #31
  402d8c:	d402      	bmi.n	402d94 <_puts_r+0x70>
  402d8e:	89a3      	ldrh	r3, [r4, #12]
  402d90:	059b      	lsls	r3, r3, #22
  402d92:	d502      	bpl.n	402d9a <_puts_r+0x76>
  402d94:	4628      	mov	r0, r5
  402d96:	b009      	add	sp, #36	; 0x24
  402d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d9c:	f003 f9ea 	bl	406174 <__retarget_lock_release_recursive>
  402da0:	4628      	mov	r0, r5
  402da2:	b009      	add	sp, #36	; 0x24
  402da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402da6:	4628      	mov	r0, r5
  402da8:	f002 fdee 	bl	405988 <__sinit>
  402dac:	e7d0      	b.n	402d50 <_puts_r+0x2c>
  402dae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402db0:	f003 f9de 	bl	406170 <__retarget_lock_acquire_recursive>
  402db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402db8:	b29a      	uxth	r2, r3
  402dba:	e7d2      	b.n	402d62 <_puts_r+0x3e>
  402dbc:	004080b8 	.word	0x004080b8

00402dc0 <puts>:
  402dc0:	4b02      	ldr	r3, [pc, #8]	; (402dcc <puts+0xc>)
  402dc2:	4601      	mov	r1, r0
  402dc4:	6818      	ldr	r0, [r3, #0]
  402dc6:	f7ff bfad 	b.w	402d24 <_puts_r>
  402dca:	bf00      	nop
  402dcc:	20400018 	.word	0x20400018

00402dd0 <__srget_r>:
  402dd0:	b538      	push	{r3, r4, r5, lr}
  402dd2:	460c      	mov	r4, r1
  402dd4:	4605      	mov	r5, r0
  402dd6:	b108      	cbz	r0, 402ddc <__srget_r+0xc>
  402dd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402dda:	b163      	cbz	r3, 402df6 <__srget_r+0x26>
  402ddc:	4628      	mov	r0, r5
  402dde:	4621      	mov	r1, r4
  402de0:	f004 fa80 	bl	4072e4 <__srefill_r>
  402de4:	b950      	cbnz	r0, 402dfc <__srget_r+0x2c>
  402de6:	e894 000c 	ldmia.w	r4, {r2, r3}
  402dea:	3b01      	subs	r3, #1
  402dec:	1c51      	adds	r1, r2, #1
  402dee:	e884 000a 	stmia.w	r4, {r1, r3}
  402df2:	7810      	ldrb	r0, [r2, #0]
  402df4:	bd38      	pop	{r3, r4, r5, pc}
  402df6:	f002 fdc7 	bl	405988 <__sinit>
  402dfa:	e7ef      	b.n	402ddc <__srget_r+0xc>
  402dfc:	f04f 30ff 	mov.w	r0, #4294967295
  402e00:	bd38      	pop	{r3, r4, r5, pc}
  402e02:	bf00      	nop

00402e04 <setbuf>:
  402e04:	2900      	cmp	r1, #0
  402e06:	bf0c      	ite	eq
  402e08:	2202      	moveq	r2, #2
  402e0a:	2200      	movne	r2, #0
  402e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e10:	f000 b800 	b.w	402e14 <setvbuf>

00402e14 <setvbuf>:
  402e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402e18:	4c61      	ldr	r4, [pc, #388]	; (402fa0 <setvbuf+0x18c>)
  402e1a:	6825      	ldr	r5, [r4, #0]
  402e1c:	b083      	sub	sp, #12
  402e1e:	4604      	mov	r4, r0
  402e20:	460f      	mov	r7, r1
  402e22:	4690      	mov	r8, r2
  402e24:	461e      	mov	r6, r3
  402e26:	b115      	cbz	r5, 402e2e <setvbuf+0x1a>
  402e28:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402e2a:	2b00      	cmp	r3, #0
  402e2c:	d064      	beq.n	402ef8 <setvbuf+0xe4>
  402e2e:	f1b8 0f02 	cmp.w	r8, #2
  402e32:	d006      	beq.n	402e42 <setvbuf+0x2e>
  402e34:	f1b8 0f01 	cmp.w	r8, #1
  402e38:	f200 809f 	bhi.w	402f7a <setvbuf+0x166>
  402e3c:	2e00      	cmp	r6, #0
  402e3e:	f2c0 809c 	blt.w	402f7a <setvbuf+0x166>
  402e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402e44:	07d8      	lsls	r0, r3, #31
  402e46:	d534      	bpl.n	402eb2 <setvbuf+0x9e>
  402e48:	4621      	mov	r1, r4
  402e4a:	4628      	mov	r0, r5
  402e4c:	f002 fd32 	bl	4058b4 <_fflush_r>
  402e50:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402e52:	b141      	cbz	r1, 402e66 <setvbuf+0x52>
  402e54:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402e58:	4299      	cmp	r1, r3
  402e5a:	d002      	beq.n	402e62 <setvbuf+0x4e>
  402e5c:	4628      	mov	r0, r5
  402e5e:	f002 feb9 	bl	405bd4 <_free_r>
  402e62:	2300      	movs	r3, #0
  402e64:	6323      	str	r3, [r4, #48]	; 0x30
  402e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e6a:	2200      	movs	r2, #0
  402e6c:	61a2      	str	r2, [r4, #24]
  402e6e:	6062      	str	r2, [r4, #4]
  402e70:	061a      	lsls	r2, r3, #24
  402e72:	d43a      	bmi.n	402eea <setvbuf+0xd6>
  402e74:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402e78:	f023 0303 	bic.w	r3, r3, #3
  402e7c:	f1b8 0f02 	cmp.w	r8, #2
  402e80:	81a3      	strh	r3, [r4, #12]
  402e82:	d01d      	beq.n	402ec0 <setvbuf+0xac>
  402e84:	ab01      	add	r3, sp, #4
  402e86:	466a      	mov	r2, sp
  402e88:	4621      	mov	r1, r4
  402e8a:	4628      	mov	r0, r5
  402e8c:	f003 f974 	bl	406178 <__swhatbuf_r>
  402e90:	89a3      	ldrh	r3, [r4, #12]
  402e92:	4318      	orrs	r0, r3
  402e94:	81a0      	strh	r0, [r4, #12]
  402e96:	2e00      	cmp	r6, #0
  402e98:	d132      	bne.n	402f00 <setvbuf+0xec>
  402e9a:	9e00      	ldr	r6, [sp, #0]
  402e9c:	4630      	mov	r0, r6
  402e9e:	f003 f9e3 	bl	406268 <malloc>
  402ea2:	4607      	mov	r7, r0
  402ea4:	2800      	cmp	r0, #0
  402ea6:	d06b      	beq.n	402f80 <setvbuf+0x16c>
  402ea8:	89a3      	ldrh	r3, [r4, #12]
  402eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402eae:	81a3      	strh	r3, [r4, #12]
  402eb0:	e028      	b.n	402f04 <setvbuf+0xf0>
  402eb2:	89a3      	ldrh	r3, [r4, #12]
  402eb4:	0599      	lsls	r1, r3, #22
  402eb6:	d4c7      	bmi.n	402e48 <setvbuf+0x34>
  402eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402eba:	f003 f959 	bl	406170 <__retarget_lock_acquire_recursive>
  402ebe:	e7c3      	b.n	402e48 <setvbuf+0x34>
  402ec0:	2500      	movs	r5, #0
  402ec2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402ec4:	2600      	movs	r6, #0
  402ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402eca:	f043 0302 	orr.w	r3, r3, #2
  402ece:	2001      	movs	r0, #1
  402ed0:	60a6      	str	r6, [r4, #8]
  402ed2:	07ce      	lsls	r6, r1, #31
  402ed4:	81a3      	strh	r3, [r4, #12]
  402ed6:	6022      	str	r2, [r4, #0]
  402ed8:	6122      	str	r2, [r4, #16]
  402eda:	6160      	str	r0, [r4, #20]
  402edc:	d401      	bmi.n	402ee2 <setvbuf+0xce>
  402ede:	0598      	lsls	r0, r3, #22
  402ee0:	d53e      	bpl.n	402f60 <setvbuf+0x14c>
  402ee2:	4628      	mov	r0, r5
  402ee4:	b003      	add	sp, #12
  402ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402eea:	6921      	ldr	r1, [r4, #16]
  402eec:	4628      	mov	r0, r5
  402eee:	f002 fe71 	bl	405bd4 <_free_r>
  402ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ef6:	e7bd      	b.n	402e74 <setvbuf+0x60>
  402ef8:	4628      	mov	r0, r5
  402efa:	f002 fd45 	bl	405988 <__sinit>
  402efe:	e796      	b.n	402e2e <setvbuf+0x1a>
  402f00:	2f00      	cmp	r7, #0
  402f02:	d0cb      	beq.n	402e9c <setvbuf+0x88>
  402f04:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402f06:	2b00      	cmp	r3, #0
  402f08:	d033      	beq.n	402f72 <setvbuf+0x15e>
  402f0a:	9b00      	ldr	r3, [sp, #0]
  402f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402f10:	6027      	str	r7, [r4, #0]
  402f12:	429e      	cmp	r6, r3
  402f14:	bf1c      	itt	ne
  402f16:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402f1a:	81a2      	strhne	r2, [r4, #12]
  402f1c:	f1b8 0f01 	cmp.w	r8, #1
  402f20:	bf04      	itt	eq
  402f22:	f042 0201 	orreq.w	r2, r2, #1
  402f26:	81a2      	strheq	r2, [r4, #12]
  402f28:	b292      	uxth	r2, r2
  402f2a:	f012 0308 	ands.w	r3, r2, #8
  402f2e:	6127      	str	r7, [r4, #16]
  402f30:	6166      	str	r6, [r4, #20]
  402f32:	d00e      	beq.n	402f52 <setvbuf+0x13e>
  402f34:	07d1      	lsls	r1, r2, #31
  402f36:	d51a      	bpl.n	402f6e <setvbuf+0x15a>
  402f38:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402f3a:	4276      	negs	r6, r6
  402f3c:	2300      	movs	r3, #0
  402f3e:	f015 0501 	ands.w	r5, r5, #1
  402f42:	61a6      	str	r6, [r4, #24]
  402f44:	60a3      	str	r3, [r4, #8]
  402f46:	d009      	beq.n	402f5c <setvbuf+0x148>
  402f48:	2500      	movs	r5, #0
  402f4a:	4628      	mov	r0, r5
  402f4c:	b003      	add	sp, #12
  402f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f52:	60a3      	str	r3, [r4, #8]
  402f54:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402f56:	f015 0501 	ands.w	r5, r5, #1
  402f5a:	d1f5      	bne.n	402f48 <setvbuf+0x134>
  402f5c:	0593      	lsls	r3, r2, #22
  402f5e:	d4c0      	bmi.n	402ee2 <setvbuf+0xce>
  402f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402f62:	f003 f907 	bl	406174 <__retarget_lock_release_recursive>
  402f66:	4628      	mov	r0, r5
  402f68:	b003      	add	sp, #12
  402f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f6e:	60a6      	str	r6, [r4, #8]
  402f70:	e7f0      	b.n	402f54 <setvbuf+0x140>
  402f72:	4628      	mov	r0, r5
  402f74:	f002 fd08 	bl	405988 <__sinit>
  402f78:	e7c7      	b.n	402f0a <setvbuf+0xf6>
  402f7a:	f04f 35ff 	mov.w	r5, #4294967295
  402f7e:	e7b0      	b.n	402ee2 <setvbuf+0xce>
  402f80:	f8dd 9000 	ldr.w	r9, [sp]
  402f84:	45b1      	cmp	r9, r6
  402f86:	d004      	beq.n	402f92 <setvbuf+0x17e>
  402f88:	4648      	mov	r0, r9
  402f8a:	f003 f96d 	bl	406268 <malloc>
  402f8e:	4607      	mov	r7, r0
  402f90:	b920      	cbnz	r0, 402f9c <setvbuf+0x188>
  402f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f96:	f04f 35ff 	mov.w	r5, #4294967295
  402f9a:	e792      	b.n	402ec2 <setvbuf+0xae>
  402f9c:	464e      	mov	r6, r9
  402f9e:	e783      	b.n	402ea8 <setvbuf+0x94>
  402fa0:	20400018 	.word	0x20400018
	...

00402fc0 <strlen>:
  402fc0:	f890 f000 	pld	[r0]
  402fc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402fc8:	f020 0107 	bic.w	r1, r0, #7
  402fcc:	f06f 0c00 	mvn.w	ip, #0
  402fd0:	f010 0407 	ands.w	r4, r0, #7
  402fd4:	f891 f020 	pld	[r1, #32]
  402fd8:	f040 8049 	bne.w	40306e <strlen+0xae>
  402fdc:	f04f 0400 	mov.w	r4, #0
  402fe0:	f06f 0007 	mvn.w	r0, #7
  402fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402fe8:	f891 f040 	pld	[r1, #64]	; 0x40
  402fec:	f100 0008 	add.w	r0, r0, #8
  402ff0:	fa82 f24c 	uadd8	r2, r2, ip
  402ff4:	faa4 f28c 	sel	r2, r4, ip
  402ff8:	fa83 f34c 	uadd8	r3, r3, ip
  402ffc:	faa2 f38c 	sel	r3, r2, ip
  403000:	bb4b      	cbnz	r3, 403056 <strlen+0x96>
  403002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403006:	fa82 f24c 	uadd8	r2, r2, ip
  40300a:	f100 0008 	add.w	r0, r0, #8
  40300e:	faa4 f28c 	sel	r2, r4, ip
  403012:	fa83 f34c 	uadd8	r3, r3, ip
  403016:	faa2 f38c 	sel	r3, r2, ip
  40301a:	b9e3      	cbnz	r3, 403056 <strlen+0x96>
  40301c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403020:	fa82 f24c 	uadd8	r2, r2, ip
  403024:	f100 0008 	add.w	r0, r0, #8
  403028:	faa4 f28c 	sel	r2, r4, ip
  40302c:	fa83 f34c 	uadd8	r3, r3, ip
  403030:	faa2 f38c 	sel	r3, r2, ip
  403034:	b97b      	cbnz	r3, 403056 <strlen+0x96>
  403036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40303a:	f101 0120 	add.w	r1, r1, #32
  40303e:	fa82 f24c 	uadd8	r2, r2, ip
  403042:	f100 0008 	add.w	r0, r0, #8
  403046:	faa4 f28c 	sel	r2, r4, ip
  40304a:	fa83 f34c 	uadd8	r3, r3, ip
  40304e:	faa2 f38c 	sel	r3, r2, ip
  403052:	2b00      	cmp	r3, #0
  403054:	d0c6      	beq.n	402fe4 <strlen+0x24>
  403056:	2a00      	cmp	r2, #0
  403058:	bf04      	itt	eq
  40305a:	3004      	addeq	r0, #4
  40305c:	461a      	moveq	r2, r3
  40305e:	ba12      	rev	r2, r2
  403060:	fab2 f282 	clz	r2, r2
  403064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40306c:	4770      	bx	lr
  40306e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403072:	f004 0503 	and.w	r5, r4, #3
  403076:	f1c4 0000 	rsb	r0, r4, #0
  40307a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40307e:	f014 0f04 	tst.w	r4, #4
  403082:	f891 f040 	pld	[r1, #64]	; 0x40
  403086:	fa0c f505 	lsl.w	r5, ip, r5
  40308a:	ea62 0205 	orn	r2, r2, r5
  40308e:	bf1c      	itt	ne
  403090:	ea63 0305 	ornne	r3, r3, r5
  403094:	4662      	movne	r2, ip
  403096:	f04f 0400 	mov.w	r4, #0
  40309a:	e7a9      	b.n	402ff0 <strlen+0x30>

0040309c <__sprint_r.part.0>:
  40309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4030a2:	049c      	lsls	r4, r3, #18
  4030a4:	4693      	mov	fp, r2
  4030a6:	d52f      	bpl.n	403108 <__sprint_r.part.0+0x6c>
  4030a8:	6893      	ldr	r3, [r2, #8]
  4030aa:	6812      	ldr	r2, [r2, #0]
  4030ac:	b353      	cbz	r3, 403104 <__sprint_r.part.0+0x68>
  4030ae:	460e      	mov	r6, r1
  4030b0:	4607      	mov	r7, r0
  4030b2:	f102 0908 	add.w	r9, r2, #8
  4030b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4030ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4030be:	d017      	beq.n	4030f0 <__sprint_r.part.0+0x54>
  4030c0:	3d04      	subs	r5, #4
  4030c2:	2400      	movs	r4, #0
  4030c4:	e001      	b.n	4030ca <__sprint_r.part.0+0x2e>
  4030c6:	45a0      	cmp	r8, r4
  4030c8:	d010      	beq.n	4030ec <__sprint_r.part.0+0x50>
  4030ca:	4632      	mov	r2, r6
  4030cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4030d0:	4638      	mov	r0, r7
  4030d2:	f002 fcfb 	bl	405acc <_fputwc_r>
  4030d6:	1c43      	adds	r3, r0, #1
  4030d8:	f104 0401 	add.w	r4, r4, #1
  4030dc:	d1f3      	bne.n	4030c6 <__sprint_r.part.0+0x2a>
  4030de:	2300      	movs	r3, #0
  4030e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4030e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4030e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4030f0:	f02a 0a03 	bic.w	sl, sl, #3
  4030f4:	eba3 030a 	sub.w	r3, r3, sl
  4030f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4030fc:	f109 0908 	add.w	r9, r9, #8
  403100:	2b00      	cmp	r3, #0
  403102:	d1d8      	bne.n	4030b6 <__sprint_r.part.0+0x1a>
  403104:	2000      	movs	r0, #0
  403106:	e7ea      	b.n	4030de <__sprint_r.part.0+0x42>
  403108:	f002 fe4a 	bl	405da0 <__sfvwrite_r>
  40310c:	2300      	movs	r3, #0
  40310e:	f8cb 3008 	str.w	r3, [fp, #8]
  403112:	f8cb 3004 	str.w	r3, [fp, #4]
  403116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40311a:	bf00      	nop

0040311c <__sprint_r>:
  40311c:	6893      	ldr	r3, [r2, #8]
  40311e:	b10b      	cbz	r3, 403124 <__sprint_r+0x8>
  403120:	f7ff bfbc 	b.w	40309c <__sprint_r.part.0>
  403124:	b410      	push	{r4}
  403126:	4618      	mov	r0, r3
  403128:	6053      	str	r3, [r2, #4]
  40312a:	bc10      	pop	{r4}
  40312c:	4770      	bx	lr
  40312e:	bf00      	nop

00403130 <_vfprintf_r>:
  403130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403134:	b0c1      	sub	sp, #260	; 0x104
  403136:	461d      	mov	r5, r3
  403138:	468a      	mov	sl, r1
  40313a:	4691      	mov	r9, r2
  40313c:	4604      	mov	r4, r0
  40313e:	9008      	str	r0, [sp, #32]
  403140:	f003 f804 	bl	40614c <_localeconv_r>
  403144:	6803      	ldr	r3, [r0, #0]
  403146:	9315      	str	r3, [sp, #84]	; 0x54
  403148:	4618      	mov	r0, r3
  40314a:	f7ff ff39 	bl	402fc0 <strlen>
  40314e:	950e      	str	r5, [sp, #56]	; 0x38
  403150:	9014      	str	r0, [sp, #80]	; 0x50
  403152:	b11c      	cbz	r4, 40315c <_vfprintf_r+0x2c>
  403154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403156:	2b00      	cmp	r3, #0
  403158:	f000 825f 	beq.w	40361a <_vfprintf_r+0x4ea>
  40315c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  403160:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  403164:	f013 0f01 	tst.w	r3, #1
  403168:	b293      	uxth	r3, r2
  40316a:	d102      	bne.n	403172 <_vfprintf_r+0x42>
  40316c:	0599      	lsls	r1, r3, #22
  40316e:	f140 8275 	bpl.w	40365c <_vfprintf_r+0x52c>
  403172:	049f      	lsls	r7, r3, #18
  403174:	d40a      	bmi.n	40318c <_vfprintf_r+0x5c>
  403176:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  40317a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40317e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403182:	f8aa 300c 	strh.w	r3, [sl, #12]
  403186:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  40318a:	b29b      	uxth	r3, r3
  40318c:	071e      	lsls	r6, r3, #28
  40318e:	f140 8223 	bpl.w	4035d8 <_vfprintf_r+0x4a8>
  403192:	f8da 2010 	ldr.w	r2, [sl, #16]
  403196:	2a00      	cmp	r2, #0
  403198:	f000 821e 	beq.w	4035d8 <_vfprintf_r+0x4a8>
  40319c:	f003 021a 	and.w	r2, r3, #26
  4031a0:	2a0a      	cmp	r2, #10
  4031a2:	f000 823e 	beq.w	403622 <_vfprintf_r+0x4f2>
  4031a6:	2300      	movs	r3, #0
  4031a8:	4618      	mov	r0, r3
  4031aa:	9311      	str	r3, [sp, #68]	; 0x44
  4031ac:	9313      	str	r3, [sp, #76]	; 0x4c
  4031ae:	9312      	str	r3, [sp, #72]	; 0x48
  4031b0:	9325      	str	r3, [sp, #148]	; 0x94
  4031b2:	9324      	str	r3, [sp, #144]	; 0x90
  4031b4:	9318      	str	r3, [sp, #96]	; 0x60
  4031b6:	9319      	str	r3, [sp, #100]	; 0x64
  4031b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4031ba:	ab30      	add	r3, sp, #192	; 0xc0
  4031bc:	9323      	str	r3, [sp, #140]	; 0x8c
  4031be:	4698      	mov	r8, r3
  4031c0:	9016      	str	r0, [sp, #88]	; 0x58
  4031c2:	9017      	str	r0, [sp, #92]	; 0x5c
  4031c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4031c8:	f899 3000 	ldrb.w	r3, [r9]
  4031cc:	464c      	mov	r4, r9
  4031ce:	b1eb      	cbz	r3, 40320c <_vfprintf_r+0xdc>
  4031d0:	2b25      	cmp	r3, #37	; 0x25
  4031d2:	d102      	bne.n	4031da <_vfprintf_r+0xaa>
  4031d4:	e01a      	b.n	40320c <_vfprintf_r+0xdc>
  4031d6:	2b25      	cmp	r3, #37	; 0x25
  4031d8:	d003      	beq.n	4031e2 <_vfprintf_r+0xb2>
  4031da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4031de:	2b00      	cmp	r3, #0
  4031e0:	d1f9      	bne.n	4031d6 <_vfprintf_r+0xa6>
  4031e2:	eba4 0509 	sub.w	r5, r4, r9
  4031e6:	b18d      	cbz	r5, 40320c <_vfprintf_r+0xdc>
  4031e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4031ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4031ec:	f8c8 9000 	str.w	r9, [r8]
  4031f0:	3301      	adds	r3, #1
  4031f2:	442a      	add	r2, r5
  4031f4:	2b07      	cmp	r3, #7
  4031f6:	f8c8 5004 	str.w	r5, [r8, #4]
  4031fa:	9225      	str	r2, [sp, #148]	; 0x94
  4031fc:	9324      	str	r3, [sp, #144]	; 0x90
  4031fe:	f300 8201 	bgt.w	403604 <_vfprintf_r+0x4d4>
  403202:	f108 0808 	add.w	r8, r8, #8
  403206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403208:	442b      	add	r3, r5
  40320a:	930b      	str	r3, [sp, #44]	; 0x2c
  40320c:	7823      	ldrb	r3, [r4, #0]
  40320e:	2b00      	cmp	r3, #0
  403210:	f000 83f0 	beq.w	4039f4 <_vfprintf_r+0x8c4>
  403214:	2300      	movs	r3, #0
  403216:	461a      	mov	r2, r3
  403218:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40321c:	4619      	mov	r1, r3
  40321e:	930c      	str	r3, [sp, #48]	; 0x30
  403220:	469b      	mov	fp, r3
  403222:	7866      	ldrb	r6, [r4, #1]
  403224:	f04f 33ff 	mov.w	r3, #4294967295
  403228:	f104 0901 	add.w	r9, r4, #1
  40322c:	9309      	str	r3, [sp, #36]	; 0x24
  40322e:	f109 0901 	add.w	r9, r9, #1
  403232:	f1a6 0320 	sub.w	r3, r6, #32
  403236:	2b58      	cmp	r3, #88	; 0x58
  403238:	f200 83bf 	bhi.w	4039ba <_vfprintf_r+0x88a>
  40323c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403240:	03bd02e0 	.word	0x03bd02e0
  403244:	034f03bd 	.word	0x034f03bd
  403248:	03bd03bd 	.word	0x03bd03bd
  40324c:	03bd03bd 	.word	0x03bd03bd
  403250:	03bd03bd 	.word	0x03bd03bd
  403254:	03080354 	.word	0x03080354
  403258:	021a03bd 	.word	0x021a03bd
  40325c:	03bd02e8 	.word	0x03bd02e8
  403260:	033a0303 	.word	0x033a0303
  403264:	033a033a 	.word	0x033a033a
  403268:	033a033a 	.word	0x033a033a
  40326c:	033a033a 	.word	0x033a033a
  403270:	033a033a 	.word	0x033a033a
  403274:	03bd03bd 	.word	0x03bd03bd
  403278:	03bd03bd 	.word	0x03bd03bd
  40327c:	03bd03bd 	.word	0x03bd03bd
  403280:	03bd03bd 	.word	0x03bd03bd
  403284:	03bd03bd 	.word	0x03bd03bd
  403288:	03620349 	.word	0x03620349
  40328c:	036203bd 	.word	0x036203bd
  403290:	03bd03bd 	.word	0x03bd03bd
  403294:	03bd03bd 	.word	0x03bd03bd
  403298:	03bd03a2 	.word	0x03bd03a2
  40329c:	006f03bd 	.word	0x006f03bd
  4032a0:	03bd03bd 	.word	0x03bd03bd
  4032a4:	03bd03bd 	.word	0x03bd03bd
  4032a8:	005903bd 	.word	0x005903bd
  4032ac:	03bd03bd 	.word	0x03bd03bd
  4032b0:	03bd031e 	.word	0x03bd031e
  4032b4:	03bd03bd 	.word	0x03bd03bd
  4032b8:	03bd03bd 	.word	0x03bd03bd
  4032bc:	03bd03bd 	.word	0x03bd03bd
  4032c0:	03bd03bd 	.word	0x03bd03bd
  4032c4:	032403bd 	.word	0x032403bd
  4032c8:	03620273 	.word	0x03620273
  4032cc:	03620362 	.word	0x03620362
  4032d0:	027302b7 	.word	0x027302b7
  4032d4:	03bd03bd 	.word	0x03bd03bd
  4032d8:	03bd02bc 	.word	0x03bd02bc
  4032dc:	007102c9 	.word	0x007102c9
  4032e0:	0247030d 	.word	0x0247030d
  4032e4:	025203bd 	.word	0x025203bd
  4032e8:	005b03bd 	.word	0x005b03bd
  4032ec:	03bd03bd 	.word	0x03bd03bd
  4032f0:	021f      	.short	0x021f
  4032f2:	f04b 0b10 	orr.w	fp, fp, #16
  4032f6:	f01b 0f20 	tst.w	fp, #32
  4032fa:	f040 8353 	bne.w	4039a4 <_vfprintf_r+0x874>
  4032fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403300:	f01b 0f10 	tst.w	fp, #16
  403304:	4613      	mov	r3, r2
  403306:	f040 85b4 	bne.w	403e72 <_vfprintf_r+0xd42>
  40330a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40330e:	f000 85b0 	beq.w	403e72 <_vfprintf_r+0xd42>
  403312:	8814      	ldrh	r4, [r2, #0]
  403314:	3204      	adds	r2, #4
  403316:	2500      	movs	r5, #0
  403318:	2301      	movs	r3, #1
  40331a:	920e      	str	r2, [sp, #56]	; 0x38
  40331c:	e014      	b.n	403348 <_vfprintf_r+0x218>
  40331e:	f04b 0b10 	orr.w	fp, fp, #16
  403322:	f01b 0320 	ands.w	r3, fp, #32
  403326:	f040 8332 	bne.w	40398e <_vfprintf_r+0x85e>
  40332a:	f01b 0210 	ands.w	r2, fp, #16
  40332e:	f040 8589 	bne.w	403e44 <_vfprintf_r+0xd14>
  403332:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403336:	f000 8585 	beq.w	403e44 <_vfprintf_r+0xd14>
  40333a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40333c:	4613      	mov	r3, r2
  40333e:	460a      	mov	r2, r1
  403340:	3204      	adds	r2, #4
  403342:	880c      	ldrh	r4, [r1, #0]
  403344:	920e      	str	r2, [sp, #56]	; 0x38
  403346:	2500      	movs	r5, #0
  403348:	f04f 0a00 	mov.w	sl, #0
  40334c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403350:	9909      	ldr	r1, [sp, #36]	; 0x24
  403352:	1c4a      	adds	r2, r1, #1
  403354:	f000 820b 	beq.w	40376e <_vfprintf_r+0x63e>
  403358:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40335c:	9206      	str	r2, [sp, #24]
  40335e:	ea54 0205 	orrs.w	r2, r4, r5
  403362:	f040 820a 	bne.w	40377a <_vfprintf_r+0x64a>
  403366:	2900      	cmp	r1, #0
  403368:	f040 846f 	bne.w	403c4a <_vfprintf_r+0xb1a>
  40336c:	2b00      	cmp	r3, #0
  40336e:	f040 852d 	bne.w	403dcc <_vfprintf_r+0xc9c>
  403372:	f01b 0301 	ands.w	r3, fp, #1
  403376:	930d      	str	r3, [sp, #52]	; 0x34
  403378:	f000 8668 	beq.w	40404c <_vfprintf_r+0xf1c>
  40337c:	af40      	add	r7, sp, #256	; 0x100
  40337e:	2330      	movs	r3, #48	; 0x30
  403380:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403384:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403388:	4293      	cmp	r3, r2
  40338a:	bfb8      	it	lt
  40338c:	4613      	movlt	r3, r2
  40338e:	9307      	str	r3, [sp, #28]
  403390:	2300      	movs	r3, #0
  403392:	9310      	str	r3, [sp, #64]	; 0x40
  403394:	f1ba 0f00 	cmp.w	sl, #0
  403398:	d002      	beq.n	4033a0 <_vfprintf_r+0x270>
  40339a:	9b07      	ldr	r3, [sp, #28]
  40339c:	3301      	adds	r3, #1
  40339e:	9307      	str	r3, [sp, #28]
  4033a0:	9b06      	ldr	r3, [sp, #24]
  4033a2:	f013 0302 	ands.w	r3, r3, #2
  4033a6:	930f      	str	r3, [sp, #60]	; 0x3c
  4033a8:	d002      	beq.n	4033b0 <_vfprintf_r+0x280>
  4033aa:	9b07      	ldr	r3, [sp, #28]
  4033ac:	3302      	adds	r3, #2
  4033ae:	9307      	str	r3, [sp, #28]
  4033b0:	9b06      	ldr	r3, [sp, #24]
  4033b2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4033b6:	f040 831b 	bne.w	4039f0 <_vfprintf_r+0x8c0>
  4033ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4033bc:	9a07      	ldr	r2, [sp, #28]
  4033be:	eba3 0b02 	sub.w	fp, r3, r2
  4033c2:	f1bb 0f00 	cmp.w	fp, #0
  4033c6:	f340 8313 	ble.w	4039f0 <_vfprintf_r+0x8c0>
  4033ca:	f1bb 0f10 	cmp.w	fp, #16
  4033ce:	9925      	ldr	r1, [sp, #148]	; 0x94
  4033d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4033d2:	dd28      	ble.n	403426 <_vfprintf_r+0x2f6>
  4033d4:	4643      	mov	r3, r8
  4033d6:	2410      	movs	r4, #16
  4033d8:	46a8      	mov	r8, r5
  4033da:	f8dd a020 	ldr.w	sl, [sp, #32]
  4033de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4033e0:	e006      	b.n	4033f0 <_vfprintf_r+0x2c0>
  4033e2:	f1ab 0b10 	sub.w	fp, fp, #16
  4033e6:	f1bb 0f10 	cmp.w	fp, #16
  4033ea:	f103 0308 	add.w	r3, r3, #8
  4033ee:	dd18      	ble.n	403422 <_vfprintf_r+0x2f2>
  4033f0:	3201      	adds	r2, #1
  4033f2:	48b9      	ldr	r0, [pc, #740]	; (4036d8 <_vfprintf_r+0x5a8>)
  4033f4:	9224      	str	r2, [sp, #144]	; 0x90
  4033f6:	3110      	adds	r1, #16
  4033f8:	2a07      	cmp	r2, #7
  4033fa:	9125      	str	r1, [sp, #148]	; 0x94
  4033fc:	e883 0011 	stmia.w	r3, {r0, r4}
  403400:	ddef      	ble.n	4033e2 <_vfprintf_r+0x2b2>
  403402:	aa23      	add	r2, sp, #140	; 0x8c
  403404:	4629      	mov	r1, r5
  403406:	4650      	mov	r0, sl
  403408:	f7ff fe88 	bl	40311c <__sprint_r>
  40340c:	2800      	cmp	r0, #0
  40340e:	f040 836a 	bne.w	403ae6 <_vfprintf_r+0x9b6>
  403412:	f1ab 0b10 	sub.w	fp, fp, #16
  403416:	f1bb 0f10 	cmp.w	fp, #16
  40341a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40341c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40341e:	ab30      	add	r3, sp, #192	; 0xc0
  403420:	dce6      	bgt.n	4033f0 <_vfprintf_r+0x2c0>
  403422:	4645      	mov	r5, r8
  403424:	4698      	mov	r8, r3
  403426:	3201      	adds	r2, #1
  403428:	4bab      	ldr	r3, [pc, #684]	; (4036d8 <_vfprintf_r+0x5a8>)
  40342a:	9224      	str	r2, [sp, #144]	; 0x90
  40342c:	eb0b 0401 	add.w	r4, fp, r1
  403430:	2a07      	cmp	r2, #7
  403432:	9425      	str	r4, [sp, #148]	; 0x94
  403434:	e888 0808 	stmia.w	r8, {r3, fp}
  403438:	f300 84cd 	bgt.w	403dd6 <_vfprintf_r+0xca6>
  40343c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403440:	f108 0808 	add.w	r8, r8, #8
  403444:	f1ba 0f00 	cmp.w	sl, #0
  403448:	d00e      	beq.n	403468 <_vfprintf_r+0x338>
  40344a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40344c:	3301      	adds	r3, #1
  40344e:	3401      	adds	r4, #1
  403450:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  403454:	2201      	movs	r2, #1
  403456:	2b07      	cmp	r3, #7
  403458:	9425      	str	r4, [sp, #148]	; 0x94
  40345a:	9324      	str	r3, [sp, #144]	; 0x90
  40345c:	e888 0006 	stmia.w	r8, {r1, r2}
  403460:	f300 840a 	bgt.w	403c78 <_vfprintf_r+0xb48>
  403464:	f108 0808 	add.w	r8, r8, #8
  403468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40346a:	b16b      	cbz	r3, 403488 <_vfprintf_r+0x358>
  40346c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40346e:	3301      	adds	r3, #1
  403470:	3402      	adds	r4, #2
  403472:	a91c      	add	r1, sp, #112	; 0x70
  403474:	2202      	movs	r2, #2
  403476:	2b07      	cmp	r3, #7
  403478:	9425      	str	r4, [sp, #148]	; 0x94
  40347a:	9324      	str	r3, [sp, #144]	; 0x90
  40347c:	e888 0006 	stmia.w	r8, {r1, r2}
  403480:	f300 8406 	bgt.w	403c90 <_vfprintf_r+0xb60>
  403484:	f108 0808 	add.w	r8, r8, #8
  403488:	2d80      	cmp	r5, #128	; 0x80
  40348a:	f000 832e 	beq.w	403aea <_vfprintf_r+0x9ba>
  40348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403492:	eba3 0a02 	sub.w	sl, r3, r2
  403496:	f1ba 0f00 	cmp.w	sl, #0
  40349a:	dd3b      	ble.n	403514 <_vfprintf_r+0x3e4>
  40349c:	f1ba 0f10 	cmp.w	sl, #16
  4034a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034a2:	4d8e      	ldr	r5, [pc, #568]	; (4036dc <_vfprintf_r+0x5ac>)
  4034a4:	dd2b      	ble.n	4034fe <_vfprintf_r+0x3ce>
  4034a6:	4642      	mov	r2, r8
  4034a8:	4621      	mov	r1, r4
  4034aa:	46b0      	mov	r8, r6
  4034ac:	f04f 0b10 	mov.w	fp, #16
  4034b0:	462e      	mov	r6, r5
  4034b2:	9c08      	ldr	r4, [sp, #32]
  4034b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4034b6:	e006      	b.n	4034c6 <_vfprintf_r+0x396>
  4034b8:	f1aa 0a10 	sub.w	sl, sl, #16
  4034bc:	f1ba 0f10 	cmp.w	sl, #16
  4034c0:	f102 0208 	add.w	r2, r2, #8
  4034c4:	dd17      	ble.n	4034f6 <_vfprintf_r+0x3c6>
  4034c6:	3301      	adds	r3, #1
  4034c8:	3110      	adds	r1, #16
  4034ca:	2b07      	cmp	r3, #7
  4034cc:	9125      	str	r1, [sp, #148]	; 0x94
  4034ce:	9324      	str	r3, [sp, #144]	; 0x90
  4034d0:	e882 0840 	stmia.w	r2, {r6, fp}
  4034d4:	ddf0      	ble.n	4034b8 <_vfprintf_r+0x388>
  4034d6:	aa23      	add	r2, sp, #140	; 0x8c
  4034d8:	4629      	mov	r1, r5
  4034da:	4620      	mov	r0, r4
  4034dc:	f7ff fe1e 	bl	40311c <__sprint_r>
  4034e0:	2800      	cmp	r0, #0
  4034e2:	f040 8300 	bne.w	403ae6 <_vfprintf_r+0x9b6>
  4034e6:	f1aa 0a10 	sub.w	sl, sl, #16
  4034ea:	f1ba 0f10 	cmp.w	sl, #16
  4034ee:	9925      	ldr	r1, [sp, #148]	; 0x94
  4034f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034f2:	aa30      	add	r2, sp, #192	; 0xc0
  4034f4:	dce7      	bgt.n	4034c6 <_vfprintf_r+0x396>
  4034f6:	4635      	mov	r5, r6
  4034f8:	460c      	mov	r4, r1
  4034fa:	4646      	mov	r6, r8
  4034fc:	4690      	mov	r8, r2
  4034fe:	3301      	adds	r3, #1
  403500:	4454      	add	r4, sl
  403502:	2b07      	cmp	r3, #7
  403504:	9425      	str	r4, [sp, #148]	; 0x94
  403506:	9324      	str	r3, [sp, #144]	; 0x90
  403508:	e888 0420 	stmia.w	r8, {r5, sl}
  40350c:	f300 83a9 	bgt.w	403c62 <_vfprintf_r+0xb32>
  403510:	f108 0808 	add.w	r8, r8, #8
  403514:	9b06      	ldr	r3, [sp, #24]
  403516:	05db      	lsls	r3, r3, #23
  403518:	f100 8285 	bmi.w	403a26 <_vfprintf_r+0x8f6>
  40351c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40351e:	990d      	ldr	r1, [sp, #52]	; 0x34
  403520:	f8c8 7000 	str.w	r7, [r8]
  403524:	3301      	adds	r3, #1
  403526:	440c      	add	r4, r1
  403528:	2b07      	cmp	r3, #7
  40352a:	9425      	str	r4, [sp, #148]	; 0x94
  40352c:	f8c8 1004 	str.w	r1, [r8, #4]
  403530:	9324      	str	r3, [sp, #144]	; 0x90
  403532:	f300 8375 	bgt.w	403c20 <_vfprintf_r+0xaf0>
  403536:	f108 0808 	add.w	r8, r8, #8
  40353a:	9b06      	ldr	r3, [sp, #24]
  40353c:	0759      	lsls	r1, r3, #29
  40353e:	d53b      	bpl.n	4035b8 <_vfprintf_r+0x488>
  403540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403542:	9a07      	ldr	r2, [sp, #28]
  403544:	1a9d      	subs	r5, r3, r2
  403546:	2d00      	cmp	r5, #0
  403548:	dd36      	ble.n	4035b8 <_vfprintf_r+0x488>
  40354a:	2d10      	cmp	r5, #16
  40354c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40354e:	dd21      	ble.n	403594 <_vfprintf_r+0x464>
  403550:	2610      	movs	r6, #16
  403552:	9f08      	ldr	r7, [sp, #32]
  403554:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  403558:	e004      	b.n	403564 <_vfprintf_r+0x434>
  40355a:	3d10      	subs	r5, #16
  40355c:	2d10      	cmp	r5, #16
  40355e:	f108 0808 	add.w	r8, r8, #8
  403562:	dd17      	ble.n	403594 <_vfprintf_r+0x464>
  403564:	3301      	adds	r3, #1
  403566:	4a5c      	ldr	r2, [pc, #368]	; (4036d8 <_vfprintf_r+0x5a8>)
  403568:	9324      	str	r3, [sp, #144]	; 0x90
  40356a:	3410      	adds	r4, #16
  40356c:	2b07      	cmp	r3, #7
  40356e:	9425      	str	r4, [sp, #148]	; 0x94
  403570:	e888 0044 	stmia.w	r8, {r2, r6}
  403574:	ddf1      	ble.n	40355a <_vfprintf_r+0x42a>
  403576:	aa23      	add	r2, sp, #140	; 0x8c
  403578:	4651      	mov	r1, sl
  40357a:	4638      	mov	r0, r7
  40357c:	f7ff fdce 	bl	40311c <__sprint_r>
  403580:	2800      	cmp	r0, #0
  403582:	f040 823f 	bne.w	403a04 <_vfprintf_r+0x8d4>
  403586:	3d10      	subs	r5, #16
  403588:	2d10      	cmp	r5, #16
  40358a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40358c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40358e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403592:	dce7      	bgt.n	403564 <_vfprintf_r+0x434>
  403594:	3301      	adds	r3, #1
  403596:	4a50      	ldr	r2, [pc, #320]	; (4036d8 <_vfprintf_r+0x5a8>)
  403598:	9324      	str	r3, [sp, #144]	; 0x90
  40359a:	442c      	add	r4, r5
  40359c:	2b07      	cmp	r3, #7
  40359e:	9425      	str	r4, [sp, #148]	; 0x94
  4035a0:	e888 0024 	stmia.w	r8, {r2, r5}
  4035a4:	dd08      	ble.n	4035b8 <_vfprintf_r+0x488>
  4035a6:	aa23      	add	r2, sp, #140	; 0x8c
  4035a8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4035aa:	9808      	ldr	r0, [sp, #32]
  4035ac:	f7ff fdb6 	bl	40311c <__sprint_r>
  4035b0:	2800      	cmp	r0, #0
  4035b2:	f040 8347 	bne.w	403c44 <_vfprintf_r+0xb14>
  4035b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4035b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4035ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4035bc:	9907      	ldr	r1, [sp, #28]
  4035be:	428a      	cmp	r2, r1
  4035c0:	bfac      	ite	ge
  4035c2:	189b      	addge	r3, r3, r2
  4035c4:	185b      	addlt	r3, r3, r1
  4035c6:	930b      	str	r3, [sp, #44]	; 0x2c
  4035c8:	2c00      	cmp	r4, #0
  4035ca:	f040 8333 	bne.w	403c34 <_vfprintf_r+0xb04>
  4035ce:	2300      	movs	r3, #0
  4035d0:	9324      	str	r3, [sp, #144]	; 0x90
  4035d2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4035d6:	e5f7      	b.n	4031c8 <_vfprintf_r+0x98>
  4035d8:	4651      	mov	r1, sl
  4035da:	9808      	ldr	r0, [sp, #32]
  4035dc:	f001 f896 	bl	40470c <__swsetup_r>
  4035e0:	2800      	cmp	r0, #0
  4035e2:	d038      	beq.n	403656 <_vfprintf_r+0x526>
  4035e4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4035e8:	07dd      	lsls	r5, r3, #31
  4035ea:	d404      	bmi.n	4035f6 <_vfprintf_r+0x4c6>
  4035ec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4035f0:	059c      	lsls	r4, r3, #22
  4035f2:	f140 85ca 	bpl.w	40418a <_vfprintf_r+0x105a>
  4035f6:	f04f 33ff 	mov.w	r3, #4294967295
  4035fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4035fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4035fe:	b041      	add	sp, #260	; 0x104
  403600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403604:	aa23      	add	r2, sp, #140	; 0x8c
  403606:	990a      	ldr	r1, [sp, #40]	; 0x28
  403608:	9808      	ldr	r0, [sp, #32]
  40360a:	f7ff fd87 	bl	40311c <__sprint_r>
  40360e:	2800      	cmp	r0, #0
  403610:	f040 8318 	bne.w	403c44 <_vfprintf_r+0xb14>
  403614:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403618:	e5f5      	b.n	403206 <_vfprintf_r+0xd6>
  40361a:	9808      	ldr	r0, [sp, #32]
  40361c:	f002 f9b4 	bl	405988 <__sinit>
  403620:	e59c      	b.n	40315c <_vfprintf_r+0x2c>
  403622:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  403626:	2a00      	cmp	r2, #0
  403628:	f6ff adbd 	blt.w	4031a6 <_vfprintf_r+0x76>
  40362c:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  403630:	07d0      	lsls	r0, r2, #31
  403632:	d405      	bmi.n	403640 <_vfprintf_r+0x510>
  403634:	0599      	lsls	r1, r3, #22
  403636:	d403      	bmi.n	403640 <_vfprintf_r+0x510>
  403638:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40363c:	f002 fd9a 	bl	406174 <__retarget_lock_release_recursive>
  403640:	462b      	mov	r3, r5
  403642:	464a      	mov	r2, r9
  403644:	4651      	mov	r1, sl
  403646:	9808      	ldr	r0, [sp, #32]
  403648:	f001 f81e 	bl	404688 <__sbprintf>
  40364c:	900b      	str	r0, [sp, #44]	; 0x2c
  40364e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403650:	b041      	add	sp, #260	; 0x104
  403652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403656:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40365a:	e59f      	b.n	40319c <_vfprintf_r+0x6c>
  40365c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  403660:	f002 fd86 	bl	406170 <__retarget_lock_acquire_recursive>
  403664:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  403668:	b293      	uxth	r3, r2
  40366a:	e582      	b.n	403172 <_vfprintf_r+0x42>
  40366c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40366e:	930e      	str	r3, [sp, #56]	; 0x38
  403670:	4240      	negs	r0, r0
  403672:	900c      	str	r0, [sp, #48]	; 0x30
  403674:	f04b 0b04 	orr.w	fp, fp, #4
  403678:	f899 6000 	ldrb.w	r6, [r9]
  40367c:	e5d7      	b.n	40322e <_vfprintf_r+0xfe>
  40367e:	2a00      	cmp	r2, #0
  403680:	f040 87df 	bne.w	404642 <_vfprintf_r+0x1512>
  403684:	4b16      	ldr	r3, [pc, #88]	; (4036e0 <_vfprintf_r+0x5b0>)
  403686:	9318      	str	r3, [sp, #96]	; 0x60
  403688:	f01b 0f20 	tst.w	fp, #32
  40368c:	f040 84b9 	bne.w	404002 <_vfprintf_r+0xed2>
  403690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403692:	f01b 0f10 	tst.w	fp, #16
  403696:	4613      	mov	r3, r2
  403698:	f040 83dc 	bne.w	403e54 <_vfprintf_r+0xd24>
  40369c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4036a0:	f000 83d8 	beq.w	403e54 <_vfprintf_r+0xd24>
  4036a4:	3304      	adds	r3, #4
  4036a6:	8814      	ldrh	r4, [r2, #0]
  4036a8:	930e      	str	r3, [sp, #56]	; 0x38
  4036aa:	2500      	movs	r5, #0
  4036ac:	f01b 0f01 	tst.w	fp, #1
  4036b0:	f000 8322 	beq.w	403cf8 <_vfprintf_r+0xbc8>
  4036b4:	ea54 0305 	orrs.w	r3, r4, r5
  4036b8:	f000 831e 	beq.w	403cf8 <_vfprintf_r+0xbc8>
  4036bc:	2330      	movs	r3, #48	; 0x30
  4036be:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4036c2:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4036c6:	f04b 0b02 	orr.w	fp, fp, #2
  4036ca:	2302      	movs	r3, #2
  4036cc:	e63c      	b.n	403348 <_vfprintf_r+0x218>
  4036ce:	f04b 0b20 	orr.w	fp, fp, #32
  4036d2:	f899 6000 	ldrb.w	r6, [r9]
  4036d6:	e5aa      	b.n	40322e <_vfprintf_r+0xfe>
  4036d8:	00408200 	.word	0x00408200
  4036dc:	00408210 	.word	0x00408210
  4036e0:	004081e0 	.word	0x004081e0
  4036e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4036e6:	6817      	ldr	r7, [r2, #0]
  4036e8:	2400      	movs	r4, #0
  4036ea:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4036ee:	1d15      	adds	r5, r2, #4
  4036f0:	2f00      	cmp	r7, #0
  4036f2:	f000 864e 	beq.w	404392 <_vfprintf_r+0x1262>
  4036f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4036f8:	1c53      	adds	r3, r2, #1
  4036fa:	f000 85cc 	beq.w	404296 <_vfprintf_r+0x1166>
  4036fe:	4621      	mov	r1, r4
  403700:	4638      	mov	r0, r7
  403702:	f003 f885 	bl	406810 <memchr>
  403706:	2800      	cmp	r0, #0
  403708:	f000 8697 	beq.w	40443a <_vfprintf_r+0x130a>
  40370c:	1bc3      	subs	r3, r0, r7
  40370e:	930d      	str	r3, [sp, #52]	; 0x34
  403710:	9409      	str	r4, [sp, #36]	; 0x24
  403712:	950e      	str	r5, [sp, #56]	; 0x38
  403714:	f8cd b018 	str.w	fp, [sp, #24]
  403718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40371c:	9307      	str	r3, [sp, #28]
  40371e:	9410      	str	r4, [sp, #64]	; 0x40
  403720:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403724:	e636      	b.n	403394 <_vfprintf_r+0x264>
  403726:	2a00      	cmp	r2, #0
  403728:	f040 8796 	bne.w	404658 <_vfprintf_r+0x1528>
  40372c:	f01b 0f20 	tst.w	fp, #32
  403730:	f040 845a 	bne.w	403fe8 <_vfprintf_r+0xeb8>
  403734:	f01b 0f10 	tst.w	fp, #16
  403738:	f040 83a2 	bne.w	403e80 <_vfprintf_r+0xd50>
  40373c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403740:	f000 839e 	beq.w	403e80 <_vfprintf_r+0xd50>
  403744:	990e      	ldr	r1, [sp, #56]	; 0x38
  403746:	f9b1 4000 	ldrsh.w	r4, [r1]
  40374a:	3104      	adds	r1, #4
  40374c:	17e5      	asrs	r5, r4, #31
  40374e:	4622      	mov	r2, r4
  403750:	462b      	mov	r3, r5
  403752:	910e      	str	r1, [sp, #56]	; 0x38
  403754:	2a00      	cmp	r2, #0
  403756:	f173 0300 	sbcs.w	r3, r3, #0
  40375a:	f2c0 8487 	blt.w	40406c <_vfprintf_r+0xf3c>
  40375e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403760:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403764:	1c4a      	adds	r2, r1, #1
  403766:	f04f 0301 	mov.w	r3, #1
  40376a:	f47f adf5 	bne.w	403358 <_vfprintf_r+0x228>
  40376e:	ea54 0205 	orrs.w	r2, r4, r5
  403772:	f000 826c 	beq.w	403c4e <_vfprintf_r+0xb1e>
  403776:	f8cd b018 	str.w	fp, [sp, #24]
  40377a:	2b01      	cmp	r3, #1
  40377c:	f000 8308 	beq.w	403d90 <_vfprintf_r+0xc60>
  403780:	2b02      	cmp	r3, #2
  403782:	f040 8295 	bne.w	403cb0 <_vfprintf_r+0xb80>
  403786:	9818      	ldr	r0, [sp, #96]	; 0x60
  403788:	af30      	add	r7, sp, #192	; 0xc0
  40378a:	0923      	lsrs	r3, r4, #4
  40378c:	f004 010f 	and.w	r1, r4, #15
  403790:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403794:	092a      	lsrs	r2, r5, #4
  403796:	461c      	mov	r4, r3
  403798:	4615      	mov	r5, r2
  40379a:	5c43      	ldrb	r3, [r0, r1]
  40379c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4037a0:	ea54 0305 	orrs.w	r3, r4, r5
  4037a4:	d1f1      	bne.n	40378a <_vfprintf_r+0x65a>
  4037a6:	ab30      	add	r3, sp, #192	; 0xc0
  4037a8:	1bdb      	subs	r3, r3, r7
  4037aa:	930d      	str	r3, [sp, #52]	; 0x34
  4037ac:	e5ea      	b.n	403384 <_vfprintf_r+0x254>
  4037ae:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4037b2:	f899 6000 	ldrb.w	r6, [r9]
  4037b6:	e53a      	b.n	40322e <_vfprintf_r+0xfe>
  4037b8:	f899 6000 	ldrb.w	r6, [r9]
  4037bc:	2e6c      	cmp	r6, #108	; 0x6c
  4037be:	bf03      	ittte	eq
  4037c0:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4037c4:	f04b 0b20 	orreq.w	fp, fp, #32
  4037c8:	f109 0901 	addeq.w	r9, r9, #1
  4037cc:	f04b 0b10 	orrne.w	fp, fp, #16
  4037d0:	e52d      	b.n	40322e <_vfprintf_r+0xfe>
  4037d2:	2a00      	cmp	r2, #0
  4037d4:	f040 874c 	bne.w	404670 <_vfprintf_r+0x1540>
  4037d8:	f01b 0f20 	tst.w	fp, #32
  4037dc:	f040 853f 	bne.w	40425e <_vfprintf_r+0x112e>
  4037e0:	f01b 0f10 	tst.w	fp, #16
  4037e4:	f040 80fc 	bne.w	4039e0 <_vfprintf_r+0x8b0>
  4037e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4037ec:	f000 80f8 	beq.w	4039e0 <_vfprintf_r+0x8b0>
  4037f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4037f2:	6813      	ldr	r3, [r2, #0]
  4037f4:	3204      	adds	r2, #4
  4037f6:	920e      	str	r2, [sp, #56]	; 0x38
  4037f8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4037fc:	801a      	strh	r2, [r3, #0]
  4037fe:	e4e3      	b.n	4031c8 <_vfprintf_r+0x98>
  403800:	f899 6000 	ldrb.w	r6, [r9]
  403804:	2900      	cmp	r1, #0
  403806:	f47f ad12 	bne.w	40322e <_vfprintf_r+0xfe>
  40380a:	2201      	movs	r2, #1
  40380c:	2120      	movs	r1, #32
  40380e:	e50e      	b.n	40322e <_vfprintf_r+0xfe>
  403810:	f899 6000 	ldrb.w	r6, [r9]
  403814:	2e2a      	cmp	r6, #42	; 0x2a
  403816:	f109 0001 	add.w	r0, r9, #1
  40381a:	f000 86f1 	beq.w	404600 <_vfprintf_r+0x14d0>
  40381e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  403822:	2b09      	cmp	r3, #9
  403824:	4681      	mov	r9, r0
  403826:	bf98      	it	ls
  403828:	2000      	movls	r0, #0
  40382a:	f200 863d 	bhi.w	4044a8 <_vfprintf_r+0x1378>
  40382e:	f819 6b01 	ldrb.w	r6, [r9], #1
  403832:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403836:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40383a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40383e:	2b09      	cmp	r3, #9
  403840:	d9f5      	bls.n	40382e <_vfprintf_r+0x6fe>
  403842:	9009      	str	r0, [sp, #36]	; 0x24
  403844:	e4f5      	b.n	403232 <_vfprintf_r+0x102>
  403846:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40384a:	f899 6000 	ldrb.w	r6, [r9]
  40384e:	e4ee      	b.n	40322e <_vfprintf_r+0xfe>
  403850:	f899 6000 	ldrb.w	r6, [r9]
  403854:	2201      	movs	r2, #1
  403856:	212b      	movs	r1, #43	; 0x2b
  403858:	e4e9      	b.n	40322e <_vfprintf_r+0xfe>
  40385a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40385c:	4bae      	ldr	r3, [pc, #696]	; (403b18 <_vfprintf_r+0x9e8>)
  40385e:	6814      	ldr	r4, [r2, #0]
  403860:	9318      	str	r3, [sp, #96]	; 0x60
  403862:	2678      	movs	r6, #120	; 0x78
  403864:	2330      	movs	r3, #48	; 0x30
  403866:	3204      	adds	r2, #4
  403868:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40386c:	f04b 0b02 	orr.w	fp, fp, #2
  403870:	920e      	str	r2, [sp, #56]	; 0x38
  403872:	2500      	movs	r5, #0
  403874:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  403878:	2302      	movs	r3, #2
  40387a:	e565      	b.n	403348 <_vfprintf_r+0x218>
  40387c:	2a00      	cmp	r2, #0
  40387e:	f040 86e4 	bne.w	40464a <_vfprintf_r+0x151a>
  403882:	4ba6      	ldr	r3, [pc, #664]	; (403b1c <_vfprintf_r+0x9ec>)
  403884:	9318      	str	r3, [sp, #96]	; 0x60
  403886:	e6ff      	b.n	403688 <_vfprintf_r+0x558>
  403888:	990e      	ldr	r1, [sp, #56]	; 0x38
  40388a:	f8cd b018 	str.w	fp, [sp, #24]
  40388e:	680a      	ldr	r2, [r1, #0]
  403890:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403894:	2300      	movs	r3, #0
  403896:	460a      	mov	r2, r1
  403898:	469a      	mov	sl, r3
  40389a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40389e:	3204      	adds	r2, #4
  4038a0:	2301      	movs	r3, #1
  4038a2:	9307      	str	r3, [sp, #28]
  4038a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  4038a8:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4038ac:	920e      	str	r2, [sp, #56]	; 0x38
  4038ae:	930d      	str	r3, [sp, #52]	; 0x34
  4038b0:	af26      	add	r7, sp, #152	; 0x98
  4038b2:	e575      	b.n	4033a0 <_vfprintf_r+0x270>
  4038b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4038b8:	2000      	movs	r0, #0
  4038ba:	f819 6b01 	ldrb.w	r6, [r9], #1
  4038be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4038c2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4038c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4038ca:	2b09      	cmp	r3, #9
  4038cc:	d9f5      	bls.n	4038ba <_vfprintf_r+0x78a>
  4038ce:	900c      	str	r0, [sp, #48]	; 0x30
  4038d0:	e4af      	b.n	403232 <_vfprintf_r+0x102>
  4038d2:	2a00      	cmp	r2, #0
  4038d4:	f040 86c8 	bne.w	404668 <_vfprintf_r+0x1538>
  4038d8:	f04b 0b10 	orr.w	fp, fp, #16
  4038dc:	e726      	b.n	40372c <_vfprintf_r+0x5fc>
  4038de:	f04b 0b01 	orr.w	fp, fp, #1
  4038e2:	f899 6000 	ldrb.w	r6, [r9]
  4038e6:	e4a2      	b.n	40322e <_vfprintf_r+0xfe>
  4038e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4038ea:	6823      	ldr	r3, [r4, #0]
  4038ec:	930c      	str	r3, [sp, #48]	; 0x30
  4038ee:	4618      	mov	r0, r3
  4038f0:	2800      	cmp	r0, #0
  4038f2:	4623      	mov	r3, r4
  4038f4:	f103 0304 	add.w	r3, r3, #4
  4038f8:	f6ff aeb8 	blt.w	40366c <_vfprintf_r+0x53c>
  4038fc:	930e      	str	r3, [sp, #56]	; 0x38
  4038fe:	f899 6000 	ldrb.w	r6, [r9]
  403902:	e494      	b.n	40322e <_vfprintf_r+0xfe>
  403904:	2a00      	cmp	r2, #0
  403906:	f040 86b7 	bne.w	404678 <_vfprintf_r+0x1548>
  40390a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40390c:	3507      	adds	r5, #7
  40390e:	f025 0307 	bic.w	r3, r5, #7
  403912:	f103 0208 	add.w	r2, r3, #8
  403916:	920e      	str	r2, [sp, #56]	; 0x38
  403918:	681a      	ldr	r2, [r3, #0]
  40391a:	9213      	str	r2, [sp, #76]	; 0x4c
  40391c:	685b      	ldr	r3, [r3, #4]
  40391e:	9312      	str	r3, [sp, #72]	; 0x48
  403920:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403922:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  403924:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403928:	4628      	mov	r0, r5
  40392a:	4621      	mov	r1, r4
  40392c:	f04f 32ff 	mov.w	r2, #4294967295
  403930:	4b7b      	ldr	r3, [pc, #492]	; (403b20 <_vfprintf_r+0x9f0>)
  403932:	f004 f83d 	bl	4079b0 <__aeabi_dcmpun>
  403936:	2800      	cmp	r0, #0
  403938:	f040 83a2 	bne.w	404080 <_vfprintf_r+0xf50>
  40393c:	4628      	mov	r0, r5
  40393e:	4621      	mov	r1, r4
  403940:	f04f 32ff 	mov.w	r2, #4294967295
  403944:	4b76      	ldr	r3, [pc, #472]	; (403b20 <_vfprintf_r+0x9f0>)
  403946:	f004 f815 	bl	407974 <__aeabi_dcmple>
  40394a:	2800      	cmp	r0, #0
  40394c:	f040 8398 	bne.w	404080 <_vfprintf_r+0xf50>
  403950:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403952:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403956:	9912      	ldr	r1, [sp, #72]	; 0x48
  403958:	f004 f802 	bl	407960 <__aeabi_dcmplt>
  40395c:	2800      	cmp	r0, #0
  40395e:	f040 8435 	bne.w	4041cc <_vfprintf_r+0x109c>
  403962:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403966:	4f6f      	ldr	r7, [pc, #444]	; (403b24 <_vfprintf_r+0x9f4>)
  403968:	4b6f      	ldr	r3, [pc, #444]	; (403b28 <_vfprintf_r+0x9f8>)
  40396a:	2203      	movs	r2, #3
  40396c:	2100      	movs	r1, #0
  40396e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403972:	9207      	str	r2, [sp, #28]
  403974:	9109      	str	r1, [sp, #36]	; 0x24
  403976:	9006      	str	r0, [sp, #24]
  403978:	2e47      	cmp	r6, #71	; 0x47
  40397a:	bfd8      	it	le
  40397c:	461f      	movle	r7, r3
  40397e:	920d      	str	r2, [sp, #52]	; 0x34
  403980:	9110      	str	r1, [sp, #64]	; 0x40
  403982:	e507      	b.n	403394 <_vfprintf_r+0x264>
  403984:	f04b 0b08 	orr.w	fp, fp, #8
  403988:	f899 6000 	ldrb.w	r6, [r9]
  40398c:	e44f      	b.n	40322e <_vfprintf_r+0xfe>
  40398e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403990:	3507      	adds	r5, #7
  403992:	f025 0307 	bic.w	r3, r5, #7
  403996:	f103 0208 	add.w	r2, r3, #8
  40399a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40399e:	920e      	str	r2, [sp, #56]	; 0x38
  4039a0:	2300      	movs	r3, #0
  4039a2:	e4d1      	b.n	403348 <_vfprintf_r+0x218>
  4039a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4039a6:	3507      	adds	r5, #7
  4039a8:	f025 0307 	bic.w	r3, r5, #7
  4039ac:	f103 0208 	add.w	r2, r3, #8
  4039b0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4039b4:	920e      	str	r2, [sp, #56]	; 0x38
  4039b6:	2301      	movs	r3, #1
  4039b8:	e4c6      	b.n	403348 <_vfprintf_r+0x218>
  4039ba:	2a00      	cmp	r2, #0
  4039bc:	f040 8650 	bne.w	404660 <_vfprintf_r+0x1530>
  4039c0:	b1c6      	cbz	r6, 4039f4 <_vfprintf_r+0x8c4>
  4039c2:	2300      	movs	r3, #0
  4039c4:	2201      	movs	r2, #1
  4039c6:	469a      	mov	sl, r3
  4039c8:	9207      	str	r2, [sp, #28]
  4039ca:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4039ce:	f8cd b018 	str.w	fp, [sp, #24]
  4039d2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4039d6:	9309      	str	r3, [sp, #36]	; 0x24
  4039d8:	9310      	str	r3, [sp, #64]	; 0x40
  4039da:	920d      	str	r2, [sp, #52]	; 0x34
  4039dc:	af26      	add	r7, sp, #152	; 0x98
  4039de:	e4df      	b.n	4033a0 <_vfprintf_r+0x270>
  4039e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039e2:	6813      	ldr	r3, [r2, #0]
  4039e4:	3204      	adds	r2, #4
  4039e6:	920e      	str	r2, [sp, #56]	; 0x38
  4039e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4039ea:	601a      	str	r2, [r3, #0]
  4039ec:	f7ff bbec 	b.w	4031c8 <_vfprintf_r+0x98>
  4039f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4039f2:	e527      	b.n	403444 <_vfprintf_r+0x314>
  4039f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4039f6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4039fa:	2b00      	cmp	r3, #0
  4039fc:	f040 8594 	bne.w	404528 <_vfprintf_r+0x13f8>
  403a00:	2300      	movs	r3, #0
  403a02:	9324      	str	r3, [sp, #144]	; 0x90
  403a04:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  403a08:	f013 0f01 	tst.w	r3, #1
  403a0c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  403a10:	d102      	bne.n	403a18 <_vfprintf_r+0x8e8>
  403a12:	059a      	lsls	r2, r3, #22
  403a14:	f140 8249 	bpl.w	403eaa <_vfprintf_r+0xd7a>
  403a18:	065b      	lsls	r3, r3, #25
  403a1a:	f53f adec 	bmi.w	4035f6 <_vfprintf_r+0x4c6>
  403a1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403a20:	b041      	add	sp, #260	; 0x104
  403a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a26:	2e65      	cmp	r6, #101	; 0x65
  403a28:	f340 80b2 	ble.w	403b90 <_vfprintf_r+0xa60>
  403a2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403a2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403a32:	9912      	ldr	r1, [sp, #72]	; 0x48
  403a34:	f003 ff8a 	bl	40794c <__aeabi_dcmpeq>
  403a38:	2800      	cmp	r0, #0
  403a3a:	f000 8160 	beq.w	403cfe <_vfprintf_r+0xbce>
  403a3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a40:	4a3a      	ldr	r2, [pc, #232]	; (403b2c <_vfprintf_r+0x9fc>)
  403a42:	f8c8 2000 	str.w	r2, [r8]
  403a46:	3301      	adds	r3, #1
  403a48:	3401      	adds	r4, #1
  403a4a:	2201      	movs	r2, #1
  403a4c:	2b07      	cmp	r3, #7
  403a4e:	9425      	str	r4, [sp, #148]	; 0x94
  403a50:	9324      	str	r3, [sp, #144]	; 0x90
  403a52:	f8c8 2004 	str.w	r2, [r8, #4]
  403a56:	f300 83bf 	bgt.w	4041d8 <_vfprintf_r+0x10a8>
  403a5a:	f108 0808 	add.w	r8, r8, #8
  403a5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403a64:	4293      	cmp	r3, r2
  403a66:	db03      	blt.n	403a70 <_vfprintf_r+0x940>
  403a68:	9b06      	ldr	r3, [sp, #24]
  403a6a:	07df      	lsls	r7, r3, #31
  403a6c:	f57f ad65 	bpl.w	40353a <_vfprintf_r+0x40a>
  403a70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a72:	9914      	ldr	r1, [sp, #80]	; 0x50
  403a74:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403a76:	f8c8 2000 	str.w	r2, [r8]
  403a7a:	3301      	adds	r3, #1
  403a7c:	440c      	add	r4, r1
  403a7e:	2b07      	cmp	r3, #7
  403a80:	f8c8 1004 	str.w	r1, [r8, #4]
  403a84:	9425      	str	r4, [sp, #148]	; 0x94
  403a86:	9324      	str	r3, [sp, #144]	; 0x90
  403a88:	f300 83f8 	bgt.w	40427c <_vfprintf_r+0x114c>
  403a8c:	f108 0808 	add.w	r8, r8, #8
  403a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a92:	1e5e      	subs	r6, r3, #1
  403a94:	2e00      	cmp	r6, #0
  403a96:	f77f ad50 	ble.w	40353a <_vfprintf_r+0x40a>
  403a9a:	2e10      	cmp	r6, #16
  403a9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a9e:	4d24      	ldr	r5, [pc, #144]	; (403b30 <_vfprintf_r+0xa00>)
  403aa0:	f340 81dd 	ble.w	403e5e <_vfprintf_r+0xd2e>
  403aa4:	2710      	movs	r7, #16
  403aa6:	f8dd a020 	ldr.w	sl, [sp, #32]
  403aaa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403aae:	e005      	b.n	403abc <_vfprintf_r+0x98c>
  403ab0:	f108 0808 	add.w	r8, r8, #8
  403ab4:	3e10      	subs	r6, #16
  403ab6:	2e10      	cmp	r6, #16
  403ab8:	f340 81d1 	ble.w	403e5e <_vfprintf_r+0xd2e>
  403abc:	3301      	adds	r3, #1
  403abe:	3410      	adds	r4, #16
  403ac0:	2b07      	cmp	r3, #7
  403ac2:	9425      	str	r4, [sp, #148]	; 0x94
  403ac4:	9324      	str	r3, [sp, #144]	; 0x90
  403ac6:	e888 00a0 	stmia.w	r8, {r5, r7}
  403aca:	ddf1      	ble.n	403ab0 <_vfprintf_r+0x980>
  403acc:	aa23      	add	r2, sp, #140	; 0x8c
  403ace:	4659      	mov	r1, fp
  403ad0:	4650      	mov	r0, sl
  403ad2:	f7ff fb23 	bl	40311c <__sprint_r>
  403ad6:	2800      	cmp	r0, #0
  403ad8:	f040 83cd 	bne.w	404276 <_vfprintf_r+0x1146>
  403adc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ae0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403ae4:	e7e6      	b.n	403ab4 <_vfprintf_r+0x984>
  403ae6:	46aa      	mov	sl, r5
  403ae8:	e78c      	b.n	403a04 <_vfprintf_r+0x8d4>
  403aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403aec:	9a07      	ldr	r2, [sp, #28]
  403aee:	eba3 0a02 	sub.w	sl, r3, r2
  403af2:	f1ba 0f00 	cmp.w	sl, #0
  403af6:	f77f acca 	ble.w	40348e <_vfprintf_r+0x35e>
  403afa:	f1ba 0f10 	cmp.w	sl, #16
  403afe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b00:	4d0b      	ldr	r5, [pc, #44]	; (403b30 <_vfprintf_r+0xa00>)
  403b02:	dd39      	ble.n	403b78 <_vfprintf_r+0xa48>
  403b04:	4642      	mov	r2, r8
  403b06:	4621      	mov	r1, r4
  403b08:	46b0      	mov	r8, r6
  403b0a:	f04f 0b10 	mov.w	fp, #16
  403b0e:	462e      	mov	r6, r5
  403b10:	9c08      	ldr	r4, [sp, #32]
  403b12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403b14:	e015      	b.n	403b42 <_vfprintf_r+0xa12>
  403b16:	bf00      	nop
  403b18:	004081e0 	.word	0x004081e0
  403b1c:	004081cc 	.word	0x004081cc
  403b20:	7fefffff 	.word	0x7fefffff
  403b24:	004081c0 	.word	0x004081c0
  403b28:	004081bc 	.word	0x004081bc
  403b2c:	004081fc 	.word	0x004081fc
  403b30:	00408210 	.word	0x00408210
  403b34:	f1aa 0a10 	sub.w	sl, sl, #16
  403b38:	f1ba 0f10 	cmp.w	sl, #16
  403b3c:	f102 0208 	add.w	r2, r2, #8
  403b40:	dd16      	ble.n	403b70 <_vfprintf_r+0xa40>
  403b42:	3301      	adds	r3, #1
  403b44:	3110      	adds	r1, #16
  403b46:	2b07      	cmp	r3, #7
  403b48:	9125      	str	r1, [sp, #148]	; 0x94
  403b4a:	9324      	str	r3, [sp, #144]	; 0x90
  403b4c:	e882 0840 	stmia.w	r2, {r6, fp}
  403b50:	ddf0      	ble.n	403b34 <_vfprintf_r+0xa04>
  403b52:	aa23      	add	r2, sp, #140	; 0x8c
  403b54:	4629      	mov	r1, r5
  403b56:	4620      	mov	r0, r4
  403b58:	f7ff fae0 	bl	40311c <__sprint_r>
  403b5c:	2800      	cmp	r0, #0
  403b5e:	d1c2      	bne.n	403ae6 <_vfprintf_r+0x9b6>
  403b60:	f1aa 0a10 	sub.w	sl, sl, #16
  403b64:	f1ba 0f10 	cmp.w	sl, #16
  403b68:	9925      	ldr	r1, [sp, #148]	; 0x94
  403b6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b6c:	aa30      	add	r2, sp, #192	; 0xc0
  403b6e:	dce8      	bgt.n	403b42 <_vfprintf_r+0xa12>
  403b70:	4635      	mov	r5, r6
  403b72:	460c      	mov	r4, r1
  403b74:	4646      	mov	r6, r8
  403b76:	4690      	mov	r8, r2
  403b78:	3301      	adds	r3, #1
  403b7a:	4454      	add	r4, sl
  403b7c:	2b07      	cmp	r3, #7
  403b7e:	9425      	str	r4, [sp, #148]	; 0x94
  403b80:	9324      	str	r3, [sp, #144]	; 0x90
  403b82:	e888 0420 	stmia.w	r8, {r5, sl}
  403b86:	f300 8264 	bgt.w	404052 <_vfprintf_r+0xf22>
  403b8a:	f108 0808 	add.w	r8, r8, #8
  403b8e:	e47e      	b.n	40348e <_vfprintf_r+0x35e>
  403b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b92:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403b94:	2b01      	cmp	r3, #1
  403b96:	f340 81fd 	ble.w	403f94 <_vfprintf_r+0xe64>
  403b9a:	3601      	adds	r6, #1
  403b9c:	3401      	adds	r4, #1
  403b9e:	2301      	movs	r3, #1
  403ba0:	2e07      	cmp	r6, #7
  403ba2:	9425      	str	r4, [sp, #148]	; 0x94
  403ba4:	9624      	str	r6, [sp, #144]	; 0x90
  403ba6:	f8c8 7000 	str.w	r7, [r8]
  403baa:	f8c8 3004 	str.w	r3, [r8, #4]
  403bae:	f300 820e 	bgt.w	403fce <_vfprintf_r+0xe9e>
  403bb2:	f108 0808 	add.w	r8, r8, #8
  403bb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403bb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403bba:	f8c8 3000 	str.w	r3, [r8]
  403bbe:	3601      	adds	r6, #1
  403bc0:	4414      	add	r4, r2
  403bc2:	2e07      	cmp	r6, #7
  403bc4:	9425      	str	r4, [sp, #148]	; 0x94
  403bc6:	9624      	str	r6, [sp, #144]	; 0x90
  403bc8:	f8c8 2004 	str.w	r2, [r8, #4]
  403bcc:	f300 822e 	bgt.w	40402c <_vfprintf_r+0xefc>
  403bd0:	f108 0808 	add.w	r8, r8, #8
  403bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403bd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403bd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403bda:	9912      	ldr	r1, [sp, #72]	; 0x48
  403bdc:	f003 feb6 	bl	40794c <__aeabi_dcmpeq>
  403be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403be2:	2800      	cmp	r0, #0
  403be4:	f040 8106 	bne.w	403df4 <_vfprintf_r+0xcc4>
  403be8:	3b01      	subs	r3, #1
  403bea:	3601      	adds	r6, #1
  403bec:	3701      	adds	r7, #1
  403bee:	441c      	add	r4, r3
  403bf0:	2e07      	cmp	r6, #7
  403bf2:	9624      	str	r6, [sp, #144]	; 0x90
  403bf4:	9425      	str	r4, [sp, #148]	; 0x94
  403bf6:	f8c8 7000 	str.w	r7, [r8]
  403bfa:	f8c8 3004 	str.w	r3, [r8, #4]
  403bfe:	f300 81d9 	bgt.w	403fb4 <_vfprintf_r+0xe84>
  403c02:	f108 0808 	add.w	r8, r8, #8
  403c06:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403c08:	f8c8 2004 	str.w	r2, [r8, #4]
  403c0c:	3601      	adds	r6, #1
  403c0e:	4414      	add	r4, r2
  403c10:	ab1f      	add	r3, sp, #124	; 0x7c
  403c12:	2e07      	cmp	r6, #7
  403c14:	9425      	str	r4, [sp, #148]	; 0x94
  403c16:	9624      	str	r6, [sp, #144]	; 0x90
  403c18:	f8c8 3000 	str.w	r3, [r8]
  403c1c:	f77f ac8b 	ble.w	403536 <_vfprintf_r+0x406>
  403c20:	aa23      	add	r2, sp, #140	; 0x8c
  403c22:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c24:	9808      	ldr	r0, [sp, #32]
  403c26:	f7ff fa79 	bl	40311c <__sprint_r>
  403c2a:	b958      	cbnz	r0, 403c44 <_vfprintf_r+0xb14>
  403c2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403c2e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403c32:	e482      	b.n	40353a <_vfprintf_r+0x40a>
  403c34:	aa23      	add	r2, sp, #140	; 0x8c
  403c36:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c38:	9808      	ldr	r0, [sp, #32]
  403c3a:	f7ff fa6f 	bl	40311c <__sprint_r>
  403c3e:	2800      	cmp	r0, #0
  403c40:	f43f acc5 	beq.w	4035ce <_vfprintf_r+0x49e>
  403c44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  403c48:	e6dc      	b.n	403a04 <_vfprintf_r+0x8d4>
  403c4a:	f8dd b018 	ldr.w	fp, [sp, #24]
  403c4e:	2b01      	cmp	r3, #1
  403c50:	f000 8121 	beq.w	403e96 <_vfprintf_r+0xd66>
  403c54:	2b02      	cmp	r3, #2
  403c56:	d127      	bne.n	403ca8 <_vfprintf_r+0xb78>
  403c58:	f8cd b018 	str.w	fp, [sp, #24]
  403c5c:	2400      	movs	r4, #0
  403c5e:	2500      	movs	r5, #0
  403c60:	e591      	b.n	403786 <_vfprintf_r+0x656>
  403c62:	aa23      	add	r2, sp, #140	; 0x8c
  403c64:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c66:	9808      	ldr	r0, [sp, #32]
  403c68:	f7ff fa58 	bl	40311c <__sprint_r>
  403c6c:	2800      	cmp	r0, #0
  403c6e:	d1e9      	bne.n	403c44 <_vfprintf_r+0xb14>
  403c70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403c72:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403c76:	e44d      	b.n	403514 <_vfprintf_r+0x3e4>
  403c78:	aa23      	add	r2, sp, #140	; 0x8c
  403c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c7c:	9808      	ldr	r0, [sp, #32]
  403c7e:	f7ff fa4d 	bl	40311c <__sprint_r>
  403c82:	2800      	cmp	r0, #0
  403c84:	d1de      	bne.n	403c44 <_vfprintf_r+0xb14>
  403c86:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403c88:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403c8c:	f7ff bbec 	b.w	403468 <_vfprintf_r+0x338>
  403c90:	aa23      	add	r2, sp, #140	; 0x8c
  403c92:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c94:	9808      	ldr	r0, [sp, #32]
  403c96:	f7ff fa41 	bl	40311c <__sprint_r>
  403c9a:	2800      	cmp	r0, #0
  403c9c:	d1d2      	bne.n	403c44 <_vfprintf_r+0xb14>
  403c9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403ca0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403ca4:	f7ff bbf0 	b.w	403488 <_vfprintf_r+0x358>
  403ca8:	f8cd b018 	str.w	fp, [sp, #24]
  403cac:	2400      	movs	r4, #0
  403cae:	2500      	movs	r5, #0
  403cb0:	a930      	add	r1, sp, #192	; 0xc0
  403cb2:	e000      	b.n	403cb6 <_vfprintf_r+0xb86>
  403cb4:	4639      	mov	r1, r7
  403cb6:	08e2      	lsrs	r2, r4, #3
  403cb8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403cbc:	08e8      	lsrs	r0, r5, #3
  403cbe:	f004 0307 	and.w	r3, r4, #7
  403cc2:	4605      	mov	r5, r0
  403cc4:	4614      	mov	r4, r2
  403cc6:	3330      	adds	r3, #48	; 0x30
  403cc8:	ea54 0205 	orrs.w	r2, r4, r5
  403ccc:	f801 3c01 	strb.w	r3, [r1, #-1]
  403cd0:	f101 37ff 	add.w	r7, r1, #4294967295
  403cd4:	d1ee      	bne.n	403cb4 <_vfprintf_r+0xb84>
  403cd6:	9a06      	ldr	r2, [sp, #24]
  403cd8:	07d2      	lsls	r2, r2, #31
  403cda:	f57f ad64 	bpl.w	4037a6 <_vfprintf_r+0x676>
  403cde:	2b30      	cmp	r3, #48	; 0x30
  403ce0:	f43f ad61 	beq.w	4037a6 <_vfprintf_r+0x676>
  403ce4:	2330      	movs	r3, #48	; 0x30
  403ce6:	3902      	subs	r1, #2
  403ce8:	f807 3c01 	strb.w	r3, [r7, #-1]
  403cec:	ab30      	add	r3, sp, #192	; 0xc0
  403cee:	1a5b      	subs	r3, r3, r1
  403cf0:	930d      	str	r3, [sp, #52]	; 0x34
  403cf2:	460f      	mov	r7, r1
  403cf4:	f7ff bb46 	b.w	403384 <_vfprintf_r+0x254>
  403cf8:	2302      	movs	r3, #2
  403cfa:	f7ff bb25 	b.w	403348 <_vfprintf_r+0x218>
  403cfe:	991d      	ldr	r1, [sp, #116]	; 0x74
  403d00:	2900      	cmp	r1, #0
  403d02:	f340 8274 	ble.w	4041ee <_vfprintf_r+0x10be>
  403d06:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d0a:	4293      	cmp	r3, r2
  403d0c:	bfa8      	it	ge
  403d0e:	4613      	movge	r3, r2
  403d10:	2b00      	cmp	r3, #0
  403d12:	461e      	mov	r6, r3
  403d14:	dd0d      	ble.n	403d32 <_vfprintf_r+0xc02>
  403d16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d18:	f8c8 7000 	str.w	r7, [r8]
  403d1c:	3301      	adds	r3, #1
  403d1e:	4434      	add	r4, r6
  403d20:	2b07      	cmp	r3, #7
  403d22:	9425      	str	r4, [sp, #148]	; 0x94
  403d24:	f8c8 6004 	str.w	r6, [r8, #4]
  403d28:	9324      	str	r3, [sp, #144]	; 0x90
  403d2a:	f300 8324 	bgt.w	404376 <_vfprintf_r+0x1246>
  403d2e:	f108 0808 	add.w	r8, r8, #8
  403d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d34:	2e00      	cmp	r6, #0
  403d36:	bfa8      	it	ge
  403d38:	1b9b      	subge	r3, r3, r6
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	461e      	mov	r6, r3
  403d3e:	f340 80d0 	ble.w	403ee2 <_vfprintf_r+0xdb2>
  403d42:	2e10      	cmp	r6, #16
  403d44:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d46:	4dc0      	ldr	r5, [pc, #768]	; (404048 <_vfprintf_r+0xf18>)
  403d48:	f340 80b7 	ble.w	403eba <_vfprintf_r+0xd8a>
  403d4c:	4622      	mov	r2, r4
  403d4e:	f04f 0a10 	mov.w	sl, #16
  403d52:	f8dd b020 	ldr.w	fp, [sp, #32]
  403d56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403d58:	e005      	b.n	403d66 <_vfprintf_r+0xc36>
  403d5a:	f108 0808 	add.w	r8, r8, #8
  403d5e:	3e10      	subs	r6, #16
  403d60:	2e10      	cmp	r6, #16
  403d62:	f340 80a9 	ble.w	403eb8 <_vfprintf_r+0xd88>
  403d66:	3301      	adds	r3, #1
  403d68:	3210      	adds	r2, #16
  403d6a:	2b07      	cmp	r3, #7
  403d6c:	9225      	str	r2, [sp, #148]	; 0x94
  403d6e:	9324      	str	r3, [sp, #144]	; 0x90
  403d70:	e888 0420 	stmia.w	r8, {r5, sl}
  403d74:	ddf1      	ble.n	403d5a <_vfprintf_r+0xc2a>
  403d76:	aa23      	add	r2, sp, #140	; 0x8c
  403d78:	4621      	mov	r1, r4
  403d7a:	4658      	mov	r0, fp
  403d7c:	f7ff f9ce 	bl	40311c <__sprint_r>
  403d80:	2800      	cmp	r0, #0
  403d82:	f040 8324 	bne.w	4043ce <_vfprintf_r+0x129e>
  403d86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d8a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403d8e:	e7e6      	b.n	403d5e <_vfprintf_r+0xc2e>
  403d90:	2d00      	cmp	r5, #0
  403d92:	bf08      	it	eq
  403d94:	2c0a      	cmpeq	r4, #10
  403d96:	d37c      	bcc.n	403e92 <_vfprintf_r+0xd62>
  403d98:	af30      	add	r7, sp, #192	; 0xc0
  403d9a:	4620      	mov	r0, r4
  403d9c:	4629      	mov	r1, r5
  403d9e:	220a      	movs	r2, #10
  403da0:	2300      	movs	r3, #0
  403da2:	f7fe fd13 	bl	4027cc <__aeabi_uldivmod>
  403da6:	3230      	adds	r2, #48	; 0x30
  403da8:	f807 2d01 	strb.w	r2, [r7, #-1]!
  403dac:	4620      	mov	r0, r4
  403dae:	4629      	mov	r1, r5
  403db0:	2300      	movs	r3, #0
  403db2:	220a      	movs	r2, #10
  403db4:	f7fe fd0a 	bl	4027cc <__aeabi_uldivmod>
  403db8:	4604      	mov	r4, r0
  403dba:	460d      	mov	r5, r1
  403dbc:	ea54 0305 	orrs.w	r3, r4, r5
  403dc0:	d1eb      	bne.n	403d9a <_vfprintf_r+0xc6a>
  403dc2:	ab30      	add	r3, sp, #192	; 0xc0
  403dc4:	1bdb      	subs	r3, r3, r7
  403dc6:	930d      	str	r3, [sp, #52]	; 0x34
  403dc8:	f7ff badc 	b.w	403384 <_vfprintf_r+0x254>
  403dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403dce:	930d      	str	r3, [sp, #52]	; 0x34
  403dd0:	af30      	add	r7, sp, #192	; 0xc0
  403dd2:	f7ff bad7 	b.w	403384 <_vfprintf_r+0x254>
  403dd6:	aa23      	add	r2, sp, #140	; 0x8c
  403dd8:	990a      	ldr	r1, [sp, #40]	; 0x28
  403dda:	9808      	ldr	r0, [sp, #32]
  403ddc:	f7ff f99e 	bl	40311c <__sprint_r>
  403de0:	2800      	cmp	r0, #0
  403de2:	f47f af2f 	bne.w	403c44 <_vfprintf_r+0xb14>
  403de6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403dea:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403dec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403df0:	f7ff bb28 	b.w	403444 <_vfprintf_r+0x314>
  403df4:	1e5f      	subs	r7, r3, #1
  403df6:	2f00      	cmp	r7, #0
  403df8:	f77f af05 	ble.w	403c06 <_vfprintf_r+0xad6>
  403dfc:	2f10      	cmp	r7, #16
  403dfe:	4d92      	ldr	r5, [pc, #584]	; (404048 <_vfprintf_r+0xf18>)
  403e00:	f340 810a 	ble.w	404018 <_vfprintf_r+0xee8>
  403e04:	f04f 0a10 	mov.w	sl, #16
  403e08:	f8dd b020 	ldr.w	fp, [sp, #32]
  403e0c:	e005      	b.n	403e1a <_vfprintf_r+0xcea>
  403e0e:	f108 0808 	add.w	r8, r8, #8
  403e12:	3f10      	subs	r7, #16
  403e14:	2f10      	cmp	r7, #16
  403e16:	f340 80ff 	ble.w	404018 <_vfprintf_r+0xee8>
  403e1a:	3601      	adds	r6, #1
  403e1c:	3410      	adds	r4, #16
  403e1e:	2e07      	cmp	r6, #7
  403e20:	9425      	str	r4, [sp, #148]	; 0x94
  403e22:	9624      	str	r6, [sp, #144]	; 0x90
  403e24:	e888 0420 	stmia.w	r8, {r5, sl}
  403e28:	ddf1      	ble.n	403e0e <_vfprintf_r+0xcde>
  403e2a:	aa23      	add	r2, sp, #140	; 0x8c
  403e2c:	990a      	ldr	r1, [sp, #40]	; 0x28
  403e2e:	4658      	mov	r0, fp
  403e30:	f7ff f974 	bl	40311c <__sprint_r>
  403e34:	2800      	cmp	r0, #0
  403e36:	f47f af05 	bne.w	403c44 <_vfprintf_r+0xb14>
  403e3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403e3c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403e3e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403e42:	e7e6      	b.n	403e12 <_vfprintf_r+0xce2>
  403e44:	990e      	ldr	r1, [sp, #56]	; 0x38
  403e46:	460a      	mov	r2, r1
  403e48:	3204      	adds	r2, #4
  403e4a:	680c      	ldr	r4, [r1, #0]
  403e4c:	920e      	str	r2, [sp, #56]	; 0x38
  403e4e:	2500      	movs	r5, #0
  403e50:	f7ff ba7a 	b.w	403348 <_vfprintf_r+0x218>
  403e54:	681c      	ldr	r4, [r3, #0]
  403e56:	3304      	adds	r3, #4
  403e58:	930e      	str	r3, [sp, #56]	; 0x38
  403e5a:	2500      	movs	r5, #0
  403e5c:	e426      	b.n	4036ac <_vfprintf_r+0x57c>
  403e5e:	3301      	adds	r3, #1
  403e60:	4434      	add	r4, r6
  403e62:	2b07      	cmp	r3, #7
  403e64:	9425      	str	r4, [sp, #148]	; 0x94
  403e66:	9324      	str	r3, [sp, #144]	; 0x90
  403e68:	e888 0060 	stmia.w	r8, {r5, r6}
  403e6c:	f77f ab63 	ble.w	403536 <_vfprintf_r+0x406>
  403e70:	e6d6      	b.n	403c20 <_vfprintf_r+0xaf0>
  403e72:	3204      	adds	r2, #4
  403e74:	681c      	ldr	r4, [r3, #0]
  403e76:	920e      	str	r2, [sp, #56]	; 0x38
  403e78:	2301      	movs	r3, #1
  403e7a:	2500      	movs	r5, #0
  403e7c:	f7ff ba64 	b.w	403348 <_vfprintf_r+0x218>
  403e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403e82:	6814      	ldr	r4, [r2, #0]
  403e84:	4613      	mov	r3, r2
  403e86:	3304      	adds	r3, #4
  403e88:	17e5      	asrs	r5, r4, #31
  403e8a:	930e      	str	r3, [sp, #56]	; 0x38
  403e8c:	4622      	mov	r2, r4
  403e8e:	462b      	mov	r3, r5
  403e90:	e460      	b.n	403754 <_vfprintf_r+0x624>
  403e92:	f8dd b018 	ldr.w	fp, [sp, #24]
  403e96:	f8cd b018 	str.w	fp, [sp, #24]
  403e9a:	af40      	add	r7, sp, #256	; 0x100
  403e9c:	3430      	adds	r4, #48	; 0x30
  403e9e:	2301      	movs	r3, #1
  403ea0:	f807 4d41 	strb.w	r4, [r7, #-65]!
  403ea4:	930d      	str	r3, [sp, #52]	; 0x34
  403ea6:	f7ff ba6d 	b.w	403384 <_vfprintf_r+0x254>
  403eaa:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  403eae:	f002 f961 	bl	406174 <__retarget_lock_release_recursive>
  403eb2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  403eb6:	e5af      	b.n	403a18 <_vfprintf_r+0x8e8>
  403eb8:	4614      	mov	r4, r2
  403eba:	3301      	adds	r3, #1
  403ebc:	4434      	add	r4, r6
  403ebe:	2b07      	cmp	r3, #7
  403ec0:	9425      	str	r4, [sp, #148]	; 0x94
  403ec2:	9324      	str	r3, [sp, #144]	; 0x90
  403ec4:	e888 0060 	stmia.w	r8, {r5, r6}
  403ec8:	f340 816d 	ble.w	4041a6 <_vfprintf_r+0x1076>
  403ecc:	aa23      	add	r2, sp, #140	; 0x8c
  403ece:	990a      	ldr	r1, [sp, #40]	; 0x28
  403ed0:	9808      	ldr	r0, [sp, #32]
  403ed2:	f7ff f923 	bl	40311c <__sprint_r>
  403ed6:	2800      	cmp	r0, #0
  403ed8:	f47f aeb4 	bne.w	403c44 <_vfprintf_r+0xb14>
  403edc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403ede:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403ee2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ee6:	4293      	cmp	r3, r2
  403ee8:	f280 8158 	bge.w	40419c <_vfprintf_r+0x106c>
  403eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403eee:	9814      	ldr	r0, [sp, #80]	; 0x50
  403ef0:	9915      	ldr	r1, [sp, #84]	; 0x54
  403ef2:	f8c8 1000 	str.w	r1, [r8]
  403ef6:	3201      	adds	r2, #1
  403ef8:	4404      	add	r4, r0
  403efa:	2a07      	cmp	r2, #7
  403efc:	9425      	str	r4, [sp, #148]	; 0x94
  403efe:	f8c8 0004 	str.w	r0, [r8, #4]
  403f02:	9224      	str	r2, [sp, #144]	; 0x90
  403f04:	f300 8152 	bgt.w	4041ac <_vfprintf_r+0x107c>
  403f08:	f108 0808 	add.w	r8, r8, #8
  403f0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f10:	1ad3      	subs	r3, r2, r3
  403f12:	1a56      	subs	r6, r2, r1
  403f14:	429e      	cmp	r6, r3
  403f16:	bfa8      	it	ge
  403f18:	461e      	movge	r6, r3
  403f1a:	2e00      	cmp	r6, #0
  403f1c:	dd0e      	ble.n	403f3c <_vfprintf_r+0xe0c>
  403f1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403f20:	f8c8 6004 	str.w	r6, [r8, #4]
  403f24:	3201      	adds	r2, #1
  403f26:	440f      	add	r7, r1
  403f28:	4434      	add	r4, r6
  403f2a:	2a07      	cmp	r2, #7
  403f2c:	f8c8 7000 	str.w	r7, [r8]
  403f30:	9425      	str	r4, [sp, #148]	; 0x94
  403f32:	9224      	str	r2, [sp, #144]	; 0x90
  403f34:	f300 823c 	bgt.w	4043b0 <_vfprintf_r+0x1280>
  403f38:	f108 0808 	add.w	r8, r8, #8
  403f3c:	2e00      	cmp	r6, #0
  403f3e:	bfac      	ite	ge
  403f40:	1b9e      	subge	r6, r3, r6
  403f42:	461e      	movlt	r6, r3
  403f44:	2e00      	cmp	r6, #0
  403f46:	f77f aaf8 	ble.w	40353a <_vfprintf_r+0x40a>
  403f4a:	2e10      	cmp	r6, #16
  403f4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f4e:	4d3e      	ldr	r5, [pc, #248]	; (404048 <_vfprintf_r+0xf18>)
  403f50:	dd85      	ble.n	403e5e <_vfprintf_r+0xd2e>
  403f52:	2710      	movs	r7, #16
  403f54:	f8dd a020 	ldr.w	sl, [sp, #32]
  403f58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403f5c:	e005      	b.n	403f6a <_vfprintf_r+0xe3a>
  403f5e:	f108 0808 	add.w	r8, r8, #8
  403f62:	3e10      	subs	r6, #16
  403f64:	2e10      	cmp	r6, #16
  403f66:	f77f af7a 	ble.w	403e5e <_vfprintf_r+0xd2e>
  403f6a:	3301      	adds	r3, #1
  403f6c:	3410      	adds	r4, #16
  403f6e:	2b07      	cmp	r3, #7
  403f70:	9425      	str	r4, [sp, #148]	; 0x94
  403f72:	9324      	str	r3, [sp, #144]	; 0x90
  403f74:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f78:	ddf1      	ble.n	403f5e <_vfprintf_r+0xe2e>
  403f7a:	aa23      	add	r2, sp, #140	; 0x8c
  403f7c:	4659      	mov	r1, fp
  403f7e:	4650      	mov	r0, sl
  403f80:	f7ff f8cc 	bl	40311c <__sprint_r>
  403f84:	2800      	cmp	r0, #0
  403f86:	f040 8176 	bne.w	404276 <_vfprintf_r+0x1146>
  403f8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403f8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f8e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403f92:	e7e6      	b.n	403f62 <_vfprintf_r+0xe32>
  403f94:	9b06      	ldr	r3, [sp, #24]
  403f96:	07d8      	lsls	r0, r3, #31
  403f98:	f53f adff 	bmi.w	403b9a <_vfprintf_r+0xa6a>
  403f9c:	3601      	adds	r6, #1
  403f9e:	3401      	adds	r4, #1
  403fa0:	2301      	movs	r3, #1
  403fa2:	2e07      	cmp	r6, #7
  403fa4:	9425      	str	r4, [sp, #148]	; 0x94
  403fa6:	9624      	str	r6, [sp, #144]	; 0x90
  403fa8:	f8c8 7000 	str.w	r7, [r8]
  403fac:	f8c8 3004 	str.w	r3, [r8, #4]
  403fb0:	f77f ae27 	ble.w	403c02 <_vfprintf_r+0xad2>
  403fb4:	aa23      	add	r2, sp, #140	; 0x8c
  403fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
  403fb8:	9808      	ldr	r0, [sp, #32]
  403fba:	f7ff f8af 	bl	40311c <__sprint_r>
  403fbe:	2800      	cmp	r0, #0
  403fc0:	f47f ae40 	bne.w	403c44 <_vfprintf_r+0xb14>
  403fc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403fc6:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403fc8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403fcc:	e61b      	b.n	403c06 <_vfprintf_r+0xad6>
  403fce:	aa23      	add	r2, sp, #140	; 0x8c
  403fd0:	990a      	ldr	r1, [sp, #40]	; 0x28
  403fd2:	9808      	ldr	r0, [sp, #32]
  403fd4:	f7ff f8a2 	bl	40311c <__sprint_r>
  403fd8:	2800      	cmp	r0, #0
  403fda:	f47f ae33 	bne.w	403c44 <_vfprintf_r+0xb14>
  403fde:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403fe0:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403fe2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403fe6:	e5e6      	b.n	403bb6 <_vfprintf_r+0xa86>
  403fe8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403fea:	3507      	adds	r5, #7
  403fec:	f025 0507 	bic.w	r5, r5, #7
  403ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
  403ff4:	f105 0108 	add.w	r1, r5, #8
  403ff8:	910e      	str	r1, [sp, #56]	; 0x38
  403ffa:	4614      	mov	r4, r2
  403ffc:	461d      	mov	r5, r3
  403ffe:	f7ff bba9 	b.w	403754 <_vfprintf_r+0x624>
  404002:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404004:	3507      	adds	r5, #7
  404006:	f025 0307 	bic.w	r3, r5, #7
  40400a:	f103 0208 	add.w	r2, r3, #8
  40400e:	920e      	str	r2, [sp, #56]	; 0x38
  404010:	e9d3 4500 	ldrd	r4, r5, [r3]
  404014:	f7ff bb4a 	b.w	4036ac <_vfprintf_r+0x57c>
  404018:	3601      	adds	r6, #1
  40401a:	443c      	add	r4, r7
  40401c:	2e07      	cmp	r6, #7
  40401e:	9425      	str	r4, [sp, #148]	; 0x94
  404020:	9624      	str	r6, [sp, #144]	; 0x90
  404022:	e888 00a0 	stmia.w	r8, {r5, r7}
  404026:	f77f adec 	ble.w	403c02 <_vfprintf_r+0xad2>
  40402a:	e7c3      	b.n	403fb4 <_vfprintf_r+0xe84>
  40402c:	aa23      	add	r2, sp, #140	; 0x8c
  40402e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404030:	9808      	ldr	r0, [sp, #32]
  404032:	f7ff f873 	bl	40311c <__sprint_r>
  404036:	2800      	cmp	r0, #0
  404038:	f47f ae04 	bne.w	403c44 <_vfprintf_r+0xb14>
  40403c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40403e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404040:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404044:	e5c6      	b.n	403bd4 <_vfprintf_r+0xaa4>
  404046:	bf00      	nop
  404048:	00408210 	.word	0x00408210
  40404c:	af30      	add	r7, sp, #192	; 0xc0
  40404e:	f7ff b999 	b.w	403384 <_vfprintf_r+0x254>
  404052:	aa23      	add	r2, sp, #140	; 0x8c
  404054:	990a      	ldr	r1, [sp, #40]	; 0x28
  404056:	9808      	ldr	r0, [sp, #32]
  404058:	f7ff f860 	bl	40311c <__sprint_r>
  40405c:	2800      	cmp	r0, #0
  40405e:	f47f adf1 	bne.w	403c44 <_vfprintf_r+0xb14>
  404062:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404064:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404068:	f7ff ba11 	b.w	40348e <_vfprintf_r+0x35e>
  40406c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404070:	4264      	negs	r4, r4
  404072:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404076:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40407a:	2301      	movs	r3, #1
  40407c:	f7ff b968 	b.w	403350 <_vfprintf_r+0x220>
  404080:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  404082:	4622      	mov	r2, r4
  404084:	4620      	mov	r0, r4
  404086:	9c12      	ldr	r4, [sp, #72]	; 0x48
  404088:	4623      	mov	r3, r4
  40408a:	4621      	mov	r1, r4
  40408c:	f003 fc90 	bl	4079b0 <__aeabi_dcmpun>
  404090:	2800      	cmp	r0, #0
  404092:	f040 828c 	bne.w	4045ae <_vfprintf_r+0x147e>
  404096:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404098:	3301      	adds	r3, #1
  40409a:	f026 0320 	bic.w	r3, r6, #32
  40409e:	930d      	str	r3, [sp, #52]	; 0x34
  4040a0:	f000 8091 	beq.w	4041c6 <_vfprintf_r+0x1096>
  4040a4:	2b47      	cmp	r3, #71	; 0x47
  4040a6:	d104      	bne.n	4040b2 <_vfprintf_r+0xf82>
  4040a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4040aa:	2b00      	cmp	r3, #0
  4040ac:	bf08      	it	eq
  4040ae:	2301      	moveq	r3, #1
  4040b0:	9309      	str	r3, [sp, #36]	; 0x24
  4040b2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4040b6:	9306      	str	r3, [sp, #24]
  4040b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040ba:	f1b3 0a00 	subs.w	sl, r3, #0
  4040be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040c0:	9307      	str	r3, [sp, #28]
  4040c2:	bfbb      	ittet	lt
  4040c4:	4653      	movlt	r3, sl
  4040c6:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4040ca:	2300      	movge	r3, #0
  4040cc:	232d      	movlt	r3, #45	; 0x2d
  4040ce:	2e66      	cmp	r6, #102	; 0x66
  4040d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4040d2:	f000 817f 	beq.w	4043d4 <_vfprintf_r+0x12a4>
  4040d6:	2e46      	cmp	r6, #70	; 0x46
  4040d8:	f000 81d4 	beq.w	404484 <_vfprintf_r+0x1354>
  4040dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040de:	9a07      	ldr	r2, [sp, #28]
  4040e0:	2b45      	cmp	r3, #69	; 0x45
  4040e2:	bf0c      	ite	eq
  4040e4:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  4040e6:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  4040e8:	a821      	add	r0, sp, #132	; 0x84
  4040ea:	a91e      	add	r1, sp, #120	; 0x78
  4040ec:	bf08      	it	eq
  4040ee:	1c5d      	addeq	r5, r3, #1
  4040f0:	9004      	str	r0, [sp, #16]
  4040f2:	9103      	str	r1, [sp, #12]
  4040f4:	a81d      	add	r0, sp, #116	; 0x74
  4040f6:	2102      	movs	r1, #2
  4040f8:	9002      	str	r0, [sp, #8]
  4040fa:	4653      	mov	r3, sl
  4040fc:	9501      	str	r5, [sp, #4]
  4040fe:	9100      	str	r1, [sp, #0]
  404100:	9808      	ldr	r0, [sp, #32]
  404102:	f000 fc0d 	bl	404920 <_dtoa_r>
  404106:	2e67      	cmp	r6, #103	; 0x67
  404108:	4607      	mov	r7, r0
  40410a:	f040 81af 	bne.w	40446c <_vfprintf_r+0x133c>
  40410e:	f01b 0f01 	tst.w	fp, #1
  404112:	f000 8213 	beq.w	40453c <_vfprintf_r+0x140c>
  404116:	197c      	adds	r4, r7, r5
  404118:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40411a:	9807      	ldr	r0, [sp, #28]
  40411c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40411e:	4651      	mov	r1, sl
  404120:	f003 fc14 	bl	40794c <__aeabi_dcmpeq>
  404124:	2800      	cmp	r0, #0
  404126:	f040 8132 	bne.w	40438e <_vfprintf_r+0x125e>
  40412a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40412c:	42a3      	cmp	r3, r4
  40412e:	d206      	bcs.n	40413e <_vfprintf_r+0x100e>
  404130:	2130      	movs	r1, #48	; 0x30
  404132:	1c5a      	adds	r2, r3, #1
  404134:	9221      	str	r2, [sp, #132]	; 0x84
  404136:	7019      	strb	r1, [r3, #0]
  404138:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40413a:	429c      	cmp	r4, r3
  40413c:	d8f9      	bhi.n	404132 <_vfprintf_r+0x1002>
  40413e:	1bdb      	subs	r3, r3, r7
  404140:	9311      	str	r3, [sp, #68]	; 0x44
  404142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404144:	2b47      	cmp	r3, #71	; 0x47
  404146:	f000 80b9 	beq.w	4042bc <_vfprintf_r+0x118c>
  40414a:	2e65      	cmp	r6, #101	; 0x65
  40414c:	f340 8276 	ble.w	40463c <_vfprintf_r+0x150c>
  404150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404152:	9310      	str	r3, [sp, #64]	; 0x40
  404154:	2e66      	cmp	r6, #102	; 0x66
  404156:	f000 8162 	beq.w	40441e <_vfprintf_r+0x12ee>
  40415a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40415c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40415e:	4619      	mov	r1, r3
  404160:	4291      	cmp	r1, r2
  404162:	f300 814f 	bgt.w	404404 <_vfprintf_r+0x12d4>
  404166:	f01b 0f01 	tst.w	fp, #1
  40416a:	f040 8209 	bne.w	404580 <_vfprintf_r+0x1450>
  40416e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404172:	9307      	str	r3, [sp, #28]
  404174:	920d      	str	r2, [sp, #52]	; 0x34
  404176:	2667      	movs	r6, #103	; 0x67
  404178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40417a:	2b00      	cmp	r3, #0
  40417c:	f040 8096 	bne.w	4042ac <_vfprintf_r+0x117c>
  404180:	9309      	str	r3, [sp, #36]	; 0x24
  404182:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404186:	f7ff b905 	b.w	403394 <_vfprintf_r+0x264>
  40418a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40418e:	f001 fff1 	bl	406174 <__retarget_lock_release_recursive>
  404192:	f04f 33ff 	mov.w	r3, #4294967295
  404196:	930b      	str	r3, [sp, #44]	; 0x2c
  404198:	f7ff ba30 	b.w	4035fc <_vfprintf_r+0x4cc>
  40419c:	9a06      	ldr	r2, [sp, #24]
  40419e:	07d5      	lsls	r5, r2, #31
  4041a0:	f57f aeb4 	bpl.w	403f0c <_vfprintf_r+0xddc>
  4041a4:	e6a2      	b.n	403eec <_vfprintf_r+0xdbc>
  4041a6:	f108 0808 	add.w	r8, r8, #8
  4041aa:	e69a      	b.n	403ee2 <_vfprintf_r+0xdb2>
  4041ac:	aa23      	add	r2, sp, #140	; 0x8c
  4041ae:	990a      	ldr	r1, [sp, #40]	; 0x28
  4041b0:	9808      	ldr	r0, [sp, #32]
  4041b2:	f7fe ffb3 	bl	40311c <__sprint_r>
  4041b6:	2800      	cmp	r0, #0
  4041b8:	f47f ad44 	bne.w	403c44 <_vfprintf_r+0xb14>
  4041bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4041be:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4041c0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4041c4:	e6a2      	b.n	403f0c <_vfprintf_r+0xddc>
  4041c6:	2306      	movs	r3, #6
  4041c8:	9309      	str	r3, [sp, #36]	; 0x24
  4041ca:	e772      	b.n	4040b2 <_vfprintf_r+0xf82>
  4041cc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4041d0:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4041d4:	f7ff bbc7 	b.w	403966 <_vfprintf_r+0x836>
  4041d8:	aa23      	add	r2, sp, #140	; 0x8c
  4041da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4041dc:	9808      	ldr	r0, [sp, #32]
  4041de:	f7fe ff9d 	bl	40311c <__sprint_r>
  4041e2:	2800      	cmp	r0, #0
  4041e4:	f47f ad2e 	bne.w	403c44 <_vfprintf_r+0xb14>
  4041e8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4041ec:	e437      	b.n	403a5e <_vfprintf_r+0x92e>
  4041ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041f0:	4ab4      	ldr	r2, [pc, #720]	; (4044c4 <_vfprintf_r+0x1394>)
  4041f2:	f8c8 2000 	str.w	r2, [r8]
  4041f6:	3301      	adds	r3, #1
  4041f8:	3401      	adds	r4, #1
  4041fa:	2201      	movs	r2, #1
  4041fc:	2b07      	cmp	r3, #7
  4041fe:	9425      	str	r4, [sp, #148]	; 0x94
  404200:	9324      	str	r3, [sp, #144]	; 0x90
  404202:	f8c8 2004 	str.w	r2, [r8, #4]
  404206:	f300 8124 	bgt.w	404452 <_vfprintf_r+0x1322>
  40420a:	f108 0808 	add.w	r8, r8, #8
  40420e:	b929      	cbnz	r1, 40421c <_vfprintf_r+0x10ec>
  404210:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404212:	b91b      	cbnz	r3, 40421c <_vfprintf_r+0x10ec>
  404214:	9b06      	ldr	r3, [sp, #24]
  404216:	07de      	lsls	r6, r3, #31
  404218:	f57f a98f 	bpl.w	40353a <_vfprintf_r+0x40a>
  40421c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40421e:	9814      	ldr	r0, [sp, #80]	; 0x50
  404220:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404222:	f8c8 2000 	str.w	r2, [r8]
  404226:	3301      	adds	r3, #1
  404228:	4602      	mov	r2, r0
  40422a:	4422      	add	r2, r4
  40422c:	2b07      	cmp	r3, #7
  40422e:	9225      	str	r2, [sp, #148]	; 0x94
  404230:	f8c8 0004 	str.w	r0, [r8, #4]
  404234:	9324      	str	r3, [sp, #144]	; 0x90
  404236:	f300 8169 	bgt.w	40450c <_vfprintf_r+0x13dc>
  40423a:	f108 0808 	add.w	r8, r8, #8
  40423e:	2900      	cmp	r1, #0
  404240:	f2c0 8136 	blt.w	4044b0 <_vfprintf_r+0x1380>
  404244:	9911      	ldr	r1, [sp, #68]	; 0x44
  404246:	f8c8 7000 	str.w	r7, [r8]
  40424a:	3301      	adds	r3, #1
  40424c:	188c      	adds	r4, r1, r2
  40424e:	2b07      	cmp	r3, #7
  404250:	9425      	str	r4, [sp, #148]	; 0x94
  404252:	9324      	str	r3, [sp, #144]	; 0x90
  404254:	f8c8 1004 	str.w	r1, [r8, #4]
  404258:	f77f a96d 	ble.w	403536 <_vfprintf_r+0x406>
  40425c:	e4e0      	b.n	403c20 <_vfprintf_r+0xaf0>
  40425e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404260:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404262:	6813      	ldr	r3, [r2, #0]
  404264:	17cd      	asrs	r5, r1, #31
  404266:	4608      	mov	r0, r1
  404268:	3204      	adds	r2, #4
  40426a:	4629      	mov	r1, r5
  40426c:	920e      	str	r2, [sp, #56]	; 0x38
  40426e:	e9c3 0100 	strd	r0, r1, [r3]
  404272:	f7fe bfa9 	b.w	4031c8 <_vfprintf_r+0x98>
  404276:	46da      	mov	sl, fp
  404278:	f7ff bbc4 	b.w	403a04 <_vfprintf_r+0x8d4>
  40427c:	aa23      	add	r2, sp, #140	; 0x8c
  40427e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404280:	9808      	ldr	r0, [sp, #32]
  404282:	f7fe ff4b 	bl	40311c <__sprint_r>
  404286:	2800      	cmp	r0, #0
  404288:	f47f acdc 	bne.w	403c44 <_vfprintf_r+0xb14>
  40428c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40428e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404292:	f7ff bbfd 	b.w	403a90 <_vfprintf_r+0x960>
  404296:	4638      	mov	r0, r7
  404298:	9409      	str	r4, [sp, #36]	; 0x24
  40429a:	f7fe fe91 	bl	402fc0 <strlen>
  40429e:	950e      	str	r5, [sp, #56]	; 0x38
  4042a0:	900d      	str	r0, [sp, #52]	; 0x34
  4042a2:	f8cd b018 	str.w	fp, [sp, #24]
  4042a6:	4603      	mov	r3, r0
  4042a8:	f7ff ba36 	b.w	403718 <_vfprintf_r+0x5e8>
  4042ac:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4042b0:	2300      	movs	r3, #0
  4042b2:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4042b6:	9309      	str	r3, [sp, #36]	; 0x24
  4042b8:	f7ff b86f 	b.w	40339a <_vfprintf_r+0x26a>
  4042bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4042be:	9310      	str	r3, [sp, #64]	; 0x40
  4042c0:	461a      	mov	r2, r3
  4042c2:	3303      	adds	r3, #3
  4042c4:	db04      	blt.n	4042d0 <_vfprintf_r+0x11a0>
  4042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042c8:	4619      	mov	r1, r3
  4042ca:	4291      	cmp	r1, r2
  4042cc:	f6bf af45 	bge.w	40415a <_vfprintf_r+0x102a>
  4042d0:	3e02      	subs	r6, #2
  4042d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4042d4:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4042d8:	3b01      	subs	r3, #1
  4042da:	2b00      	cmp	r3, #0
  4042dc:	931d      	str	r3, [sp, #116]	; 0x74
  4042de:	bfbd      	ittte	lt
  4042e0:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  4042e2:	f1c3 0301 	rsblt	r3, r3, #1
  4042e6:	222d      	movlt	r2, #45	; 0x2d
  4042e8:	222b      	movge	r2, #43	; 0x2b
  4042ea:	2b09      	cmp	r3, #9
  4042ec:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4042f0:	f340 813e 	ble.w	404570 <_vfprintf_r+0x1440>
  4042f4:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4042f8:	4620      	mov	r0, r4
  4042fa:	4d73      	ldr	r5, [pc, #460]	; (4044c8 <_vfprintf_r+0x1398>)
  4042fc:	e000      	b.n	404300 <_vfprintf_r+0x11d0>
  4042fe:	4610      	mov	r0, r2
  404300:	fb85 1203 	smull	r1, r2, r5, r3
  404304:	17d9      	asrs	r1, r3, #31
  404306:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40430a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40430e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404312:	3230      	adds	r2, #48	; 0x30
  404314:	2909      	cmp	r1, #9
  404316:	f800 2c01 	strb.w	r2, [r0, #-1]
  40431a:	460b      	mov	r3, r1
  40431c:	f100 32ff 	add.w	r2, r0, #4294967295
  404320:	dced      	bgt.n	4042fe <_vfprintf_r+0x11ce>
  404322:	3330      	adds	r3, #48	; 0x30
  404324:	3802      	subs	r0, #2
  404326:	b2d9      	uxtb	r1, r3
  404328:	4284      	cmp	r4, r0
  40432a:	f802 1c01 	strb.w	r1, [r2, #-1]
  40432e:	f240 8190 	bls.w	404652 <_vfprintf_r+0x1522>
  404332:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  404336:	4613      	mov	r3, r2
  404338:	e001      	b.n	40433e <_vfprintf_r+0x120e>
  40433a:	f813 1b01 	ldrb.w	r1, [r3], #1
  40433e:	f800 1b01 	strb.w	r1, [r0], #1
  404342:	42a3      	cmp	r3, r4
  404344:	d1f9      	bne.n	40433a <_vfprintf_r+0x120a>
  404346:	3301      	adds	r3, #1
  404348:	1a9b      	subs	r3, r3, r2
  40434a:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40434e:	4413      	add	r3, r2
  404350:	aa1f      	add	r2, sp, #124	; 0x7c
  404352:	1a9b      	subs	r3, r3, r2
  404354:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404356:	9319      	str	r3, [sp, #100]	; 0x64
  404358:	2a01      	cmp	r2, #1
  40435a:	4413      	add	r3, r2
  40435c:	930d      	str	r3, [sp, #52]	; 0x34
  40435e:	f340 8145 	ble.w	4045ec <_vfprintf_r+0x14bc>
  404362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404364:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404366:	4413      	add	r3, r2
  404368:	930d      	str	r3, [sp, #52]	; 0x34
  40436a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40436e:	9307      	str	r3, [sp, #28]
  404370:	2300      	movs	r3, #0
  404372:	9310      	str	r3, [sp, #64]	; 0x40
  404374:	e700      	b.n	404178 <_vfprintf_r+0x1048>
  404376:	aa23      	add	r2, sp, #140	; 0x8c
  404378:	990a      	ldr	r1, [sp, #40]	; 0x28
  40437a:	9808      	ldr	r0, [sp, #32]
  40437c:	f7fe fece 	bl	40311c <__sprint_r>
  404380:	2800      	cmp	r0, #0
  404382:	f47f ac5f 	bne.w	403c44 <_vfprintf_r+0xb14>
  404386:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404388:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40438c:	e4d1      	b.n	403d32 <_vfprintf_r+0xc02>
  40438e:	4623      	mov	r3, r4
  404390:	e6d5      	b.n	40413e <_vfprintf_r+0x100e>
  404392:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404394:	9710      	str	r7, [sp, #64]	; 0x40
  404396:	2b06      	cmp	r3, #6
  404398:	bf28      	it	cs
  40439a:	2306      	movcs	r3, #6
  40439c:	9709      	str	r7, [sp, #36]	; 0x24
  40439e:	46ba      	mov	sl, r7
  4043a0:	9307      	str	r3, [sp, #28]
  4043a2:	950e      	str	r5, [sp, #56]	; 0x38
  4043a4:	f8cd b018 	str.w	fp, [sp, #24]
  4043a8:	930d      	str	r3, [sp, #52]	; 0x34
  4043aa:	4f48      	ldr	r7, [pc, #288]	; (4044cc <_vfprintf_r+0x139c>)
  4043ac:	f7fe bff2 	b.w	403394 <_vfprintf_r+0x264>
  4043b0:	aa23      	add	r2, sp, #140	; 0x8c
  4043b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4043b4:	9808      	ldr	r0, [sp, #32]
  4043b6:	f7fe feb1 	bl	40311c <__sprint_r>
  4043ba:	2800      	cmp	r0, #0
  4043bc:	f47f ac42 	bne.w	403c44 <_vfprintf_r+0xb14>
  4043c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4043c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043c6:	1ad3      	subs	r3, r2, r3
  4043c8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4043cc:	e5b6      	b.n	403f3c <_vfprintf_r+0xe0c>
  4043ce:	46a2      	mov	sl, r4
  4043d0:	f7ff bb18 	b.w	403a04 <_vfprintf_r+0x8d4>
  4043d4:	a821      	add	r0, sp, #132	; 0x84
  4043d6:	a91e      	add	r1, sp, #120	; 0x78
  4043d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4043da:	9004      	str	r0, [sp, #16]
  4043dc:	9103      	str	r1, [sp, #12]
  4043de:	a81d      	add	r0, sp, #116	; 0x74
  4043e0:	2103      	movs	r1, #3
  4043e2:	9002      	str	r0, [sp, #8]
  4043e4:	9a07      	ldr	r2, [sp, #28]
  4043e6:	9501      	str	r5, [sp, #4]
  4043e8:	4653      	mov	r3, sl
  4043ea:	9100      	str	r1, [sp, #0]
  4043ec:	9808      	ldr	r0, [sp, #32]
  4043ee:	f000 fa97 	bl	404920 <_dtoa_r>
  4043f2:	4607      	mov	r7, r0
  4043f4:	1944      	adds	r4, r0, r5
  4043f6:	783b      	ldrb	r3, [r7, #0]
  4043f8:	2b30      	cmp	r3, #48	; 0x30
  4043fa:	f000 80ca 	beq.w	404592 <_vfprintf_r+0x1462>
  4043fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404400:	442c      	add	r4, r5
  404402:	e689      	b.n	404118 <_vfprintf_r+0xfe8>
  404404:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404406:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404408:	4413      	add	r3, r2
  40440a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40440c:	930d      	str	r3, [sp, #52]	; 0x34
  40440e:	2a00      	cmp	r2, #0
  404410:	f340 80e4 	ble.w	4045dc <_vfprintf_r+0x14ac>
  404414:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404418:	9307      	str	r3, [sp, #28]
  40441a:	2667      	movs	r6, #103	; 0x67
  40441c:	e6ac      	b.n	404178 <_vfprintf_r+0x1048>
  40441e:	2b00      	cmp	r3, #0
  404420:	f340 80fb 	ble.w	40461a <_vfprintf_r+0x14ea>
  404424:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404426:	2a00      	cmp	r2, #0
  404428:	f040 80ce 	bne.w	4045c8 <_vfprintf_r+0x1498>
  40442c:	f01b 0f01 	tst.w	fp, #1
  404430:	f040 80ca 	bne.w	4045c8 <_vfprintf_r+0x1498>
  404434:	9307      	str	r3, [sp, #28]
  404436:	930d      	str	r3, [sp, #52]	; 0x34
  404438:	e69e      	b.n	404178 <_vfprintf_r+0x1048>
  40443a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40443c:	9307      	str	r3, [sp, #28]
  40443e:	930d      	str	r3, [sp, #52]	; 0x34
  404440:	9009      	str	r0, [sp, #36]	; 0x24
  404442:	950e      	str	r5, [sp, #56]	; 0x38
  404444:	f8cd b018 	str.w	fp, [sp, #24]
  404448:	9010      	str	r0, [sp, #64]	; 0x40
  40444a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40444e:	f7fe bfa1 	b.w	403394 <_vfprintf_r+0x264>
  404452:	aa23      	add	r2, sp, #140	; 0x8c
  404454:	990a      	ldr	r1, [sp, #40]	; 0x28
  404456:	9808      	ldr	r0, [sp, #32]
  404458:	f7fe fe60 	bl	40311c <__sprint_r>
  40445c:	2800      	cmp	r0, #0
  40445e:	f47f abf1 	bne.w	403c44 <_vfprintf_r+0xb14>
  404462:	991d      	ldr	r1, [sp, #116]	; 0x74
  404464:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404466:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40446a:	e6d0      	b.n	40420e <_vfprintf_r+0x10de>
  40446c:	2e47      	cmp	r6, #71	; 0x47
  40446e:	f47f ae52 	bne.w	404116 <_vfprintf_r+0xfe6>
  404472:	f01b 0f01 	tst.w	fp, #1
  404476:	f000 80da 	beq.w	40462e <_vfprintf_r+0x14fe>
  40447a:	2e46      	cmp	r6, #70	; 0x46
  40447c:	eb07 0405 	add.w	r4, r7, r5
  404480:	d0b9      	beq.n	4043f6 <_vfprintf_r+0x12c6>
  404482:	e649      	b.n	404118 <_vfprintf_r+0xfe8>
  404484:	a821      	add	r0, sp, #132	; 0x84
  404486:	a91e      	add	r1, sp, #120	; 0x78
  404488:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40448a:	9004      	str	r0, [sp, #16]
  40448c:	9103      	str	r1, [sp, #12]
  40448e:	a81d      	add	r0, sp, #116	; 0x74
  404490:	2103      	movs	r1, #3
  404492:	9002      	str	r0, [sp, #8]
  404494:	9a07      	ldr	r2, [sp, #28]
  404496:	9401      	str	r4, [sp, #4]
  404498:	4653      	mov	r3, sl
  40449a:	9100      	str	r1, [sp, #0]
  40449c:	9808      	ldr	r0, [sp, #32]
  40449e:	f000 fa3f 	bl	404920 <_dtoa_r>
  4044a2:	4625      	mov	r5, r4
  4044a4:	4607      	mov	r7, r0
  4044a6:	e7e8      	b.n	40447a <_vfprintf_r+0x134a>
  4044a8:	2300      	movs	r3, #0
  4044aa:	9309      	str	r3, [sp, #36]	; 0x24
  4044ac:	f7fe bec1 	b.w	403232 <_vfprintf_r+0x102>
  4044b0:	424e      	negs	r6, r1
  4044b2:	3110      	adds	r1, #16
  4044b4:	4d06      	ldr	r5, [pc, #24]	; (4044d0 <_vfprintf_r+0x13a0>)
  4044b6:	da43      	bge.n	404540 <_vfprintf_r+0x1410>
  4044b8:	2410      	movs	r4, #16
  4044ba:	f8dd a020 	ldr.w	sl, [sp, #32]
  4044be:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4044c2:	e00c      	b.n	4044de <_vfprintf_r+0x13ae>
  4044c4:	004081fc 	.word	0x004081fc
  4044c8:	66666667 	.word	0x66666667
  4044cc:	004081f4 	.word	0x004081f4
  4044d0:	00408210 	.word	0x00408210
  4044d4:	f108 0808 	add.w	r8, r8, #8
  4044d8:	3e10      	subs	r6, #16
  4044da:	2e10      	cmp	r6, #16
  4044dc:	dd30      	ble.n	404540 <_vfprintf_r+0x1410>
  4044de:	3301      	adds	r3, #1
  4044e0:	3210      	adds	r2, #16
  4044e2:	2b07      	cmp	r3, #7
  4044e4:	9225      	str	r2, [sp, #148]	; 0x94
  4044e6:	9324      	str	r3, [sp, #144]	; 0x90
  4044e8:	f8c8 5000 	str.w	r5, [r8]
  4044ec:	f8c8 4004 	str.w	r4, [r8, #4]
  4044f0:	ddf0      	ble.n	4044d4 <_vfprintf_r+0x13a4>
  4044f2:	aa23      	add	r2, sp, #140	; 0x8c
  4044f4:	4659      	mov	r1, fp
  4044f6:	4650      	mov	r0, sl
  4044f8:	f7fe fe10 	bl	40311c <__sprint_r>
  4044fc:	2800      	cmp	r0, #0
  4044fe:	f47f aeba 	bne.w	404276 <_vfprintf_r+0x1146>
  404502:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404504:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404506:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40450a:	e7e5      	b.n	4044d8 <_vfprintf_r+0x13a8>
  40450c:	aa23      	add	r2, sp, #140	; 0x8c
  40450e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404510:	9808      	ldr	r0, [sp, #32]
  404512:	f7fe fe03 	bl	40311c <__sprint_r>
  404516:	2800      	cmp	r0, #0
  404518:	f47f ab94 	bne.w	403c44 <_vfprintf_r+0xb14>
  40451c:	991d      	ldr	r1, [sp, #116]	; 0x74
  40451e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404520:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404522:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404526:	e68a      	b.n	40423e <_vfprintf_r+0x110e>
  404528:	9808      	ldr	r0, [sp, #32]
  40452a:	aa23      	add	r2, sp, #140	; 0x8c
  40452c:	4651      	mov	r1, sl
  40452e:	f7fe fdf5 	bl	40311c <__sprint_r>
  404532:	2800      	cmp	r0, #0
  404534:	f43f aa64 	beq.w	403a00 <_vfprintf_r+0x8d0>
  404538:	f7ff ba64 	b.w	403a04 <_vfprintf_r+0x8d4>
  40453c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40453e:	e5fe      	b.n	40413e <_vfprintf_r+0x100e>
  404540:	3301      	adds	r3, #1
  404542:	4432      	add	r2, r6
  404544:	2b07      	cmp	r3, #7
  404546:	e888 0060 	stmia.w	r8, {r5, r6}
  40454a:	9225      	str	r2, [sp, #148]	; 0x94
  40454c:	9324      	str	r3, [sp, #144]	; 0x90
  40454e:	f108 0808 	add.w	r8, r8, #8
  404552:	f77f ae77 	ble.w	404244 <_vfprintf_r+0x1114>
  404556:	aa23      	add	r2, sp, #140	; 0x8c
  404558:	990a      	ldr	r1, [sp, #40]	; 0x28
  40455a:	9808      	ldr	r0, [sp, #32]
  40455c:	f7fe fdde 	bl	40311c <__sprint_r>
  404560:	2800      	cmp	r0, #0
  404562:	f47f ab6f 	bne.w	403c44 <_vfprintf_r+0xb14>
  404566:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404568:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40456a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40456e:	e669      	b.n	404244 <_vfprintf_r+0x1114>
  404570:	3330      	adds	r3, #48	; 0x30
  404572:	2230      	movs	r2, #48	; 0x30
  404574:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  404578:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40457c:	ab20      	add	r3, sp, #128	; 0x80
  40457e:	e6e7      	b.n	404350 <_vfprintf_r+0x1220>
  404580:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404582:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404584:	4413      	add	r3, r2
  404586:	930d      	str	r3, [sp, #52]	; 0x34
  404588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40458c:	9307      	str	r3, [sp, #28]
  40458e:	2667      	movs	r6, #103	; 0x67
  404590:	e5f2      	b.n	404178 <_vfprintf_r+0x1048>
  404592:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404594:	9807      	ldr	r0, [sp, #28]
  404596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404598:	4651      	mov	r1, sl
  40459a:	f003 f9d7 	bl	40794c <__aeabi_dcmpeq>
  40459e:	2800      	cmp	r0, #0
  4045a0:	f47f af2d 	bne.w	4043fe <_vfprintf_r+0x12ce>
  4045a4:	f1c5 0501 	rsb	r5, r5, #1
  4045a8:	951d      	str	r5, [sp, #116]	; 0x74
  4045aa:	442c      	add	r4, r5
  4045ac:	e5b4      	b.n	404118 <_vfprintf_r+0xfe8>
  4045ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4045b0:	4f33      	ldr	r7, [pc, #204]	; (404680 <_vfprintf_r+0x1550>)
  4045b2:	2b00      	cmp	r3, #0
  4045b4:	bfb6      	itet	lt
  4045b6:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4045ba:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4045be:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4045c2:	4b30      	ldr	r3, [pc, #192]	; (404684 <_vfprintf_r+0x1554>)
  4045c4:	f7ff b9d1 	b.w	40396a <_vfprintf_r+0x83a>
  4045c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4045ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4045cc:	4413      	add	r3, r2
  4045ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4045d0:	441a      	add	r2, r3
  4045d2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4045d6:	920d      	str	r2, [sp, #52]	; 0x34
  4045d8:	9307      	str	r3, [sp, #28]
  4045da:	e5cd      	b.n	404178 <_vfprintf_r+0x1048>
  4045dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4045de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4045e0:	f1c3 0301 	rsb	r3, r3, #1
  4045e4:	441a      	add	r2, r3
  4045e6:	4613      	mov	r3, r2
  4045e8:	920d      	str	r2, [sp, #52]	; 0x34
  4045ea:	e713      	b.n	404414 <_vfprintf_r+0x12e4>
  4045ec:	f01b 0301 	ands.w	r3, fp, #1
  4045f0:	9310      	str	r3, [sp, #64]	; 0x40
  4045f2:	f47f aeb6 	bne.w	404362 <_vfprintf_r+0x1232>
  4045f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4045fc:	9307      	str	r3, [sp, #28]
  4045fe:	e5bb      	b.n	404178 <_vfprintf_r+0x1048>
  404600:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404602:	f899 6001 	ldrb.w	r6, [r9, #1]
  404606:	6823      	ldr	r3, [r4, #0]
  404608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  40460c:	9309      	str	r3, [sp, #36]	; 0x24
  40460e:	4623      	mov	r3, r4
  404610:	3304      	adds	r3, #4
  404612:	4681      	mov	r9, r0
  404614:	930e      	str	r3, [sp, #56]	; 0x38
  404616:	f7fe be0a 	b.w	40322e <_vfprintf_r+0xfe>
  40461a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40461c:	b913      	cbnz	r3, 404624 <_vfprintf_r+0x14f4>
  40461e:	f01b 0f01 	tst.w	fp, #1
  404622:	d002      	beq.n	40462a <_vfprintf_r+0x14fa>
  404624:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404626:	3301      	adds	r3, #1
  404628:	e7d1      	b.n	4045ce <_vfprintf_r+0x149e>
  40462a:	2301      	movs	r3, #1
  40462c:	e702      	b.n	404434 <_vfprintf_r+0x1304>
  40462e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404630:	1bdb      	subs	r3, r3, r7
  404632:	9311      	str	r3, [sp, #68]	; 0x44
  404634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404636:	2b47      	cmp	r3, #71	; 0x47
  404638:	f43f ae40 	beq.w	4042bc <_vfprintf_r+0x118c>
  40463c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40463e:	9310      	str	r3, [sp, #64]	; 0x40
  404640:	e647      	b.n	4042d2 <_vfprintf_r+0x11a2>
  404642:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404646:	f7ff b81d 	b.w	403684 <_vfprintf_r+0x554>
  40464a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40464e:	f7ff b918 	b.w	403882 <_vfprintf_r+0x752>
  404652:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  404656:	e67b      	b.n	404350 <_vfprintf_r+0x1220>
  404658:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40465c:	f7ff b866 	b.w	40372c <_vfprintf_r+0x5fc>
  404660:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404664:	f7ff b9ac 	b.w	4039c0 <_vfprintf_r+0x890>
  404668:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40466c:	f7ff b934 	b.w	4038d8 <_vfprintf_r+0x7a8>
  404670:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404674:	f7ff b8b0 	b.w	4037d8 <_vfprintf_r+0x6a8>
  404678:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40467c:	f7ff b945 	b.w	40390a <_vfprintf_r+0x7da>
  404680:	004081c8 	.word	0x004081c8
  404684:	004081c4 	.word	0x004081c4

00404688 <__sbprintf>:
  404688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40468c:	460c      	mov	r4, r1
  40468e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404692:	8989      	ldrh	r1, [r1, #12]
  404694:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404696:	89e5      	ldrh	r5, [r4, #14]
  404698:	9619      	str	r6, [sp, #100]	; 0x64
  40469a:	f021 0102 	bic.w	r1, r1, #2
  40469e:	4606      	mov	r6, r0
  4046a0:	69e0      	ldr	r0, [r4, #28]
  4046a2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4046a6:	4617      	mov	r7, r2
  4046a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4046ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4046ae:	f8ad 500e 	strh.w	r5, [sp, #14]
  4046b2:	4698      	mov	r8, r3
  4046b4:	ad1a      	add	r5, sp, #104	; 0x68
  4046b6:	2300      	movs	r3, #0
  4046b8:	9007      	str	r0, [sp, #28]
  4046ba:	a816      	add	r0, sp, #88	; 0x58
  4046bc:	9209      	str	r2, [sp, #36]	; 0x24
  4046be:	9306      	str	r3, [sp, #24]
  4046c0:	9500      	str	r5, [sp, #0]
  4046c2:	9504      	str	r5, [sp, #16]
  4046c4:	9102      	str	r1, [sp, #8]
  4046c6:	9105      	str	r1, [sp, #20]
  4046c8:	f001 fd4e 	bl	406168 <__retarget_lock_init_recursive>
  4046cc:	4643      	mov	r3, r8
  4046ce:	463a      	mov	r2, r7
  4046d0:	4669      	mov	r1, sp
  4046d2:	4630      	mov	r0, r6
  4046d4:	f7fe fd2c 	bl	403130 <_vfprintf_r>
  4046d8:	1e05      	subs	r5, r0, #0
  4046da:	db07      	blt.n	4046ec <__sbprintf+0x64>
  4046dc:	4630      	mov	r0, r6
  4046de:	4669      	mov	r1, sp
  4046e0:	f001 f8e8 	bl	4058b4 <_fflush_r>
  4046e4:	2800      	cmp	r0, #0
  4046e6:	bf18      	it	ne
  4046e8:	f04f 35ff 	movne.w	r5, #4294967295
  4046ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4046f0:	065b      	lsls	r3, r3, #25
  4046f2:	d503      	bpl.n	4046fc <__sbprintf+0x74>
  4046f4:	89a3      	ldrh	r3, [r4, #12]
  4046f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4046fa:	81a3      	strh	r3, [r4, #12]
  4046fc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4046fe:	f001 fd35 	bl	40616c <__retarget_lock_close_recursive>
  404702:	4628      	mov	r0, r5
  404704:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040470c <__swsetup_r>:
  40470c:	b538      	push	{r3, r4, r5, lr}
  40470e:	4b30      	ldr	r3, [pc, #192]	; (4047d0 <__swsetup_r+0xc4>)
  404710:	681b      	ldr	r3, [r3, #0]
  404712:	4605      	mov	r5, r0
  404714:	460c      	mov	r4, r1
  404716:	b113      	cbz	r3, 40471e <__swsetup_r+0x12>
  404718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40471a:	2a00      	cmp	r2, #0
  40471c:	d038      	beq.n	404790 <__swsetup_r+0x84>
  40471e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404722:	b293      	uxth	r3, r2
  404724:	0718      	lsls	r0, r3, #28
  404726:	d50c      	bpl.n	404742 <__swsetup_r+0x36>
  404728:	6920      	ldr	r0, [r4, #16]
  40472a:	b1a8      	cbz	r0, 404758 <__swsetup_r+0x4c>
  40472c:	f013 0201 	ands.w	r2, r3, #1
  404730:	d01e      	beq.n	404770 <__swsetup_r+0x64>
  404732:	6963      	ldr	r3, [r4, #20]
  404734:	2200      	movs	r2, #0
  404736:	425b      	negs	r3, r3
  404738:	61a3      	str	r3, [r4, #24]
  40473a:	60a2      	str	r2, [r4, #8]
  40473c:	b1f0      	cbz	r0, 40477c <__swsetup_r+0x70>
  40473e:	2000      	movs	r0, #0
  404740:	bd38      	pop	{r3, r4, r5, pc}
  404742:	06d9      	lsls	r1, r3, #27
  404744:	d53c      	bpl.n	4047c0 <__swsetup_r+0xb4>
  404746:	0758      	lsls	r0, r3, #29
  404748:	d426      	bmi.n	404798 <__swsetup_r+0x8c>
  40474a:	6920      	ldr	r0, [r4, #16]
  40474c:	f042 0308 	orr.w	r3, r2, #8
  404750:	81a3      	strh	r3, [r4, #12]
  404752:	b29b      	uxth	r3, r3
  404754:	2800      	cmp	r0, #0
  404756:	d1e9      	bne.n	40472c <__swsetup_r+0x20>
  404758:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40475c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404760:	d0e4      	beq.n	40472c <__swsetup_r+0x20>
  404762:	4628      	mov	r0, r5
  404764:	4621      	mov	r1, r4
  404766:	f001 fd35 	bl	4061d4 <__smakebuf_r>
  40476a:	89a3      	ldrh	r3, [r4, #12]
  40476c:	6920      	ldr	r0, [r4, #16]
  40476e:	e7dd      	b.n	40472c <__swsetup_r+0x20>
  404770:	0799      	lsls	r1, r3, #30
  404772:	bf58      	it	pl
  404774:	6962      	ldrpl	r2, [r4, #20]
  404776:	60a2      	str	r2, [r4, #8]
  404778:	2800      	cmp	r0, #0
  40477a:	d1e0      	bne.n	40473e <__swsetup_r+0x32>
  40477c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404780:	061a      	lsls	r2, r3, #24
  404782:	d5dd      	bpl.n	404740 <__swsetup_r+0x34>
  404784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404788:	81a3      	strh	r3, [r4, #12]
  40478a:	f04f 30ff 	mov.w	r0, #4294967295
  40478e:	bd38      	pop	{r3, r4, r5, pc}
  404790:	4618      	mov	r0, r3
  404792:	f001 f8f9 	bl	405988 <__sinit>
  404796:	e7c2      	b.n	40471e <__swsetup_r+0x12>
  404798:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40479a:	b151      	cbz	r1, 4047b2 <__swsetup_r+0xa6>
  40479c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4047a0:	4299      	cmp	r1, r3
  4047a2:	d004      	beq.n	4047ae <__swsetup_r+0xa2>
  4047a4:	4628      	mov	r0, r5
  4047a6:	f001 fa15 	bl	405bd4 <_free_r>
  4047aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4047ae:	2300      	movs	r3, #0
  4047b0:	6323      	str	r3, [r4, #48]	; 0x30
  4047b2:	2300      	movs	r3, #0
  4047b4:	6920      	ldr	r0, [r4, #16]
  4047b6:	6063      	str	r3, [r4, #4]
  4047b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4047bc:	6020      	str	r0, [r4, #0]
  4047be:	e7c5      	b.n	40474c <__swsetup_r+0x40>
  4047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4047c4:	2309      	movs	r3, #9
  4047c6:	602b      	str	r3, [r5, #0]
  4047c8:	f04f 30ff 	mov.w	r0, #4294967295
  4047cc:	81a2      	strh	r2, [r4, #12]
  4047ce:	bd38      	pop	{r3, r4, r5, pc}
  4047d0:	20400018 	.word	0x20400018

004047d4 <register_fini>:
  4047d4:	4b02      	ldr	r3, [pc, #8]	; (4047e0 <register_fini+0xc>)
  4047d6:	b113      	cbz	r3, 4047de <register_fini+0xa>
  4047d8:	4802      	ldr	r0, [pc, #8]	; (4047e4 <register_fini+0x10>)
  4047da:	f000 b805 	b.w	4047e8 <atexit>
  4047de:	4770      	bx	lr
  4047e0:	00000000 	.word	0x00000000
  4047e4:	004059f9 	.word	0x004059f9

004047e8 <atexit>:
  4047e8:	2300      	movs	r3, #0
  4047ea:	4601      	mov	r1, r0
  4047ec:	461a      	mov	r2, r3
  4047ee:	4618      	mov	r0, r3
  4047f0:	f002 befe 	b.w	4075f0 <__register_exitproc>

004047f4 <quorem>:
  4047f4:	6902      	ldr	r2, [r0, #16]
  4047f6:	690b      	ldr	r3, [r1, #16]
  4047f8:	4293      	cmp	r3, r2
  4047fa:	f300 808d 	bgt.w	404918 <quorem+0x124>
  4047fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404802:	f103 38ff 	add.w	r8, r3, #4294967295
  404806:	f101 0714 	add.w	r7, r1, #20
  40480a:	f100 0b14 	add.w	fp, r0, #20
  40480e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404812:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404816:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40481a:	b083      	sub	sp, #12
  40481c:	3201      	adds	r2, #1
  40481e:	fbb3 f9f2 	udiv	r9, r3, r2
  404822:	eb0b 0304 	add.w	r3, fp, r4
  404826:	9400      	str	r4, [sp, #0]
  404828:	eb07 0a04 	add.w	sl, r7, r4
  40482c:	9301      	str	r3, [sp, #4]
  40482e:	f1b9 0f00 	cmp.w	r9, #0
  404832:	d039      	beq.n	4048a8 <quorem+0xb4>
  404834:	2500      	movs	r5, #0
  404836:	462e      	mov	r6, r5
  404838:	46bc      	mov	ip, r7
  40483a:	46de      	mov	lr, fp
  40483c:	f85c 4b04 	ldr.w	r4, [ip], #4
  404840:	f8de 3000 	ldr.w	r3, [lr]
  404844:	b2a2      	uxth	r2, r4
  404846:	fb09 5502 	mla	r5, r9, r2, r5
  40484a:	0c22      	lsrs	r2, r4, #16
  40484c:	0c2c      	lsrs	r4, r5, #16
  40484e:	fb09 4202 	mla	r2, r9, r2, r4
  404852:	b2ad      	uxth	r5, r5
  404854:	1b75      	subs	r5, r6, r5
  404856:	b296      	uxth	r6, r2
  404858:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40485c:	fa15 f383 	uxtah	r3, r5, r3
  404860:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404864:	b29b      	uxth	r3, r3
  404866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40486a:	45e2      	cmp	sl, ip
  40486c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404870:	f84e 3b04 	str.w	r3, [lr], #4
  404874:	ea4f 4626 	mov.w	r6, r6, asr #16
  404878:	d2e0      	bcs.n	40483c <quorem+0x48>
  40487a:	9b00      	ldr	r3, [sp, #0]
  40487c:	f85b 3003 	ldr.w	r3, [fp, r3]
  404880:	b993      	cbnz	r3, 4048a8 <quorem+0xb4>
  404882:	9c01      	ldr	r4, [sp, #4]
  404884:	1f23      	subs	r3, r4, #4
  404886:	459b      	cmp	fp, r3
  404888:	d20c      	bcs.n	4048a4 <quorem+0xb0>
  40488a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40488e:	b94b      	cbnz	r3, 4048a4 <quorem+0xb0>
  404890:	f1a4 0308 	sub.w	r3, r4, #8
  404894:	e002      	b.n	40489c <quorem+0xa8>
  404896:	681a      	ldr	r2, [r3, #0]
  404898:	3b04      	subs	r3, #4
  40489a:	b91a      	cbnz	r2, 4048a4 <quorem+0xb0>
  40489c:	459b      	cmp	fp, r3
  40489e:	f108 38ff 	add.w	r8, r8, #4294967295
  4048a2:	d3f8      	bcc.n	404896 <quorem+0xa2>
  4048a4:	f8c0 8010 	str.w	r8, [r0, #16]
  4048a8:	4604      	mov	r4, r0
  4048aa:	f002 fa6f 	bl	406d8c <__mcmp>
  4048ae:	2800      	cmp	r0, #0
  4048b0:	db2e      	blt.n	404910 <quorem+0x11c>
  4048b2:	f109 0901 	add.w	r9, r9, #1
  4048b6:	465d      	mov	r5, fp
  4048b8:	2300      	movs	r3, #0
  4048ba:	f857 1b04 	ldr.w	r1, [r7], #4
  4048be:	6828      	ldr	r0, [r5, #0]
  4048c0:	b28a      	uxth	r2, r1
  4048c2:	1a9a      	subs	r2, r3, r2
  4048c4:	0c0b      	lsrs	r3, r1, #16
  4048c6:	fa12 f280 	uxtah	r2, r2, r0
  4048ca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4048ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4048d2:	b292      	uxth	r2, r2
  4048d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4048d8:	45ba      	cmp	sl, r7
  4048da:	f845 2b04 	str.w	r2, [r5], #4
  4048de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4048e2:	d2ea      	bcs.n	4048ba <quorem+0xc6>
  4048e4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4048e8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4048ec:	b982      	cbnz	r2, 404910 <quorem+0x11c>
  4048ee:	1f1a      	subs	r2, r3, #4
  4048f0:	4593      	cmp	fp, r2
  4048f2:	d20b      	bcs.n	40490c <quorem+0x118>
  4048f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4048f8:	b942      	cbnz	r2, 40490c <quorem+0x118>
  4048fa:	3b08      	subs	r3, #8
  4048fc:	e002      	b.n	404904 <quorem+0x110>
  4048fe:	681a      	ldr	r2, [r3, #0]
  404900:	3b04      	subs	r3, #4
  404902:	b91a      	cbnz	r2, 40490c <quorem+0x118>
  404904:	459b      	cmp	fp, r3
  404906:	f108 38ff 	add.w	r8, r8, #4294967295
  40490a:	d3f8      	bcc.n	4048fe <quorem+0x10a>
  40490c:	f8c4 8010 	str.w	r8, [r4, #16]
  404910:	4648      	mov	r0, r9
  404912:	b003      	add	sp, #12
  404914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404918:	2000      	movs	r0, #0
  40491a:	4770      	bx	lr
  40491c:	0000      	movs	r0, r0
	...

00404920 <_dtoa_r>:
  404920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404924:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404926:	b09b      	sub	sp, #108	; 0x6c
  404928:	4604      	mov	r4, r0
  40492a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40492c:	4692      	mov	sl, r2
  40492e:	469b      	mov	fp, r3
  404930:	b141      	cbz	r1, 404944 <_dtoa_r+0x24>
  404932:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404934:	604a      	str	r2, [r1, #4]
  404936:	2301      	movs	r3, #1
  404938:	4093      	lsls	r3, r2
  40493a:	608b      	str	r3, [r1, #8]
  40493c:	f002 f84e 	bl	4069dc <_Bfree>
  404940:	2300      	movs	r3, #0
  404942:	6423      	str	r3, [r4, #64]	; 0x40
  404944:	f1bb 0f00 	cmp.w	fp, #0
  404948:	465d      	mov	r5, fp
  40494a:	db35      	blt.n	4049b8 <_dtoa_r+0x98>
  40494c:	2300      	movs	r3, #0
  40494e:	6033      	str	r3, [r6, #0]
  404950:	4b9d      	ldr	r3, [pc, #628]	; (404bc8 <_dtoa_r+0x2a8>)
  404952:	43ab      	bics	r3, r5
  404954:	d015      	beq.n	404982 <_dtoa_r+0x62>
  404956:	4650      	mov	r0, sl
  404958:	4659      	mov	r1, fp
  40495a:	2200      	movs	r2, #0
  40495c:	2300      	movs	r3, #0
  40495e:	f002 fff5 	bl	40794c <__aeabi_dcmpeq>
  404962:	4680      	mov	r8, r0
  404964:	2800      	cmp	r0, #0
  404966:	d02d      	beq.n	4049c4 <_dtoa_r+0xa4>
  404968:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40496a:	2301      	movs	r3, #1
  40496c:	6013      	str	r3, [r2, #0]
  40496e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404970:	2b00      	cmp	r3, #0
  404972:	f000 80bd 	beq.w	404af0 <_dtoa_r+0x1d0>
  404976:	4895      	ldr	r0, [pc, #596]	; (404bcc <_dtoa_r+0x2ac>)
  404978:	6018      	str	r0, [r3, #0]
  40497a:	3801      	subs	r0, #1
  40497c:	b01b      	add	sp, #108	; 0x6c
  40497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404982:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404984:	f242 730f 	movw	r3, #9999	; 0x270f
  404988:	6013      	str	r3, [r2, #0]
  40498a:	f1ba 0f00 	cmp.w	sl, #0
  40498e:	d10d      	bne.n	4049ac <_dtoa_r+0x8c>
  404990:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404994:	b955      	cbnz	r5, 4049ac <_dtoa_r+0x8c>
  404996:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404998:	488d      	ldr	r0, [pc, #564]	; (404bd0 <_dtoa_r+0x2b0>)
  40499a:	2b00      	cmp	r3, #0
  40499c:	d0ee      	beq.n	40497c <_dtoa_r+0x5c>
  40499e:	f100 0308 	add.w	r3, r0, #8
  4049a2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4049a4:	6013      	str	r3, [r2, #0]
  4049a6:	b01b      	add	sp, #108	; 0x6c
  4049a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4049ae:	4889      	ldr	r0, [pc, #548]	; (404bd4 <_dtoa_r+0x2b4>)
  4049b0:	2b00      	cmp	r3, #0
  4049b2:	d0e3      	beq.n	40497c <_dtoa_r+0x5c>
  4049b4:	1cc3      	adds	r3, r0, #3
  4049b6:	e7f4      	b.n	4049a2 <_dtoa_r+0x82>
  4049b8:	2301      	movs	r3, #1
  4049ba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4049be:	6033      	str	r3, [r6, #0]
  4049c0:	46ab      	mov	fp, r5
  4049c2:	e7c5      	b.n	404950 <_dtoa_r+0x30>
  4049c4:	aa18      	add	r2, sp, #96	; 0x60
  4049c6:	ab19      	add	r3, sp, #100	; 0x64
  4049c8:	9201      	str	r2, [sp, #4]
  4049ca:	9300      	str	r3, [sp, #0]
  4049cc:	4652      	mov	r2, sl
  4049ce:	465b      	mov	r3, fp
  4049d0:	4620      	mov	r0, r4
  4049d2:	f002 fa7b 	bl	406ecc <__d2b>
  4049d6:	0d2b      	lsrs	r3, r5, #20
  4049d8:	4681      	mov	r9, r0
  4049da:	d071      	beq.n	404ac0 <_dtoa_r+0x1a0>
  4049dc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4049e0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4049e4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4049e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4049ea:	4650      	mov	r0, sl
  4049ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4049f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4049f4:	2200      	movs	r2, #0
  4049f6:	4b78      	ldr	r3, [pc, #480]	; (404bd8 <_dtoa_r+0x2b8>)
  4049f8:	f7fd fb22 	bl	402040 <__aeabi_dsub>
  4049fc:	a36c      	add	r3, pc, #432	; (adr r3, 404bb0 <_dtoa_r+0x290>)
  4049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a02:	f7fd fcd1 	bl	4023a8 <__aeabi_dmul>
  404a06:	a36c      	add	r3, pc, #432	; (adr r3, 404bb8 <_dtoa_r+0x298>)
  404a08:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a0c:	f7fd fb1a 	bl	402044 <__adddf3>
  404a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404a14:	4630      	mov	r0, r6
  404a16:	f7fd fc61 	bl	4022dc <__aeabi_i2d>
  404a1a:	a369      	add	r3, pc, #420	; (adr r3, 404bc0 <_dtoa_r+0x2a0>)
  404a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a20:	f7fd fcc2 	bl	4023a8 <__aeabi_dmul>
  404a24:	4602      	mov	r2, r0
  404a26:	460b      	mov	r3, r1
  404a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404a2c:	f7fd fb0a 	bl	402044 <__adddf3>
  404a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404a34:	f002 ffd2 	bl	4079dc <__aeabi_d2iz>
  404a38:	2200      	movs	r2, #0
  404a3a:	9002      	str	r0, [sp, #8]
  404a3c:	2300      	movs	r3, #0
  404a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a42:	f002 ff8d 	bl	407960 <__aeabi_dcmplt>
  404a46:	2800      	cmp	r0, #0
  404a48:	f040 8173 	bne.w	404d32 <_dtoa_r+0x412>
  404a4c:	9d02      	ldr	r5, [sp, #8]
  404a4e:	2d16      	cmp	r5, #22
  404a50:	f200 815d 	bhi.w	404d0e <_dtoa_r+0x3ee>
  404a54:	4b61      	ldr	r3, [pc, #388]	; (404bdc <_dtoa_r+0x2bc>)
  404a56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
  404a5e:	4652      	mov	r2, sl
  404a60:	465b      	mov	r3, fp
  404a62:	f002 ff9b 	bl	40799c <__aeabi_dcmpgt>
  404a66:	2800      	cmp	r0, #0
  404a68:	f000 81c5 	beq.w	404df6 <_dtoa_r+0x4d6>
  404a6c:	1e6b      	subs	r3, r5, #1
  404a6e:	9302      	str	r3, [sp, #8]
  404a70:	2300      	movs	r3, #0
  404a72:	930e      	str	r3, [sp, #56]	; 0x38
  404a74:	1bbf      	subs	r7, r7, r6
  404a76:	1e7b      	subs	r3, r7, #1
  404a78:	9306      	str	r3, [sp, #24]
  404a7a:	f100 8154 	bmi.w	404d26 <_dtoa_r+0x406>
  404a7e:	2300      	movs	r3, #0
  404a80:	9308      	str	r3, [sp, #32]
  404a82:	9b02      	ldr	r3, [sp, #8]
  404a84:	2b00      	cmp	r3, #0
  404a86:	f2c0 8145 	blt.w	404d14 <_dtoa_r+0x3f4>
  404a8a:	9a06      	ldr	r2, [sp, #24]
  404a8c:	930d      	str	r3, [sp, #52]	; 0x34
  404a8e:	4611      	mov	r1, r2
  404a90:	4419      	add	r1, r3
  404a92:	2300      	movs	r3, #0
  404a94:	9106      	str	r1, [sp, #24]
  404a96:	930c      	str	r3, [sp, #48]	; 0x30
  404a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a9a:	2b09      	cmp	r3, #9
  404a9c:	d82a      	bhi.n	404af4 <_dtoa_r+0x1d4>
  404a9e:	2b05      	cmp	r3, #5
  404aa0:	f340 865b 	ble.w	40575a <_dtoa_r+0xe3a>
  404aa4:	3b04      	subs	r3, #4
  404aa6:	9324      	str	r3, [sp, #144]	; 0x90
  404aa8:	2500      	movs	r5, #0
  404aaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404aac:	3b02      	subs	r3, #2
  404aae:	2b03      	cmp	r3, #3
  404ab0:	f200 8642 	bhi.w	405738 <_dtoa_r+0xe18>
  404ab4:	e8df f013 	tbh	[pc, r3, lsl #1]
  404ab8:	02c903d4 	.word	0x02c903d4
  404abc:	046103df 	.word	0x046103df
  404ac0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404ac2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404ac4:	443e      	add	r6, r7
  404ac6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404aca:	2b20      	cmp	r3, #32
  404acc:	f340 818e 	ble.w	404dec <_dtoa_r+0x4cc>
  404ad0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404ad4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404ad8:	409d      	lsls	r5, r3
  404ada:	fa2a f000 	lsr.w	r0, sl, r0
  404ade:	4328      	orrs	r0, r5
  404ae0:	f7fd fbec 	bl	4022bc <__aeabi_ui2d>
  404ae4:	2301      	movs	r3, #1
  404ae6:	3e01      	subs	r6, #1
  404ae8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404aec:	9314      	str	r3, [sp, #80]	; 0x50
  404aee:	e781      	b.n	4049f4 <_dtoa_r+0xd4>
  404af0:	483b      	ldr	r0, [pc, #236]	; (404be0 <_dtoa_r+0x2c0>)
  404af2:	e743      	b.n	40497c <_dtoa_r+0x5c>
  404af4:	2100      	movs	r1, #0
  404af6:	6461      	str	r1, [r4, #68]	; 0x44
  404af8:	4620      	mov	r0, r4
  404afa:	9125      	str	r1, [sp, #148]	; 0x94
  404afc:	f001 ff48 	bl	406990 <_Balloc>
  404b00:	f04f 33ff 	mov.w	r3, #4294967295
  404b04:	930a      	str	r3, [sp, #40]	; 0x28
  404b06:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404b08:	930f      	str	r3, [sp, #60]	; 0x3c
  404b0a:	2301      	movs	r3, #1
  404b0c:	9004      	str	r0, [sp, #16]
  404b0e:	6420      	str	r0, [r4, #64]	; 0x40
  404b10:	9224      	str	r2, [sp, #144]	; 0x90
  404b12:	930b      	str	r3, [sp, #44]	; 0x2c
  404b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404b16:	2b00      	cmp	r3, #0
  404b18:	f2c0 80d9 	blt.w	404cce <_dtoa_r+0x3ae>
  404b1c:	9a02      	ldr	r2, [sp, #8]
  404b1e:	2a0e      	cmp	r2, #14
  404b20:	f300 80d5 	bgt.w	404cce <_dtoa_r+0x3ae>
  404b24:	4b2d      	ldr	r3, [pc, #180]	; (404bdc <_dtoa_r+0x2bc>)
  404b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404b32:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404b34:	2b00      	cmp	r3, #0
  404b36:	f2c0 83ba 	blt.w	4052ae <_dtoa_r+0x98e>
  404b3a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404b3e:	4650      	mov	r0, sl
  404b40:	462a      	mov	r2, r5
  404b42:	4633      	mov	r3, r6
  404b44:	4659      	mov	r1, fp
  404b46:	f7fd fd59 	bl	4025fc <__aeabi_ddiv>
  404b4a:	f002 ff47 	bl	4079dc <__aeabi_d2iz>
  404b4e:	4680      	mov	r8, r0
  404b50:	f7fd fbc4 	bl	4022dc <__aeabi_i2d>
  404b54:	462a      	mov	r2, r5
  404b56:	4633      	mov	r3, r6
  404b58:	f7fd fc26 	bl	4023a8 <__aeabi_dmul>
  404b5c:	460b      	mov	r3, r1
  404b5e:	4602      	mov	r2, r0
  404b60:	4659      	mov	r1, fp
  404b62:	4650      	mov	r0, sl
  404b64:	f7fd fa6c 	bl	402040 <__aeabi_dsub>
  404b68:	9d04      	ldr	r5, [sp, #16]
  404b6a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404b6e:	702b      	strb	r3, [r5, #0]
  404b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b72:	2b01      	cmp	r3, #1
  404b74:	4606      	mov	r6, r0
  404b76:	460f      	mov	r7, r1
  404b78:	f105 0501 	add.w	r5, r5, #1
  404b7c:	d068      	beq.n	404c50 <_dtoa_r+0x330>
  404b7e:	2200      	movs	r2, #0
  404b80:	4b18      	ldr	r3, [pc, #96]	; (404be4 <_dtoa_r+0x2c4>)
  404b82:	f7fd fc11 	bl	4023a8 <__aeabi_dmul>
  404b86:	2200      	movs	r2, #0
  404b88:	2300      	movs	r3, #0
  404b8a:	4606      	mov	r6, r0
  404b8c:	460f      	mov	r7, r1
  404b8e:	f002 fedd 	bl	40794c <__aeabi_dcmpeq>
  404b92:	2800      	cmp	r0, #0
  404b94:	f040 8088 	bne.w	404ca8 <_dtoa_r+0x388>
  404b98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404b9c:	f04f 0a00 	mov.w	sl, #0
  404ba0:	f8df b040 	ldr.w	fp, [pc, #64]	; 404be4 <_dtoa_r+0x2c4>
  404ba4:	940c      	str	r4, [sp, #48]	; 0x30
  404ba6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404baa:	e028      	b.n	404bfe <_dtoa_r+0x2de>
  404bac:	f3af 8000 	nop.w
  404bb0:	636f4361 	.word	0x636f4361
  404bb4:	3fd287a7 	.word	0x3fd287a7
  404bb8:	8b60c8b3 	.word	0x8b60c8b3
  404bbc:	3fc68a28 	.word	0x3fc68a28
  404bc0:	509f79fb 	.word	0x509f79fb
  404bc4:	3fd34413 	.word	0x3fd34413
  404bc8:	7ff00000 	.word	0x7ff00000
  404bcc:	004081fd 	.word	0x004081fd
  404bd0:	00408220 	.word	0x00408220
  404bd4:	0040822c 	.word	0x0040822c
  404bd8:	3ff80000 	.word	0x3ff80000
  404bdc:	00408268 	.word	0x00408268
  404be0:	004081fc 	.word	0x004081fc
  404be4:	40240000 	.word	0x40240000
  404be8:	f7fd fbde 	bl	4023a8 <__aeabi_dmul>
  404bec:	2200      	movs	r2, #0
  404bee:	2300      	movs	r3, #0
  404bf0:	4606      	mov	r6, r0
  404bf2:	460f      	mov	r7, r1
  404bf4:	f002 feaa 	bl	40794c <__aeabi_dcmpeq>
  404bf8:	2800      	cmp	r0, #0
  404bfa:	f040 83c1 	bne.w	405380 <_dtoa_r+0xa60>
  404bfe:	4642      	mov	r2, r8
  404c00:	464b      	mov	r3, r9
  404c02:	4630      	mov	r0, r6
  404c04:	4639      	mov	r1, r7
  404c06:	f7fd fcf9 	bl	4025fc <__aeabi_ddiv>
  404c0a:	f002 fee7 	bl	4079dc <__aeabi_d2iz>
  404c0e:	4604      	mov	r4, r0
  404c10:	f7fd fb64 	bl	4022dc <__aeabi_i2d>
  404c14:	4642      	mov	r2, r8
  404c16:	464b      	mov	r3, r9
  404c18:	f7fd fbc6 	bl	4023a8 <__aeabi_dmul>
  404c1c:	4602      	mov	r2, r0
  404c1e:	460b      	mov	r3, r1
  404c20:	4630      	mov	r0, r6
  404c22:	4639      	mov	r1, r7
  404c24:	f7fd fa0c 	bl	402040 <__aeabi_dsub>
  404c28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404c2c:	9e04      	ldr	r6, [sp, #16]
  404c2e:	f805 eb01 	strb.w	lr, [r5], #1
  404c32:	eba5 0e06 	sub.w	lr, r5, r6
  404c36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404c38:	45b6      	cmp	lr, r6
  404c3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404c3e:	4652      	mov	r2, sl
  404c40:	465b      	mov	r3, fp
  404c42:	d1d1      	bne.n	404be8 <_dtoa_r+0x2c8>
  404c44:	46a0      	mov	r8, r4
  404c46:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404c4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404c4c:	4606      	mov	r6, r0
  404c4e:	460f      	mov	r7, r1
  404c50:	4632      	mov	r2, r6
  404c52:	463b      	mov	r3, r7
  404c54:	4630      	mov	r0, r6
  404c56:	4639      	mov	r1, r7
  404c58:	f7fd f9f4 	bl	402044 <__adddf3>
  404c5c:	4606      	mov	r6, r0
  404c5e:	460f      	mov	r7, r1
  404c60:	4602      	mov	r2, r0
  404c62:	460b      	mov	r3, r1
  404c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404c68:	f002 fe7a 	bl	407960 <__aeabi_dcmplt>
  404c6c:	b948      	cbnz	r0, 404c82 <_dtoa_r+0x362>
  404c6e:	4632      	mov	r2, r6
  404c70:	463b      	mov	r3, r7
  404c72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404c76:	f002 fe69 	bl	40794c <__aeabi_dcmpeq>
  404c7a:	b1a8      	cbz	r0, 404ca8 <_dtoa_r+0x388>
  404c7c:	f018 0f01 	tst.w	r8, #1
  404c80:	d012      	beq.n	404ca8 <_dtoa_r+0x388>
  404c82:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404c86:	9a04      	ldr	r2, [sp, #16]
  404c88:	1e6b      	subs	r3, r5, #1
  404c8a:	e004      	b.n	404c96 <_dtoa_r+0x376>
  404c8c:	429a      	cmp	r2, r3
  404c8e:	f000 8401 	beq.w	405494 <_dtoa_r+0xb74>
  404c92:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404c9a:	f103 0501 	add.w	r5, r3, #1
  404c9e:	d0f5      	beq.n	404c8c <_dtoa_r+0x36c>
  404ca0:	f108 0801 	add.w	r8, r8, #1
  404ca4:	f883 8000 	strb.w	r8, [r3]
  404ca8:	4649      	mov	r1, r9
  404caa:	4620      	mov	r0, r4
  404cac:	f001 fe96 	bl	4069dc <_Bfree>
  404cb0:	2200      	movs	r2, #0
  404cb2:	9b02      	ldr	r3, [sp, #8]
  404cb4:	702a      	strb	r2, [r5, #0]
  404cb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404cb8:	3301      	adds	r3, #1
  404cba:	6013      	str	r3, [r2, #0]
  404cbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404cbe:	2b00      	cmp	r3, #0
  404cc0:	f000 839e 	beq.w	405400 <_dtoa_r+0xae0>
  404cc4:	9804      	ldr	r0, [sp, #16]
  404cc6:	601d      	str	r5, [r3, #0]
  404cc8:	b01b      	add	sp, #108	; 0x6c
  404cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404cd0:	2a00      	cmp	r2, #0
  404cd2:	d03e      	beq.n	404d52 <_dtoa_r+0x432>
  404cd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404cd6:	2a01      	cmp	r2, #1
  404cd8:	f340 8311 	ble.w	4052fe <_dtoa_r+0x9de>
  404cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ce0:	1e5f      	subs	r7, r3, #1
  404ce2:	42ba      	cmp	r2, r7
  404ce4:	f2c0 838f 	blt.w	405406 <_dtoa_r+0xae6>
  404ce8:	1bd7      	subs	r7, r2, r7
  404cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cec:	2b00      	cmp	r3, #0
  404cee:	f2c0 848b 	blt.w	405608 <_dtoa_r+0xce8>
  404cf2:	9d08      	ldr	r5, [sp, #32]
  404cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cf6:	9a08      	ldr	r2, [sp, #32]
  404cf8:	441a      	add	r2, r3
  404cfa:	9208      	str	r2, [sp, #32]
  404cfc:	9a06      	ldr	r2, [sp, #24]
  404cfe:	2101      	movs	r1, #1
  404d00:	441a      	add	r2, r3
  404d02:	4620      	mov	r0, r4
  404d04:	9206      	str	r2, [sp, #24]
  404d06:	f001 ff03 	bl	406b10 <__i2b>
  404d0a:	4606      	mov	r6, r0
  404d0c:	e024      	b.n	404d58 <_dtoa_r+0x438>
  404d0e:	2301      	movs	r3, #1
  404d10:	930e      	str	r3, [sp, #56]	; 0x38
  404d12:	e6af      	b.n	404a74 <_dtoa_r+0x154>
  404d14:	9a08      	ldr	r2, [sp, #32]
  404d16:	9b02      	ldr	r3, [sp, #8]
  404d18:	1ad2      	subs	r2, r2, r3
  404d1a:	425b      	negs	r3, r3
  404d1c:	930c      	str	r3, [sp, #48]	; 0x30
  404d1e:	2300      	movs	r3, #0
  404d20:	9208      	str	r2, [sp, #32]
  404d22:	930d      	str	r3, [sp, #52]	; 0x34
  404d24:	e6b8      	b.n	404a98 <_dtoa_r+0x178>
  404d26:	f1c7 0301 	rsb	r3, r7, #1
  404d2a:	9308      	str	r3, [sp, #32]
  404d2c:	2300      	movs	r3, #0
  404d2e:	9306      	str	r3, [sp, #24]
  404d30:	e6a7      	b.n	404a82 <_dtoa_r+0x162>
  404d32:	9d02      	ldr	r5, [sp, #8]
  404d34:	4628      	mov	r0, r5
  404d36:	f7fd fad1 	bl	4022dc <__aeabi_i2d>
  404d3a:	4602      	mov	r2, r0
  404d3c:	460b      	mov	r3, r1
  404d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404d42:	f002 fe03 	bl	40794c <__aeabi_dcmpeq>
  404d46:	2800      	cmp	r0, #0
  404d48:	f47f ae80 	bne.w	404a4c <_dtoa_r+0x12c>
  404d4c:	1e6b      	subs	r3, r5, #1
  404d4e:	9302      	str	r3, [sp, #8]
  404d50:	e67c      	b.n	404a4c <_dtoa_r+0x12c>
  404d52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404d54:	9d08      	ldr	r5, [sp, #32]
  404d56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404d58:	2d00      	cmp	r5, #0
  404d5a:	dd0c      	ble.n	404d76 <_dtoa_r+0x456>
  404d5c:	9906      	ldr	r1, [sp, #24]
  404d5e:	2900      	cmp	r1, #0
  404d60:	460b      	mov	r3, r1
  404d62:	dd08      	ble.n	404d76 <_dtoa_r+0x456>
  404d64:	42a9      	cmp	r1, r5
  404d66:	9a08      	ldr	r2, [sp, #32]
  404d68:	bfa8      	it	ge
  404d6a:	462b      	movge	r3, r5
  404d6c:	1ad2      	subs	r2, r2, r3
  404d6e:	1aed      	subs	r5, r5, r3
  404d70:	1acb      	subs	r3, r1, r3
  404d72:	9208      	str	r2, [sp, #32]
  404d74:	9306      	str	r3, [sp, #24]
  404d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404d78:	b1d3      	cbz	r3, 404db0 <_dtoa_r+0x490>
  404d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404d7c:	2b00      	cmp	r3, #0
  404d7e:	f000 82b7 	beq.w	4052f0 <_dtoa_r+0x9d0>
  404d82:	2f00      	cmp	r7, #0
  404d84:	dd10      	ble.n	404da8 <_dtoa_r+0x488>
  404d86:	4631      	mov	r1, r6
  404d88:	463a      	mov	r2, r7
  404d8a:	4620      	mov	r0, r4
  404d8c:	f001 ff5c 	bl	406c48 <__pow5mult>
  404d90:	464a      	mov	r2, r9
  404d92:	4601      	mov	r1, r0
  404d94:	4606      	mov	r6, r0
  404d96:	4620      	mov	r0, r4
  404d98:	f001 fec4 	bl	406b24 <__multiply>
  404d9c:	4649      	mov	r1, r9
  404d9e:	4680      	mov	r8, r0
  404da0:	4620      	mov	r0, r4
  404da2:	f001 fe1b 	bl	4069dc <_Bfree>
  404da6:	46c1      	mov	r9, r8
  404da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404daa:	1bda      	subs	r2, r3, r7
  404dac:	f040 82a1 	bne.w	4052f2 <_dtoa_r+0x9d2>
  404db0:	2101      	movs	r1, #1
  404db2:	4620      	mov	r0, r4
  404db4:	f001 feac 	bl	406b10 <__i2b>
  404db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dba:	2b00      	cmp	r3, #0
  404dbc:	4680      	mov	r8, r0
  404dbe:	dd1c      	ble.n	404dfa <_dtoa_r+0x4da>
  404dc0:	4601      	mov	r1, r0
  404dc2:	461a      	mov	r2, r3
  404dc4:	4620      	mov	r0, r4
  404dc6:	f001 ff3f 	bl	406c48 <__pow5mult>
  404dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dcc:	2b01      	cmp	r3, #1
  404dce:	4680      	mov	r8, r0
  404dd0:	f340 8254 	ble.w	40527c <_dtoa_r+0x95c>
  404dd4:	2300      	movs	r3, #0
  404dd6:	930c      	str	r3, [sp, #48]	; 0x30
  404dd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404ddc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404de0:	6918      	ldr	r0, [r3, #16]
  404de2:	f001 fe45 	bl	406a70 <__hi0bits>
  404de6:	f1c0 0020 	rsb	r0, r0, #32
  404dea:	e010      	b.n	404e0e <_dtoa_r+0x4ee>
  404dec:	f1c3 0520 	rsb	r5, r3, #32
  404df0:	fa0a f005 	lsl.w	r0, sl, r5
  404df4:	e674      	b.n	404ae0 <_dtoa_r+0x1c0>
  404df6:	900e      	str	r0, [sp, #56]	; 0x38
  404df8:	e63c      	b.n	404a74 <_dtoa_r+0x154>
  404dfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dfc:	2b01      	cmp	r3, #1
  404dfe:	f340 8287 	ble.w	405310 <_dtoa_r+0x9f0>
  404e02:	2300      	movs	r3, #0
  404e04:	930c      	str	r3, [sp, #48]	; 0x30
  404e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e08:	2001      	movs	r0, #1
  404e0a:	2b00      	cmp	r3, #0
  404e0c:	d1e4      	bne.n	404dd8 <_dtoa_r+0x4b8>
  404e0e:	9a06      	ldr	r2, [sp, #24]
  404e10:	4410      	add	r0, r2
  404e12:	f010 001f 	ands.w	r0, r0, #31
  404e16:	f000 80a1 	beq.w	404f5c <_dtoa_r+0x63c>
  404e1a:	f1c0 0320 	rsb	r3, r0, #32
  404e1e:	2b04      	cmp	r3, #4
  404e20:	f340 849e 	ble.w	405760 <_dtoa_r+0xe40>
  404e24:	9b08      	ldr	r3, [sp, #32]
  404e26:	f1c0 001c 	rsb	r0, r0, #28
  404e2a:	4403      	add	r3, r0
  404e2c:	9308      	str	r3, [sp, #32]
  404e2e:	4613      	mov	r3, r2
  404e30:	4403      	add	r3, r0
  404e32:	4405      	add	r5, r0
  404e34:	9306      	str	r3, [sp, #24]
  404e36:	9b08      	ldr	r3, [sp, #32]
  404e38:	2b00      	cmp	r3, #0
  404e3a:	dd05      	ble.n	404e48 <_dtoa_r+0x528>
  404e3c:	4649      	mov	r1, r9
  404e3e:	461a      	mov	r2, r3
  404e40:	4620      	mov	r0, r4
  404e42:	f001 ff51 	bl	406ce8 <__lshift>
  404e46:	4681      	mov	r9, r0
  404e48:	9b06      	ldr	r3, [sp, #24]
  404e4a:	2b00      	cmp	r3, #0
  404e4c:	dd05      	ble.n	404e5a <_dtoa_r+0x53a>
  404e4e:	4641      	mov	r1, r8
  404e50:	461a      	mov	r2, r3
  404e52:	4620      	mov	r0, r4
  404e54:	f001 ff48 	bl	406ce8 <__lshift>
  404e58:	4680      	mov	r8, r0
  404e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e5c:	2b00      	cmp	r3, #0
  404e5e:	f040 8086 	bne.w	404f6e <_dtoa_r+0x64e>
  404e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e64:	2b00      	cmp	r3, #0
  404e66:	f340 8266 	ble.w	405336 <_dtoa_r+0xa16>
  404e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404e6c:	2b00      	cmp	r3, #0
  404e6e:	f000 8098 	beq.w	404fa2 <_dtoa_r+0x682>
  404e72:	2d00      	cmp	r5, #0
  404e74:	dd05      	ble.n	404e82 <_dtoa_r+0x562>
  404e76:	4631      	mov	r1, r6
  404e78:	462a      	mov	r2, r5
  404e7a:	4620      	mov	r0, r4
  404e7c:	f001 ff34 	bl	406ce8 <__lshift>
  404e80:	4606      	mov	r6, r0
  404e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404e84:	2b00      	cmp	r3, #0
  404e86:	f040 8337 	bne.w	4054f8 <_dtoa_r+0xbd8>
  404e8a:	9606      	str	r6, [sp, #24]
  404e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e8e:	9a04      	ldr	r2, [sp, #16]
  404e90:	f8dd b018 	ldr.w	fp, [sp, #24]
  404e94:	3b01      	subs	r3, #1
  404e96:	18d3      	adds	r3, r2, r3
  404e98:	930b      	str	r3, [sp, #44]	; 0x2c
  404e9a:	f00a 0301 	and.w	r3, sl, #1
  404e9e:	930c      	str	r3, [sp, #48]	; 0x30
  404ea0:	4617      	mov	r7, r2
  404ea2:	46c2      	mov	sl, r8
  404ea4:	4651      	mov	r1, sl
  404ea6:	4648      	mov	r0, r9
  404ea8:	f7ff fca4 	bl	4047f4 <quorem>
  404eac:	4631      	mov	r1, r6
  404eae:	4605      	mov	r5, r0
  404eb0:	4648      	mov	r0, r9
  404eb2:	f001 ff6b 	bl	406d8c <__mcmp>
  404eb6:	465a      	mov	r2, fp
  404eb8:	900a      	str	r0, [sp, #40]	; 0x28
  404eba:	4651      	mov	r1, sl
  404ebc:	4620      	mov	r0, r4
  404ebe:	f001 ff81 	bl	406dc4 <__mdiff>
  404ec2:	68c2      	ldr	r2, [r0, #12]
  404ec4:	4680      	mov	r8, r0
  404ec6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  404eca:	2a00      	cmp	r2, #0
  404ecc:	f040 822b 	bne.w	405326 <_dtoa_r+0xa06>
  404ed0:	4601      	mov	r1, r0
  404ed2:	4648      	mov	r0, r9
  404ed4:	9308      	str	r3, [sp, #32]
  404ed6:	f001 ff59 	bl	406d8c <__mcmp>
  404eda:	4641      	mov	r1, r8
  404edc:	9006      	str	r0, [sp, #24]
  404ede:	4620      	mov	r0, r4
  404ee0:	f001 fd7c 	bl	4069dc <_Bfree>
  404ee4:	9a06      	ldr	r2, [sp, #24]
  404ee6:	9b08      	ldr	r3, [sp, #32]
  404ee8:	b932      	cbnz	r2, 404ef8 <_dtoa_r+0x5d8>
  404eea:	9924      	ldr	r1, [sp, #144]	; 0x90
  404eec:	b921      	cbnz	r1, 404ef8 <_dtoa_r+0x5d8>
  404eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ef0:	2a00      	cmp	r2, #0
  404ef2:	f000 83ef 	beq.w	4056d4 <_dtoa_r+0xdb4>
  404ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404ef8:	990a      	ldr	r1, [sp, #40]	; 0x28
  404efa:	2900      	cmp	r1, #0
  404efc:	f2c0 829f 	blt.w	40543e <_dtoa_r+0xb1e>
  404f00:	d105      	bne.n	404f0e <_dtoa_r+0x5ee>
  404f02:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f04:	b919      	cbnz	r1, 404f0e <_dtoa_r+0x5ee>
  404f06:	990c      	ldr	r1, [sp, #48]	; 0x30
  404f08:	2900      	cmp	r1, #0
  404f0a:	f000 8298 	beq.w	40543e <_dtoa_r+0xb1e>
  404f0e:	2a00      	cmp	r2, #0
  404f10:	f300 8306 	bgt.w	405520 <_dtoa_r+0xc00>
  404f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f16:	703b      	strb	r3, [r7, #0]
  404f18:	f107 0801 	add.w	r8, r7, #1
  404f1c:	4297      	cmp	r7, r2
  404f1e:	4645      	mov	r5, r8
  404f20:	f000 830c 	beq.w	40553c <_dtoa_r+0xc1c>
  404f24:	4649      	mov	r1, r9
  404f26:	2300      	movs	r3, #0
  404f28:	220a      	movs	r2, #10
  404f2a:	4620      	mov	r0, r4
  404f2c:	f001 fd60 	bl	4069f0 <__multadd>
  404f30:	455e      	cmp	r6, fp
  404f32:	4681      	mov	r9, r0
  404f34:	4631      	mov	r1, r6
  404f36:	f04f 0300 	mov.w	r3, #0
  404f3a:	f04f 020a 	mov.w	r2, #10
  404f3e:	4620      	mov	r0, r4
  404f40:	f000 81eb 	beq.w	40531a <_dtoa_r+0x9fa>
  404f44:	f001 fd54 	bl	4069f0 <__multadd>
  404f48:	4659      	mov	r1, fp
  404f4a:	4606      	mov	r6, r0
  404f4c:	2300      	movs	r3, #0
  404f4e:	220a      	movs	r2, #10
  404f50:	4620      	mov	r0, r4
  404f52:	f001 fd4d 	bl	4069f0 <__multadd>
  404f56:	4647      	mov	r7, r8
  404f58:	4683      	mov	fp, r0
  404f5a:	e7a3      	b.n	404ea4 <_dtoa_r+0x584>
  404f5c:	201c      	movs	r0, #28
  404f5e:	9b08      	ldr	r3, [sp, #32]
  404f60:	4403      	add	r3, r0
  404f62:	9308      	str	r3, [sp, #32]
  404f64:	9b06      	ldr	r3, [sp, #24]
  404f66:	4403      	add	r3, r0
  404f68:	4405      	add	r5, r0
  404f6a:	9306      	str	r3, [sp, #24]
  404f6c:	e763      	b.n	404e36 <_dtoa_r+0x516>
  404f6e:	4641      	mov	r1, r8
  404f70:	4648      	mov	r0, r9
  404f72:	f001 ff0b 	bl	406d8c <__mcmp>
  404f76:	2800      	cmp	r0, #0
  404f78:	f6bf af73 	bge.w	404e62 <_dtoa_r+0x542>
  404f7c:	9f02      	ldr	r7, [sp, #8]
  404f7e:	4649      	mov	r1, r9
  404f80:	2300      	movs	r3, #0
  404f82:	220a      	movs	r2, #10
  404f84:	4620      	mov	r0, r4
  404f86:	3f01      	subs	r7, #1
  404f88:	9702      	str	r7, [sp, #8]
  404f8a:	f001 fd31 	bl	4069f0 <__multadd>
  404f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404f90:	4681      	mov	r9, r0
  404f92:	2b00      	cmp	r3, #0
  404f94:	f040 83b6 	bne.w	405704 <_dtoa_r+0xde4>
  404f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f9a:	2b00      	cmp	r3, #0
  404f9c:	f340 83bf 	ble.w	40571e <_dtoa_r+0xdfe>
  404fa0:	930a      	str	r3, [sp, #40]	; 0x28
  404fa2:	f8dd b010 	ldr.w	fp, [sp, #16]
  404fa6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404fa8:	465d      	mov	r5, fp
  404faa:	e002      	b.n	404fb2 <_dtoa_r+0x692>
  404fac:	f001 fd20 	bl	4069f0 <__multadd>
  404fb0:	4681      	mov	r9, r0
  404fb2:	4641      	mov	r1, r8
  404fb4:	4648      	mov	r0, r9
  404fb6:	f7ff fc1d 	bl	4047f4 <quorem>
  404fba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  404fbe:	f805 ab01 	strb.w	sl, [r5], #1
  404fc2:	eba5 030b 	sub.w	r3, r5, fp
  404fc6:	42bb      	cmp	r3, r7
  404fc8:	f04f 020a 	mov.w	r2, #10
  404fcc:	f04f 0300 	mov.w	r3, #0
  404fd0:	4649      	mov	r1, r9
  404fd2:	4620      	mov	r0, r4
  404fd4:	dbea      	blt.n	404fac <_dtoa_r+0x68c>
  404fd6:	9b04      	ldr	r3, [sp, #16]
  404fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fda:	2a01      	cmp	r2, #1
  404fdc:	bfac      	ite	ge
  404fde:	189b      	addge	r3, r3, r2
  404fe0:	3301      	addlt	r3, #1
  404fe2:	461d      	mov	r5, r3
  404fe4:	f04f 0b00 	mov.w	fp, #0
  404fe8:	4649      	mov	r1, r9
  404fea:	2201      	movs	r2, #1
  404fec:	4620      	mov	r0, r4
  404fee:	f001 fe7b 	bl	406ce8 <__lshift>
  404ff2:	4641      	mov	r1, r8
  404ff4:	4681      	mov	r9, r0
  404ff6:	f001 fec9 	bl	406d8c <__mcmp>
  404ffa:	2800      	cmp	r0, #0
  404ffc:	f340 823d 	ble.w	40547a <_dtoa_r+0xb5a>
  405000:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405004:	9904      	ldr	r1, [sp, #16]
  405006:	1e6b      	subs	r3, r5, #1
  405008:	e004      	b.n	405014 <_dtoa_r+0x6f4>
  40500a:	428b      	cmp	r3, r1
  40500c:	f000 81ae 	beq.w	40536c <_dtoa_r+0xa4c>
  405010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405014:	2a39      	cmp	r2, #57	; 0x39
  405016:	f103 0501 	add.w	r5, r3, #1
  40501a:	d0f6      	beq.n	40500a <_dtoa_r+0x6ea>
  40501c:	3201      	adds	r2, #1
  40501e:	701a      	strb	r2, [r3, #0]
  405020:	4641      	mov	r1, r8
  405022:	4620      	mov	r0, r4
  405024:	f001 fcda 	bl	4069dc <_Bfree>
  405028:	2e00      	cmp	r6, #0
  40502a:	f43f ae3d 	beq.w	404ca8 <_dtoa_r+0x388>
  40502e:	f1bb 0f00 	cmp.w	fp, #0
  405032:	d005      	beq.n	405040 <_dtoa_r+0x720>
  405034:	45b3      	cmp	fp, r6
  405036:	d003      	beq.n	405040 <_dtoa_r+0x720>
  405038:	4659      	mov	r1, fp
  40503a:	4620      	mov	r0, r4
  40503c:	f001 fcce 	bl	4069dc <_Bfree>
  405040:	4631      	mov	r1, r6
  405042:	4620      	mov	r0, r4
  405044:	f001 fcca 	bl	4069dc <_Bfree>
  405048:	e62e      	b.n	404ca8 <_dtoa_r+0x388>
  40504a:	2300      	movs	r3, #0
  40504c:	930b      	str	r3, [sp, #44]	; 0x2c
  40504e:	9b02      	ldr	r3, [sp, #8]
  405050:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405052:	4413      	add	r3, r2
  405054:	930f      	str	r3, [sp, #60]	; 0x3c
  405056:	3301      	adds	r3, #1
  405058:	2b01      	cmp	r3, #1
  40505a:	461f      	mov	r7, r3
  40505c:	461e      	mov	r6, r3
  40505e:	930a      	str	r3, [sp, #40]	; 0x28
  405060:	bfb8      	it	lt
  405062:	2701      	movlt	r7, #1
  405064:	2100      	movs	r1, #0
  405066:	2f17      	cmp	r7, #23
  405068:	6461      	str	r1, [r4, #68]	; 0x44
  40506a:	d90a      	bls.n	405082 <_dtoa_r+0x762>
  40506c:	2201      	movs	r2, #1
  40506e:	2304      	movs	r3, #4
  405070:	005b      	lsls	r3, r3, #1
  405072:	f103 0014 	add.w	r0, r3, #20
  405076:	4287      	cmp	r7, r0
  405078:	4611      	mov	r1, r2
  40507a:	f102 0201 	add.w	r2, r2, #1
  40507e:	d2f7      	bcs.n	405070 <_dtoa_r+0x750>
  405080:	6461      	str	r1, [r4, #68]	; 0x44
  405082:	4620      	mov	r0, r4
  405084:	f001 fc84 	bl	406990 <_Balloc>
  405088:	2e0e      	cmp	r6, #14
  40508a:	9004      	str	r0, [sp, #16]
  40508c:	6420      	str	r0, [r4, #64]	; 0x40
  40508e:	f63f ad41 	bhi.w	404b14 <_dtoa_r+0x1f4>
  405092:	2d00      	cmp	r5, #0
  405094:	f43f ad3e 	beq.w	404b14 <_dtoa_r+0x1f4>
  405098:	9902      	ldr	r1, [sp, #8]
  40509a:	2900      	cmp	r1, #0
  40509c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4050a0:	f340 8202 	ble.w	4054a8 <_dtoa_r+0xb88>
  4050a4:	4bb8      	ldr	r3, [pc, #736]	; (405388 <_dtoa_r+0xa68>)
  4050a6:	f001 020f 	and.w	r2, r1, #15
  4050aa:	110d      	asrs	r5, r1, #4
  4050ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4050b0:	06e9      	lsls	r1, r5, #27
  4050b2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4050b6:	f140 81ae 	bpl.w	405416 <_dtoa_r+0xaf6>
  4050ba:	4bb4      	ldr	r3, [pc, #720]	; (40538c <_dtoa_r+0xa6c>)
  4050bc:	4650      	mov	r0, sl
  4050be:	4659      	mov	r1, fp
  4050c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4050c4:	f7fd fa9a 	bl	4025fc <__aeabi_ddiv>
  4050c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4050cc:	f005 050f 	and.w	r5, r5, #15
  4050d0:	f04f 0a03 	mov.w	sl, #3
  4050d4:	b18d      	cbz	r5, 4050fa <_dtoa_r+0x7da>
  4050d6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40538c <_dtoa_r+0xa6c>
  4050da:	07ea      	lsls	r2, r5, #31
  4050dc:	d509      	bpl.n	4050f2 <_dtoa_r+0x7d2>
  4050de:	4630      	mov	r0, r6
  4050e0:	4639      	mov	r1, r7
  4050e2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4050e6:	f7fd f95f 	bl	4023a8 <__aeabi_dmul>
  4050ea:	f10a 0a01 	add.w	sl, sl, #1
  4050ee:	4606      	mov	r6, r0
  4050f0:	460f      	mov	r7, r1
  4050f2:	106d      	asrs	r5, r5, #1
  4050f4:	f108 0808 	add.w	r8, r8, #8
  4050f8:	d1ef      	bne.n	4050da <_dtoa_r+0x7ba>
  4050fa:	463b      	mov	r3, r7
  4050fc:	4632      	mov	r2, r6
  4050fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405102:	f7fd fa7b 	bl	4025fc <__aeabi_ddiv>
  405106:	4607      	mov	r7, r0
  405108:	4688      	mov	r8, r1
  40510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40510c:	b143      	cbz	r3, 405120 <_dtoa_r+0x800>
  40510e:	2200      	movs	r2, #0
  405110:	4b9f      	ldr	r3, [pc, #636]	; (405390 <_dtoa_r+0xa70>)
  405112:	4638      	mov	r0, r7
  405114:	4641      	mov	r1, r8
  405116:	f002 fc23 	bl	407960 <__aeabi_dcmplt>
  40511a:	2800      	cmp	r0, #0
  40511c:	f040 8286 	bne.w	40562c <_dtoa_r+0xd0c>
  405120:	4650      	mov	r0, sl
  405122:	f7fd f8db 	bl	4022dc <__aeabi_i2d>
  405126:	463a      	mov	r2, r7
  405128:	4643      	mov	r3, r8
  40512a:	f7fd f93d 	bl	4023a8 <__aeabi_dmul>
  40512e:	4b99      	ldr	r3, [pc, #612]	; (405394 <_dtoa_r+0xa74>)
  405130:	2200      	movs	r2, #0
  405132:	f7fc ff87 	bl	402044 <__adddf3>
  405136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405138:	4605      	mov	r5, r0
  40513a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40513e:	2b00      	cmp	r3, #0
  405140:	f000 813e 	beq.w	4053c0 <_dtoa_r+0xaa0>
  405144:	9b02      	ldr	r3, [sp, #8]
  405146:	9315      	str	r3, [sp, #84]	; 0x54
  405148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40514a:	9312      	str	r3, [sp, #72]	; 0x48
  40514c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40514e:	2b00      	cmp	r3, #0
  405150:	f000 81fa 	beq.w	405548 <_dtoa_r+0xc28>
  405154:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405156:	4b8c      	ldr	r3, [pc, #560]	; (405388 <_dtoa_r+0xa68>)
  405158:	498f      	ldr	r1, [pc, #572]	; (405398 <_dtoa_r+0xa78>)
  40515a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40515e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405162:	2000      	movs	r0, #0
  405164:	f7fd fa4a 	bl	4025fc <__aeabi_ddiv>
  405168:	462a      	mov	r2, r5
  40516a:	4633      	mov	r3, r6
  40516c:	f7fc ff68 	bl	402040 <__aeabi_dsub>
  405170:	4682      	mov	sl, r0
  405172:	468b      	mov	fp, r1
  405174:	4638      	mov	r0, r7
  405176:	4641      	mov	r1, r8
  405178:	f002 fc30 	bl	4079dc <__aeabi_d2iz>
  40517c:	4605      	mov	r5, r0
  40517e:	f7fd f8ad 	bl	4022dc <__aeabi_i2d>
  405182:	4602      	mov	r2, r0
  405184:	460b      	mov	r3, r1
  405186:	4638      	mov	r0, r7
  405188:	4641      	mov	r1, r8
  40518a:	f7fc ff59 	bl	402040 <__aeabi_dsub>
  40518e:	3530      	adds	r5, #48	; 0x30
  405190:	fa5f f885 	uxtb.w	r8, r5
  405194:	9d04      	ldr	r5, [sp, #16]
  405196:	4606      	mov	r6, r0
  405198:	460f      	mov	r7, r1
  40519a:	f885 8000 	strb.w	r8, [r5]
  40519e:	4602      	mov	r2, r0
  4051a0:	460b      	mov	r3, r1
  4051a2:	4650      	mov	r0, sl
  4051a4:	4659      	mov	r1, fp
  4051a6:	3501      	adds	r5, #1
  4051a8:	f002 fbf8 	bl	40799c <__aeabi_dcmpgt>
  4051ac:	2800      	cmp	r0, #0
  4051ae:	d154      	bne.n	40525a <_dtoa_r+0x93a>
  4051b0:	4632      	mov	r2, r6
  4051b2:	463b      	mov	r3, r7
  4051b4:	2000      	movs	r0, #0
  4051b6:	4976      	ldr	r1, [pc, #472]	; (405390 <_dtoa_r+0xa70>)
  4051b8:	f7fc ff42 	bl	402040 <__aeabi_dsub>
  4051bc:	4602      	mov	r2, r0
  4051be:	460b      	mov	r3, r1
  4051c0:	4650      	mov	r0, sl
  4051c2:	4659      	mov	r1, fp
  4051c4:	f002 fbea 	bl	40799c <__aeabi_dcmpgt>
  4051c8:	2800      	cmp	r0, #0
  4051ca:	f040 8270 	bne.w	4056ae <_dtoa_r+0xd8e>
  4051ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4051d0:	2a01      	cmp	r2, #1
  4051d2:	f000 8111 	beq.w	4053f8 <_dtoa_r+0xad8>
  4051d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4051d8:	9a04      	ldr	r2, [sp, #16]
  4051da:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4051de:	4413      	add	r3, r2
  4051e0:	4699      	mov	r9, r3
  4051e2:	e00d      	b.n	405200 <_dtoa_r+0x8e0>
  4051e4:	2000      	movs	r0, #0
  4051e6:	496a      	ldr	r1, [pc, #424]	; (405390 <_dtoa_r+0xa70>)
  4051e8:	f7fc ff2a 	bl	402040 <__aeabi_dsub>
  4051ec:	4652      	mov	r2, sl
  4051ee:	465b      	mov	r3, fp
  4051f0:	f002 fbb6 	bl	407960 <__aeabi_dcmplt>
  4051f4:	2800      	cmp	r0, #0
  4051f6:	f040 8258 	bne.w	4056aa <_dtoa_r+0xd8a>
  4051fa:	454d      	cmp	r5, r9
  4051fc:	f000 80fa 	beq.w	4053f4 <_dtoa_r+0xad4>
  405200:	4650      	mov	r0, sl
  405202:	4659      	mov	r1, fp
  405204:	2200      	movs	r2, #0
  405206:	4b65      	ldr	r3, [pc, #404]	; (40539c <_dtoa_r+0xa7c>)
  405208:	f7fd f8ce 	bl	4023a8 <__aeabi_dmul>
  40520c:	2200      	movs	r2, #0
  40520e:	4b63      	ldr	r3, [pc, #396]	; (40539c <_dtoa_r+0xa7c>)
  405210:	4682      	mov	sl, r0
  405212:	468b      	mov	fp, r1
  405214:	4630      	mov	r0, r6
  405216:	4639      	mov	r1, r7
  405218:	f7fd f8c6 	bl	4023a8 <__aeabi_dmul>
  40521c:	460f      	mov	r7, r1
  40521e:	4606      	mov	r6, r0
  405220:	f002 fbdc 	bl	4079dc <__aeabi_d2iz>
  405224:	4680      	mov	r8, r0
  405226:	f7fd f859 	bl	4022dc <__aeabi_i2d>
  40522a:	4602      	mov	r2, r0
  40522c:	460b      	mov	r3, r1
  40522e:	4630      	mov	r0, r6
  405230:	4639      	mov	r1, r7
  405232:	f7fc ff05 	bl	402040 <__aeabi_dsub>
  405236:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40523a:	fa5f f888 	uxtb.w	r8, r8
  40523e:	4652      	mov	r2, sl
  405240:	465b      	mov	r3, fp
  405242:	f805 8b01 	strb.w	r8, [r5], #1
  405246:	4606      	mov	r6, r0
  405248:	460f      	mov	r7, r1
  40524a:	f002 fb89 	bl	407960 <__aeabi_dcmplt>
  40524e:	4632      	mov	r2, r6
  405250:	463b      	mov	r3, r7
  405252:	2800      	cmp	r0, #0
  405254:	d0c6      	beq.n	4051e4 <_dtoa_r+0x8c4>
  405256:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40525a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40525c:	9302      	str	r3, [sp, #8]
  40525e:	e523      	b.n	404ca8 <_dtoa_r+0x388>
  405260:	2300      	movs	r3, #0
  405262:	930b      	str	r3, [sp, #44]	; 0x2c
  405264:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405266:	2b00      	cmp	r3, #0
  405268:	f340 80dc 	ble.w	405424 <_dtoa_r+0xb04>
  40526c:	461f      	mov	r7, r3
  40526e:	461e      	mov	r6, r3
  405270:	930f      	str	r3, [sp, #60]	; 0x3c
  405272:	930a      	str	r3, [sp, #40]	; 0x28
  405274:	e6f6      	b.n	405064 <_dtoa_r+0x744>
  405276:	2301      	movs	r3, #1
  405278:	930b      	str	r3, [sp, #44]	; 0x2c
  40527a:	e7f3      	b.n	405264 <_dtoa_r+0x944>
  40527c:	f1ba 0f00 	cmp.w	sl, #0
  405280:	f47f ada8 	bne.w	404dd4 <_dtoa_r+0x4b4>
  405284:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405288:	2b00      	cmp	r3, #0
  40528a:	f47f adba 	bne.w	404e02 <_dtoa_r+0x4e2>
  40528e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405292:	0d3f      	lsrs	r7, r7, #20
  405294:	053f      	lsls	r7, r7, #20
  405296:	2f00      	cmp	r7, #0
  405298:	f000 820d 	beq.w	4056b6 <_dtoa_r+0xd96>
  40529c:	9b08      	ldr	r3, [sp, #32]
  40529e:	3301      	adds	r3, #1
  4052a0:	9308      	str	r3, [sp, #32]
  4052a2:	9b06      	ldr	r3, [sp, #24]
  4052a4:	3301      	adds	r3, #1
  4052a6:	9306      	str	r3, [sp, #24]
  4052a8:	2301      	movs	r3, #1
  4052aa:	930c      	str	r3, [sp, #48]	; 0x30
  4052ac:	e5ab      	b.n	404e06 <_dtoa_r+0x4e6>
  4052ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052b0:	2b00      	cmp	r3, #0
  4052b2:	f73f ac42 	bgt.w	404b3a <_dtoa_r+0x21a>
  4052b6:	f040 8221 	bne.w	4056fc <_dtoa_r+0xddc>
  4052ba:	2200      	movs	r2, #0
  4052bc:	4b38      	ldr	r3, [pc, #224]	; (4053a0 <_dtoa_r+0xa80>)
  4052be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4052c2:	f7fd f871 	bl	4023a8 <__aeabi_dmul>
  4052c6:	4652      	mov	r2, sl
  4052c8:	465b      	mov	r3, fp
  4052ca:	f002 fb5d 	bl	407988 <__aeabi_dcmpge>
  4052ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4052d2:	4646      	mov	r6, r8
  4052d4:	2800      	cmp	r0, #0
  4052d6:	d041      	beq.n	40535c <_dtoa_r+0xa3c>
  4052d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4052da:	9d04      	ldr	r5, [sp, #16]
  4052dc:	43db      	mvns	r3, r3
  4052de:	9302      	str	r3, [sp, #8]
  4052e0:	4641      	mov	r1, r8
  4052e2:	4620      	mov	r0, r4
  4052e4:	f001 fb7a 	bl	4069dc <_Bfree>
  4052e8:	2e00      	cmp	r6, #0
  4052ea:	f43f acdd 	beq.w	404ca8 <_dtoa_r+0x388>
  4052ee:	e6a7      	b.n	405040 <_dtoa_r+0x720>
  4052f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4052f2:	4649      	mov	r1, r9
  4052f4:	4620      	mov	r0, r4
  4052f6:	f001 fca7 	bl	406c48 <__pow5mult>
  4052fa:	4681      	mov	r9, r0
  4052fc:	e558      	b.n	404db0 <_dtoa_r+0x490>
  4052fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405300:	2a00      	cmp	r2, #0
  405302:	f000 8187 	beq.w	405614 <_dtoa_r+0xcf4>
  405306:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40530a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40530c:	9d08      	ldr	r5, [sp, #32]
  40530e:	e4f2      	b.n	404cf6 <_dtoa_r+0x3d6>
  405310:	f1ba 0f00 	cmp.w	sl, #0
  405314:	f47f ad75 	bne.w	404e02 <_dtoa_r+0x4e2>
  405318:	e7b4      	b.n	405284 <_dtoa_r+0x964>
  40531a:	f001 fb69 	bl	4069f0 <__multadd>
  40531e:	4647      	mov	r7, r8
  405320:	4606      	mov	r6, r0
  405322:	4683      	mov	fp, r0
  405324:	e5be      	b.n	404ea4 <_dtoa_r+0x584>
  405326:	4601      	mov	r1, r0
  405328:	4620      	mov	r0, r4
  40532a:	9306      	str	r3, [sp, #24]
  40532c:	f001 fb56 	bl	4069dc <_Bfree>
  405330:	2201      	movs	r2, #1
  405332:	9b06      	ldr	r3, [sp, #24]
  405334:	e5e0      	b.n	404ef8 <_dtoa_r+0x5d8>
  405336:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405338:	2b02      	cmp	r3, #2
  40533a:	f77f ad96 	ble.w	404e6a <_dtoa_r+0x54a>
  40533e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405340:	2b00      	cmp	r3, #0
  405342:	d1c9      	bne.n	4052d8 <_dtoa_r+0x9b8>
  405344:	4641      	mov	r1, r8
  405346:	2205      	movs	r2, #5
  405348:	4620      	mov	r0, r4
  40534a:	f001 fb51 	bl	4069f0 <__multadd>
  40534e:	4601      	mov	r1, r0
  405350:	4680      	mov	r8, r0
  405352:	4648      	mov	r0, r9
  405354:	f001 fd1a 	bl	406d8c <__mcmp>
  405358:	2800      	cmp	r0, #0
  40535a:	ddbd      	ble.n	4052d8 <_dtoa_r+0x9b8>
  40535c:	9a02      	ldr	r2, [sp, #8]
  40535e:	9904      	ldr	r1, [sp, #16]
  405360:	2331      	movs	r3, #49	; 0x31
  405362:	3201      	adds	r2, #1
  405364:	9202      	str	r2, [sp, #8]
  405366:	700b      	strb	r3, [r1, #0]
  405368:	1c4d      	adds	r5, r1, #1
  40536a:	e7b9      	b.n	4052e0 <_dtoa_r+0x9c0>
  40536c:	9a02      	ldr	r2, [sp, #8]
  40536e:	3201      	adds	r2, #1
  405370:	9202      	str	r2, [sp, #8]
  405372:	9a04      	ldr	r2, [sp, #16]
  405374:	2331      	movs	r3, #49	; 0x31
  405376:	7013      	strb	r3, [r2, #0]
  405378:	e652      	b.n	405020 <_dtoa_r+0x700>
  40537a:	2301      	movs	r3, #1
  40537c:	930b      	str	r3, [sp, #44]	; 0x2c
  40537e:	e666      	b.n	40504e <_dtoa_r+0x72e>
  405380:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405384:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405386:	e48f      	b.n	404ca8 <_dtoa_r+0x388>
  405388:	00408268 	.word	0x00408268
  40538c:	00408240 	.word	0x00408240
  405390:	3ff00000 	.word	0x3ff00000
  405394:	401c0000 	.word	0x401c0000
  405398:	3fe00000 	.word	0x3fe00000
  40539c:	40240000 	.word	0x40240000
  4053a0:	40140000 	.word	0x40140000
  4053a4:	4650      	mov	r0, sl
  4053a6:	f7fc ff99 	bl	4022dc <__aeabi_i2d>
  4053aa:	463a      	mov	r2, r7
  4053ac:	4643      	mov	r3, r8
  4053ae:	f7fc fffb 	bl	4023a8 <__aeabi_dmul>
  4053b2:	2200      	movs	r2, #0
  4053b4:	4bc1      	ldr	r3, [pc, #772]	; (4056bc <_dtoa_r+0xd9c>)
  4053b6:	f7fc fe45 	bl	402044 <__adddf3>
  4053ba:	4605      	mov	r5, r0
  4053bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4053c0:	4641      	mov	r1, r8
  4053c2:	2200      	movs	r2, #0
  4053c4:	4bbe      	ldr	r3, [pc, #760]	; (4056c0 <_dtoa_r+0xda0>)
  4053c6:	4638      	mov	r0, r7
  4053c8:	f7fc fe3a 	bl	402040 <__aeabi_dsub>
  4053cc:	462a      	mov	r2, r5
  4053ce:	4633      	mov	r3, r6
  4053d0:	4682      	mov	sl, r0
  4053d2:	468b      	mov	fp, r1
  4053d4:	f002 fae2 	bl	40799c <__aeabi_dcmpgt>
  4053d8:	4680      	mov	r8, r0
  4053da:	2800      	cmp	r0, #0
  4053dc:	f040 8110 	bne.w	405600 <_dtoa_r+0xce0>
  4053e0:	462a      	mov	r2, r5
  4053e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4053e6:	4650      	mov	r0, sl
  4053e8:	4659      	mov	r1, fp
  4053ea:	f002 fab9 	bl	407960 <__aeabi_dcmplt>
  4053ee:	b118      	cbz	r0, 4053f8 <_dtoa_r+0xad8>
  4053f0:	4646      	mov	r6, r8
  4053f2:	e771      	b.n	4052d8 <_dtoa_r+0x9b8>
  4053f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4053f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4053fc:	f7ff bb8a 	b.w	404b14 <_dtoa_r+0x1f4>
  405400:	9804      	ldr	r0, [sp, #16]
  405402:	f7ff babb 	b.w	40497c <_dtoa_r+0x5c>
  405406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40540a:	970c      	str	r7, [sp, #48]	; 0x30
  40540c:	1afb      	subs	r3, r7, r3
  40540e:	441a      	add	r2, r3
  405410:	920d      	str	r2, [sp, #52]	; 0x34
  405412:	2700      	movs	r7, #0
  405414:	e469      	b.n	404cea <_dtoa_r+0x3ca>
  405416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40541a:	f04f 0a02 	mov.w	sl, #2
  40541e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405422:	e657      	b.n	4050d4 <_dtoa_r+0x7b4>
  405424:	2100      	movs	r1, #0
  405426:	2301      	movs	r3, #1
  405428:	6461      	str	r1, [r4, #68]	; 0x44
  40542a:	4620      	mov	r0, r4
  40542c:	9325      	str	r3, [sp, #148]	; 0x94
  40542e:	f001 faaf 	bl	406990 <_Balloc>
  405432:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405434:	9004      	str	r0, [sp, #16]
  405436:	6420      	str	r0, [r4, #64]	; 0x40
  405438:	930a      	str	r3, [sp, #40]	; 0x28
  40543a:	930f      	str	r3, [sp, #60]	; 0x3c
  40543c:	e629      	b.n	405092 <_dtoa_r+0x772>
  40543e:	2a00      	cmp	r2, #0
  405440:	46d0      	mov	r8, sl
  405442:	f8cd b018 	str.w	fp, [sp, #24]
  405446:	469a      	mov	sl, r3
  405448:	dd11      	ble.n	40546e <_dtoa_r+0xb4e>
  40544a:	4649      	mov	r1, r9
  40544c:	2201      	movs	r2, #1
  40544e:	4620      	mov	r0, r4
  405450:	f001 fc4a 	bl	406ce8 <__lshift>
  405454:	4641      	mov	r1, r8
  405456:	4681      	mov	r9, r0
  405458:	f001 fc98 	bl	406d8c <__mcmp>
  40545c:	2800      	cmp	r0, #0
  40545e:	f340 8146 	ble.w	4056ee <_dtoa_r+0xdce>
  405462:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405466:	f000 8106 	beq.w	405676 <_dtoa_r+0xd56>
  40546a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40546e:	46b3      	mov	fp, r6
  405470:	f887 a000 	strb.w	sl, [r7]
  405474:	1c7d      	adds	r5, r7, #1
  405476:	9e06      	ldr	r6, [sp, #24]
  405478:	e5d2      	b.n	405020 <_dtoa_r+0x700>
  40547a:	d104      	bne.n	405486 <_dtoa_r+0xb66>
  40547c:	f01a 0f01 	tst.w	sl, #1
  405480:	d001      	beq.n	405486 <_dtoa_r+0xb66>
  405482:	e5bd      	b.n	405000 <_dtoa_r+0x6e0>
  405484:	4615      	mov	r5, r2
  405486:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40548a:	2b30      	cmp	r3, #48	; 0x30
  40548c:	f105 32ff 	add.w	r2, r5, #4294967295
  405490:	d0f8      	beq.n	405484 <_dtoa_r+0xb64>
  405492:	e5c5      	b.n	405020 <_dtoa_r+0x700>
  405494:	9904      	ldr	r1, [sp, #16]
  405496:	2230      	movs	r2, #48	; 0x30
  405498:	700a      	strb	r2, [r1, #0]
  40549a:	9a02      	ldr	r2, [sp, #8]
  40549c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4054a0:	3201      	adds	r2, #1
  4054a2:	9202      	str	r2, [sp, #8]
  4054a4:	f7ff bbfc 	b.w	404ca0 <_dtoa_r+0x380>
  4054a8:	f000 80bb 	beq.w	405622 <_dtoa_r+0xd02>
  4054ac:	9b02      	ldr	r3, [sp, #8]
  4054ae:	425d      	negs	r5, r3
  4054b0:	4b84      	ldr	r3, [pc, #528]	; (4056c4 <_dtoa_r+0xda4>)
  4054b2:	f005 020f 	and.w	r2, r5, #15
  4054b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4054c2:	f7fc ff71 	bl	4023a8 <__aeabi_dmul>
  4054c6:	112d      	asrs	r5, r5, #4
  4054c8:	4607      	mov	r7, r0
  4054ca:	4688      	mov	r8, r1
  4054cc:	f000 812c 	beq.w	405728 <_dtoa_r+0xe08>
  4054d0:	4e7d      	ldr	r6, [pc, #500]	; (4056c8 <_dtoa_r+0xda8>)
  4054d2:	f04f 0a02 	mov.w	sl, #2
  4054d6:	07eb      	lsls	r3, r5, #31
  4054d8:	d509      	bpl.n	4054ee <_dtoa_r+0xbce>
  4054da:	4638      	mov	r0, r7
  4054dc:	4641      	mov	r1, r8
  4054de:	e9d6 2300 	ldrd	r2, r3, [r6]
  4054e2:	f7fc ff61 	bl	4023a8 <__aeabi_dmul>
  4054e6:	f10a 0a01 	add.w	sl, sl, #1
  4054ea:	4607      	mov	r7, r0
  4054ec:	4688      	mov	r8, r1
  4054ee:	106d      	asrs	r5, r5, #1
  4054f0:	f106 0608 	add.w	r6, r6, #8
  4054f4:	d1ef      	bne.n	4054d6 <_dtoa_r+0xbb6>
  4054f6:	e608      	b.n	40510a <_dtoa_r+0x7ea>
  4054f8:	6871      	ldr	r1, [r6, #4]
  4054fa:	4620      	mov	r0, r4
  4054fc:	f001 fa48 	bl	406990 <_Balloc>
  405500:	6933      	ldr	r3, [r6, #16]
  405502:	3302      	adds	r3, #2
  405504:	009a      	lsls	r2, r3, #2
  405506:	4605      	mov	r5, r0
  405508:	f106 010c 	add.w	r1, r6, #12
  40550c:	300c      	adds	r0, #12
  40550e:	f7fd fb0d 	bl	402b2c <memcpy>
  405512:	4629      	mov	r1, r5
  405514:	2201      	movs	r2, #1
  405516:	4620      	mov	r0, r4
  405518:	f001 fbe6 	bl	406ce8 <__lshift>
  40551c:	9006      	str	r0, [sp, #24]
  40551e:	e4b5      	b.n	404e8c <_dtoa_r+0x56c>
  405520:	2b39      	cmp	r3, #57	; 0x39
  405522:	f8cd b018 	str.w	fp, [sp, #24]
  405526:	46d0      	mov	r8, sl
  405528:	f000 80a5 	beq.w	405676 <_dtoa_r+0xd56>
  40552c:	f103 0a01 	add.w	sl, r3, #1
  405530:	46b3      	mov	fp, r6
  405532:	f887 a000 	strb.w	sl, [r7]
  405536:	1c7d      	adds	r5, r7, #1
  405538:	9e06      	ldr	r6, [sp, #24]
  40553a:	e571      	b.n	405020 <_dtoa_r+0x700>
  40553c:	465a      	mov	r2, fp
  40553e:	46d0      	mov	r8, sl
  405540:	46b3      	mov	fp, r6
  405542:	469a      	mov	sl, r3
  405544:	4616      	mov	r6, r2
  405546:	e54f      	b.n	404fe8 <_dtoa_r+0x6c8>
  405548:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40554a:	495e      	ldr	r1, [pc, #376]	; (4056c4 <_dtoa_r+0xda4>)
  40554c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405550:	462a      	mov	r2, r5
  405552:	4633      	mov	r3, r6
  405554:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405558:	f7fc ff26 	bl	4023a8 <__aeabi_dmul>
  40555c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405560:	4638      	mov	r0, r7
  405562:	4641      	mov	r1, r8
  405564:	f002 fa3a 	bl	4079dc <__aeabi_d2iz>
  405568:	4605      	mov	r5, r0
  40556a:	f7fc feb7 	bl	4022dc <__aeabi_i2d>
  40556e:	460b      	mov	r3, r1
  405570:	4602      	mov	r2, r0
  405572:	4641      	mov	r1, r8
  405574:	4638      	mov	r0, r7
  405576:	f7fc fd63 	bl	402040 <__aeabi_dsub>
  40557a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40557c:	460f      	mov	r7, r1
  40557e:	9904      	ldr	r1, [sp, #16]
  405580:	3530      	adds	r5, #48	; 0x30
  405582:	2b01      	cmp	r3, #1
  405584:	700d      	strb	r5, [r1, #0]
  405586:	4606      	mov	r6, r0
  405588:	f101 0501 	add.w	r5, r1, #1
  40558c:	d026      	beq.n	4055dc <_dtoa_r+0xcbc>
  40558e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405590:	9a04      	ldr	r2, [sp, #16]
  405592:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4056d0 <_dtoa_r+0xdb0>
  405596:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40559a:	4413      	add	r3, r2
  40559c:	f04f 0a00 	mov.w	sl, #0
  4055a0:	4699      	mov	r9, r3
  4055a2:	4652      	mov	r2, sl
  4055a4:	465b      	mov	r3, fp
  4055a6:	4630      	mov	r0, r6
  4055a8:	4639      	mov	r1, r7
  4055aa:	f7fc fefd 	bl	4023a8 <__aeabi_dmul>
  4055ae:	460f      	mov	r7, r1
  4055b0:	4606      	mov	r6, r0
  4055b2:	f002 fa13 	bl	4079dc <__aeabi_d2iz>
  4055b6:	4680      	mov	r8, r0
  4055b8:	f7fc fe90 	bl	4022dc <__aeabi_i2d>
  4055bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4055c0:	4602      	mov	r2, r0
  4055c2:	460b      	mov	r3, r1
  4055c4:	4630      	mov	r0, r6
  4055c6:	4639      	mov	r1, r7
  4055c8:	f7fc fd3a 	bl	402040 <__aeabi_dsub>
  4055cc:	f805 8b01 	strb.w	r8, [r5], #1
  4055d0:	454d      	cmp	r5, r9
  4055d2:	4606      	mov	r6, r0
  4055d4:	460f      	mov	r7, r1
  4055d6:	d1e4      	bne.n	4055a2 <_dtoa_r+0xc82>
  4055d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4055dc:	4b3b      	ldr	r3, [pc, #236]	; (4056cc <_dtoa_r+0xdac>)
  4055de:	2200      	movs	r2, #0
  4055e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4055e4:	f7fc fd2e 	bl	402044 <__adddf3>
  4055e8:	4632      	mov	r2, r6
  4055ea:	463b      	mov	r3, r7
  4055ec:	f002 f9b8 	bl	407960 <__aeabi_dcmplt>
  4055f0:	2800      	cmp	r0, #0
  4055f2:	d046      	beq.n	405682 <_dtoa_r+0xd62>
  4055f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4055f6:	9302      	str	r3, [sp, #8]
  4055f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4055fc:	f7ff bb43 	b.w	404c86 <_dtoa_r+0x366>
  405600:	f04f 0800 	mov.w	r8, #0
  405604:	4646      	mov	r6, r8
  405606:	e6a9      	b.n	40535c <_dtoa_r+0xa3c>
  405608:	9b08      	ldr	r3, [sp, #32]
  40560a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40560c:	1a9d      	subs	r5, r3, r2
  40560e:	2300      	movs	r3, #0
  405610:	f7ff bb71 	b.w	404cf6 <_dtoa_r+0x3d6>
  405614:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405616:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405618:	9d08      	ldr	r5, [sp, #32]
  40561a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40561e:	f7ff bb6a 	b.w	404cf6 <_dtoa_r+0x3d6>
  405622:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405626:	f04f 0a02 	mov.w	sl, #2
  40562a:	e56e      	b.n	40510a <_dtoa_r+0x7ea>
  40562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40562e:	2b00      	cmp	r3, #0
  405630:	f43f aeb8 	beq.w	4053a4 <_dtoa_r+0xa84>
  405634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405636:	2b00      	cmp	r3, #0
  405638:	f77f aede 	ble.w	4053f8 <_dtoa_r+0xad8>
  40563c:	2200      	movs	r2, #0
  40563e:	4b24      	ldr	r3, [pc, #144]	; (4056d0 <_dtoa_r+0xdb0>)
  405640:	4638      	mov	r0, r7
  405642:	4641      	mov	r1, r8
  405644:	f7fc feb0 	bl	4023a8 <__aeabi_dmul>
  405648:	4607      	mov	r7, r0
  40564a:	4688      	mov	r8, r1
  40564c:	f10a 0001 	add.w	r0, sl, #1
  405650:	f7fc fe44 	bl	4022dc <__aeabi_i2d>
  405654:	463a      	mov	r2, r7
  405656:	4643      	mov	r3, r8
  405658:	f7fc fea6 	bl	4023a8 <__aeabi_dmul>
  40565c:	2200      	movs	r2, #0
  40565e:	4b17      	ldr	r3, [pc, #92]	; (4056bc <_dtoa_r+0xd9c>)
  405660:	f7fc fcf0 	bl	402044 <__adddf3>
  405664:	9a02      	ldr	r2, [sp, #8]
  405666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405668:	9312      	str	r3, [sp, #72]	; 0x48
  40566a:	3a01      	subs	r2, #1
  40566c:	4605      	mov	r5, r0
  40566e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405672:	9215      	str	r2, [sp, #84]	; 0x54
  405674:	e56a      	b.n	40514c <_dtoa_r+0x82c>
  405676:	2239      	movs	r2, #57	; 0x39
  405678:	46b3      	mov	fp, r6
  40567a:	703a      	strb	r2, [r7, #0]
  40567c:	9e06      	ldr	r6, [sp, #24]
  40567e:	1c7d      	adds	r5, r7, #1
  405680:	e4c0      	b.n	405004 <_dtoa_r+0x6e4>
  405682:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405686:	2000      	movs	r0, #0
  405688:	4910      	ldr	r1, [pc, #64]	; (4056cc <_dtoa_r+0xdac>)
  40568a:	f7fc fcd9 	bl	402040 <__aeabi_dsub>
  40568e:	4632      	mov	r2, r6
  405690:	463b      	mov	r3, r7
  405692:	f002 f983 	bl	40799c <__aeabi_dcmpgt>
  405696:	b908      	cbnz	r0, 40569c <_dtoa_r+0xd7c>
  405698:	e6ae      	b.n	4053f8 <_dtoa_r+0xad8>
  40569a:	4615      	mov	r5, r2
  40569c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056a0:	2b30      	cmp	r3, #48	; 0x30
  4056a2:	f105 32ff 	add.w	r2, r5, #4294967295
  4056a6:	d0f8      	beq.n	40569a <_dtoa_r+0xd7a>
  4056a8:	e5d7      	b.n	40525a <_dtoa_r+0x93a>
  4056aa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4056ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4056b0:	9302      	str	r3, [sp, #8]
  4056b2:	f7ff bae8 	b.w	404c86 <_dtoa_r+0x366>
  4056b6:	970c      	str	r7, [sp, #48]	; 0x30
  4056b8:	f7ff bba5 	b.w	404e06 <_dtoa_r+0x4e6>
  4056bc:	401c0000 	.word	0x401c0000
  4056c0:	40140000 	.word	0x40140000
  4056c4:	00408268 	.word	0x00408268
  4056c8:	00408240 	.word	0x00408240
  4056cc:	3fe00000 	.word	0x3fe00000
  4056d0:	40240000 	.word	0x40240000
  4056d4:	2b39      	cmp	r3, #57	; 0x39
  4056d6:	f8cd b018 	str.w	fp, [sp, #24]
  4056da:	46d0      	mov	r8, sl
  4056dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4056e0:	469a      	mov	sl, r3
  4056e2:	d0c8      	beq.n	405676 <_dtoa_r+0xd56>
  4056e4:	f1bb 0f00 	cmp.w	fp, #0
  4056e8:	f73f aebf 	bgt.w	40546a <_dtoa_r+0xb4a>
  4056ec:	e6bf      	b.n	40546e <_dtoa_r+0xb4e>
  4056ee:	f47f aebe 	bne.w	40546e <_dtoa_r+0xb4e>
  4056f2:	f01a 0f01 	tst.w	sl, #1
  4056f6:	f43f aeba 	beq.w	40546e <_dtoa_r+0xb4e>
  4056fa:	e6b2      	b.n	405462 <_dtoa_r+0xb42>
  4056fc:	f04f 0800 	mov.w	r8, #0
  405700:	4646      	mov	r6, r8
  405702:	e5e9      	b.n	4052d8 <_dtoa_r+0x9b8>
  405704:	4631      	mov	r1, r6
  405706:	2300      	movs	r3, #0
  405708:	220a      	movs	r2, #10
  40570a:	4620      	mov	r0, r4
  40570c:	f001 f970 	bl	4069f0 <__multadd>
  405710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405712:	2b00      	cmp	r3, #0
  405714:	4606      	mov	r6, r0
  405716:	dd0a      	ble.n	40572e <_dtoa_r+0xe0e>
  405718:	930a      	str	r3, [sp, #40]	; 0x28
  40571a:	f7ff bbaa 	b.w	404e72 <_dtoa_r+0x552>
  40571e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405720:	2b02      	cmp	r3, #2
  405722:	dc23      	bgt.n	40576c <_dtoa_r+0xe4c>
  405724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405726:	e43b      	b.n	404fa0 <_dtoa_r+0x680>
  405728:	f04f 0a02 	mov.w	sl, #2
  40572c:	e4ed      	b.n	40510a <_dtoa_r+0x7ea>
  40572e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405730:	2b02      	cmp	r3, #2
  405732:	dc1b      	bgt.n	40576c <_dtoa_r+0xe4c>
  405734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405736:	e7ef      	b.n	405718 <_dtoa_r+0xdf8>
  405738:	2500      	movs	r5, #0
  40573a:	6465      	str	r5, [r4, #68]	; 0x44
  40573c:	4629      	mov	r1, r5
  40573e:	4620      	mov	r0, r4
  405740:	f001 f926 	bl	406990 <_Balloc>
  405744:	f04f 33ff 	mov.w	r3, #4294967295
  405748:	930a      	str	r3, [sp, #40]	; 0x28
  40574a:	930f      	str	r3, [sp, #60]	; 0x3c
  40574c:	2301      	movs	r3, #1
  40574e:	9004      	str	r0, [sp, #16]
  405750:	9525      	str	r5, [sp, #148]	; 0x94
  405752:	6420      	str	r0, [r4, #64]	; 0x40
  405754:	930b      	str	r3, [sp, #44]	; 0x2c
  405756:	f7ff b9dd 	b.w	404b14 <_dtoa_r+0x1f4>
  40575a:	2501      	movs	r5, #1
  40575c:	f7ff b9a5 	b.w	404aaa <_dtoa_r+0x18a>
  405760:	f43f ab69 	beq.w	404e36 <_dtoa_r+0x516>
  405764:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405768:	f7ff bbf9 	b.w	404f5e <_dtoa_r+0x63e>
  40576c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40576e:	930a      	str	r3, [sp, #40]	; 0x28
  405770:	e5e5      	b.n	40533e <_dtoa_r+0xa1e>
  405772:	bf00      	nop

00405774 <__sflush_r>:
  405774:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405778:	b29a      	uxth	r2, r3
  40577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40577e:	460d      	mov	r5, r1
  405780:	0711      	lsls	r1, r2, #28
  405782:	4680      	mov	r8, r0
  405784:	d43a      	bmi.n	4057fc <__sflush_r+0x88>
  405786:	686a      	ldr	r2, [r5, #4]
  405788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40578c:	2a00      	cmp	r2, #0
  40578e:	81ab      	strh	r3, [r5, #12]
  405790:	dd6f      	ble.n	405872 <__sflush_r+0xfe>
  405792:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405794:	2c00      	cmp	r4, #0
  405796:	d049      	beq.n	40582c <__sflush_r+0xb8>
  405798:	2200      	movs	r2, #0
  40579a:	b29b      	uxth	r3, r3
  40579c:	f8d8 6000 	ldr.w	r6, [r8]
  4057a0:	f8c8 2000 	str.w	r2, [r8]
  4057a4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4057a8:	d067      	beq.n	40587a <__sflush_r+0x106>
  4057aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4057ac:	075f      	lsls	r7, r3, #29
  4057ae:	d505      	bpl.n	4057bc <__sflush_r+0x48>
  4057b0:	6869      	ldr	r1, [r5, #4]
  4057b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4057b4:	1a52      	subs	r2, r2, r1
  4057b6:	b10b      	cbz	r3, 4057bc <__sflush_r+0x48>
  4057b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4057ba:	1ad2      	subs	r2, r2, r3
  4057bc:	2300      	movs	r3, #0
  4057be:	69e9      	ldr	r1, [r5, #28]
  4057c0:	4640      	mov	r0, r8
  4057c2:	47a0      	blx	r4
  4057c4:	1c44      	adds	r4, r0, #1
  4057c6:	d03c      	beq.n	405842 <__sflush_r+0xce>
  4057c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4057cc:	692a      	ldr	r2, [r5, #16]
  4057ce:	602a      	str	r2, [r5, #0]
  4057d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4057d4:	2200      	movs	r2, #0
  4057d6:	81ab      	strh	r3, [r5, #12]
  4057d8:	04db      	lsls	r3, r3, #19
  4057da:	606a      	str	r2, [r5, #4]
  4057dc:	d447      	bmi.n	40586e <__sflush_r+0xfa>
  4057de:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4057e0:	f8c8 6000 	str.w	r6, [r8]
  4057e4:	b311      	cbz	r1, 40582c <__sflush_r+0xb8>
  4057e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4057ea:	4299      	cmp	r1, r3
  4057ec:	d002      	beq.n	4057f4 <__sflush_r+0x80>
  4057ee:	4640      	mov	r0, r8
  4057f0:	f000 f9f0 	bl	405bd4 <_free_r>
  4057f4:	2000      	movs	r0, #0
  4057f6:	6328      	str	r0, [r5, #48]	; 0x30
  4057f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057fc:	692e      	ldr	r6, [r5, #16]
  4057fe:	b1ae      	cbz	r6, 40582c <__sflush_r+0xb8>
  405800:	682c      	ldr	r4, [r5, #0]
  405802:	602e      	str	r6, [r5, #0]
  405804:	0791      	lsls	r1, r2, #30
  405806:	bf0c      	ite	eq
  405808:	696b      	ldreq	r3, [r5, #20]
  40580a:	2300      	movne	r3, #0
  40580c:	1ba4      	subs	r4, r4, r6
  40580e:	60ab      	str	r3, [r5, #8]
  405810:	e00a      	b.n	405828 <__sflush_r+0xb4>
  405812:	4623      	mov	r3, r4
  405814:	4632      	mov	r2, r6
  405816:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405818:	69e9      	ldr	r1, [r5, #28]
  40581a:	4640      	mov	r0, r8
  40581c:	47b8      	blx	r7
  40581e:	2800      	cmp	r0, #0
  405820:	eba4 0400 	sub.w	r4, r4, r0
  405824:	4406      	add	r6, r0
  405826:	dd04      	ble.n	405832 <__sflush_r+0xbe>
  405828:	2c00      	cmp	r4, #0
  40582a:	dcf2      	bgt.n	405812 <__sflush_r+0x9e>
  40582c:	2000      	movs	r0, #0
  40582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405832:	89ab      	ldrh	r3, [r5, #12]
  405834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405838:	81ab      	strh	r3, [r5, #12]
  40583a:	f04f 30ff 	mov.w	r0, #4294967295
  40583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405842:	f8d8 4000 	ldr.w	r4, [r8]
  405846:	2c1d      	cmp	r4, #29
  405848:	d8f3      	bhi.n	405832 <__sflush_r+0xbe>
  40584a:	4b19      	ldr	r3, [pc, #100]	; (4058b0 <__sflush_r+0x13c>)
  40584c:	40e3      	lsrs	r3, r4
  40584e:	43db      	mvns	r3, r3
  405850:	f013 0301 	ands.w	r3, r3, #1
  405854:	d1ed      	bne.n	405832 <__sflush_r+0xbe>
  405856:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40585a:	606b      	str	r3, [r5, #4]
  40585c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405860:	6929      	ldr	r1, [r5, #16]
  405862:	81ab      	strh	r3, [r5, #12]
  405864:	04da      	lsls	r2, r3, #19
  405866:	6029      	str	r1, [r5, #0]
  405868:	d5b9      	bpl.n	4057de <__sflush_r+0x6a>
  40586a:	2c00      	cmp	r4, #0
  40586c:	d1b7      	bne.n	4057de <__sflush_r+0x6a>
  40586e:	6528      	str	r0, [r5, #80]	; 0x50
  405870:	e7b5      	b.n	4057de <__sflush_r+0x6a>
  405872:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405874:	2a00      	cmp	r2, #0
  405876:	dc8c      	bgt.n	405792 <__sflush_r+0x1e>
  405878:	e7d8      	b.n	40582c <__sflush_r+0xb8>
  40587a:	2301      	movs	r3, #1
  40587c:	69e9      	ldr	r1, [r5, #28]
  40587e:	4640      	mov	r0, r8
  405880:	47a0      	blx	r4
  405882:	1c43      	adds	r3, r0, #1
  405884:	4602      	mov	r2, r0
  405886:	d002      	beq.n	40588e <__sflush_r+0x11a>
  405888:	89ab      	ldrh	r3, [r5, #12]
  40588a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40588c:	e78e      	b.n	4057ac <__sflush_r+0x38>
  40588e:	f8d8 3000 	ldr.w	r3, [r8]
  405892:	2b00      	cmp	r3, #0
  405894:	d0f8      	beq.n	405888 <__sflush_r+0x114>
  405896:	2b1d      	cmp	r3, #29
  405898:	d001      	beq.n	40589e <__sflush_r+0x12a>
  40589a:	2b16      	cmp	r3, #22
  40589c:	d102      	bne.n	4058a4 <__sflush_r+0x130>
  40589e:	f8c8 6000 	str.w	r6, [r8]
  4058a2:	e7c3      	b.n	40582c <__sflush_r+0xb8>
  4058a4:	89ab      	ldrh	r3, [r5, #12]
  4058a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058aa:	81ab      	strh	r3, [r5, #12]
  4058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058b0:	20400001 	.word	0x20400001

004058b4 <_fflush_r>:
  4058b4:	b538      	push	{r3, r4, r5, lr}
  4058b6:	460d      	mov	r5, r1
  4058b8:	4604      	mov	r4, r0
  4058ba:	b108      	cbz	r0, 4058c0 <_fflush_r+0xc>
  4058bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058be:	b1bb      	cbz	r3, 4058f0 <_fflush_r+0x3c>
  4058c0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4058c4:	b188      	cbz	r0, 4058ea <_fflush_r+0x36>
  4058c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4058c8:	07db      	lsls	r3, r3, #31
  4058ca:	d401      	bmi.n	4058d0 <_fflush_r+0x1c>
  4058cc:	0581      	lsls	r1, r0, #22
  4058ce:	d517      	bpl.n	405900 <_fflush_r+0x4c>
  4058d0:	4620      	mov	r0, r4
  4058d2:	4629      	mov	r1, r5
  4058d4:	f7ff ff4e 	bl	405774 <__sflush_r>
  4058d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4058da:	07da      	lsls	r2, r3, #31
  4058dc:	4604      	mov	r4, r0
  4058de:	d402      	bmi.n	4058e6 <_fflush_r+0x32>
  4058e0:	89ab      	ldrh	r3, [r5, #12]
  4058e2:	059b      	lsls	r3, r3, #22
  4058e4:	d507      	bpl.n	4058f6 <_fflush_r+0x42>
  4058e6:	4620      	mov	r0, r4
  4058e8:	bd38      	pop	{r3, r4, r5, pc}
  4058ea:	4604      	mov	r4, r0
  4058ec:	4620      	mov	r0, r4
  4058ee:	bd38      	pop	{r3, r4, r5, pc}
  4058f0:	f000 f84a 	bl	405988 <__sinit>
  4058f4:	e7e4      	b.n	4058c0 <_fflush_r+0xc>
  4058f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4058f8:	f000 fc3c 	bl	406174 <__retarget_lock_release_recursive>
  4058fc:	4620      	mov	r0, r4
  4058fe:	bd38      	pop	{r3, r4, r5, pc}
  405900:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405902:	f000 fc35 	bl	406170 <__retarget_lock_acquire_recursive>
  405906:	e7e3      	b.n	4058d0 <_fflush_r+0x1c>

00405908 <fflush>:
  405908:	b120      	cbz	r0, 405914 <fflush+0xc>
  40590a:	4b05      	ldr	r3, [pc, #20]	; (405920 <fflush+0x18>)
  40590c:	4601      	mov	r1, r0
  40590e:	6818      	ldr	r0, [r3, #0]
  405910:	f7ff bfd0 	b.w	4058b4 <_fflush_r>
  405914:	4b03      	ldr	r3, [pc, #12]	; (405924 <fflush+0x1c>)
  405916:	4904      	ldr	r1, [pc, #16]	; (405928 <fflush+0x20>)
  405918:	6818      	ldr	r0, [r3, #0]
  40591a:	f000 bbdf 	b.w	4060dc <_fwalk_reent>
  40591e:	bf00      	nop
  405920:	20400018 	.word	0x20400018
  405924:	004081b8 	.word	0x004081b8
  405928:	004058b5 	.word	0x004058b5

0040592c <_cleanup_r>:
  40592c:	4901      	ldr	r1, [pc, #4]	; (405934 <_cleanup_r+0x8>)
  40592e:	f000 bbd5 	b.w	4060dc <_fwalk_reent>
  405932:	bf00      	nop
  405934:	00407739 	.word	0x00407739

00405938 <std.isra.0>:
  405938:	b510      	push	{r4, lr}
  40593a:	2300      	movs	r3, #0
  40593c:	4604      	mov	r4, r0
  40593e:	8181      	strh	r1, [r0, #12]
  405940:	81c2      	strh	r2, [r0, #14]
  405942:	6003      	str	r3, [r0, #0]
  405944:	6043      	str	r3, [r0, #4]
  405946:	6083      	str	r3, [r0, #8]
  405948:	6643      	str	r3, [r0, #100]	; 0x64
  40594a:	6103      	str	r3, [r0, #16]
  40594c:	6143      	str	r3, [r0, #20]
  40594e:	6183      	str	r3, [r0, #24]
  405950:	4619      	mov	r1, r3
  405952:	2208      	movs	r2, #8
  405954:	305c      	adds	r0, #92	; 0x5c
  405956:	f7fd f983 	bl	402c60 <memset>
  40595a:	4807      	ldr	r0, [pc, #28]	; (405978 <std.isra.0+0x40>)
  40595c:	4907      	ldr	r1, [pc, #28]	; (40597c <std.isra.0+0x44>)
  40595e:	4a08      	ldr	r2, [pc, #32]	; (405980 <std.isra.0+0x48>)
  405960:	4b08      	ldr	r3, [pc, #32]	; (405984 <std.isra.0+0x4c>)
  405962:	6220      	str	r0, [r4, #32]
  405964:	61e4      	str	r4, [r4, #28]
  405966:	6261      	str	r1, [r4, #36]	; 0x24
  405968:	62a2      	str	r2, [r4, #40]	; 0x28
  40596a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40596c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405974:	f000 bbf8 	b.w	406168 <__retarget_lock_init_recursive>
  405978:	0040741d 	.word	0x0040741d
  40597c:	00407441 	.word	0x00407441
  405980:	0040747d 	.word	0x0040747d
  405984:	0040749d 	.word	0x0040749d

00405988 <__sinit>:
  405988:	b510      	push	{r4, lr}
  40598a:	4604      	mov	r4, r0
  40598c:	4812      	ldr	r0, [pc, #72]	; (4059d8 <__sinit+0x50>)
  40598e:	f000 fbef 	bl	406170 <__retarget_lock_acquire_recursive>
  405992:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405994:	b9d2      	cbnz	r2, 4059cc <__sinit+0x44>
  405996:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40599a:	4810      	ldr	r0, [pc, #64]	; (4059dc <__sinit+0x54>)
  40599c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4059a0:	2103      	movs	r1, #3
  4059a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4059a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4059a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4059ac:	6860      	ldr	r0, [r4, #4]
  4059ae:	2104      	movs	r1, #4
  4059b0:	f7ff ffc2 	bl	405938 <std.isra.0>
  4059b4:	2201      	movs	r2, #1
  4059b6:	2109      	movs	r1, #9
  4059b8:	68a0      	ldr	r0, [r4, #8]
  4059ba:	f7ff ffbd 	bl	405938 <std.isra.0>
  4059be:	2202      	movs	r2, #2
  4059c0:	2112      	movs	r1, #18
  4059c2:	68e0      	ldr	r0, [r4, #12]
  4059c4:	f7ff ffb8 	bl	405938 <std.isra.0>
  4059c8:	2301      	movs	r3, #1
  4059ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4059cc:	4802      	ldr	r0, [pc, #8]	; (4059d8 <__sinit+0x50>)
  4059ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4059d2:	f000 bbcf 	b.w	406174 <__retarget_lock_release_recursive>
  4059d6:	bf00      	nop
  4059d8:	20401674 	.word	0x20401674
  4059dc:	0040592d 	.word	0x0040592d

004059e0 <__sfp_lock_acquire>:
  4059e0:	4801      	ldr	r0, [pc, #4]	; (4059e8 <__sfp_lock_acquire+0x8>)
  4059e2:	f000 bbc5 	b.w	406170 <__retarget_lock_acquire_recursive>
  4059e6:	bf00      	nop
  4059e8:	20401688 	.word	0x20401688

004059ec <__sfp_lock_release>:
  4059ec:	4801      	ldr	r0, [pc, #4]	; (4059f4 <__sfp_lock_release+0x8>)
  4059ee:	f000 bbc1 	b.w	406174 <__retarget_lock_release_recursive>
  4059f2:	bf00      	nop
  4059f4:	20401688 	.word	0x20401688

004059f8 <__libc_fini_array>:
  4059f8:	b538      	push	{r3, r4, r5, lr}
  4059fa:	4c0a      	ldr	r4, [pc, #40]	; (405a24 <__libc_fini_array+0x2c>)
  4059fc:	4d0a      	ldr	r5, [pc, #40]	; (405a28 <__libc_fini_array+0x30>)
  4059fe:	1b64      	subs	r4, r4, r5
  405a00:	10a4      	asrs	r4, r4, #2
  405a02:	d00a      	beq.n	405a1a <__libc_fini_array+0x22>
  405a04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405a08:	3b01      	subs	r3, #1
  405a0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405a0e:	3c01      	subs	r4, #1
  405a10:	f855 3904 	ldr.w	r3, [r5], #-4
  405a14:	4798      	blx	r3
  405a16:	2c00      	cmp	r4, #0
  405a18:	d1f9      	bne.n	405a0e <__libc_fini_array+0x16>
  405a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a1e:	f002 bd19 	b.w	408454 <_fini>
  405a22:	bf00      	nop
  405a24:	00408464 	.word	0x00408464
  405a28:	00408460 	.word	0x00408460

00405a2c <__fputwc>:
  405a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a30:	b082      	sub	sp, #8
  405a32:	4680      	mov	r8, r0
  405a34:	4689      	mov	r9, r1
  405a36:	4614      	mov	r4, r2
  405a38:	f000 fb7a 	bl	406130 <__locale_mb_cur_max>
  405a3c:	2801      	cmp	r0, #1
  405a3e:	d036      	beq.n	405aae <__fputwc+0x82>
  405a40:	464a      	mov	r2, r9
  405a42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a46:	a901      	add	r1, sp, #4
  405a48:	4640      	mov	r0, r8
  405a4a:	f001 fd83 	bl	407554 <_wcrtomb_r>
  405a4e:	1c42      	adds	r2, r0, #1
  405a50:	4606      	mov	r6, r0
  405a52:	d025      	beq.n	405aa0 <__fputwc+0x74>
  405a54:	b3a8      	cbz	r0, 405ac2 <__fputwc+0x96>
  405a56:	f89d e004 	ldrb.w	lr, [sp, #4]
  405a5a:	2500      	movs	r5, #0
  405a5c:	f10d 0a04 	add.w	sl, sp, #4
  405a60:	e009      	b.n	405a76 <__fputwc+0x4a>
  405a62:	6823      	ldr	r3, [r4, #0]
  405a64:	1c5a      	adds	r2, r3, #1
  405a66:	6022      	str	r2, [r4, #0]
  405a68:	f883 e000 	strb.w	lr, [r3]
  405a6c:	3501      	adds	r5, #1
  405a6e:	42b5      	cmp	r5, r6
  405a70:	d227      	bcs.n	405ac2 <__fputwc+0x96>
  405a72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405a76:	68a3      	ldr	r3, [r4, #8]
  405a78:	3b01      	subs	r3, #1
  405a7a:	2b00      	cmp	r3, #0
  405a7c:	60a3      	str	r3, [r4, #8]
  405a7e:	daf0      	bge.n	405a62 <__fputwc+0x36>
  405a80:	69a7      	ldr	r7, [r4, #24]
  405a82:	42bb      	cmp	r3, r7
  405a84:	4671      	mov	r1, lr
  405a86:	4622      	mov	r2, r4
  405a88:	4640      	mov	r0, r8
  405a8a:	db02      	blt.n	405a92 <__fputwc+0x66>
  405a8c:	f1be 0f0a 	cmp.w	lr, #10
  405a90:	d1e7      	bne.n	405a62 <__fputwc+0x36>
  405a92:	f001 fd07 	bl	4074a4 <__swbuf_r>
  405a96:	1c43      	adds	r3, r0, #1
  405a98:	d1e8      	bne.n	405a6c <__fputwc+0x40>
  405a9a:	b002      	add	sp, #8
  405a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aa0:	89a3      	ldrh	r3, [r4, #12]
  405aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405aa6:	81a3      	strh	r3, [r4, #12]
  405aa8:	b002      	add	sp, #8
  405aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aae:	f109 33ff 	add.w	r3, r9, #4294967295
  405ab2:	2bfe      	cmp	r3, #254	; 0xfe
  405ab4:	d8c4      	bhi.n	405a40 <__fputwc+0x14>
  405ab6:	fa5f fe89 	uxtb.w	lr, r9
  405aba:	4606      	mov	r6, r0
  405abc:	f88d e004 	strb.w	lr, [sp, #4]
  405ac0:	e7cb      	b.n	405a5a <__fputwc+0x2e>
  405ac2:	4648      	mov	r0, r9
  405ac4:	b002      	add	sp, #8
  405ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aca:	bf00      	nop

00405acc <_fputwc_r>:
  405acc:	b530      	push	{r4, r5, lr}
  405ace:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405ad0:	f013 0f01 	tst.w	r3, #1
  405ad4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405ad8:	4614      	mov	r4, r2
  405ada:	b083      	sub	sp, #12
  405adc:	4605      	mov	r5, r0
  405ade:	b29a      	uxth	r2, r3
  405ae0:	d101      	bne.n	405ae6 <_fputwc_r+0x1a>
  405ae2:	0590      	lsls	r0, r2, #22
  405ae4:	d51c      	bpl.n	405b20 <_fputwc_r+0x54>
  405ae6:	0490      	lsls	r0, r2, #18
  405ae8:	d406      	bmi.n	405af8 <_fputwc_r+0x2c>
  405aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405af4:	81a3      	strh	r3, [r4, #12]
  405af6:	6662      	str	r2, [r4, #100]	; 0x64
  405af8:	4628      	mov	r0, r5
  405afa:	4622      	mov	r2, r4
  405afc:	f7ff ff96 	bl	405a2c <__fputwc>
  405b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405b02:	07da      	lsls	r2, r3, #31
  405b04:	4605      	mov	r5, r0
  405b06:	d402      	bmi.n	405b0e <_fputwc_r+0x42>
  405b08:	89a3      	ldrh	r3, [r4, #12]
  405b0a:	059b      	lsls	r3, r3, #22
  405b0c:	d502      	bpl.n	405b14 <_fputwc_r+0x48>
  405b0e:	4628      	mov	r0, r5
  405b10:	b003      	add	sp, #12
  405b12:	bd30      	pop	{r4, r5, pc}
  405b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b16:	f000 fb2d 	bl	406174 <__retarget_lock_release_recursive>
  405b1a:	4628      	mov	r0, r5
  405b1c:	b003      	add	sp, #12
  405b1e:	bd30      	pop	{r4, r5, pc}
  405b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b22:	9101      	str	r1, [sp, #4]
  405b24:	f000 fb24 	bl	406170 <__retarget_lock_acquire_recursive>
  405b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b2c:	9901      	ldr	r1, [sp, #4]
  405b2e:	b29a      	uxth	r2, r3
  405b30:	e7d9      	b.n	405ae6 <_fputwc_r+0x1a>
  405b32:	bf00      	nop

00405b34 <_malloc_trim_r>:
  405b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b36:	4f24      	ldr	r7, [pc, #144]	; (405bc8 <_malloc_trim_r+0x94>)
  405b38:	460c      	mov	r4, r1
  405b3a:	4606      	mov	r6, r0
  405b3c:	f000 ff1c 	bl	406978 <__malloc_lock>
  405b40:	68bb      	ldr	r3, [r7, #8]
  405b42:	685d      	ldr	r5, [r3, #4]
  405b44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405b48:	310f      	adds	r1, #15
  405b4a:	f025 0503 	bic.w	r5, r5, #3
  405b4e:	4429      	add	r1, r5
  405b50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405b54:	f021 010f 	bic.w	r1, r1, #15
  405b58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405b5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405b60:	db07      	blt.n	405b72 <_malloc_trim_r+0x3e>
  405b62:	2100      	movs	r1, #0
  405b64:	4630      	mov	r0, r6
  405b66:	f001 fc47 	bl	4073f8 <_sbrk_r>
  405b6a:	68bb      	ldr	r3, [r7, #8]
  405b6c:	442b      	add	r3, r5
  405b6e:	4298      	cmp	r0, r3
  405b70:	d004      	beq.n	405b7c <_malloc_trim_r+0x48>
  405b72:	4630      	mov	r0, r6
  405b74:	f000 ff06 	bl	406984 <__malloc_unlock>
  405b78:	2000      	movs	r0, #0
  405b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b7c:	4261      	negs	r1, r4
  405b7e:	4630      	mov	r0, r6
  405b80:	f001 fc3a 	bl	4073f8 <_sbrk_r>
  405b84:	3001      	adds	r0, #1
  405b86:	d00d      	beq.n	405ba4 <_malloc_trim_r+0x70>
  405b88:	4b10      	ldr	r3, [pc, #64]	; (405bcc <_malloc_trim_r+0x98>)
  405b8a:	68ba      	ldr	r2, [r7, #8]
  405b8c:	6819      	ldr	r1, [r3, #0]
  405b8e:	1b2d      	subs	r5, r5, r4
  405b90:	f045 0501 	orr.w	r5, r5, #1
  405b94:	4630      	mov	r0, r6
  405b96:	1b09      	subs	r1, r1, r4
  405b98:	6055      	str	r5, [r2, #4]
  405b9a:	6019      	str	r1, [r3, #0]
  405b9c:	f000 fef2 	bl	406984 <__malloc_unlock>
  405ba0:	2001      	movs	r0, #1
  405ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ba4:	2100      	movs	r1, #0
  405ba6:	4630      	mov	r0, r6
  405ba8:	f001 fc26 	bl	4073f8 <_sbrk_r>
  405bac:	68ba      	ldr	r2, [r7, #8]
  405bae:	1a83      	subs	r3, r0, r2
  405bb0:	2b0f      	cmp	r3, #15
  405bb2:	ddde      	ble.n	405b72 <_malloc_trim_r+0x3e>
  405bb4:	4c06      	ldr	r4, [pc, #24]	; (405bd0 <_malloc_trim_r+0x9c>)
  405bb6:	4905      	ldr	r1, [pc, #20]	; (405bcc <_malloc_trim_r+0x98>)
  405bb8:	6824      	ldr	r4, [r4, #0]
  405bba:	f043 0301 	orr.w	r3, r3, #1
  405bbe:	1b00      	subs	r0, r0, r4
  405bc0:	6053      	str	r3, [r2, #4]
  405bc2:	6008      	str	r0, [r1, #0]
  405bc4:	e7d5      	b.n	405b72 <_malloc_trim_r+0x3e>
  405bc6:	bf00      	nop
  405bc8:	204005b8 	.word	0x204005b8
  405bcc:	204015a8 	.word	0x204015a8
  405bd0:	204009c0 	.word	0x204009c0

00405bd4 <_free_r>:
  405bd4:	2900      	cmp	r1, #0
  405bd6:	d044      	beq.n	405c62 <_free_r+0x8e>
  405bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bdc:	460d      	mov	r5, r1
  405bde:	4680      	mov	r8, r0
  405be0:	f000 feca 	bl	406978 <__malloc_lock>
  405be4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405be8:	4969      	ldr	r1, [pc, #420]	; (405d90 <_free_r+0x1bc>)
  405bea:	f027 0301 	bic.w	r3, r7, #1
  405bee:	f1a5 0408 	sub.w	r4, r5, #8
  405bf2:	18e2      	adds	r2, r4, r3
  405bf4:	688e      	ldr	r6, [r1, #8]
  405bf6:	6850      	ldr	r0, [r2, #4]
  405bf8:	42b2      	cmp	r2, r6
  405bfa:	f020 0003 	bic.w	r0, r0, #3
  405bfe:	d05e      	beq.n	405cbe <_free_r+0xea>
  405c00:	07fe      	lsls	r6, r7, #31
  405c02:	6050      	str	r0, [r2, #4]
  405c04:	d40b      	bmi.n	405c1e <_free_r+0x4a>
  405c06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405c0a:	1be4      	subs	r4, r4, r7
  405c0c:	f101 0e08 	add.w	lr, r1, #8
  405c10:	68a5      	ldr	r5, [r4, #8]
  405c12:	4575      	cmp	r5, lr
  405c14:	443b      	add	r3, r7
  405c16:	d06d      	beq.n	405cf4 <_free_r+0x120>
  405c18:	68e7      	ldr	r7, [r4, #12]
  405c1a:	60ef      	str	r7, [r5, #12]
  405c1c:	60bd      	str	r5, [r7, #8]
  405c1e:	1815      	adds	r5, r2, r0
  405c20:	686d      	ldr	r5, [r5, #4]
  405c22:	07ed      	lsls	r5, r5, #31
  405c24:	d53e      	bpl.n	405ca4 <_free_r+0xd0>
  405c26:	f043 0201 	orr.w	r2, r3, #1
  405c2a:	6062      	str	r2, [r4, #4]
  405c2c:	50e3      	str	r3, [r4, r3]
  405c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c32:	d217      	bcs.n	405c64 <_free_r+0x90>
  405c34:	08db      	lsrs	r3, r3, #3
  405c36:	1c58      	adds	r0, r3, #1
  405c38:	109a      	asrs	r2, r3, #2
  405c3a:	684d      	ldr	r5, [r1, #4]
  405c3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405c40:	60a7      	str	r7, [r4, #8]
  405c42:	2301      	movs	r3, #1
  405c44:	4093      	lsls	r3, r2
  405c46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405c4a:	432b      	orrs	r3, r5
  405c4c:	3a08      	subs	r2, #8
  405c4e:	60e2      	str	r2, [r4, #12]
  405c50:	604b      	str	r3, [r1, #4]
  405c52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405c56:	60fc      	str	r4, [r7, #12]
  405c58:	4640      	mov	r0, r8
  405c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c5e:	f000 be91 	b.w	406984 <__malloc_unlock>
  405c62:	4770      	bx	lr
  405c64:	0a5a      	lsrs	r2, r3, #9
  405c66:	2a04      	cmp	r2, #4
  405c68:	d852      	bhi.n	405d10 <_free_r+0x13c>
  405c6a:	099a      	lsrs	r2, r3, #6
  405c6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405c70:	00ff      	lsls	r7, r7, #3
  405c72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405c76:	19c8      	adds	r0, r1, r7
  405c78:	59ca      	ldr	r2, [r1, r7]
  405c7a:	3808      	subs	r0, #8
  405c7c:	4290      	cmp	r0, r2
  405c7e:	d04f      	beq.n	405d20 <_free_r+0x14c>
  405c80:	6851      	ldr	r1, [r2, #4]
  405c82:	f021 0103 	bic.w	r1, r1, #3
  405c86:	428b      	cmp	r3, r1
  405c88:	d232      	bcs.n	405cf0 <_free_r+0x11c>
  405c8a:	6892      	ldr	r2, [r2, #8]
  405c8c:	4290      	cmp	r0, r2
  405c8e:	d1f7      	bne.n	405c80 <_free_r+0xac>
  405c90:	68c3      	ldr	r3, [r0, #12]
  405c92:	60a0      	str	r0, [r4, #8]
  405c94:	60e3      	str	r3, [r4, #12]
  405c96:	609c      	str	r4, [r3, #8]
  405c98:	60c4      	str	r4, [r0, #12]
  405c9a:	4640      	mov	r0, r8
  405c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ca0:	f000 be70 	b.w	406984 <__malloc_unlock>
  405ca4:	6895      	ldr	r5, [r2, #8]
  405ca6:	4f3b      	ldr	r7, [pc, #236]	; (405d94 <_free_r+0x1c0>)
  405ca8:	42bd      	cmp	r5, r7
  405caa:	4403      	add	r3, r0
  405cac:	d040      	beq.n	405d30 <_free_r+0x15c>
  405cae:	68d0      	ldr	r0, [r2, #12]
  405cb0:	60e8      	str	r0, [r5, #12]
  405cb2:	f043 0201 	orr.w	r2, r3, #1
  405cb6:	6085      	str	r5, [r0, #8]
  405cb8:	6062      	str	r2, [r4, #4]
  405cba:	50e3      	str	r3, [r4, r3]
  405cbc:	e7b7      	b.n	405c2e <_free_r+0x5a>
  405cbe:	07ff      	lsls	r7, r7, #31
  405cc0:	4403      	add	r3, r0
  405cc2:	d407      	bmi.n	405cd4 <_free_r+0x100>
  405cc4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405cc8:	1aa4      	subs	r4, r4, r2
  405cca:	4413      	add	r3, r2
  405ccc:	68a0      	ldr	r0, [r4, #8]
  405cce:	68e2      	ldr	r2, [r4, #12]
  405cd0:	60c2      	str	r2, [r0, #12]
  405cd2:	6090      	str	r0, [r2, #8]
  405cd4:	4a30      	ldr	r2, [pc, #192]	; (405d98 <_free_r+0x1c4>)
  405cd6:	6812      	ldr	r2, [r2, #0]
  405cd8:	f043 0001 	orr.w	r0, r3, #1
  405cdc:	4293      	cmp	r3, r2
  405cde:	6060      	str	r0, [r4, #4]
  405ce0:	608c      	str	r4, [r1, #8]
  405ce2:	d3b9      	bcc.n	405c58 <_free_r+0x84>
  405ce4:	4b2d      	ldr	r3, [pc, #180]	; (405d9c <_free_r+0x1c8>)
  405ce6:	4640      	mov	r0, r8
  405ce8:	6819      	ldr	r1, [r3, #0]
  405cea:	f7ff ff23 	bl	405b34 <_malloc_trim_r>
  405cee:	e7b3      	b.n	405c58 <_free_r+0x84>
  405cf0:	4610      	mov	r0, r2
  405cf2:	e7cd      	b.n	405c90 <_free_r+0xbc>
  405cf4:	1811      	adds	r1, r2, r0
  405cf6:	6849      	ldr	r1, [r1, #4]
  405cf8:	07c9      	lsls	r1, r1, #31
  405cfa:	d444      	bmi.n	405d86 <_free_r+0x1b2>
  405cfc:	6891      	ldr	r1, [r2, #8]
  405cfe:	68d2      	ldr	r2, [r2, #12]
  405d00:	60ca      	str	r2, [r1, #12]
  405d02:	4403      	add	r3, r0
  405d04:	f043 0001 	orr.w	r0, r3, #1
  405d08:	6091      	str	r1, [r2, #8]
  405d0a:	6060      	str	r0, [r4, #4]
  405d0c:	50e3      	str	r3, [r4, r3]
  405d0e:	e7a3      	b.n	405c58 <_free_r+0x84>
  405d10:	2a14      	cmp	r2, #20
  405d12:	d816      	bhi.n	405d42 <_free_r+0x16e>
  405d14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405d18:	00ff      	lsls	r7, r7, #3
  405d1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405d1e:	e7aa      	b.n	405c76 <_free_r+0xa2>
  405d20:	10aa      	asrs	r2, r5, #2
  405d22:	2301      	movs	r3, #1
  405d24:	684d      	ldr	r5, [r1, #4]
  405d26:	4093      	lsls	r3, r2
  405d28:	432b      	orrs	r3, r5
  405d2a:	604b      	str	r3, [r1, #4]
  405d2c:	4603      	mov	r3, r0
  405d2e:	e7b0      	b.n	405c92 <_free_r+0xbe>
  405d30:	f043 0201 	orr.w	r2, r3, #1
  405d34:	614c      	str	r4, [r1, #20]
  405d36:	610c      	str	r4, [r1, #16]
  405d38:	60e5      	str	r5, [r4, #12]
  405d3a:	60a5      	str	r5, [r4, #8]
  405d3c:	6062      	str	r2, [r4, #4]
  405d3e:	50e3      	str	r3, [r4, r3]
  405d40:	e78a      	b.n	405c58 <_free_r+0x84>
  405d42:	2a54      	cmp	r2, #84	; 0x54
  405d44:	d806      	bhi.n	405d54 <_free_r+0x180>
  405d46:	0b1a      	lsrs	r2, r3, #12
  405d48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405d4c:	00ff      	lsls	r7, r7, #3
  405d4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405d52:	e790      	b.n	405c76 <_free_r+0xa2>
  405d54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405d58:	d806      	bhi.n	405d68 <_free_r+0x194>
  405d5a:	0bda      	lsrs	r2, r3, #15
  405d5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405d60:	00ff      	lsls	r7, r7, #3
  405d62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405d66:	e786      	b.n	405c76 <_free_r+0xa2>
  405d68:	f240 5054 	movw	r0, #1364	; 0x554
  405d6c:	4282      	cmp	r2, r0
  405d6e:	d806      	bhi.n	405d7e <_free_r+0x1aa>
  405d70:	0c9a      	lsrs	r2, r3, #18
  405d72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405d76:	00ff      	lsls	r7, r7, #3
  405d78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405d7c:	e77b      	b.n	405c76 <_free_r+0xa2>
  405d7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405d82:	257e      	movs	r5, #126	; 0x7e
  405d84:	e777      	b.n	405c76 <_free_r+0xa2>
  405d86:	f043 0101 	orr.w	r1, r3, #1
  405d8a:	6061      	str	r1, [r4, #4]
  405d8c:	6013      	str	r3, [r2, #0]
  405d8e:	e763      	b.n	405c58 <_free_r+0x84>
  405d90:	204005b8 	.word	0x204005b8
  405d94:	204005c0 	.word	0x204005c0
  405d98:	204009c4 	.word	0x204009c4
  405d9c:	204015d8 	.word	0x204015d8

00405da0 <__sfvwrite_r>:
  405da0:	6893      	ldr	r3, [r2, #8]
  405da2:	2b00      	cmp	r3, #0
  405da4:	d073      	beq.n	405e8e <__sfvwrite_r+0xee>
  405da6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405daa:	898b      	ldrh	r3, [r1, #12]
  405dac:	b083      	sub	sp, #12
  405dae:	460c      	mov	r4, r1
  405db0:	0719      	lsls	r1, r3, #28
  405db2:	9000      	str	r0, [sp, #0]
  405db4:	4616      	mov	r6, r2
  405db6:	d526      	bpl.n	405e06 <__sfvwrite_r+0x66>
  405db8:	6922      	ldr	r2, [r4, #16]
  405dba:	b322      	cbz	r2, 405e06 <__sfvwrite_r+0x66>
  405dbc:	f013 0002 	ands.w	r0, r3, #2
  405dc0:	6835      	ldr	r5, [r6, #0]
  405dc2:	d02c      	beq.n	405e1e <__sfvwrite_r+0x7e>
  405dc4:	f04f 0900 	mov.w	r9, #0
  405dc8:	4fb0      	ldr	r7, [pc, #704]	; (40608c <__sfvwrite_r+0x2ec>)
  405dca:	46c8      	mov	r8, r9
  405dcc:	46b2      	mov	sl, r6
  405dce:	45b8      	cmp	r8, r7
  405dd0:	4643      	mov	r3, r8
  405dd2:	464a      	mov	r2, r9
  405dd4:	bf28      	it	cs
  405dd6:	463b      	movcs	r3, r7
  405dd8:	9800      	ldr	r0, [sp, #0]
  405dda:	f1b8 0f00 	cmp.w	r8, #0
  405dde:	d050      	beq.n	405e82 <__sfvwrite_r+0xe2>
  405de0:	69e1      	ldr	r1, [r4, #28]
  405de2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405de4:	47b0      	blx	r6
  405de6:	2800      	cmp	r0, #0
  405de8:	dd58      	ble.n	405e9c <__sfvwrite_r+0xfc>
  405dea:	f8da 3008 	ldr.w	r3, [sl, #8]
  405dee:	1a1b      	subs	r3, r3, r0
  405df0:	4481      	add	r9, r0
  405df2:	eba8 0800 	sub.w	r8, r8, r0
  405df6:	f8ca 3008 	str.w	r3, [sl, #8]
  405dfa:	2b00      	cmp	r3, #0
  405dfc:	d1e7      	bne.n	405dce <__sfvwrite_r+0x2e>
  405dfe:	2000      	movs	r0, #0
  405e00:	b003      	add	sp, #12
  405e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e06:	4621      	mov	r1, r4
  405e08:	9800      	ldr	r0, [sp, #0]
  405e0a:	f7fe fc7f 	bl	40470c <__swsetup_r>
  405e0e:	2800      	cmp	r0, #0
  405e10:	f040 8133 	bne.w	40607a <__sfvwrite_r+0x2da>
  405e14:	89a3      	ldrh	r3, [r4, #12]
  405e16:	6835      	ldr	r5, [r6, #0]
  405e18:	f013 0002 	ands.w	r0, r3, #2
  405e1c:	d1d2      	bne.n	405dc4 <__sfvwrite_r+0x24>
  405e1e:	f013 0901 	ands.w	r9, r3, #1
  405e22:	d145      	bne.n	405eb0 <__sfvwrite_r+0x110>
  405e24:	464f      	mov	r7, r9
  405e26:	9601      	str	r6, [sp, #4]
  405e28:	b337      	cbz	r7, 405e78 <__sfvwrite_r+0xd8>
  405e2a:	059a      	lsls	r2, r3, #22
  405e2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405e30:	f140 8083 	bpl.w	405f3a <__sfvwrite_r+0x19a>
  405e34:	4547      	cmp	r7, r8
  405e36:	46c3      	mov	fp, r8
  405e38:	f0c0 80ab 	bcc.w	405f92 <__sfvwrite_r+0x1f2>
  405e3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405e40:	f040 80ac 	bne.w	405f9c <__sfvwrite_r+0x1fc>
  405e44:	6820      	ldr	r0, [r4, #0]
  405e46:	46ba      	mov	sl, r7
  405e48:	465a      	mov	r2, fp
  405e4a:	4649      	mov	r1, r9
  405e4c:	f000 fd30 	bl	4068b0 <memmove>
  405e50:	68a2      	ldr	r2, [r4, #8]
  405e52:	6823      	ldr	r3, [r4, #0]
  405e54:	eba2 0208 	sub.w	r2, r2, r8
  405e58:	445b      	add	r3, fp
  405e5a:	60a2      	str	r2, [r4, #8]
  405e5c:	6023      	str	r3, [r4, #0]
  405e5e:	9a01      	ldr	r2, [sp, #4]
  405e60:	6893      	ldr	r3, [r2, #8]
  405e62:	eba3 030a 	sub.w	r3, r3, sl
  405e66:	44d1      	add	r9, sl
  405e68:	eba7 070a 	sub.w	r7, r7, sl
  405e6c:	6093      	str	r3, [r2, #8]
  405e6e:	2b00      	cmp	r3, #0
  405e70:	d0c5      	beq.n	405dfe <__sfvwrite_r+0x5e>
  405e72:	89a3      	ldrh	r3, [r4, #12]
  405e74:	2f00      	cmp	r7, #0
  405e76:	d1d8      	bne.n	405e2a <__sfvwrite_r+0x8a>
  405e78:	f8d5 9000 	ldr.w	r9, [r5]
  405e7c:	686f      	ldr	r7, [r5, #4]
  405e7e:	3508      	adds	r5, #8
  405e80:	e7d2      	b.n	405e28 <__sfvwrite_r+0x88>
  405e82:	f8d5 9000 	ldr.w	r9, [r5]
  405e86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e8a:	3508      	adds	r5, #8
  405e8c:	e79f      	b.n	405dce <__sfvwrite_r+0x2e>
  405e8e:	2000      	movs	r0, #0
  405e90:	4770      	bx	lr
  405e92:	4621      	mov	r1, r4
  405e94:	9800      	ldr	r0, [sp, #0]
  405e96:	f7ff fd0d 	bl	4058b4 <_fflush_r>
  405e9a:	b370      	cbz	r0, 405efa <__sfvwrite_r+0x15a>
  405e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ea4:	f04f 30ff 	mov.w	r0, #4294967295
  405ea8:	81a3      	strh	r3, [r4, #12]
  405eaa:	b003      	add	sp, #12
  405eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405eb0:	4681      	mov	r9, r0
  405eb2:	4633      	mov	r3, r6
  405eb4:	464e      	mov	r6, r9
  405eb6:	46a8      	mov	r8, r5
  405eb8:	469a      	mov	sl, r3
  405eba:	464d      	mov	r5, r9
  405ebc:	b34e      	cbz	r6, 405f12 <__sfvwrite_r+0x172>
  405ebe:	b380      	cbz	r0, 405f22 <__sfvwrite_r+0x182>
  405ec0:	6820      	ldr	r0, [r4, #0]
  405ec2:	6923      	ldr	r3, [r4, #16]
  405ec4:	6962      	ldr	r2, [r4, #20]
  405ec6:	45b1      	cmp	r9, r6
  405ec8:	46cb      	mov	fp, r9
  405eca:	bf28      	it	cs
  405ecc:	46b3      	movcs	fp, r6
  405ece:	4298      	cmp	r0, r3
  405ed0:	465f      	mov	r7, fp
  405ed2:	d904      	bls.n	405ede <__sfvwrite_r+0x13e>
  405ed4:	68a3      	ldr	r3, [r4, #8]
  405ed6:	4413      	add	r3, r2
  405ed8:	459b      	cmp	fp, r3
  405eda:	f300 80a6 	bgt.w	40602a <__sfvwrite_r+0x28a>
  405ede:	4593      	cmp	fp, r2
  405ee0:	db4b      	blt.n	405f7a <__sfvwrite_r+0x1da>
  405ee2:	4613      	mov	r3, r2
  405ee4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405ee6:	69e1      	ldr	r1, [r4, #28]
  405ee8:	9800      	ldr	r0, [sp, #0]
  405eea:	462a      	mov	r2, r5
  405eec:	47b8      	blx	r7
  405eee:	1e07      	subs	r7, r0, #0
  405ef0:	ddd4      	ble.n	405e9c <__sfvwrite_r+0xfc>
  405ef2:	ebb9 0907 	subs.w	r9, r9, r7
  405ef6:	d0cc      	beq.n	405e92 <__sfvwrite_r+0xf2>
  405ef8:	2001      	movs	r0, #1
  405efa:	f8da 3008 	ldr.w	r3, [sl, #8]
  405efe:	1bdb      	subs	r3, r3, r7
  405f00:	443d      	add	r5, r7
  405f02:	1bf6      	subs	r6, r6, r7
  405f04:	f8ca 3008 	str.w	r3, [sl, #8]
  405f08:	2b00      	cmp	r3, #0
  405f0a:	f43f af78 	beq.w	405dfe <__sfvwrite_r+0x5e>
  405f0e:	2e00      	cmp	r6, #0
  405f10:	d1d5      	bne.n	405ebe <__sfvwrite_r+0x11e>
  405f12:	f108 0308 	add.w	r3, r8, #8
  405f16:	e913 0060 	ldmdb	r3, {r5, r6}
  405f1a:	4698      	mov	r8, r3
  405f1c:	3308      	adds	r3, #8
  405f1e:	2e00      	cmp	r6, #0
  405f20:	d0f9      	beq.n	405f16 <__sfvwrite_r+0x176>
  405f22:	4632      	mov	r2, r6
  405f24:	210a      	movs	r1, #10
  405f26:	4628      	mov	r0, r5
  405f28:	f000 fc72 	bl	406810 <memchr>
  405f2c:	2800      	cmp	r0, #0
  405f2e:	f000 80a1 	beq.w	406074 <__sfvwrite_r+0x2d4>
  405f32:	3001      	adds	r0, #1
  405f34:	eba0 0905 	sub.w	r9, r0, r5
  405f38:	e7c2      	b.n	405ec0 <__sfvwrite_r+0x120>
  405f3a:	6820      	ldr	r0, [r4, #0]
  405f3c:	6923      	ldr	r3, [r4, #16]
  405f3e:	4298      	cmp	r0, r3
  405f40:	d802      	bhi.n	405f48 <__sfvwrite_r+0x1a8>
  405f42:	6963      	ldr	r3, [r4, #20]
  405f44:	429f      	cmp	r7, r3
  405f46:	d25d      	bcs.n	406004 <__sfvwrite_r+0x264>
  405f48:	45b8      	cmp	r8, r7
  405f4a:	bf28      	it	cs
  405f4c:	46b8      	movcs	r8, r7
  405f4e:	4642      	mov	r2, r8
  405f50:	4649      	mov	r1, r9
  405f52:	f000 fcad 	bl	4068b0 <memmove>
  405f56:	68a3      	ldr	r3, [r4, #8]
  405f58:	6822      	ldr	r2, [r4, #0]
  405f5a:	eba3 0308 	sub.w	r3, r3, r8
  405f5e:	4442      	add	r2, r8
  405f60:	60a3      	str	r3, [r4, #8]
  405f62:	6022      	str	r2, [r4, #0]
  405f64:	b10b      	cbz	r3, 405f6a <__sfvwrite_r+0x1ca>
  405f66:	46c2      	mov	sl, r8
  405f68:	e779      	b.n	405e5e <__sfvwrite_r+0xbe>
  405f6a:	4621      	mov	r1, r4
  405f6c:	9800      	ldr	r0, [sp, #0]
  405f6e:	f7ff fca1 	bl	4058b4 <_fflush_r>
  405f72:	2800      	cmp	r0, #0
  405f74:	d192      	bne.n	405e9c <__sfvwrite_r+0xfc>
  405f76:	46c2      	mov	sl, r8
  405f78:	e771      	b.n	405e5e <__sfvwrite_r+0xbe>
  405f7a:	465a      	mov	r2, fp
  405f7c:	4629      	mov	r1, r5
  405f7e:	f000 fc97 	bl	4068b0 <memmove>
  405f82:	68a2      	ldr	r2, [r4, #8]
  405f84:	6823      	ldr	r3, [r4, #0]
  405f86:	eba2 020b 	sub.w	r2, r2, fp
  405f8a:	445b      	add	r3, fp
  405f8c:	60a2      	str	r2, [r4, #8]
  405f8e:	6023      	str	r3, [r4, #0]
  405f90:	e7af      	b.n	405ef2 <__sfvwrite_r+0x152>
  405f92:	6820      	ldr	r0, [r4, #0]
  405f94:	46b8      	mov	r8, r7
  405f96:	46ba      	mov	sl, r7
  405f98:	46bb      	mov	fp, r7
  405f9a:	e755      	b.n	405e48 <__sfvwrite_r+0xa8>
  405f9c:	6962      	ldr	r2, [r4, #20]
  405f9e:	6820      	ldr	r0, [r4, #0]
  405fa0:	6921      	ldr	r1, [r4, #16]
  405fa2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405fa6:	eba0 0a01 	sub.w	sl, r0, r1
  405faa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405fae:	f10a 0001 	add.w	r0, sl, #1
  405fb2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405fb6:	4438      	add	r0, r7
  405fb8:	4540      	cmp	r0, r8
  405fba:	4642      	mov	r2, r8
  405fbc:	bf84      	itt	hi
  405fbe:	4680      	movhi	r8, r0
  405fc0:	4642      	movhi	r2, r8
  405fc2:	055b      	lsls	r3, r3, #21
  405fc4:	d544      	bpl.n	406050 <__sfvwrite_r+0x2b0>
  405fc6:	4611      	mov	r1, r2
  405fc8:	9800      	ldr	r0, [sp, #0]
  405fca:	f000 f955 	bl	406278 <_malloc_r>
  405fce:	4683      	mov	fp, r0
  405fd0:	2800      	cmp	r0, #0
  405fd2:	d055      	beq.n	406080 <__sfvwrite_r+0x2e0>
  405fd4:	4652      	mov	r2, sl
  405fd6:	6921      	ldr	r1, [r4, #16]
  405fd8:	f7fc fda8 	bl	402b2c <memcpy>
  405fdc:	89a3      	ldrh	r3, [r4, #12]
  405fde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405fe6:	81a3      	strh	r3, [r4, #12]
  405fe8:	eb0b 000a 	add.w	r0, fp, sl
  405fec:	eba8 030a 	sub.w	r3, r8, sl
  405ff0:	f8c4 b010 	str.w	fp, [r4, #16]
  405ff4:	f8c4 8014 	str.w	r8, [r4, #20]
  405ff8:	6020      	str	r0, [r4, #0]
  405ffa:	60a3      	str	r3, [r4, #8]
  405ffc:	46b8      	mov	r8, r7
  405ffe:	46ba      	mov	sl, r7
  406000:	46bb      	mov	fp, r7
  406002:	e721      	b.n	405e48 <__sfvwrite_r+0xa8>
  406004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406008:	42b9      	cmp	r1, r7
  40600a:	bf28      	it	cs
  40600c:	4639      	movcs	r1, r7
  40600e:	464a      	mov	r2, r9
  406010:	fb91 f1f3 	sdiv	r1, r1, r3
  406014:	9800      	ldr	r0, [sp, #0]
  406016:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406018:	fb03 f301 	mul.w	r3, r3, r1
  40601c:	69e1      	ldr	r1, [r4, #28]
  40601e:	47b0      	blx	r6
  406020:	f1b0 0a00 	subs.w	sl, r0, #0
  406024:	f73f af1b 	bgt.w	405e5e <__sfvwrite_r+0xbe>
  406028:	e738      	b.n	405e9c <__sfvwrite_r+0xfc>
  40602a:	461a      	mov	r2, r3
  40602c:	4629      	mov	r1, r5
  40602e:	9301      	str	r3, [sp, #4]
  406030:	f000 fc3e 	bl	4068b0 <memmove>
  406034:	6822      	ldr	r2, [r4, #0]
  406036:	9b01      	ldr	r3, [sp, #4]
  406038:	9800      	ldr	r0, [sp, #0]
  40603a:	441a      	add	r2, r3
  40603c:	6022      	str	r2, [r4, #0]
  40603e:	4621      	mov	r1, r4
  406040:	f7ff fc38 	bl	4058b4 <_fflush_r>
  406044:	9b01      	ldr	r3, [sp, #4]
  406046:	2800      	cmp	r0, #0
  406048:	f47f af28 	bne.w	405e9c <__sfvwrite_r+0xfc>
  40604c:	461f      	mov	r7, r3
  40604e:	e750      	b.n	405ef2 <__sfvwrite_r+0x152>
  406050:	9800      	ldr	r0, [sp, #0]
  406052:	f000 ff97 	bl	406f84 <_realloc_r>
  406056:	4683      	mov	fp, r0
  406058:	2800      	cmp	r0, #0
  40605a:	d1c5      	bne.n	405fe8 <__sfvwrite_r+0x248>
  40605c:	9d00      	ldr	r5, [sp, #0]
  40605e:	6921      	ldr	r1, [r4, #16]
  406060:	4628      	mov	r0, r5
  406062:	f7ff fdb7 	bl	405bd4 <_free_r>
  406066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40606a:	220c      	movs	r2, #12
  40606c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406070:	602a      	str	r2, [r5, #0]
  406072:	e715      	b.n	405ea0 <__sfvwrite_r+0x100>
  406074:	f106 0901 	add.w	r9, r6, #1
  406078:	e722      	b.n	405ec0 <__sfvwrite_r+0x120>
  40607a:	f04f 30ff 	mov.w	r0, #4294967295
  40607e:	e6bf      	b.n	405e00 <__sfvwrite_r+0x60>
  406080:	9a00      	ldr	r2, [sp, #0]
  406082:	230c      	movs	r3, #12
  406084:	6013      	str	r3, [r2, #0]
  406086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40608a:	e709      	b.n	405ea0 <__sfvwrite_r+0x100>
  40608c:	7ffffc00 	.word	0x7ffffc00

00406090 <_fwalk>:
  406090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406094:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406098:	d01b      	beq.n	4060d2 <_fwalk+0x42>
  40609a:	4688      	mov	r8, r1
  40609c:	2600      	movs	r6, #0
  40609e:	687d      	ldr	r5, [r7, #4]
  4060a0:	68bc      	ldr	r4, [r7, #8]
  4060a2:	3d01      	subs	r5, #1
  4060a4:	d40f      	bmi.n	4060c6 <_fwalk+0x36>
  4060a6:	89a3      	ldrh	r3, [r4, #12]
  4060a8:	2b01      	cmp	r3, #1
  4060aa:	f105 35ff 	add.w	r5, r5, #4294967295
  4060ae:	d906      	bls.n	4060be <_fwalk+0x2e>
  4060b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4060b4:	3301      	adds	r3, #1
  4060b6:	4620      	mov	r0, r4
  4060b8:	d001      	beq.n	4060be <_fwalk+0x2e>
  4060ba:	47c0      	blx	r8
  4060bc:	4306      	orrs	r6, r0
  4060be:	1c6b      	adds	r3, r5, #1
  4060c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4060c4:	d1ef      	bne.n	4060a6 <_fwalk+0x16>
  4060c6:	683f      	ldr	r7, [r7, #0]
  4060c8:	2f00      	cmp	r7, #0
  4060ca:	d1e8      	bne.n	40609e <_fwalk+0xe>
  4060cc:	4630      	mov	r0, r6
  4060ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060d2:	463e      	mov	r6, r7
  4060d4:	4630      	mov	r0, r6
  4060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060da:	bf00      	nop

004060dc <_fwalk_reent>:
  4060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4060e4:	d01f      	beq.n	406126 <_fwalk_reent+0x4a>
  4060e6:	4688      	mov	r8, r1
  4060e8:	4606      	mov	r6, r0
  4060ea:	f04f 0900 	mov.w	r9, #0
  4060ee:	687d      	ldr	r5, [r7, #4]
  4060f0:	68bc      	ldr	r4, [r7, #8]
  4060f2:	3d01      	subs	r5, #1
  4060f4:	d411      	bmi.n	40611a <_fwalk_reent+0x3e>
  4060f6:	89a3      	ldrh	r3, [r4, #12]
  4060f8:	2b01      	cmp	r3, #1
  4060fa:	f105 35ff 	add.w	r5, r5, #4294967295
  4060fe:	d908      	bls.n	406112 <_fwalk_reent+0x36>
  406100:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406104:	3301      	adds	r3, #1
  406106:	4621      	mov	r1, r4
  406108:	4630      	mov	r0, r6
  40610a:	d002      	beq.n	406112 <_fwalk_reent+0x36>
  40610c:	47c0      	blx	r8
  40610e:	ea49 0900 	orr.w	r9, r9, r0
  406112:	1c6b      	adds	r3, r5, #1
  406114:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406118:	d1ed      	bne.n	4060f6 <_fwalk_reent+0x1a>
  40611a:	683f      	ldr	r7, [r7, #0]
  40611c:	2f00      	cmp	r7, #0
  40611e:	d1e6      	bne.n	4060ee <_fwalk_reent+0x12>
  406120:	4648      	mov	r0, r9
  406122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406126:	46b9      	mov	r9, r7
  406128:	4648      	mov	r0, r9
  40612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40612e:	bf00      	nop

00406130 <__locale_mb_cur_max>:
  406130:	4b04      	ldr	r3, [pc, #16]	; (406144 <__locale_mb_cur_max+0x14>)
  406132:	4a05      	ldr	r2, [pc, #20]	; (406148 <__locale_mb_cur_max+0x18>)
  406134:	681b      	ldr	r3, [r3, #0]
  406136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406138:	2b00      	cmp	r3, #0
  40613a:	bf08      	it	eq
  40613c:	4613      	moveq	r3, r2
  40613e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406142:	4770      	bx	lr
  406144:	20400018 	.word	0x20400018
  406148:	2040044c 	.word	0x2040044c

0040614c <_localeconv_r>:
  40614c:	4a04      	ldr	r2, [pc, #16]	; (406160 <_localeconv_r+0x14>)
  40614e:	4b05      	ldr	r3, [pc, #20]	; (406164 <_localeconv_r+0x18>)
  406150:	6812      	ldr	r2, [r2, #0]
  406152:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406154:	2800      	cmp	r0, #0
  406156:	bf08      	it	eq
  406158:	4618      	moveq	r0, r3
  40615a:	30f0      	adds	r0, #240	; 0xf0
  40615c:	4770      	bx	lr
  40615e:	bf00      	nop
  406160:	20400018 	.word	0x20400018
  406164:	2040044c 	.word	0x2040044c

00406168 <__retarget_lock_init_recursive>:
  406168:	4770      	bx	lr
  40616a:	bf00      	nop

0040616c <__retarget_lock_close_recursive>:
  40616c:	4770      	bx	lr
  40616e:	bf00      	nop

00406170 <__retarget_lock_acquire_recursive>:
  406170:	4770      	bx	lr
  406172:	bf00      	nop

00406174 <__retarget_lock_release_recursive>:
  406174:	4770      	bx	lr
  406176:	bf00      	nop

00406178 <__swhatbuf_r>:
  406178:	b570      	push	{r4, r5, r6, lr}
  40617a:	460c      	mov	r4, r1
  40617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406180:	2900      	cmp	r1, #0
  406182:	b090      	sub	sp, #64	; 0x40
  406184:	4615      	mov	r5, r2
  406186:	461e      	mov	r6, r3
  406188:	db14      	blt.n	4061b4 <__swhatbuf_r+0x3c>
  40618a:	aa01      	add	r2, sp, #4
  40618c:	f001 fb36 	bl	4077fc <_fstat_r>
  406190:	2800      	cmp	r0, #0
  406192:	db0f      	blt.n	4061b4 <__swhatbuf_r+0x3c>
  406194:	9a02      	ldr	r2, [sp, #8]
  406196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40619a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40619e:	fab2 f282 	clz	r2, r2
  4061a2:	0952      	lsrs	r2, r2, #5
  4061a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4061a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4061ac:	6032      	str	r2, [r6, #0]
  4061ae:	602b      	str	r3, [r5, #0]
  4061b0:	b010      	add	sp, #64	; 0x40
  4061b2:	bd70      	pop	{r4, r5, r6, pc}
  4061b4:	89a2      	ldrh	r2, [r4, #12]
  4061b6:	2300      	movs	r3, #0
  4061b8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4061bc:	6033      	str	r3, [r6, #0]
  4061be:	d004      	beq.n	4061ca <__swhatbuf_r+0x52>
  4061c0:	2240      	movs	r2, #64	; 0x40
  4061c2:	4618      	mov	r0, r3
  4061c4:	602a      	str	r2, [r5, #0]
  4061c6:	b010      	add	sp, #64	; 0x40
  4061c8:	bd70      	pop	{r4, r5, r6, pc}
  4061ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4061ce:	602b      	str	r3, [r5, #0]
  4061d0:	b010      	add	sp, #64	; 0x40
  4061d2:	bd70      	pop	{r4, r5, r6, pc}

004061d4 <__smakebuf_r>:
  4061d4:	898a      	ldrh	r2, [r1, #12]
  4061d6:	0792      	lsls	r2, r2, #30
  4061d8:	460b      	mov	r3, r1
  4061da:	d506      	bpl.n	4061ea <__smakebuf_r+0x16>
  4061dc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4061e0:	2101      	movs	r1, #1
  4061e2:	601a      	str	r2, [r3, #0]
  4061e4:	611a      	str	r2, [r3, #16]
  4061e6:	6159      	str	r1, [r3, #20]
  4061e8:	4770      	bx	lr
  4061ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061ec:	b083      	sub	sp, #12
  4061ee:	ab01      	add	r3, sp, #4
  4061f0:	466a      	mov	r2, sp
  4061f2:	460c      	mov	r4, r1
  4061f4:	4606      	mov	r6, r0
  4061f6:	f7ff ffbf 	bl	406178 <__swhatbuf_r>
  4061fa:	9900      	ldr	r1, [sp, #0]
  4061fc:	4605      	mov	r5, r0
  4061fe:	4630      	mov	r0, r6
  406200:	f000 f83a 	bl	406278 <_malloc_r>
  406204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406208:	b1d8      	cbz	r0, 406242 <__smakebuf_r+0x6e>
  40620a:	9a01      	ldr	r2, [sp, #4]
  40620c:	4f15      	ldr	r7, [pc, #84]	; (406264 <__smakebuf_r+0x90>)
  40620e:	9900      	ldr	r1, [sp, #0]
  406210:	63f7      	str	r7, [r6, #60]	; 0x3c
  406212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406216:	81a3      	strh	r3, [r4, #12]
  406218:	6020      	str	r0, [r4, #0]
  40621a:	6120      	str	r0, [r4, #16]
  40621c:	6161      	str	r1, [r4, #20]
  40621e:	b91a      	cbnz	r2, 406228 <__smakebuf_r+0x54>
  406220:	432b      	orrs	r3, r5
  406222:	81a3      	strh	r3, [r4, #12]
  406224:	b003      	add	sp, #12
  406226:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406228:	4630      	mov	r0, r6
  40622a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40622e:	f001 faf9 	bl	407824 <_isatty_r>
  406232:	b1a0      	cbz	r0, 40625e <__smakebuf_r+0x8a>
  406234:	89a3      	ldrh	r3, [r4, #12]
  406236:	f023 0303 	bic.w	r3, r3, #3
  40623a:	f043 0301 	orr.w	r3, r3, #1
  40623e:	b21b      	sxth	r3, r3
  406240:	e7ee      	b.n	406220 <__smakebuf_r+0x4c>
  406242:	059a      	lsls	r2, r3, #22
  406244:	d4ee      	bmi.n	406224 <__smakebuf_r+0x50>
  406246:	f023 0303 	bic.w	r3, r3, #3
  40624a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40624e:	f043 0302 	orr.w	r3, r3, #2
  406252:	2101      	movs	r1, #1
  406254:	81a3      	strh	r3, [r4, #12]
  406256:	6022      	str	r2, [r4, #0]
  406258:	6122      	str	r2, [r4, #16]
  40625a:	6161      	str	r1, [r4, #20]
  40625c:	e7e2      	b.n	406224 <__smakebuf_r+0x50>
  40625e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406262:	e7dd      	b.n	406220 <__smakebuf_r+0x4c>
  406264:	0040592d 	.word	0x0040592d

00406268 <malloc>:
  406268:	4b02      	ldr	r3, [pc, #8]	; (406274 <malloc+0xc>)
  40626a:	4601      	mov	r1, r0
  40626c:	6818      	ldr	r0, [r3, #0]
  40626e:	f000 b803 	b.w	406278 <_malloc_r>
  406272:	bf00      	nop
  406274:	20400018 	.word	0x20400018

00406278 <_malloc_r>:
  406278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40627c:	f101 060b 	add.w	r6, r1, #11
  406280:	2e16      	cmp	r6, #22
  406282:	b083      	sub	sp, #12
  406284:	4605      	mov	r5, r0
  406286:	f240 809e 	bls.w	4063c6 <_malloc_r+0x14e>
  40628a:	f036 0607 	bics.w	r6, r6, #7
  40628e:	f100 80bd 	bmi.w	40640c <_malloc_r+0x194>
  406292:	42b1      	cmp	r1, r6
  406294:	f200 80ba 	bhi.w	40640c <_malloc_r+0x194>
  406298:	f000 fb6e 	bl	406978 <__malloc_lock>
  40629c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4062a0:	f0c0 8293 	bcc.w	4067ca <_malloc_r+0x552>
  4062a4:	0a73      	lsrs	r3, r6, #9
  4062a6:	f000 80b8 	beq.w	40641a <_malloc_r+0x1a2>
  4062aa:	2b04      	cmp	r3, #4
  4062ac:	f200 8179 	bhi.w	4065a2 <_malloc_r+0x32a>
  4062b0:	09b3      	lsrs	r3, r6, #6
  4062b2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4062b6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4062ba:	00c3      	lsls	r3, r0, #3
  4062bc:	4fbf      	ldr	r7, [pc, #764]	; (4065bc <_malloc_r+0x344>)
  4062be:	443b      	add	r3, r7
  4062c0:	f1a3 0108 	sub.w	r1, r3, #8
  4062c4:	685c      	ldr	r4, [r3, #4]
  4062c6:	42a1      	cmp	r1, r4
  4062c8:	d106      	bne.n	4062d8 <_malloc_r+0x60>
  4062ca:	e00c      	b.n	4062e6 <_malloc_r+0x6e>
  4062cc:	2a00      	cmp	r2, #0
  4062ce:	f280 80aa 	bge.w	406426 <_malloc_r+0x1ae>
  4062d2:	68e4      	ldr	r4, [r4, #12]
  4062d4:	42a1      	cmp	r1, r4
  4062d6:	d006      	beq.n	4062e6 <_malloc_r+0x6e>
  4062d8:	6863      	ldr	r3, [r4, #4]
  4062da:	f023 0303 	bic.w	r3, r3, #3
  4062de:	1b9a      	subs	r2, r3, r6
  4062e0:	2a0f      	cmp	r2, #15
  4062e2:	ddf3      	ble.n	4062cc <_malloc_r+0x54>
  4062e4:	4670      	mov	r0, lr
  4062e6:	693c      	ldr	r4, [r7, #16]
  4062e8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4065d0 <_malloc_r+0x358>
  4062ec:	4574      	cmp	r4, lr
  4062ee:	f000 81ab 	beq.w	406648 <_malloc_r+0x3d0>
  4062f2:	6863      	ldr	r3, [r4, #4]
  4062f4:	f023 0303 	bic.w	r3, r3, #3
  4062f8:	1b9a      	subs	r2, r3, r6
  4062fa:	2a0f      	cmp	r2, #15
  4062fc:	f300 8190 	bgt.w	406620 <_malloc_r+0x3a8>
  406300:	2a00      	cmp	r2, #0
  406302:	f8c7 e014 	str.w	lr, [r7, #20]
  406306:	f8c7 e010 	str.w	lr, [r7, #16]
  40630a:	f280 809d 	bge.w	406448 <_malloc_r+0x1d0>
  40630e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406312:	f080 8161 	bcs.w	4065d8 <_malloc_r+0x360>
  406316:	08db      	lsrs	r3, r3, #3
  406318:	f103 0c01 	add.w	ip, r3, #1
  40631c:	1099      	asrs	r1, r3, #2
  40631e:	687a      	ldr	r2, [r7, #4]
  406320:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406324:	f8c4 8008 	str.w	r8, [r4, #8]
  406328:	2301      	movs	r3, #1
  40632a:	408b      	lsls	r3, r1
  40632c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406330:	4313      	orrs	r3, r2
  406332:	3908      	subs	r1, #8
  406334:	60e1      	str	r1, [r4, #12]
  406336:	607b      	str	r3, [r7, #4]
  406338:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40633c:	f8c8 400c 	str.w	r4, [r8, #12]
  406340:	1082      	asrs	r2, r0, #2
  406342:	2401      	movs	r4, #1
  406344:	4094      	lsls	r4, r2
  406346:	429c      	cmp	r4, r3
  406348:	f200 808b 	bhi.w	406462 <_malloc_r+0x1ea>
  40634c:	421c      	tst	r4, r3
  40634e:	d106      	bne.n	40635e <_malloc_r+0xe6>
  406350:	f020 0003 	bic.w	r0, r0, #3
  406354:	0064      	lsls	r4, r4, #1
  406356:	421c      	tst	r4, r3
  406358:	f100 0004 	add.w	r0, r0, #4
  40635c:	d0fa      	beq.n	406354 <_malloc_r+0xdc>
  40635e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406362:	46cc      	mov	ip, r9
  406364:	4680      	mov	r8, r0
  406366:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40636a:	459c      	cmp	ip, r3
  40636c:	d107      	bne.n	40637e <_malloc_r+0x106>
  40636e:	e16d      	b.n	40664c <_malloc_r+0x3d4>
  406370:	2a00      	cmp	r2, #0
  406372:	f280 817b 	bge.w	40666c <_malloc_r+0x3f4>
  406376:	68db      	ldr	r3, [r3, #12]
  406378:	459c      	cmp	ip, r3
  40637a:	f000 8167 	beq.w	40664c <_malloc_r+0x3d4>
  40637e:	6859      	ldr	r1, [r3, #4]
  406380:	f021 0103 	bic.w	r1, r1, #3
  406384:	1b8a      	subs	r2, r1, r6
  406386:	2a0f      	cmp	r2, #15
  406388:	ddf2      	ble.n	406370 <_malloc_r+0xf8>
  40638a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40638e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406392:	9300      	str	r3, [sp, #0]
  406394:	199c      	adds	r4, r3, r6
  406396:	4628      	mov	r0, r5
  406398:	f046 0601 	orr.w	r6, r6, #1
  40639c:	f042 0501 	orr.w	r5, r2, #1
  4063a0:	605e      	str	r6, [r3, #4]
  4063a2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4063a6:	f8cc 8008 	str.w	r8, [ip, #8]
  4063aa:	617c      	str	r4, [r7, #20]
  4063ac:	613c      	str	r4, [r7, #16]
  4063ae:	f8c4 e00c 	str.w	lr, [r4, #12]
  4063b2:	f8c4 e008 	str.w	lr, [r4, #8]
  4063b6:	6065      	str	r5, [r4, #4]
  4063b8:	505a      	str	r2, [r3, r1]
  4063ba:	f000 fae3 	bl	406984 <__malloc_unlock>
  4063be:	9b00      	ldr	r3, [sp, #0]
  4063c0:	f103 0408 	add.w	r4, r3, #8
  4063c4:	e01e      	b.n	406404 <_malloc_r+0x18c>
  4063c6:	2910      	cmp	r1, #16
  4063c8:	d820      	bhi.n	40640c <_malloc_r+0x194>
  4063ca:	f000 fad5 	bl	406978 <__malloc_lock>
  4063ce:	2610      	movs	r6, #16
  4063d0:	2318      	movs	r3, #24
  4063d2:	2002      	movs	r0, #2
  4063d4:	4f79      	ldr	r7, [pc, #484]	; (4065bc <_malloc_r+0x344>)
  4063d6:	443b      	add	r3, r7
  4063d8:	f1a3 0208 	sub.w	r2, r3, #8
  4063dc:	685c      	ldr	r4, [r3, #4]
  4063de:	4294      	cmp	r4, r2
  4063e0:	f000 813d 	beq.w	40665e <_malloc_r+0x3e6>
  4063e4:	6863      	ldr	r3, [r4, #4]
  4063e6:	68e1      	ldr	r1, [r4, #12]
  4063e8:	68a6      	ldr	r6, [r4, #8]
  4063ea:	f023 0303 	bic.w	r3, r3, #3
  4063ee:	4423      	add	r3, r4
  4063f0:	4628      	mov	r0, r5
  4063f2:	685a      	ldr	r2, [r3, #4]
  4063f4:	60f1      	str	r1, [r6, #12]
  4063f6:	f042 0201 	orr.w	r2, r2, #1
  4063fa:	608e      	str	r6, [r1, #8]
  4063fc:	605a      	str	r2, [r3, #4]
  4063fe:	f000 fac1 	bl	406984 <__malloc_unlock>
  406402:	3408      	adds	r4, #8
  406404:	4620      	mov	r0, r4
  406406:	b003      	add	sp, #12
  406408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40640c:	2400      	movs	r4, #0
  40640e:	230c      	movs	r3, #12
  406410:	4620      	mov	r0, r4
  406412:	602b      	str	r3, [r5, #0]
  406414:	b003      	add	sp, #12
  406416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40641a:	2040      	movs	r0, #64	; 0x40
  40641c:	f44f 7300 	mov.w	r3, #512	; 0x200
  406420:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406424:	e74a      	b.n	4062bc <_malloc_r+0x44>
  406426:	4423      	add	r3, r4
  406428:	68e1      	ldr	r1, [r4, #12]
  40642a:	685a      	ldr	r2, [r3, #4]
  40642c:	68a6      	ldr	r6, [r4, #8]
  40642e:	f042 0201 	orr.w	r2, r2, #1
  406432:	60f1      	str	r1, [r6, #12]
  406434:	4628      	mov	r0, r5
  406436:	608e      	str	r6, [r1, #8]
  406438:	605a      	str	r2, [r3, #4]
  40643a:	f000 faa3 	bl	406984 <__malloc_unlock>
  40643e:	3408      	adds	r4, #8
  406440:	4620      	mov	r0, r4
  406442:	b003      	add	sp, #12
  406444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406448:	4423      	add	r3, r4
  40644a:	4628      	mov	r0, r5
  40644c:	685a      	ldr	r2, [r3, #4]
  40644e:	f042 0201 	orr.w	r2, r2, #1
  406452:	605a      	str	r2, [r3, #4]
  406454:	f000 fa96 	bl	406984 <__malloc_unlock>
  406458:	3408      	adds	r4, #8
  40645a:	4620      	mov	r0, r4
  40645c:	b003      	add	sp, #12
  40645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406462:	68bc      	ldr	r4, [r7, #8]
  406464:	6863      	ldr	r3, [r4, #4]
  406466:	f023 0803 	bic.w	r8, r3, #3
  40646a:	45b0      	cmp	r8, r6
  40646c:	d304      	bcc.n	406478 <_malloc_r+0x200>
  40646e:	eba8 0306 	sub.w	r3, r8, r6
  406472:	2b0f      	cmp	r3, #15
  406474:	f300 8085 	bgt.w	406582 <_malloc_r+0x30a>
  406478:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4065d4 <_malloc_r+0x35c>
  40647c:	4b50      	ldr	r3, [pc, #320]	; (4065c0 <_malloc_r+0x348>)
  40647e:	f8d9 2000 	ldr.w	r2, [r9]
  406482:	681b      	ldr	r3, [r3, #0]
  406484:	3201      	adds	r2, #1
  406486:	4433      	add	r3, r6
  406488:	eb04 0a08 	add.w	sl, r4, r8
  40648c:	f000 8155 	beq.w	40673a <_malloc_r+0x4c2>
  406490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406494:	330f      	adds	r3, #15
  406496:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40649a:	f02b 0b0f 	bic.w	fp, fp, #15
  40649e:	4659      	mov	r1, fp
  4064a0:	4628      	mov	r0, r5
  4064a2:	f000 ffa9 	bl	4073f8 <_sbrk_r>
  4064a6:	1c41      	adds	r1, r0, #1
  4064a8:	4602      	mov	r2, r0
  4064aa:	f000 80fc 	beq.w	4066a6 <_malloc_r+0x42e>
  4064ae:	4582      	cmp	sl, r0
  4064b0:	f200 80f7 	bhi.w	4066a2 <_malloc_r+0x42a>
  4064b4:	4b43      	ldr	r3, [pc, #268]	; (4065c4 <_malloc_r+0x34c>)
  4064b6:	6819      	ldr	r1, [r3, #0]
  4064b8:	4459      	add	r1, fp
  4064ba:	6019      	str	r1, [r3, #0]
  4064bc:	f000 814d 	beq.w	40675a <_malloc_r+0x4e2>
  4064c0:	f8d9 0000 	ldr.w	r0, [r9]
  4064c4:	3001      	adds	r0, #1
  4064c6:	bf1b      	ittet	ne
  4064c8:	eba2 0a0a 	subne.w	sl, r2, sl
  4064cc:	4451      	addne	r1, sl
  4064ce:	f8c9 2000 	streq.w	r2, [r9]
  4064d2:	6019      	strne	r1, [r3, #0]
  4064d4:	f012 0107 	ands.w	r1, r2, #7
  4064d8:	f000 8115 	beq.w	406706 <_malloc_r+0x48e>
  4064dc:	f1c1 0008 	rsb	r0, r1, #8
  4064e0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4064e4:	4402      	add	r2, r0
  4064e6:	3108      	adds	r1, #8
  4064e8:	eb02 090b 	add.w	r9, r2, fp
  4064ec:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4064f0:	eba1 0909 	sub.w	r9, r1, r9
  4064f4:	4649      	mov	r1, r9
  4064f6:	4628      	mov	r0, r5
  4064f8:	9301      	str	r3, [sp, #4]
  4064fa:	9200      	str	r2, [sp, #0]
  4064fc:	f000 ff7c 	bl	4073f8 <_sbrk_r>
  406500:	1c43      	adds	r3, r0, #1
  406502:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406506:	f000 8143 	beq.w	406790 <_malloc_r+0x518>
  40650a:	1a80      	subs	r0, r0, r2
  40650c:	4448      	add	r0, r9
  40650e:	f040 0001 	orr.w	r0, r0, #1
  406512:	6819      	ldr	r1, [r3, #0]
  406514:	60ba      	str	r2, [r7, #8]
  406516:	4449      	add	r1, r9
  406518:	42bc      	cmp	r4, r7
  40651a:	6050      	str	r0, [r2, #4]
  40651c:	6019      	str	r1, [r3, #0]
  40651e:	d017      	beq.n	406550 <_malloc_r+0x2d8>
  406520:	f1b8 0f0f 	cmp.w	r8, #15
  406524:	f240 80fb 	bls.w	40671e <_malloc_r+0x4a6>
  406528:	6860      	ldr	r0, [r4, #4]
  40652a:	f1a8 020c 	sub.w	r2, r8, #12
  40652e:	f022 0207 	bic.w	r2, r2, #7
  406532:	eb04 0e02 	add.w	lr, r4, r2
  406536:	f000 0001 	and.w	r0, r0, #1
  40653a:	f04f 0c05 	mov.w	ip, #5
  40653e:	4310      	orrs	r0, r2
  406540:	2a0f      	cmp	r2, #15
  406542:	6060      	str	r0, [r4, #4]
  406544:	f8ce c004 	str.w	ip, [lr, #4]
  406548:	f8ce c008 	str.w	ip, [lr, #8]
  40654c:	f200 8117 	bhi.w	40677e <_malloc_r+0x506>
  406550:	4b1d      	ldr	r3, [pc, #116]	; (4065c8 <_malloc_r+0x350>)
  406552:	68bc      	ldr	r4, [r7, #8]
  406554:	681a      	ldr	r2, [r3, #0]
  406556:	4291      	cmp	r1, r2
  406558:	bf88      	it	hi
  40655a:	6019      	strhi	r1, [r3, #0]
  40655c:	4b1b      	ldr	r3, [pc, #108]	; (4065cc <_malloc_r+0x354>)
  40655e:	681a      	ldr	r2, [r3, #0]
  406560:	4291      	cmp	r1, r2
  406562:	6862      	ldr	r2, [r4, #4]
  406564:	bf88      	it	hi
  406566:	6019      	strhi	r1, [r3, #0]
  406568:	f022 0203 	bic.w	r2, r2, #3
  40656c:	4296      	cmp	r6, r2
  40656e:	eba2 0306 	sub.w	r3, r2, r6
  406572:	d801      	bhi.n	406578 <_malloc_r+0x300>
  406574:	2b0f      	cmp	r3, #15
  406576:	dc04      	bgt.n	406582 <_malloc_r+0x30a>
  406578:	4628      	mov	r0, r5
  40657a:	f000 fa03 	bl	406984 <__malloc_unlock>
  40657e:	2400      	movs	r4, #0
  406580:	e740      	b.n	406404 <_malloc_r+0x18c>
  406582:	19a2      	adds	r2, r4, r6
  406584:	f043 0301 	orr.w	r3, r3, #1
  406588:	f046 0601 	orr.w	r6, r6, #1
  40658c:	6066      	str	r6, [r4, #4]
  40658e:	4628      	mov	r0, r5
  406590:	60ba      	str	r2, [r7, #8]
  406592:	6053      	str	r3, [r2, #4]
  406594:	f000 f9f6 	bl	406984 <__malloc_unlock>
  406598:	3408      	adds	r4, #8
  40659a:	4620      	mov	r0, r4
  40659c:	b003      	add	sp, #12
  40659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065a2:	2b14      	cmp	r3, #20
  4065a4:	d971      	bls.n	40668a <_malloc_r+0x412>
  4065a6:	2b54      	cmp	r3, #84	; 0x54
  4065a8:	f200 80a3 	bhi.w	4066f2 <_malloc_r+0x47a>
  4065ac:	0b33      	lsrs	r3, r6, #12
  4065ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4065b2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4065b6:	00c3      	lsls	r3, r0, #3
  4065b8:	e680      	b.n	4062bc <_malloc_r+0x44>
  4065ba:	bf00      	nop
  4065bc:	204005b8 	.word	0x204005b8
  4065c0:	204015d8 	.word	0x204015d8
  4065c4:	204015a8 	.word	0x204015a8
  4065c8:	204015d0 	.word	0x204015d0
  4065cc:	204015d4 	.word	0x204015d4
  4065d0:	204005c0 	.word	0x204005c0
  4065d4:	204009c0 	.word	0x204009c0
  4065d8:	0a5a      	lsrs	r2, r3, #9
  4065da:	2a04      	cmp	r2, #4
  4065dc:	d95b      	bls.n	406696 <_malloc_r+0x41e>
  4065de:	2a14      	cmp	r2, #20
  4065e0:	f200 80ae 	bhi.w	406740 <_malloc_r+0x4c8>
  4065e4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4065e8:	00c9      	lsls	r1, r1, #3
  4065ea:	325b      	adds	r2, #91	; 0x5b
  4065ec:	eb07 0c01 	add.w	ip, r7, r1
  4065f0:	5879      	ldr	r1, [r7, r1]
  4065f2:	f1ac 0c08 	sub.w	ip, ip, #8
  4065f6:	458c      	cmp	ip, r1
  4065f8:	f000 8088 	beq.w	40670c <_malloc_r+0x494>
  4065fc:	684a      	ldr	r2, [r1, #4]
  4065fe:	f022 0203 	bic.w	r2, r2, #3
  406602:	4293      	cmp	r3, r2
  406604:	d273      	bcs.n	4066ee <_malloc_r+0x476>
  406606:	6889      	ldr	r1, [r1, #8]
  406608:	458c      	cmp	ip, r1
  40660a:	d1f7      	bne.n	4065fc <_malloc_r+0x384>
  40660c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406610:	687b      	ldr	r3, [r7, #4]
  406612:	60e2      	str	r2, [r4, #12]
  406614:	f8c4 c008 	str.w	ip, [r4, #8]
  406618:	6094      	str	r4, [r2, #8]
  40661a:	f8cc 400c 	str.w	r4, [ip, #12]
  40661e:	e68f      	b.n	406340 <_malloc_r+0xc8>
  406620:	19a1      	adds	r1, r4, r6
  406622:	f046 0c01 	orr.w	ip, r6, #1
  406626:	f042 0601 	orr.w	r6, r2, #1
  40662a:	f8c4 c004 	str.w	ip, [r4, #4]
  40662e:	4628      	mov	r0, r5
  406630:	6179      	str	r1, [r7, #20]
  406632:	6139      	str	r1, [r7, #16]
  406634:	f8c1 e00c 	str.w	lr, [r1, #12]
  406638:	f8c1 e008 	str.w	lr, [r1, #8]
  40663c:	604e      	str	r6, [r1, #4]
  40663e:	50e2      	str	r2, [r4, r3]
  406640:	f000 f9a0 	bl	406984 <__malloc_unlock>
  406644:	3408      	adds	r4, #8
  406646:	e6dd      	b.n	406404 <_malloc_r+0x18c>
  406648:	687b      	ldr	r3, [r7, #4]
  40664a:	e679      	b.n	406340 <_malloc_r+0xc8>
  40664c:	f108 0801 	add.w	r8, r8, #1
  406650:	f018 0f03 	tst.w	r8, #3
  406654:	f10c 0c08 	add.w	ip, ip, #8
  406658:	f47f ae85 	bne.w	406366 <_malloc_r+0xee>
  40665c:	e02d      	b.n	4066ba <_malloc_r+0x442>
  40665e:	68dc      	ldr	r4, [r3, #12]
  406660:	42a3      	cmp	r3, r4
  406662:	bf08      	it	eq
  406664:	3002      	addeq	r0, #2
  406666:	f43f ae3e 	beq.w	4062e6 <_malloc_r+0x6e>
  40666a:	e6bb      	b.n	4063e4 <_malloc_r+0x16c>
  40666c:	4419      	add	r1, r3
  40666e:	461c      	mov	r4, r3
  406670:	684a      	ldr	r2, [r1, #4]
  406672:	68db      	ldr	r3, [r3, #12]
  406674:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406678:	f042 0201 	orr.w	r2, r2, #1
  40667c:	604a      	str	r2, [r1, #4]
  40667e:	4628      	mov	r0, r5
  406680:	60f3      	str	r3, [r6, #12]
  406682:	609e      	str	r6, [r3, #8]
  406684:	f000 f97e 	bl	406984 <__malloc_unlock>
  406688:	e6bc      	b.n	406404 <_malloc_r+0x18c>
  40668a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40668e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406692:	00c3      	lsls	r3, r0, #3
  406694:	e612      	b.n	4062bc <_malloc_r+0x44>
  406696:	099a      	lsrs	r2, r3, #6
  406698:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40669c:	00c9      	lsls	r1, r1, #3
  40669e:	3238      	adds	r2, #56	; 0x38
  4066a0:	e7a4      	b.n	4065ec <_malloc_r+0x374>
  4066a2:	42bc      	cmp	r4, r7
  4066a4:	d054      	beq.n	406750 <_malloc_r+0x4d8>
  4066a6:	68bc      	ldr	r4, [r7, #8]
  4066a8:	6862      	ldr	r2, [r4, #4]
  4066aa:	f022 0203 	bic.w	r2, r2, #3
  4066ae:	e75d      	b.n	40656c <_malloc_r+0x2f4>
  4066b0:	f859 3908 	ldr.w	r3, [r9], #-8
  4066b4:	4599      	cmp	r9, r3
  4066b6:	f040 8086 	bne.w	4067c6 <_malloc_r+0x54e>
  4066ba:	f010 0f03 	tst.w	r0, #3
  4066be:	f100 30ff 	add.w	r0, r0, #4294967295
  4066c2:	d1f5      	bne.n	4066b0 <_malloc_r+0x438>
  4066c4:	687b      	ldr	r3, [r7, #4]
  4066c6:	ea23 0304 	bic.w	r3, r3, r4
  4066ca:	607b      	str	r3, [r7, #4]
  4066cc:	0064      	lsls	r4, r4, #1
  4066ce:	429c      	cmp	r4, r3
  4066d0:	f63f aec7 	bhi.w	406462 <_malloc_r+0x1ea>
  4066d4:	2c00      	cmp	r4, #0
  4066d6:	f43f aec4 	beq.w	406462 <_malloc_r+0x1ea>
  4066da:	421c      	tst	r4, r3
  4066dc:	4640      	mov	r0, r8
  4066de:	f47f ae3e 	bne.w	40635e <_malloc_r+0xe6>
  4066e2:	0064      	lsls	r4, r4, #1
  4066e4:	421c      	tst	r4, r3
  4066e6:	f100 0004 	add.w	r0, r0, #4
  4066ea:	d0fa      	beq.n	4066e2 <_malloc_r+0x46a>
  4066ec:	e637      	b.n	40635e <_malloc_r+0xe6>
  4066ee:	468c      	mov	ip, r1
  4066f0:	e78c      	b.n	40660c <_malloc_r+0x394>
  4066f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4066f6:	d815      	bhi.n	406724 <_malloc_r+0x4ac>
  4066f8:	0bf3      	lsrs	r3, r6, #15
  4066fa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4066fe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406702:	00c3      	lsls	r3, r0, #3
  406704:	e5da      	b.n	4062bc <_malloc_r+0x44>
  406706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40670a:	e6ed      	b.n	4064e8 <_malloc_r+0x270>
  40670c:	687b      	ldr	r3, [r7, #4]
  40670e:	1092      	asrs	r2, r2, #2
  406710:	2101      	movs	r1, #1
  406712:	fa01 f202 	lsl.w	r2, r1, r2
  406716:	4313      	orrs	r3, r2
  406718:	607b      	str	r3, [r7, #4]
  40671a:	4662      	mov	r2, ip
  40671c:	e779      	b.n	406612 <_malloc_r+0x39a>
  40671e:	2301      	movs	r3, #1
  406720:	6053      	str	r3, [r2, #4]
  406722:	e729      	b.n	406578 <_malloc_r+0x300>
  406724:	f240 5254 	movw	r2, #1364	; 0x554
  406728:	4293      	cmp	r3, r2
  40672a:	d822      	bhi.n	406772 <_malloc_r+0x4fa>
  40672c:	0cb3      	lsrs	r3, r6, #18
  40672e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406732:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406736:	00c3      	lsls	r3, r0, #3
  406738:	e5c0      	b.n	4062bc <_malloc_r+0x44>
  40673a:	f103 0b10 	add.w	fp, r3, #16
  40673e:	e6ae      	b.n	40649e <_malloc_r+0x226>
  406740:	2a54      	cmp	r2, #84	; 0x54
  406742:	d829      	bhi.n	406798 <_malloc_r+0x520>
  406744:	0b1a      	lsrs	r2, r3, #12
  406746:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40674a:	00c9      	lsls	r1, r1, #3
  40674c:	326e      	adds	r2, #110	; 0x6e
  40674e:	e74d      	b.n	4065ec <_malloc_r+0x374>
  406750:	4b20      	ldr	r3, [pc, #128]	; (4067d4 <_malloc_r+0x55c>)
  406752:	6819      	ldr	r1, [r3, #0]
  406754:	4459      	add	r1, fp
  406756:	6019      	str	r1, [r3, #0]
  406758:	e6b2      	b.n	4064c0 <_malloc_r+0x248>
  40675a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40675e:	2800      	cmp	r0, #0
  406760:	f47f aeae 	bne.w	4064c0 <_malloc_r+0x248>
  406764:	eb08 030b 	add.w	r3, r8, fp
  406768:	68ba      	ldr	r2, [r7, #8]
  40676a:	f043 0301 	orr.w	r3, r3, #1
  40676e:	6053      	str	r3, [r2, #4]
  406770:	e6ee      	b.n	406550 <_malloc_r+0x2d8>
  406772:	207f      	movs	r0, #127	; 0x7f
  406774:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406778:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40677c:	e59e      	b.n	4062bc <_malloc_r+0x44>
  40677e:	f104 0108 	add.w	r1, r4, #8
  406782:	4628      	mov	r0, r5
  406784:	9300      	str	r3, [sp, #0]
  406786:	f7ff fa25 	bl	405bd4 <_free_r>
  40678a:	9b00      	ldr	r3, [sp, #0]
  40678c:	6819      	ldr	r1, [r3, #0]
  40678e:	e6df      	b.n	406550 <_malloc_r+0x2d8>
  406790:	2001      	movs	r0, #1
  406792:	f04f 0900 	mov.w	r9, #0
  406796:	e6bc      	b.n	406512 <_malloc_r+0x29a>
  406798:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40679c:	d805      	bhi.n	4067aa <_malloc_r+0x532>
  40679e:	0bda      	lsrs	r2, r3, #15
  4067a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4067a4:	00c9      	lsls	r1, r1, #3
  4067a6:	3277      	adds	r2, #119	; 0x77
  4067a8:	e720      	b.n	4065ec <_malloc_r+0x374>
  4067aa:	f240 5154 	movw	r1, #1364	; 0x554
  4067ae:	428a      	cmp	r2, r1
  4067b0:	d805      	bhi.n	4067be <_malloc_r+0x546>
  4067b2:	0c9a      	lsrs	r2, r3, #18
  4067b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4067b8:	00c9      	lsls	r1, r1, #3
  4067ba:	327c      	adds	r2, #124	; 0x7c
  4067bc:	e716      	b.n	4065ec <_malloc_r+0x374>
  4067be:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4067c2:	227e      	movs	r2, #126	; 0x7e
  4067c4:	e712      	b.n	4065ec <_malloc_r+0x374>
  4067c6:	687b      	ldr	r3, [r7, #4]
  4067c8:	e780      	b.n	4066cc <_malloc_r+0x454>
  4067ca:	08f0      	lsrs	r0, r6, #3
  4067cc:	f106 0308 	add.w	r3, r6, #8
  4067d0:	e600      	b.n	4063d4 <_malloc_r+0x15c>
  4067d2:	bf00      	nop
  4067d4:	204015a8 	.word	0x204015a8

004067d8 <__ascii_mbtowc>:
  4067d8:	b082      	sub	sp, #8
  4067da:	b149      	cbz	r1, 4067f0 <__ascii_mbtowc+0x18>
  4067dc:	b15a      	cbz	r2, 4067f6 <__ascii_mbtowc+0x1e>
  4067de:	b16b      	cbz	r3, 4067fc <__ascii_mbtowc+0x24>
  4067e0:	7813      	ldrb	r3, [r2, #0]
  4067e2:	600b      	str	r3, [r1, #0]
  4067e4:	7812      	ldrb	r2, [r2, #0]
  4067e6:	1c10      	adds	r0, r2, #0
  4067e8:	bf18      	it	ne
  4067ea:	2001      	movne	r0, #1
  4067ec:	b002      	add	sp, #8
  4067ee:	4770      	bx	lr
  4067f0:	a901      	add	r1, sp, #4
  4067f2:	2a00      	cmp	r2, #0
  4067f4:	d1f3      	bne.n	4067de <__ascii_mbtowc+0x6>
  4067f6:	4610      	mov	r0, r2
  4067f8:	b002      	add	sp, #8
  4067fa:	4770      	bx	lr
  4067fc:	f06f 0001 	mvn.w	r0, #1
  406800:	e7f4      	b.n	4067ec <__ascii_mbtowc+0x14>
  406802:	bf00      	nop
	...

00406810 <memchr>:
  406810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406814:	2a10      	cmp	r2, #16
  406816:	db2b      	blt.n	406870 <memchr+0x60>
  406818:	f010 0f07 	tst.w	r0, #7
  40681c:	d008      	beq.n	406830 <memchr+0x20>
  40681e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406822:	3a01      	subs	r2, #1
  406824:	428b      	cmp	r3, r1
  406826:	d02d      	beq.n	406884 <memchr+0x74>
  406828:	f010 0f07 	tst.w	r0, #7
  40682c:	b342      	cbz	r2, 406880 <memchr+0x70>
  40682e:	d1f6      	bne.n	40681e <memchr+0xe>
  406830:	b4f0      	push	{r4, r5, r6, r7}
  406832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40683a:	f022 0407 	bic.w	r4, r2, #7
  40683e:	f07f 0700 	mvns.w	r7, #0
  406842:	2300      	movs	r3, #0
  406844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406848:	3c08      	subs	r4, #8
  40684a:	ea85 0501 	eor.w	r5, r5, r1
  40684e:	ea86 0601 	eor.w	r6, r6, r1
  406852:	fa85 f547 	uadd8	r5, r5, r7
  406856:	faa3 f587 	sel	r5, r3, r7
  40685a:	fa86 f647 	uadd8	r6, r6, r7
  40685e:	faa5 f687 	sel	r6, r5, r7
  406862:	b98e      	cbnz	r6, 406888 <memchr+0x78>
  406864:	d1ee      	bne.n	406844 <memchr+0x34>
  406866:	bcf0      	pop	{r4, r5, r6, r7}
  406868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40686c:	f002 0207 	and.w	r2, r2, #7
  406870:	b132      	cbz	r2, 406880 <memchr+0x70>
  406872:	f810 3b01 	ldrb.w	r3, [r0], #1
  406876:	3a01      	subs	r2, #1
  406878:	ea83 0301 	eor.w	r3, r3, r1
  40687c:	b113      	cbz	r3, 406884 <memchr+0x74>
  40687e:	d1f8      	bne.n	406872 <memchr+0x62>
  406880:	2000      	movs	r0, #0
  406882:	4770      	bx	lr
  406884:	3801      	subs	r0, #1
  406886:	4770      	bx	lr
  406888:	2d00      	cmp	r5, #0
  40688a:	bf06      	itte	eq
  40688c:	4635      	moveq	r5, r6
  40688e:	3803      	subeq	r0, #3
  406890:	3807      	subne	r0, #7
  406892:	f015 0f01 	tst.w	r5, #1
  406896:	d107      	bne.n	4068a8 <memchr+0x98>
  406898:	3001      	adds	r0, #1
  40689a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40689e:	bf02      	ittt	eq
  4068a0:	3001      	addeq	r0, #1
  4068a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4068a6:	3001      	addeq	r0, #1
  4068a8:	bcf0      	pop	{r4, r5, r6, r7}
  4068aa:	3801      	subs	r0, #1
  4068ac:	4770      	bx	lr
  4068ae:	bf00      	nop

004068b0 <memmove>:
  4068b0:	4288      	cmp	r0, r1
  4068b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068b4:	d90d      	bls.n	4068d2 <memmove+0x22>
  4068b6:	188b      	adds	r3, r1, r2
  4068b8:	4298      	cmp	r0, r3
  4068ba:	d20a      	bcs.n	4068d2 <memmove+0x22>
  4068bc:	1884      	adds	r4, r0, r2
  4068be:	2a00      	cmp	r2, #0
  4068c0:	d051      	beq.n	406966 <memmove+0xb6>
  4068c2:	4622      	mov	r2, r4
  4068c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4068c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4068cc:	4299      	cmp	r1, r3
  4068ce:	d1f9      	bne.n	4068c4 <memmove+0x14>
  4068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4068d2:	2a0f      	cmp	r2, #15
  4068d4:	d948      	bls.n	406968 <memmove+0xb8>
  4068d6:	ea41 0300 	orr.w	r3, r1, r0
  4068da:	079b      	lsls	r3, r3, #30
  4068dc:	d146      	bne.n	40696c <memmove+0xbc>
  4068de:	f100 0410 	add.w	r4, r0, #16
  4068e2:	f101 0310 	add.w	r3, r1, #16
  4068e6:	4615      	mov	r5, r2
  4068e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4068ec:	f844 6c10 	str.w	r6, [r4, #-16]
  4068f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4068f4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4068f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4068fc:	f844 6c08 	str.w	r6, [r4, #-8]
  406900:	3d10      	subs	r5, #16
  406902:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406906:	f844 6c04 	str.w	r6, [r4, #-4]
  40690a:	2d0f      	cmp	r5, #15
  40690c:	f103 0310 	add.w	r3, r3, #16
  406910:	f104 0410 	add.w	r4, r4, #16
  406914:	d8e8      	bhi.n	4068e8 <memmove+0x38>
  406916:	f1a2 0310 	sub.w	r3, r2, #16
  40691a:	f023 030f 	bic.w	r3, r3, #15
  40691e:	f002 0e0f 	and.w	lr, r2, #15
  406922:	3310      	adds	r3, #16
  406924:	f1be 0f03 	cmp.w	lr, #3
  406928:	4419      	add	r1, r3
  40692a:	4403      	add	r3, r0
  40692c:	d921      	bls.n	406972 <memmove+0xc2>
  40692e:	1f1e      	subs	r6, r3, #4
  406930:	460d      	mov	r5, r1
  406932:	4674      	mov	r4, lr
  406934:	3c04      	subs	r4, #4
  406936:	f855 7b04 	ldr.w	r7, [r5], #4
  40693a:	f846 7f04 	str.w	r7, [r6, #4]!
  40693e:	2c03      	cmp	r4, #3
  406940:	d8f8      	bhi.n	406934 <memmove+0x84>
  406942:	f1ae 0404 	sub.w	r4, lr, #4
  406946:	f024 0403 	bic.w	r4, r4, #3
  40694a:	3404      	adds	r4, #4
  40694c:	4421      	add	r1, r4
  40694e:	4423      	add	r3, r4
  406950:	f002 0203 	and.w	r2, r2, #3
  406954:	b162      	cbz	r2, 406970 <memmove+0xc0>
  406956:	3b01      	subs	r3, #1
  406958:	440a      	add	r2, r1
  40695a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40695e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406962:	428a      	cmp	r2, r1
  406964:	d1f9      	bne.n	40695a <memmove+0xaa>
  406966:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406968:	4603      	mov	r3, r0
  40696a:	e7f3      	b.n	406954 <memmove+0xa4>
  40696c:	4603      	mov	r3, r0
  40696e:	e7f2      	b.n	406956 <memmove+0xa6>
  406970:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406972:	4672      	mov	r2, lr
  406974:	e7ee      	b.n	406954 <memmove+0xa4>
  406976:	bf00      	nop

00406978 <__malloc_lock>:
  406978:	4801      	ldr	r0, [pc, #4]	; (406980 <__malloc_lock+0x8>)
  40697a:	f7ff bbf9 	b.w	406170 <__retarget_lock_acquire_recursive>
  40697e:	bf00      	nop
  406980:	20401678 	.word	0x20401678

00406984 <__malloc_unlock>:
  406984:	4801      	ldr	r0, [pc, #4]	; (40698c <__malloc_unlock+0x8>)
  406986:	f7ff bbf5 	b.w	406174 <__retarget_lock_release_recursive>
  40698a:	bf00      	nop
  40698c:	20401678 	.word	0x20401678

00406990 <_Balloc>:
  406990:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406992:	b570      	push	{r4, r5, r6, lr}
  406994:	4605      	mov	r5, r0
  406996:	460c      	mov	r4, r1
  406998:	b14b      	cbz	r3, 4069ae <_Balloc+0x1e>
  40699a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40699e:	b180      	cbz	r0, 4069c2 <_Balloc+0x32>
  4069a0:	6802      	ldr	r2, [r0, #0]
  4069a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4069a6:	2300      	movs	r3, #0
  4069a8:	6103      	str	r3, [r0, #16]
  4069aa:	60c3      	str	r3, [r0, #12]
  4069ac:	bd70      	pop	{r4, r5, r6, pc}
  4069ae:	2221      	movs	r2, #33	; 0x21
  4069b0:	2104      	movs	r1, #4
  4069b2:	f000 fe7f 	bl	4076b4 <_calloc_r>
  4069b6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4069b8:	4603      	mov	r3, r0
  4069ba:	2800      	cmp	r0, #0
  4069bc:	d1ed      	bne.n	40699a <_Balloc+0xa>
  4069be:	2000      	movs	r0, #0
  4069c0:	bd70      	pop	{r4, r5, r6, pc}
  4069c2:	2101      	movs	r1, #1
  4069c4:	fa01 f604 	lsl.w	r6, r1, r4
  4069c8:	1d72      	adds	r2, r6, #5
  4069ca:	4628      	mov	r0, r5
  4069cc:	0092      	lsls	r2, r2, #2
  4069ce:	f000 fe71 	bl	4076b4 <_calloc_r>
  4069d2:	2800      	cmp	r0, #0
  4069d4:	d0f3      	beq.n	4069be <_Balloc+0x2e>
  4069d6:	6044      	str	r4, [r0, #4]
  4069d8:	6086      	str	r6, [r0, #8]
  4069da:	e7e4      	b.n	4069a6 <_Balloc+0x16>

004069dc <_Bfree>:
  4069dc:	b131      	cbz	r1, 4069ec <_Bfree+0x10>
  4069de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4069e0:	684a      	ldr	r2, [r1, #4]
  4069e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4069e6:	6008      	str	r0, [r1, #0]
  4069e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4069ec:	4770      	bx	lr
  4069ee:	bf00      	nop

004069f0 <__multadd>:
  4069f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4069f2:	690c      	ldr	r4, [r1, #16]
  4069f4:	b083      	sub	sp, #12
  4069f6:	460d      	mov	r5, r1
  4069f8:	4606      	mov	r6, r0
  4069fa:	f101 0e14 	add.w	lr, r1, #20
  4069fe:	2700      	movs	r7, #0
  406a00:	f8de 0000 	ldr.w	r0, [lr]
  406a04:	b281      	uxth	r1, r0
  406a06:	fb02 3301 	mla	r3, r2, r1, r3
  406a0a:	0c01      	lsrs	r1, r0, #16
  406a0c:	0c18      	lsrs	r0, r3, #16
  406a0e:	fb02 0101 	mla	r1, r2, r1, r0
  406a12:	b29b      	uxth	r3, r3
  406a14:	3701      	adds	r7, #1
  406a16:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406a1a:	42bc      	cmp	r4, r7
  406a1c:	f84e 3b04 	str.w	r3, [lr], #4
  406a20:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406a24:	dcec      	bgt.n	406a00 <__multadd+0x10>
  406a26:	b13b      	cbz	r3, 406a38 <__multadd+0x48>
  406a28:	68aa      	ldr	r2, [r5, #8]
  406a2a:	4294      	cmp	r4, r2
  406a2c:	da07      	bge.n	406a3e <__multadd+0x4e>
  406a2e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406a32:	3401      	adds	r4, #1
  406a34:	6153      	str	r3, [r2, #20]
  406a36:	612c      	str	r4, [r5, #16]
  406a38:	4628      	mov	r0, r5
  406a3a:	b003      	add	sp, #12
  406a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a3e:	6869      	ldr	r1, [r5, #4]
  406a40:	9301      	str	r3, [sp, #4]
  406a42:	3101      	adds	r1, #1
  406a44:	4630      	mov	r0, r6
  406a46:	f7ff ffa3 	bl	406990 <_Balloc>
  406a4a:	692a      	ldr	r2, [r5, #16]
  406a4c:	3202      	adds	r2, #2
  406a4e:	f105 010c 	add.w	r1, r5, #12
  406a52:	4607      	mov	r7, r0
  406a54:	0092      	lsls	r2, r2, #2
  406a56:	300c      	adds	r0, #12
  406a58:	f7fc f868 	bl	402b2c <memcpy>
  406a5c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406a5e:	6869      	ldr	r1, [r5, #4]
  406a60:	9b01      	ldr	r3, [sp, #4]
  406a62:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406a66:	6028      	str	r0, [r5, #0]
  406a68:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406a6c:	463d      	mov	r5, r7
  406a6e:	e7de      	b.n	406a2e <__multadd+0x3e>

00406a70 <__hi0bits>:
  406a70:	0c02      	lsrs	r2, r0, #16
  406a72:	0412      	lsls	r2, r2, #16
  406a74:	4603      	mov	r3, r0
  406a76:	b9b2      	cbnz	r2, 406aa6 <__hi0bits+0x36>
  406a78:	0403      	lsls	r3, r0, #16
  406a7a:	2010      	movs	r0, #16
  406a7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406a80:	bf04      	itt	eq
  406a82:	021b      	lsleq	r3, r3, #8
  406a84:	3008      	addeq	r0, #8
  406a86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406a8a:	bf04      	itt	eq
  406a8c:	011b      	lsleq	r3, r3, #4
  406a8e:	3004      	addeq	r0, #4
  406a90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406a94:	bf04      	itt	eq
  406a96:	009b      	lsleq	r3, r3, #2
  406a98:	3002      	addeq	r0, #2
  406a9a:	2b00      	cmp	r3, #0
  406a9c:	db02      	blt.n	406aa4 <__hi0bits+0x34>
  406a9e:	005b      	lsls	r3, r3, #1
  406aa0:	d403      	bmi.n	406aaa <__hi0bits+0x3a>
  406aa2:	2020      	movs	r0, #32
  406aa4:	4770      	bx	lr
  406aa6:	2000      	movs	r0, #0
  406aa8:	e7e8      	b.n	406a7c <__hi0bits+0xc>
  406aaa:	3001      	adds	r0, #1
  406aac:	4770      	bx	lr
  406aae:	bf00      	nop

00406ab0 <__lo0bits>:
  406ab0:	6803      	ldr	r3, [r0, #0]
  406ab2:	f013 0207 	ands.w	r2, r3, #7
  406ab6:	4601      	mov	r1, r0
  406ab8:	d007      	beq.n	406aca <__lo0bits+0x1a>
  406aba:	07da      	lsls	r2, r3, #31
  406abc:	d421      	bmi.n	406b02 <__lo0bits+0x52>
  406abe:	0798      	lsls	r0, r3, #30
  406ac0:	d421      	bmi.n	406b06 <__lo0bits+0x56>
  406ac2:	089b      	lsrs	r3, r3, #2
  406ac4:	600b      	str	r3, [r1, #0]
  406ac6:	2002      	movs	r0, #2
  406ac8:	4770      	bx	lr
  406aca:	b298      	uxth	r0, r3
  406acc:	b198      	cbz	r0, 406af6 <__lo0bits+0x46>
  406ace:	4610      	mov	r0, r2
  406ad0:	f013 0fff 	tst.w	r3, #255	; 0xff
  406ad4:	bf04      	itt	eq
  406ad6:	0a1b      	lsreq	r3, r3, #8
  406ad8:	3008      	addeq	r0, #8
  406ada:	071a      	lsls	r2, r3, #28
  406adc:	bf04      	itt	eq
  406ade:	091b      	lsreq	r3, r3, #4
  406ae0:	3004      	addeq	r0, #4
  406ae2:	079a      	lsls	r2, r3, #30
  406ae4:	bf04      	itt	eq
  406ae6:	089b      	lsreq	r3, r3, #2
  406ae8:	3002      	addeq	r0, #2
  406aea:	07da      	lsls	r2, r3, #31
  406aec:	d407      	bmi.n	406afe <__lo0bits+0x4e>
  406aee:	085b      	lsrs	r3, r3, #1
  406af0:	d104      	bne.n	406afc <__lo0bits+0x4c>
  406af2:	2020      	movs	r0, #32
  406af4:	4770      	bx	lr
  406af6:	0c1b      	lsrs	r3, r3, #16
  406af8:	2010      	movs	r0, #16
  406afa:	e7e9      	b.n	406ad0 <__lo0bits+0x20>
  406afc:	3001      	adds	r0, #1
  406afe:	600b      	str	r3, [r1, #0]
  406b00:	4770      	bx	lr
  406b02:	2000      	movs	r0, #0
  406b04:	4770      	bx	lr
  406b06:	085b      	lsrs	r3, r3, #1
  406b08:	600b      	str	r3, [r1, #0]
  406b0a:	2001      	movs	r0, #1
  406b0c:	4770      	bx	lr
  406b0e:	bf00      	nop

00406b10 <__i2b>:
  406b10:	b510      	push	{r4, lr}
  406b12:	460c      	mov	r4, r1
  406b14:	2101      	movs	r1, #1
  406b16:	f7ff ff3b 	bl	406990 <_Balloc>
  406b1a:	2201      	movs	r2, #1
  406b1c:	6144      	str	r4, [r0, #20]
  406b1e:	6102      	str	r2, [r0, #16]
  406b20:	bd10      	pop	{r4, pc}
  406b22:	bf00      	nop

00406b24 <__multiply>:
  406b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b28:	690c      	ldr	r4, [r1, #16]
  406b2a:	6915      	ldr	r5, [r2, #16]
  406b2c:	42ac      	cmp	r4, r5
  406b2e:	b083      	sub	sp, #12
  406b30:	468b      	mov	fp, r1
  406b32:	4616      	mov	r6, r2
  406b34:	da04      	bge.n	406b40 <__multiply+0x1c>
  406b36:	4622      	mov	r2, r4
  406b38:	46b3      	mov	fp, r6
  406b3a:	462c      	mov	r4, r5
  406b3c:	460e      	mov	r6, r1
  406b3e:	4615      	mov	r5, r2
  406b40:	f8db 3008 	ldr.w	r3, [fp, #8]
  406b44:	f8db 1004 	ldr.w	r1, [fp, #4]
  406b48:	eb04 0805 	add.w	r8, r4, r5
  406b4c:	4598      	cmp	r8, r3
  406b4e:	bfc8      	it	gt
  406b50:	3101      	addgt	r1, #1
  406b52:	f7ff ff1d 	bl	406990 <_Balloc>
  406b56:	f100 0914 	add.w	r9, r0, #20
  406b5a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406b5e:	45d1      	cmp	r9, sl
  406b60:	9000      	str	r0, [sp, #0]
  406b62:	d205      	bcs.n	406b70 <__multiply+0x4c>
  406b64:	464b      	mov	r3, r9
  406b66:	2100      	movs	r1, #0
  406b68:	f843 1b04 	str.w	r1, [r3], #4
  406b6c:	459a      	cmp	sl, r3
  406b6e:	d8fb      	bhi.n	406b68 <__multiply+0x44>
  406b70:	f106 0c14 	add.w	ip, r6, #20
  406b74:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406b78:	f10b 0b14 	add.w	fp, fp, #20
  406b7c:	459c      	cmp	ip, r3
  406b7e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406b82:	d24c      	bcs.n	406c1e <__multiply+0xfa>
  406b84:	f8cd a004 	str.w	sl, [sp, #4]
  406b88:	469a      	mov	sl, r3
  406b8a:	f8dc 5000 	ldr.w	r5, [ip]
  406b8e:	b2af      	uxth	r7, r5
  406b90:	b1ef      	cbz	r7, 406bce <__multiply+0xaa>
  406b92:	2100      	movs	r1, #0
  406b94:	464d      	mov	r5, r9
  406b96:	465e      	mov	r6, fp
  406b98:	460c      	mov	r4, r1
  406b9a:	f856 2b04 	ldr.w	r2, [r6], #4
  406b9e:	6828      	ldr	r0, [r5, #0]
  406ba0:	b293      	uxth	r3, r2
  406ba2:	b281      	uxth	r1, r0
  406ba4:	fb07 1303 	mla	r3, r7, r3, r1
  406ba8:	0c12      	lsrs	r2, r2, #16
  406baa:	0c01      	lsrs	r1, r0, #16
  406bac:	4423      	add	r3, r4
  406bae:	fb07 1102 	mla	r1, r7, r2, r1
  406bb2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406bb6:	b29b      	uxth	r3, r3
  406bb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406bbc:	45b6      	cmp	lr, r6
  406bbe:	f845 3b04 	str.w	r3, [r5], #4
  406bc2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406bc6:	d8e8      	bhi.n	406b9a <__multiply+0x76>
  406bc8:	602c      	str	r4, [r5, #0]
  406bca:	f8dc 5000 	ldr.w	r5, [ip]
  406bce:	0c2d      	lsrs	r5, r5, #16
  406bd0:	d01d      	beq.n	406c0e <__multiply+0xea>
  406bd2:	f8d9 3000 	ldr.w	r3, [r9]
  406bd6:	4648      	mov	r0, r9
  406bd8:	461c      	mov	r4, r3
  406bda:	4659      	mov	r1, fp
  406bdc:	2200      	movs	r2, #0
  406bde:	880e      	ldrh	r6, [r1, #0]
  406be0:	0c24      	lsrs	r4, r4, #16
  406be2:	fb05 4406 	mla	r4, r5, r6, r4
  406be6:	4422      	add	r2, r4
  406be8:	b29b      	uxth	r3, r3
  406bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406bee:	f840 3b04 	str.w	r3, [r0], #4
  406bf2:	f851 3b04 	ldr.w	r3, [r1], #4
  406bf6:	6804      	ldr	r4, [r0, #0]
  406bf8:	0c1b      	lsrs	r3, r3, #16
  406bfa:	b2a6      	uxth	r6, r4
  406bfc:	fb05 6303 	mla	r3, r5, r3, r6
  406c00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406c04:	458e      	cmp	lr, r1
  406c06:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406c0a:	d8e8      	bhi.n	406bde <__multiply+0xba>
  406c0c:	6003      	str	r3, [r0, #0]
  406c0e:	f10c 0c04 	add.w	ip, ip, #4
  406c12:	45e2      	cmp	sl, ip
  406c14:	f109 0904 	add.w	r9, r9, #4
  406c18:	d8b7      	bhi.n	406b8a <__multiply+0x66>
  406c1a:	f8dd a004 	ldr.w	sl, [sp, #4]
  406c1e:	f1b8 0f00 	cmp.w	r8, #0
  406c22:	dd0b      	ble.n	406c3c <__multiply+0x118>
  406c24:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406c28:	f1aa 0a04 	sub.w	sl, sl, #4
  406c2c:	b11b      	cbz	r3, 406c36 <__multiply+0x112>
  406c2e:	e005      	b.n	406c3c <__multiply+0x118>
  406c30:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406c34:	b913      	cbnz	r3, 406c3c <__multiply+0x118>
  406c36:	f1b8 0801 	subs.w	r8, r8, #1
  406c3a:	d1f9      	bne.n	406c30 <__multiply+0x10c>
  406c3c:	9800      	ldr	r0, [sp, #0]
  406c3e:	f8c0 8010 	str.w	r8, [r0, #16]
  406c42:	b003      	add	sp, #12
  406c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406c48 <__pow5mult>:
  406c48:	f012 0303 	ands.w	r3, r2, #3
  406c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c50:	4614      	mov	r4, r2
  406c52:	4607      	mov	r7, r0
  406c54:	d12e      	bne.n	406cb4 <__pow5mult+0x6c>
  406c56:	460d      	mov	r5, r1
  406c58:	10a4      	asrs	r4, r4, #2
  406c5a:	d01c      	beq.n	406c96 <__pow5mult+0x4e>
  406c5c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406c5e:	b396      	cbz	r6, 406cc6 <__pow5mult+0x7e>
  406c60:	07e3      	lsls	r3, r4, #31
  406c62:	f04f 0800 	mov.w	r8, #0
  406c66:	d406      	bmi.n	406c76 <__pow5mult+0x2e>
  406c68:	1064      	asrs	r4, r4, #1
  406c6a:	d014      	beq.n	406c96 <__pow5mult+0x4e>
  406c6c:	6830      	ldr	r0, [r6, #0]
  406c6e:	b1a8      	cbz	r0, 406c9c <__pow5mult+0x54>
  406c70:	4606      	mov	r6, r0
  406c72:	07e3      	lsls	r3, r4, #31
  406c74:	d5f8      	bpl.n	406c68 <__pow5mult+0x20>
  406c76:	4632      	mov	r2, r6
  406c78:	4629      	mov	r1, r5
  406c7a:	4638      	mov	r0, r7
  406c7c:	f7ff ff52 	bl	406b24 <__multiply>
  406c80:	b1b5      	cbz	r5, 406cb0 <__pow5mult+0x68>
  406c82:	686a      	ldr	r2, [r5, #4]
  406c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406c86:	1064      	asrs	r4, r4, #1
  406c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c8c:	6029      	str	r1, [r5, #0]
  406c8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406c92:	4605      	mov	r5, r0
  406c94:	d1ea      	bne.n	406c6c <__pow5mult+0x24>
  406c96:	4628      	mov	r0, r5
  406c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c9c:	4632      	mov	r2, r6
  406c9e:	4631      	mov	r1, r6
  406ca0:	4638      	mov	r0, r7
  406ca2:	f7ff ff3f 	bl	406b24 <__multiply>
  406ca6:	6030      	str	r0, [r6, #0]
  406ca8:	f8c0 8000 	str.w	r8, [r0]
  406cac:	4606      	mov	r6, r0
  406cae:	e7e0      	b.n	406c72 <__pow5mult+0x2a>
  406cb0:	4605      	mov	r5, r0
  406cb2:	e7d9      	b.n	406c68 <__pow5mult+0x20>
  406cb4:	1e5a      	subs	r2, r3, #1
  406cb6:	4d0b      	ldr	r5, [pc, #44]	; (406ce4 <__pow5mult+0x9c>)
  406cb8:	2300      	movs	r3, #0
  406cba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406cbe:	f7ff fe97 	bl	4069f0 <__multadd>
  406cc2:	4605      	mov	r5, r0
  406cc4:	e7c8      	b.n	406c58 <__pow5mult+0x10>
  406cc6:	2101      	movs	r1, #1
  406cc8:	4638      	mov	r0, r7
  406cca:	f7ff fe61 	bl	406990 <_Balloc>
  406cce:	f240 2171 	movw	r1, #625	; 0x271
  406cd2:	2201      	movs	r2, #1
  406cd4:	2300      	movs	r3, #0
  406cd6:	6141      	str	r1, [r0, #20]
  406cd8:	6102      	str	r2, [r0, #16]
  406cda:	4606      	mov	r6, r0
  406cdc:	64b8      	str	r0, [r7, #72]	; 0x48
  406cde:	6003      	str	r3, [r0, #0]
  406ce0:	e7be      	b.n	406c60 <__pow5mult+0x18>
  406ce2:	bf00      	nop
  406ce4:	00408330 	.word	0x00408330

00406ce8 <__lshift>:
  406ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406cec:	4691      	mov	r9, r2
  406cee:	690a      	ldr	r2, [r1, #16]
  406cf0:	688b      	ldr	r3, [r1, #8]
  406cf2:	ea4f 1469 	mov.w	r4, r9, asr #5
  406cf6:	eb04 0802 	add.w	r8, r4, r2
  406cfa:	f108 0501 	add.w	r5, r8, #1
  406cfe:	429d      	cmp	r5, r3
  406d00:	460e      	mov	r6, r1
  406d02:	4607      	mov	r7, r0
  406d04:	6849      	ldr	r1, [r1, #4]
  406d06:	dd04      	ble.n	406d12 <__lshift+0x2a>
  406d08:	005b      	lsls	r3, r3, #1
  406d0a:	429d      	cmp	r5, r3
  406d0c:	f101 0101 	add.w	r1, r1, #1
  406d10:	dcfa      	bgt.n	406d08 <__lshift+0x20>
  406d12:	4638      	mov	r0, r7
  406d14:	f7ff fe3c 	bl	406990 <_Balloc>
  406d18:	2c00      	cmp	r4, #0
  406d1a:	f100 0314 	add.w	r3, r0, #20
  406d1e:	dd06      	ble.n	406d2e <__lshift+0x46>
  406d20:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406d24:	2100      	movs	r1, #0
  406d26:	f843 1b04 	str.w	r1, [r3], #4
  406d2a:	429a      	cmp	r2, r3
  406d2c:	d1fb      	bne.n	406d26 <__lshift+0x3e>
  406d2e:	6934      	ldr	r4, [r6, #16]
  406d30:	f106 0114 	add.w	r1, r6, #20
  406d34:	f019 091f 	ands.w	r9, r9, #31
  406d38:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406d3c:	d01d      	beq.n	406d7a <__lshift+0x92>
  406d3e:	f1c9 0c20 	rsb	ip, r9, #32
  406d42:	2200      	movs	r2, #0
  406d44:	680c      	ldr	r4, [r1, #0]
  406d46:	fa04 f409 	lsl.w	r4, r4, r9
  406d4a:	4314      	orrs	r4, r2
  406d4c:	f843 4b04 	str.w	r4, [r3], #4
  406d50:	f851 2b04 	ldr.w	r2, [r1], #4
  406d54:	458e      	cmp	lr, r1
  406d56:	fa22 f20c 	lsr.w	r2, r2, ip
  406d5a:	d8f3      	bhi.n	406d44 <__lshift+0x5c>
  406d5c:	601a      	str	r2, [r3, #0]
  406d5e:	b10a      	cbz	r2, 406d64 <__lshift+0x7c>
  406d60:	f108 0502 	add.w	r5, r8, #2
  406d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406d66:	6872      	ldr	r2, [r6, #4]
  406d68:	3d01      	subs	r5, #1
  406d6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406d6e:	6105      	str	r5, [r0, #16]
  406d70:	6031      	str	r1, [r6, #0]
  406d72:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d7a:	3b04      	subs	r3, #4
  406d7c:	f851 2b04 	ldr.w	r2, [r1], #4
  406d80:	f843 2f04 	str.w	r2, [r3, #4]!
  406d84:	458e      	cmp	lr, r1
  406d86:	d8f9      	bhi.n	406d7c <__lshift+0x94>
  406d88:	e7ec      	b.n	406d64 <__lshift+0x7c>
  406d8a:	bf00      	nop

00406d8c <__mcmp>:
  406d8c:	b430      	push	{r4, r5}
  406d8e:	690b      	ldr	r3, [r1, #16]
  406d90:	4605      	mov	r5, r0
  406d92:	6900      	ldr	r0, [r0, #16]
  406d94:	1ac0      	subs	r0, r0, r3
  406d96:	d10f      	bne.n	406db8 <__mcmp+0x2c>
  406d98:	009b      	lsls	r3, r3, #2
  406d9a:	3514      	adds	r5, #20
  406d9c:	3114      	adds	r1, #20
  406d9e:	4419      	add	r1, r3
  406da0:	442b      	add	r3, r5
  406da2:	e001      	b.n	406da8 <__mcmp+0x1c>
  406da4:	429d      	cmp	r5, r3
  406da6:	d207      	bcs.n	406db8 <__mcmp+0x2c>
  406da8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406db0:	4294      	cmp	r4, r2
  406db2:	d0f7      	beq.n	406da4 <__mcmp+0x18>
  406db4:	d302      	bcc.n	406dbc <__mcmp+0x30>
  406db6:	2001      	movs	r0, #1
  406db8:	bc30      	pop	{r4, r5}
  406dba:	4770      	bx	lr
  406dbc:	f04f 30ff 	mov.w	r0, #4294967295
  406dc0:	e7fa      	b.n	406db8 <__mcmp+0x2c>
  406dc2:	bf00      	nop

00406dc4 <__mdiff>:
  406dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406dc8:	690f      	ldr	r7, [r1, #16]
  406dca:	460e      	mov	r6, r1
  406dcc:	6911      	ldr	r1, [r2, #16]
  406dce:	1a7f      	subs	r7, r7, r1
  406dd0:	2f00      	cmp	r7, #0
  406dd2:	4690      	mov	r8, r2
  406dd4:	d117      	bne.n	406e06 <__mdiff+0x42>
  406dd6:	0089      	lsls	r1, r1, #2
  406dd8:	f106 0514 	add.w	r5, r6, #20
  406ddc:	f102 0e14 	add.w	lr, r2, #20
  406de0:	186b      	adds	r3, r5, r1
  406de2:	4471      	add	r1, lr
  406de4:	e001      	b.n	406dea <__mdiff+0x26>
  406de6:	429d      	cmp	r5, r3
  406de8:	d25c      	bcs.n	406ea4 <__mdiff+0xe0>
  406dea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406dee:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406df2:	42a2      	cmp	r2, r4
  406df4:	d0f7      	beq.n	406de6 <__mdiff+0x22>
  406df6:	d25e      	bcs.n	406eb6 <__mdiff+0xf2>
  406df8:	4633      	mov	r3, r6
  406dfa:	462c      	mov	r4, r5
  406dfc:	4646      	mov	r6, r8
  406dfe:	4675      	mov	r5, lr
  406e00:	4698      	mov	r8, r3
  406e02:	2701      	movs	r7, #1
  406e04:	e005      	b.n	406e12 <__mdiff+0x4e>
  406e06:	db58      	blt.n	406eba <__mdiff+0xf6>
  406e08:	f106 0514 	add.w	r5, r6, #20
  406e0c:	f108 0414 	add.w	r4, r8, #20
  406e10:	2700      	movs	r7, #0
  406e12:	6871      	ldr	r1, [r6, #4]
  406e14:	f7ff fdbc 	bl	406990 <_Balloc>
  406e18:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406e1c:	6936      	ldr	r6, [r6, #16]
  406e1e:	60c7      	str	r7, [r0, #12]
  406e20:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406e24:	46a6      	mov	lr, r4
  406e26:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406e2a:	f100 0414 	add.w	r4, r0, #20
  406e2e:	2300      	movs	r3, #0
  406e30:	f85e 1b04 	ldr.w	r1, [lr], #4
  406e34:	f855 8b04 	ldr.w	r8, [r5], #4
  406e38:	b28a      	uxth	r2, r1
  406e3a:	fa13 f388 	uxtah	r3, r3, r8
  406e3e:	0c09      	lsrs	r1, r1, #16
  406e40:	1a9a      	subs	r2, r3, r2
  406e42:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406e46:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406e4a:	b292      	uxth	r2, r2
  406e4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406e50:	45f4      	cmp	ip, lr
  406e52:	f844 2b04 	str.w	r2, [r4], #4
  406e56:	ea4f 4323 	mov.w	r3, r3, asr #16
  406e5a:	d8e9      	bhi.n	406e30 <__mdiff+0x6c>
  406e5c:	42af      	cmp	r7, r5
  406e5e:	d917      	bls.n	406e90 <__mdiff+0xcc>
  406e60:	46a4      	mov	ip, r4
  406e62:	46ae      	mov	lr, r5
  406e64:	f85e 2b04 	ldr.w	r2, [lr], #4
  406e68:	fa13 f382 	uxtah	r3, r3, r2
  406e6c:	1419      	asrs	r1, r3, #16
  406e6e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406e72:	b29b      	uxth	r3, r3
  406e74:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406e78:	4577      	cmp	r7, lr
  406e7a:	f84c 2b04 	str.w	r2, [ip], #4
  406e7e:	ea4f 4321 	mov.w	r3, r1, asr #16
  406e82:	d8ef      	bhi.n	406e64 <__mdiff+0xa0>
  406e84:	43ed      	mvns	r5, r5
  406e86:	442f      	add	r7, r5
  406e88:	f027 0703 	bic.w	r7, r7, #3
  406e8c:	3704      	adds	r7, #4
  406e8e:	443c      	add	r4, r7
  406e90:	3c04      	subs	r4, #4
  406e92:	b922      	cbnz	r2, 406e9e <__mdiff+0xda>
  406e94:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406e98:	3e01      	subs	r6, #1
  406e9a:	2b00      	cmp	r3, #0
  406e9c:	d0fa      	beq.n	406e94 <__mdiff+0xd0>
  406e9e:	6106      	str	r6, [r0, #16]
  406ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ea4:	2100      	movs	r1, #0
  406ea6:	f7ff fd73 	bl	406990 <_Balloc>
  406eaa:	2201      	movs	r2, #1
  406eac:	2300      	movs	r3, #0
  406eae:	6102      	str	r2, [r0, #16]
  406eb0:	6143      	str	r3, [r0, #20]
  406eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406eb6:	4674      	mov	r4, lr
  406eb8:	e7ab      	b.n	406e12 <__mdiff+0x4e>
  406eba:	4633      	mov	r3, r6
  406ebc:	f106 0414 	add.w	r4, r6, #20
  406ec0:	f102 0514 	add.w	r5, r2, #20
  406ec4:	4616      	mov	r6, r2
  406ec6:	2701      	movs	r7, #1
  406ec8:	4698      	mov	r8, r3
  406eca:	e7a2      	b.n	406e12 <__mdiff+0x4e>

00406ecc <__d2b>:
  406ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ed0:	b082      	sub	sp, #8
  406ed2:	2101      	movs	r1, #1
  406ed4:	461c      	mov	r4, r3
  406ed6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406eda:	4615      	mov	r5, r2
  406edc:	9e08      	ldr	r6, [sp, #32]
  406ede:	f7ff fd57 	bl	406990 <_Balloc>
  406ee2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406ee6:	4680      	mov	r8, r0
  406ee8:	b10f      	cbz	r7, 406eee <__d2b+0x22>
  406eea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406eee:	9401      	str	r4, [sp, #4]
  406ef0:	b31d      	cbz	r5, 406f3a <__d2b+0x6e>
  406ef2:	a802      	add	r0, sp, #8
  406ef4:	f840 5d08 	str.w	r5, [r0, #-8]!
  406ef8:	f7ff fdda 	bl	406ab0 <__lo0bits>
  406efc:	2800      	cmp	r0, #0
  406efe:	d134      	bne.n	406f6a <__d2b+0x9e>
  406f00:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406f04:	f8c8 2014 	str.w	r2, [r8, #20]
  406f08:	2b00      	cmp	r3, #0
  406f0a:	bf0c      	ite	eq
  406f0c:	2101      	moveq	r1, #1
  406f0e:	2102      	movne	r1, #2
  406f10:	f8c8 3018 	str.w	r3, [r8, #24]
  406f14:	f8c8 1010 	str.w	r1, [r8, #16]
  406f18:	b9df      	cbnz	r7, 406f52 <__d2b+0x86>
  406f1a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406f1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406f22:	6030      	str	r0, [r6, #0]
  406f24:	6918      	ldr	r0, [r3, #16]
  406f26:	f7ff fda3 	bl	406a70 <__hi0bits>
  406f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406f30:	6018      	str	r0, [r3, #0]
  406f32:	4640      	mov	r0, r8
  406f34:	b002      	add	sp, #8
  406f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f3a:	a801      	add	r0, sp, #4
  406f3c:	f7ff fdb8 	bl	406ab0 <__lo0bits>
  406f40:	9b01      	ldr	r3, [sp, #4]
  406f42:	f8c8 3014 	str.w	r3, [r8, #20]
  406f46:	2101      	movs	r1, #1
  406f48:	3020      	adds	r0, #32
  406f4a:	f8c8 1010 	str.w	r1, [r8, #16]
  406f4e:	2f00      	cmp	r7, #0
  406f50:	d0e3      	beq.n	406f1a <__d2b+0x4e>
  406f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f54:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406f58:	4407      	add	r7, r0
  406f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406f5e:	6037      	str	r7, [r6, #0]
  406f60:	6018      	str	r0, [r3, #0]
  406f62:	4640      	mov	r0, r8
  406f64:	b002      	add	sp, #8
  406f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f6a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406f6e:	f1c0 0220 	rsb	r2, r0, #32
  406f72:	fa03 f202 	lsl.w	r2, r3, r2
  406f76:	430a      	orrs	r2, r1
  406f78:	40c3      	lsrs	r3, r0
  406f7a:	9301      	str	r3, [sp, #4]
  406f7c:	f8c8 2014 	str.w	r2, [r8, #20]
  406f80:	e7c2      	b.n	406f08 <__d2b+0x3c>
  406f82:	bf00      	nop

00406f84 <_realloc_r>:
  406f84:	2900      	cmp	r1, #0
  406f86:	f000 8095 	beq.w	4070b4 <_realloc_r+0x130>
  406f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f8e:	460d      	mov	r5, r1
  406f90:	4616      	mov	r6, r2
  406f92:	b083      	sub	sp, #12
  406f94:	4680      	mov	r8, r0
  406f96:	f106 070b 	add.w	r7, r6, #11
  406f9a:	f7ff fced 	bl	406978 <__malloc_lock>
  406f9e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406fa2:	2f16      	cmp	r7, #22
  406fa4:	f02e 0403 	bic.w	r4, lr, #3
  406fa8:	f1a5 0908 	sub.w	r9, r5, #8
  406fac:	d83c      	bhi.n	407028 <_realloc_r+0xa4>
  406fae:	2210      	movs	r2, #16
  406fb0:	4617      	mov	r7, r2
  406fb2:	42be      	cmp	r6, r7
  406fb4:	d83d      	bhi.n	407032 <_realloc_r+0xae>
  406fb6:	4294      	cmp	r4, r2
  406fb8:	da43      	bge.n	407042 <_realloc_r+0xbe>
  406fba:	4bc4      	ldr	r3, [pc, #784]	; (4072cc <_realloc_r+0x348>)
  406fbc:	6899      	ldr	r1, [r3, #8]
  406fbe:	eb09 0004 	add.w	r0, r9, r4
  406fc2:	4288      	cmp	r0, r1
  406fc4:	f000 80b4 	beq.w	407130 <_realloc_r+0x1ac>
  406fc8:	6843      	ldr	r3, [r0, #4]
  406fca:	f023 0101 	bic.w	r1, r3, #1
  406fce:	4401      	add	r1, r0
  406fd0:	6849      	ldr	r1, [r1, #4]
  406fd2:	07c9      	lsls	r1, r1, #31
  406fd4:	d54c      	bpl.n	407070 <_realloc_r+0xec>
  406fd6:	f01e 0f01 	tst.w	lr, #1
  406fda:	f000 809b 	beq.w	407114 <_realloc_r+0x190>
  406fde:	4631      	mov	r1, r6
  406fe0:	4640      	mov	r0, r8
  406fe2:	f7ff f949 	bl	406278 <_malloc_r>
  406fe6:	4606      	mov	r6, r0
  406fe8:	2800      	cmp	r0, #0
  406fea:	d03a      	beq.n	407062 <_realloc_r+0xde>
  406fec:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406ff0:	f023 0301 	bic.w	r3, r3, #1
  406ff4:	444b      	add	r3, r9
  406ff6:	f1a0 0208 	sub.w	r2, r0, #8
  406ffa:	429a      	cmp	r2, r3
  406ffc:	f000 8121 	beq.w	407242 <_realloc_r+0x2be>
  407000:	1f22      	subs	r2, r4, #4
  407002:	2a24      	cmp	r2, #36	; 0x24
  407004:	f200 8107 	bhi.w	407216 <_realloc_r+0x292>
  407008:	2a13      	cmp	r2, #19
  40700a:	f200 80db 	bhi.w	4071c4 <_realloc_r+0x240>
  40700e:	4603      	mov	r3, r0
  407010:	462a      	mov	r2, r5
  407012:	6811      	ldr	r1, [r2, #0]
  407014:	6019      	str	r1, [r3, #0]
  407016:	6851      	ldr	r1, [r2, #4]
  407018:	6059      	str	r1, [r3, #4]
  40701a:	6892      	ldr	r2, [r2, #8]
  40701c:	609a      	str	r2, [r3, #8]
  40701e:	4629      	mov	r1, r5
  407020:	4640      	mov	r0, r8
  407022:	f7fe fdd7 	bl	405bd4 <_free_r>
  407026:	e01c      	b.n	407062 <_realloc_r+0xde>
  407028:	f027 0707 	bic.w	r7, r7, #7
  40702c:	2f00      	cmp	r7, #0
  40702e:	463a      	mov	r2, r7
  407030:	dabf      	bge.n	406fb2 <_realloc_r+0x2e>
  407032:	2600      	movs	r6, #0
  407034:	230c      	movs	r3, #12
  407036:	4630      	mov	r0, r6
  407038:	f8c8 3000 	str.w	r3, [r8]
  40703c:	b003      	add	sp, #12
  40703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407042:	462e      	mov	r6, r5
  407044:	1be3      	subs	r3, r4, r7
  407046:	2b0f      	cmp	r3, #15
  407048:	d81e      	bhi.n	407088 <_realloc_r+0x104>
  40704a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40704e:	f003 0301 	and.w	r3, r3, #1
  407052:	4323      	orrs	r3, r4
  407054:	444c      	add	r4, r9
  407056:	f8c9 3004 	str.w	r3, [r9, #4]
  40705a:	6863      	ldr	r3, [r4, #4]
  40705c:	f043 0301 	orr.w	r3, r3, #1
  407060:	6063      	str	r3, [r4, #4]
  407062:	4640      	mov	r0, r8
  407064:	f7ff fc8e 	bl	406984 <__malloc_unlock>
  407068:	4630      	mov	r0, r6
  40706a:	b003      	add	sp, #12
  40706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407070:	f023 0303 	bic.w	r3, r3, #3
  407074:	18e1      	adds	r1, r4, r3
  407076:	4291      	cmp	r1, r2
  407078:	db1f      	blt.n	4070ba <_realloc_r+0x136>
  40707a:	68c3      	ldr	r3, [r0, #12]
  40707c:	6882      	ldr	r2, [r0, #8]
  40707e:	462e      	mov	r6, r5
  407080:	60d3      	str	r3, [r2, #12]
  407082:	460c      	mov	r4, r1
  407084:	609a      	str	r2, [r3, #8]
  407086:	e7dd      	b.n	407044 <_realloc_r+0xc0>
  407088:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40708c:	eb09 0107 	add.w	r1, r9, r7
  407090:	f002 0201 	and.w	r2, r2, #1
  407094:	444c      	add	r4, r9
  407096:	f043 0301 	orr.w	r3, r3, #1
  40709a:	4317      	orrs	r7, r2
  40709c:	f8c9 7004 	str.w	r7, [r9, #4]
  4070a0:	604b      	str	r3, [r1, #4]
  4070a2:	6863      	ldr	r3, [r4, #4]
  4070a4:	f043 0301 	orr.w	r3, r3, #1
  4070a8:	3108      	adds	r1, #8
  4070aa:	6063      	str	r3, [r4, #4]
  4070ac:	4640      	mov	r0, r8
  4070ae:	f7fe fd91 	bl	405bd4 <_free_r>
  4070b2:	e7d6      	b.n	407062 <_realloc_r+0xde>
  4070b4:	4611      	mov	r1, r2
  4070b6:	f7ff b8df 	b.w	406278 <_malloc_r>
  4070ba:	f01e 0f01 	tst.w	lr, #1
  4070be:	d18e      	bne.n	406fde <_realloc_r+0x5a>
  4070c0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4070c4:	eba9 0a01 	sub.w	sl, r9, r1
  4070c8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4070cc:	f021 0103 	bic.w	r1, r1, #3
  4070d0:	440b      	add	r3, r1
  4070d2:	4423      	add	r3, r4
  4070d4:	4293      	cmp	r3, r2
  4070d6:	db25      	blt.n	407124 <_realloc_r+0x1a0>
  4070d8:	68c2      	ldr	r2, [r0, #12]
  4070da:	6881      	ldr	r1, [r0, #8]
  4070dc:	4656      	mov	r6, sl
  4070de:	60ca      	str	r2, [r1, #12]
  4070e0:	6091      	str	r1, [r2, #8]
  4070e2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4070e6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4070ea:	1f22      	subs	r2, r4, #4
  4070ec:	2a24      	cmp	r2, #36	; 0x24
  4070ee:	60c1      	str	r1, [r0, #12]
  4070f0:	6088      	str	r0, [r1, #8]
  4070f2:	f200 8094 	bhi.w	40721e <_realloc_r+0x29a>
  4070f6:	2a13      	cmp	r2, #19
  4070f8:	d96f      	bls.n	4071da <_realloc_r+0x256>
  4070fa:	6829      	ldr	r1, [r5, #0]
  4070fc:	f8ca 1008 	str.w	r1, [sl, #8]
  407100:	6869      	ldr	r1, [r5, #4]
  407102:	f8ca 100c 	str.w	r1, [sl, #12]
  407106:	2a1b      	cmp	r2, #27
  407108:	f200 80a2 	bhi.w	407250 <_realloc_r+0x2cc>
  40710c:	3508      	adds	r5, #8
  40710e:	f10a 0210 	add.w	r2, sl, #16
  407112:	e063      	b.n	4071dc <_realloc_r+0x258>
  407114:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407118:	eba9 0a03 	sub.w	sl, r9, r3
  40711c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407120:	f021 0103 	bic.w	r1, r1, #3
  407124:	1863      	adds	r3, r4, r1
  407126:	4293      	cmp	r3, r2
  407128:	f6ff af59 	blt.w	406fde <_realloc_r+0x5a>
  40712c:	4656      	mov	r6, sl
  40712e:	e7d8      	b.n	4070e2 <_realloc_r+0x15e>
  407130:	6841      	ldr	r1, [r0, #4]
  407132:	f021 0b03 	bic.w	fp, r1, #3
  407136:	44a3      	add	fp, r4
  407138:	f107 0010 	add.w	r0, r7, #16
  40713c:	4583      	cmp	fp, r0
  40713e:	da56      	bge.n	4071ee <_realloc_r+0x26a>
  407140:	f01e 0f01 	tst.w	lr, #1
  407144:	f47f af4b 	bne.w	406fde <_realloc_r+0x5a>
  407148:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40714c:	eba9 0a01 	sub.w	sl, r9, r1
  407150:	f8da 1004 	ldr.w	r1, [sl, #4]
  407154:	f021 0103 	bic.w	r1, r1, #3
  407158:	448b      	add	fp, r1
  40715a:	4558      	cmp	r0, fp
  40715c:	dce2      	bgt.n	407124 <_realloc_r+0x1a0>
  40715e:	4656      	mov	r6, sl
  407160:	f8da 100c 	ldr.w	r1, [sl, #12]
  407164:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407168:	1f22      	subs	r2, r4, #4
  40716a:	2a24      	cmp	r2, #36	; 0x24
  40716c:	60c1      	str	r1, [r0, #12]
  40716e:	6088      	str	r0, [r1, #8]
  407170:	f200 808f 	bhi.w	407292 <_realloc_r+0x30e>
  407174:	2a13      	cmp	r2, #19
  407176:	f240 808a 	bls.w	40728e <_realloc_r+0x30a>
  40717a:	6829      	ldr	r1, [r5, #0]
  40717c:	f8ca 1008 	str.w	r1, [sl, #8]
  407180:	6869      	ldr	r1, [r5, #4]
  407182:	f8ca 100c 	str.w	r1, [sl, #12]
  407186:	2a1b      	cmp	r2, #27
  407188:	f200 808a 	bhi.w	4072a0 <_realloc_r+0x31c>
  40718c:	3508      	adds	r5, #8
  40718e:	f10a 0210 	add.w	r2, sl, #16
  407192:	6829      	ldr	r1, [r5, #0]
  407194:	6011      	str	r1, [r2, #0]
  407196:	6869      	ldr	r1, [r5, #4]
  407198:	6051      	str	r1, [r2, #4]
  40719a:	68a9      	ldr	r1, [r5, #8]
  40719c:	6091      	str	r1, [r2, #8]
  40719e:	eb0a 0107 	add.w	r1, sl, r7
  4071a2:	ebab 0207 	sub.w	r2, fp, r7
  4071a6:	f042 0201 	orr.w	r2, r2, #1
  4071aa:	6099      	str	r1, [r3, #8]
  4071ac:	604a      	str	r2, [r1, #4]
  4071ae:	f8da 3004 	ldr.w	r3, [sl, #4]
  4071b2:	f003 0301 	and.w	r3, r3, #1
  4071b6:	431f      	orrs	r7, r3
  4071b8:	4640      	mov	r0, r8
  4071ba:	f8ca 7004 	str.w	r7, [sl, #4]
  4071be:	f7ff fbe1 	bl	406984 <__malloc_unlock>
  4071c2:	e751      	b.n	407068 <_realloc_r+0xe4>
  4071c4:	682b      	ldr	r3, [r5, #0]
  4071c6:	6003      	str	r3, [r0, #0]
  4071c8:	686b      	ldr	r3, [r5, #4]
  4071ca:	6043      	str	r3, [r0, #4]
  4071cc:	2a1b      	cmp	r2, #27
  4071ce:	d82d      	bhi.n	40722c <_realloc_r+0x2a8>
  4071d0:	f100 0308 	add.w	r3, r0, #8
  4071d4:	f105 0208 	add.w	r2, r5, #8
  4071d8:	e71b      	b.n	407012 <_realloc_r+0x8e>
  4071da:	4632      	mov	r2, r6
  4071dc:	6829      	ldr	r1, [r5, #0]
  4071de:	6011      	str	r1, [r2, #0]
  4071e0:	6869      	ldr	r1, [r5, #4]
  4071e2:	6051      	str	r1, [r2, #4]
  4071e4:	68a9      	ldr	r1, [r5, #8]
  4071e6:	6091      	str	r1, [r2, #8]
  4071e8:	461c      	mov	r4, r3
  4071ea:	46d1      	mov	r9, sl
  4071ec:	e72a      	b.n	407044 <_realloc_r+0xc0>
  4071ee:	eb09 0107 	add.w	r1, r9, r7
  4071f2:	ebab 0b07 	sub.w	fp, fp, r7
  4071f6:	f04b 0201 	orr.w	r2, fp, #1
  4071fa:	6099      	str	r1, [r3, #8]
  4071fc:	604a      	str	r2, [r1, #4]
  4071fe:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407202:	f003 0301 	and.w	r3, r3, #1
  407206:	431f      	orrs	r7, r3
  407208:	4640      	mov	r0, r8
  40720a:	f845 7c04 	str.w	r7, [r5, #-4]
  40720e:	f7ff fbb9 	bl	406984 <__malloc_unlock>
  407212:	462e      	mov	r6, r5
  407214:	e728      	b.n	407068 <_realloc_r+0xe4>
  407216:	4629      	mov	r1, r5
  407218:	f7ff fb4a 	bl	4068b0 <memmove>
  40721c:	e6ff      	b.n	40701e <_realloc_r+0x9a>
  40721e:	4629      	mov	r1, r5
  407220:	4630      	mov	r0, r6
  407222:	461c      	mov	r4, r3
  407224:	46d1      	mov	r9, sl
  407226:	f7ff fb43 	bl	4068b0 <memmove>
  40722a:	e70b      	b.n	407044 <_realloc_r+0xc0>
  40722c:	68ab      	ldr	r3, [r5, #8]
  40722e:	6083      	str	r3, [r0, #8]
  407230:	68eb      	ldr	r3, [r5, #12]
  407232:	60c3      	str	r3, [r0, #12]
  407234:	2a24      	cmp	r2, #36	; 0x24
  407236:	d017      	beq.n	407268 <_realloc_r+0x2e4>
  407238:	f100 0310 	add.w	r3, r0, #16
  40723c:	f105 0210 	add.w	r2, r5, #16
  407240:	e6e7      	b.n	407012 <_realloc_r+0x8e>
  407242:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407246:	f023 0303 	bic.w	r3, r3, #3
  40724a:	441c      	add	r4, r3
  40724c:	462e      	mov	r6, r5
  40724e:	e6f9      	b.n	407044 <_realloc_r+0xc0>
  407250:	68a9      	ldr	r1, [r5, #8]
  407252:	f8ca 1010 	str.w	r1, [sl, #16]
  407256:	68e9      	ldr	r1, [r5, #12]
  407258:	f8ca 1014 	str.w	r1, [sl, #20]
  40725c:	2a24      	cmp	r2, #36	; 0x24
  40725e:	d00c      	beq.n	40727a <_realloc_r+0x2f6>
  407260:	3510      	adds	r5, #16
  407262:	f10a 0218 	add.w	r2, sl, #24
  407266:	e7b9      	b.n	4071dc <_realloc_r+0x258>
  407268:	692b      	ldr	r3, [r5, #16]
  40726a:	6103      	str	r3, [r0, #16]
  40726c:	696b      	ldr	r3, [r5, #20]
  40726e:	6143      	str	r3, [r0, #20]
  407270:	f105 0218 	add.w	r2, r5, #24
  407274:	f100 0318 	add.w	r3, r0, #24
  407278:	e6cb      	b.n	407012 <_realloc_r+0x8e>
  40727a:	692a      	ldr	r2, [r5, #16]
  40727c:	f8ca 2018 	str.w	r2, [sl, #24]
  407280:	696a      	ldr	r2, [r5, #20]
  407282:	f8ca 201c 	str.w	r2, [sl, #28]
  407286:	3518      	adds	r5, #24
  407288:	f10a 0220 	add.w	r2, sl, #32
  40728c:	e7a6      	b.n	4071dc <_realloc_r+0x258>
  40728e:	4632      	mov	r2, r6
  407290:	e77f      	b.n	407192 <_realloc_r+0x20e>
  407292:	4629      	mov	r1, r5
  407294:	4630      	mov	r0, r6
  407296:	9301      	str	r3, [sp, #4]
  407298:	f7ff fb0a 	bl	4068b0 <memmove>
  40729c:	9b01      	ldr	r3, [sp, #4]
  40729e:	e77e      	b.n	40719e <_realloc_r+0x21a>
  4072a0:	68a9      	ldr	r1, [r5, #8]
  4072a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4072a6:	68e9      	ldr	r1, [r5, #12]
  4072a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4072ac:	2a24      	cmp	r2, #36	; 0x24
  4072ae:	d003      	beq.n	4072b8 <_realloc_r+0x334>
  4072b0:	3510      	adds	r5, #16
  4072b2:	f10a 0218 	add.w	r2, sl, #24
  4072b6:	e76c      	b.n	407192 <_realloc_r+0x20e>
  4072b8:	692a      	ldr	r2, [r5, #16]
  4072ba:	f8ca 2018 	str.w	r2, [sl, #24]
  4072be:	696a      	ldr	r2, [r5, #20]
  4072c0:	f8ca 201c 	str.w	r2, [sl, #28]
  4072c4:	3518      	adds	r5, #24
  4072c6:	f10a 0220 	add.w	r2, sl, #32
  4072ca:	e762      	b.n	407192 <_realloc_r+0x20e>
  4072cc:	204005b8 	.word	0x204005b8

004072d0 <lflush>:
  4072d0:	8983      	ldrh	r3, [r0, #12]
  4072d2:	f003 0309 	and.w	r3, r3, #9
  4072d6:	2b09      	cmp	r3, #9
  4072d8:	d001      	beq.n	4072de <lflush+0xe>
  4072da:	2000      	movs	r0, #0
  4072dc:	4770      	bx	lr
  4072de:	f7fe bb13 	b.w	405908 <fflush>
  4072e2:	bf00      	nop

004072e4 <__srefill_r>:
  4072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072e6:	460c      	mov	r4, r1
  4072e8:	4605      	mov	r5, r0
  4072ea:	b110      	cbz	r0, 4072f2 <__srefill_r+0xe>
  4072ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4072ee:	2b00      	cmp	r3, #0
  4072f0:	d045      	beq.n	40737e <__srefill_r+0x9a>
  4072f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072f6:	b29a      	uxth	r2, r3
  4072f8:	0497      	lsls	r7, r2, #18
  4072fa:	d407      	bmi.n	40730c <__srefill_r+0x28>
  4072fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4072fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  407306:	6662      	str	r2, [r4, #100]	; 0x64
  407308:	81a3      	strh	r3, [r4, #12]
  40730a:	b29a      	uxth	r2, r3
  40730c:	2100      	movs	r1, #0
  40730e:	0696      	lsls	r6, r2, #26
  407310:	6061      	str	r1, [r4, #4]
  407312:	d431      	bmi.n	407378 <__srefill_r+0x94>
  407314:	0750      	lsls	r0, r2, #29
  407316:	d522      	bpl.n	40735e <__srefill_r+0x7a>
  407318:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40731a:	b161      	cbz	r1, 407336 <__srefill_r+0x52>
  40731c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407320:	4299      	cmp	r1, r3
  407322:	d002      	beq.n	40732a <__srefill_r+0x46>
  407324:	4628      	mov	r0, r5
  407326:	f7fe fc55 	bl	405bd4 <_free_r>
  40732a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40732c:	6063      	str	r3, [r4, #4]
  40732e:	2000      	movs	r0, #0
  407330:	6320      	str	r0, [r4, #48]	; 0x30
  407332:	2b00      	cmp	r3, #0
  407334:	d13f      	bne.n	4073b6 <__srefill_r+0xd2>
  407336:	6923      	ldr	r3, [r4, #16]
  407338:	2b00      	cmp	r3, #0
  40733a:	d04c      	beq.n	4073d6 <__srefill_r+0xf2>
  40733c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  407340:	b2be      	uxth	r6, r7
  407342:	07b3      	lsls	r3, r6, #30
  407344:	d11e      	bne.n	407384 <__srefill_r+0xa0>
  407346:	6922      	ldr	r2, [r4, #16]
  407348:	6022      	str	r2, [r4, #0]
  40734a:	4628      	mov	r0, r5
  40734c:	6963      	ldr	r3, [r4, #20]
  40734e:	6a25      	ldr	r5, [r4, #32]
  407350:	69e1      	ldr	r1, [r4, #28]
  407352:	47a8      	blx	r5
  407354:	2800      	cmp	r0, #0
  407356:	6060      	str	r0, [r4, #4]
  407358:	dd09      	ble.n	40736e <__srefill_r+0x8a>
  40735a:	2000      	movs	r0, #0
  40735c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40735e:	06d1      	lsls	r1, r2, #27
  407360:	d53e      	bpl.n	4073e0 <__srefill_r+0xfc>
  407362:	0712      	lsls	r2, r2, #28
  407364:	d42a      	bmi.n	4073bc <__srefill_r+0xd8>
  407366:	f043 0304 	orr.w	r3, r3, #4
  40736a:	81a3      	strh	r3, [r4, #12]
  40736c:	e7e3      	b.n	407336 <__srefill_r+0x52>
  40736e:	89a3      	ldrh	r3, [r4, #12]
  407370:	d119      	bne.n	4073a6 <__srefill_r+0xc2>
  407372:	f043 0320 	orr.w	r3, r3, #32
  407376:	81a3      	strh	r3, [r4, #12]
  407378:	f04f 30ff 	mov.w	r0, #4294967295
  40737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40737e:	f7fe fb03 	bl	405988 <__sinit>
  407382:	e7b6      	b.n	4072f2 <__srefill_r+0xe>
  407384:	4b1a      	ldr	r3, [pc, #104]	; (4073f0 <__srefill_r+0x10c>)
  407386:	491b      	ldr	r1, [pc, #108]	; (4073f4 <__srefill_r+0x110>)
  407388:	6818      	ldr	r0, [r3, #0]
  40738a:	2301      	movs	r3, #1
  40738c:	81a3      	strh	r3, [r4, #12]
  40738e:	f006 0609 	and.w	r6, r6, #9
  407392:	f7fe fe7d 	bl	406090 <_fwalk>
  407396:	2e09      	cmp	r6, #9
  407398:	81a7      	strh	r7, [r4, #12]
  40739a:	d1d4      	bne.n	407346 <__srefill_r+0x62>
  40739c:	4621      	mov	r1, r4
  40739e:	4628      	mov	r0, r5
  4073a0:	f7fe f9e8 	bl	405774 <__sflush_r>
  4073a4:	e7cf      	b.n	407346 <__srefill_r+0x62>
  4073a6:	2200      	movs	r2, #0
  4073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073ac:	81a3      	strh	r3, [r4, #12]
  4073ae:	6062      	str	r2, [r4, #4]
  4073b0:	f04f 30ff 	mov.w	r0, #4294967295
  4073b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4073b8:	6023      	str	r3, [r4, #0]
  4073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073bc:	4621      	mov	r1, r4
  4073be:	4628      	mov	r0, r5
  4073c0:	f7fe fa78 	bl	4058b4 <_fflush_r>
  4073c4:	2800      	cmp	r0, #0
  4073c6:	d1d7      	bne.n	407378 <__srefill_r+0x94>
  4073c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073cc:	60a0      	str	r0, [r4, #8]
  4073ce:	61a0      	str	r0, [r4, #24]
  4073d0:	f023 0308 	bic.w	r3, r3, #8
  4073d4:	e7c7      	b.n	407366 <__srefill_r+0x82>
  4073d6:	4621      	mov	r1, r4
  4073d8:	4628      	mov	r0, r5
  4073da:	f7fe fefb 	bl	4061d4 <__smakebuf_r>
  4073de:	e7ad      	b.n	40733c <__srefill_r+0x58>
  4073e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073e4:	2209      	movs	r2, #9
  4073e6:	602a      	str	r2, [r5, #0]
  4073e8:	f04f 30ff 	mov.w	r0, #4294967295
  4073ec:	81a3      	strh	r3, [r4, #12]
  4073ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073f0:	004081b8 	.word	0x004081b8
  4073f4:	004072d1 	.word	0x004072d1

004073f8 <_sbrk_r>:
  4073f8:	b538      	push	{r3, r4, r5, lr}
  4073fa:	4c07      	ldr	r4, [pc, #28]	; (407418 <_sbrk_r+0x20>)
  4073fc:	2300      	movs	r3, #0
  4073fe:	4605      	mov	r5, r0
  407400:	4608      	mov	r0, r1
  407402:	6023      	str	r3, [r4, #0]
  407404:	f7fa fdf0 	bl	401fe8 <_sbrk>
  407408:	1c43      	adds	r3, r0, #1
  40740a:	d000      	beq.n	40740e <_sbrk_r+0x16>
  40740c:	bd38      	pop	{r3, r4, r5, pc}
  40740e:	6823      	ldr	r3, [r4, #0]
  407410:	2b00      	cmp	r3, #0
  407412:	d0fb      	beq.n	40740c <_sbrk_r+0x14>
  407414:	602b      	str	r3, [r5, #0]
  407416:	bd38      	pop	{r3, r4, r5, pc}
  407418:	2040168c 	.word	0x2040168c

0040741c <__sread>:
  40741c:	b510      	push	{r4, lr}
  40741e:	460c      	mov	r4, r1
  407420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407424:	f000 fa26 	bl	407874 <_read_r>
  407428:	2800      	cmp	r0, #0
  40742a:	db03      	blt.n	407434 <__sread+0x18>
  40742c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40742e:	4403      	add	r3, r0
  407430:	6523      	str	r3, [r4, #80]	; 0x50
  407432:	bd10      	pop	{r4, pc}
  407434:	89a3      	ldrh	r3, [r4, #12]
  407436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40743a:	81a3      	strh	r3, [r4, #12]
  40743c:	bd10      	pop	{r4, pc}
  40743e:	bf00      	nop

00407440 <__swrite>:
  407440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407444:	4616      	mov	r6, r2
  407446:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40744a:	461f      	mov	r7, r3
  40744c:	05d3      	lsls	r3, r2, #23
  40744e:	460c      	mov	r4, r1
  407450:	4605      	mov	r5, r0
  407452:	d507      	bpl.n	407464 <__swrite+0x24>
  407454:	2200      	movs	r2, #0
  407456:	2302      	movs	r3, #2
  407458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40745c:	f000 f9f4 	bl	407848 <_lseek_r>
  407460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40746c:	81a2      	strh	r2, [r4, #12]
  40746e:	463b      	mov	r3, r7
  407470:	4632      	mov	r2, r6
  407472:	4628      	mov	r0, r5
  407474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407478:	f000 b8a4 	b.w	4075c4 <_write_r>

0040747c <__sseek>:
  40747c:	b510      	push	{r4, lr}
  40747e:	460c      	mov	r4, r1
  407480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407484:	f000 f9e0 	bl	407848 <_lseek_r>
  407488:	89a3      	ldrh	r3, [r4, #12]
  40748a:	1c42      	adds	r2, r0, #1
  40748c:	bf0e      	itee	eq
  40748e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407496:	6520      	strne	r0, [r4, #80]	; 0x50
  407498:	81a3      	strh	r3, [r4, #12]
  40749a:	bd10      	pop	{r4, pc}

0040749c <__sclose>:
  40749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4074a0:	f000 b938 	b.w	407714 <_close_r>

004074a4 <__swbuf_r>:
  4074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074a6:	460d      	mov	r5, r1
  4074a8:	4614      	mov	r4, r2
  4074aa:	4606      	mov	r6, r0
  4074ac:	b110      	cbz	r0, 4074b4 <__swbuf_r+0x10>
  4074ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4074b0:	2b00      	cmp	r3, #0
  4074b2:	d04b      	beq.n	40754c <__swbuf_r+0xa8>
  4074b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4074b8:	69a3      	ldr	r3, [r4, #24]
  4074ba:	60a3      	str	r3, [r4, #8]
  4074bc:	b291      	uxth	r1, r2
  4074be:	0708      	lsls	r0, r1, #28
  4074c0:	d539      	bpl.n	407536 <__swbuf_r+0x92>
  4074c2:	6923      	ldr	r3, [r4, #16]
  4074c4:	2b00      	cmp	r3, #0
  4074c6:	d036      	beq.n	407536 <__swbuf_r+0x92>
  4074c8:	b2ed      	uxtb	r5, r5
  4074ca:	0489      	lsls	r1, r1, #18
  4074cc:	462f      	mov	r7, r5
  4074ce:	d515      	bpl.n	4074fc <__swbuf_r+0x58>
  4074d0:	6822      	ldr	r2, [r4, #0]
  4074d2:	6961      	ldr	r1, [r4, #20]
  4074d4:	1ad3      	subs	r3, r2, r3
  4074d6:	428b      	cmp	r3, r1
  4074d8:	da1c      	bge.n	407514 <__swbuf_r+0x70>
  4074da:	3301      	adds	r3, #1
  4074dc:	68a1      	ldr	r1, [r4, #8]
  4074de:	1c50      	adds	r0, r2, #1
  4074e0:	3901      	subs	r1, #1
  4074e2:	60a1      	str	r1, [r4, #8]
  4074e4:	6020      	str	r0, [r4, #0]
  4074e6:	7015      	strb	r5, [r2, #0]
  4074e8:	6962      	ldr	r2, [r4, #20]
  4074ea:	429a      	cmp	r2, r3
  4074ec:	d01a      	beq.n	407524 <__swbuf_r+0x80>
  4074ee:	89a3      	ldrh	r3, [r4, #12]
  4074f0:	07db      	lsls	r3, r3, #31
  4074f2:	d501      	bpl.n	4074f8 <__swbuf_r+0x54>
  4074f4:	2d0a      	cmp	r5, #10
  4074f6:	d015      	beq.n	407524 <__swbuf_r+0x80>
  4074f8:	4638      	mov	r0, r7
  4074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4074fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4074fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407502:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407506:	81a2      	strh	r2, [r4, #12]
  407508:	6822      	ldr	r2, [r4, #0]
  40750a:	6661      	str	r1, [r4, #100]	; 0x64
  40750c:	6961      	ldr	r1, [r4, #20]
  40750e:	1ad3      	subs	r3, r2, r3
  407510:	428b      	cmp	r3, r1
  407512:	dbe2      	blt.n	4074da <__swbuf_r+0x36>
  407514:	4621      	mov	r1, r4
  407516:	4630      	mov	r0, r6
  407518:	f7fe f9cc 	bl	4058b4 <_fflush_r>
  40751c:	b940      	cbnz	r0, 407530 <__swbuf_r+0x8c>
  40751e:	6822      	ldr	r2, [r4, #0]
  407520:	2301      	movs	r3, #1
  407522:	e7db      	b.n	4074dc <__swbuf_r+0x38>
  407524:	4621      	mov	r1, r4
  407526:	4630      	mov	r0, r6
  407528:	f7fe f9c4 	bl	4058b4 <_fflush_r>
  40752c:	2800      	cmp	r0, #0
  40752e:	d0e3      	beq.n	4074f8 <__swbuf_r+0x54>
  407530:	f04f 37ff 	mov.w	r7, #4294967295
  407534:	e7e0      	b.n	4074f8 <__swbuf_r+0x54>
  407536:	4621      	mov	r1, r4
  407538:	4630      	mov	r0, r6
  40753a:	f7fd f8e7 	bl	40470c <__swsetup_r>
  40753e:	2800      	cmp	r0, #0
  407540:	d1f6      	bne.n	407530 <__swbuf_r+0x8c>
  407542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407546:	6923      	ldr	r3, [r4, #16]
  407548:	b291      	uxth	r1, r2
  40754a:	e7bd      	b.n	4074c8 <__swbuf_r+0x24>
  40754c:	f7fe fa1c 	bl	405988 <__sinit>
  407550:	e7b0      	b.n	4074b4 <__swbuf_r+0x10>
  407552:	bf00      	nop

00407554 <_wcrtomb_r>:
  407554:	b5f0      	push	{r4, r5, r6, r7, lr}
  407556:	4606      	mov	r6, r0
  407558:	b085      	sub	sp, #20
  40755a:	461f      	mov	r7, r3
  40755c:	b189      	cbz	r1, 407582 <_wcrtomb_r+0x2e>
  40755e:	4c10      	ldr	r4, [pc, #64]	; (4075a0 <_wcrtomb_r+0x4c>)
  407560:	4d10      	ldr	r5, [pc, #64]	; (4075a4 <_wcrtomb_r+0x50>)
  407562:	6824      	ldr	r4, [r4, #0]
  407564:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407566:	2c00      	cmp	r4, #0
  407568:	bf08      	it	eq
  40756a:	462c      	moveq	r4, r5
  40756c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407570:	47a0      	blx	r4
  407572:	1c43      	adds	r3, r0, #1
  407574:	d103      	bne.n	40757e <_wcrtomb_r+0x2a>
  407576:	2200      	movs	r2, #0
  407578:	238a      	movs	r3, #138	; 0x8a
  40757a:	603a      	str	r2, [r7, #0]
  40757c:	6033      	str	r3, [r6, #0]
  40757e:	b005      	add	sp, #20
  407580:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407582:	460c      	mov	r4, r1
  407584:	4906      	ldr	r1, [pc, #24]	; (4075a0 <_wcrtomb_r+0x4c>)
  407586:	4a07      	ldr	r2, [pc, #28]	; (4075a4 <_wcrtomb_r+0x50>)
  407588:	6809      	ldr	r1, [r1, #0]
  40758a:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40758c:	2900      	cmp	r1, #0
  40758e:	bf08      	it	eq
  407590:	4611      	moveq	r1, r2
  407592:	4622      	mov	r2, r4
  407594:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407598:	a901      	add	r1, sp, #4
  40759a:	47a0      	blx	r4
  40759c:	e7e9      	b.n	407572 <_wcrtomb_r+0x1e>
  40759e:	bf00      	nop
  4075a0:	20400018 	.word	0x20400018
  4075a4:	2040044c 	.word	0x2040044c

004075a8 <__ascii_wctomb>:
  4075a8:	b121      	cbz	r1, 4075b4 <__ascii_wctomb+0xc>
  4075aa:	2aff      	cmp	r2, #255	; 0xff
  4075ac:	d804      	bhi.n	4075b8 <__ascii_wctomb+0x10>
  4075ae:	700a      	strb	r2, [r1, #0]
  4075b0:	2001      	movs	r0, #1
  4075b2:	4770      	bx	lr
  4075b4:	4608      	mov	r0, r1
  4075b6:	4770      	bx	lr
  4075b8:	238a      	movs	r3, #138	; 0x8a
  4075ba:	6003      	str	r3, [r0, #0]
  4075bc:	f04f 30ff 	mov.w	r0, #4294967295
  4075c0:	4770      	bx	lr
  4075c2:	bf00      	nop

004075c4 <_write_r>:
  4075c4:	b570      	push	{r4, r5, r6, lr}
  4075c6:	460d      	mov	r5, r1
  4075c8:	4c08      	ldr	r4, [pc, #32]	; (4075ec <_write_r+0x28>)
  4075ca:	4611      	mov	r1, r2
  4075cc:	4606      	mov	r6, r0
  4075ce:	461a      	mov	r2, r3
  4075d0:	4628      	mov	r0, r5
  4075d2:	2300      	movs	r3, #0
  4075d4:	6023      	str	r3, [r4, #0]
  4075d6:	f7fa f961 	bl	40189c <_write>
  4075da:	1c43      	adds	r3, r0, #1
  4075dc:	d000      	beq.n	4075e0 <_write_r+0x1c>
  4075de:	bd70      	pop	{r4, r5, r6, pc}
  4075e0:	6823      	ldr	r3, [r4, #0]
  4075e2:	2b00      	cmp	r3, #0
  4075e4:	d0fb      	beq.n	4075de <_write_r+0x1a>
  4075e6:	6033      	str	r3, [r6, #0]
  4075e8:	bd70      	pop	{r4, r5, r6, pc}
  4075ea:	bf00      	nop
  4075ec:	2040168c 	.word	0x2040168c

004075f0 <__register_exitproc>:
  4075f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4075f4:	4d2c      	ldr	r5, [pc, #176]	; (4076a8 <__register_exitproc+0xb8>)
  4075f6:	4606      	mov	r6, r0
  4075f8:	6828      	ldr	r0, [r5, #0]
  4075fa:	4698      	mov	r8, r3
  4075fc:	460f      	mov	r7, r1
  4075fe:	4691      	mov	r9, r2
  407600:	f7fe fdb6 	bl	406170 <__retarget_lock_acquire_recursive>
  407604:	4b29      	ldr	r3, [pc, #164]	; (4076ac <__register_exitproc+0xbc>)
  407606:	681c      	ldr	r4, [r3, #0]
  407608:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40760c:	2b00      	cmp	r3, #0
  40760e:	d03e      	beq.n	40768e <__register_exitproc+0x9e>
  407610:	685a      	ldr	r2, [r3, #4]
  407612:	2a1f      	cmp	r2, #31
  407614:	dc1c      	bgt.n	407650 <__register_exitproc+0x60>
  407616:	f102 0e01 	add.w	lr, r2, #1
  40761a:	b176      	cbz	r6, 40763a <__register_exitproc+0x4a>
  40761c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407620:	2401      	movs	r4, #1
  407622:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407626:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40762a:	4094      	lsls	r4, r2
  40762c:	4320      	orrs	r0, r4
  40762e:	2e02      	cmp	r6, #2
  407630:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407634:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407638:	d023      	beq.n	407682 <__register_exitproc+0x92>
  40763a:	3202      	adds	r2, #2
  40763c:	f8c3 e004 	str.w	lr, [r3, #4]
  407640:	6828      	ldr	r0, [r5, #0]
  407642:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407646:	f7fe fd95 	bl	406174 <__retarget_lock_release_recursive>
  40764a:	2000      	movs	r0, #0
  40764c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407650:	4b17      	ldr	r3, [pc, #92]	; (4076b0 <__register_exitproc+0xc0>)
  407652:	b30b      	cbz	r3, 407698 <__register_exitproc+0xa8>
  407654:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407658:	f7fe fe06 	bl	406268 <malloc>
  40765c:	4603      	mov	r3, r0
  40765e:	b1d8      	cbz	r0, 407698 <__register_exitproc+0xa8>
  407660:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407664:	6002      	str	r2, [r0, #0]
  407666:	2100      	movs	r1, #0
  407668:	6041      	str	r1, [r0, #4]
  40766a:	460a      	mov	r2, r1
  40766c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407670:	f04f 0e01 	mov.w	lr, #1
  407674:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407678:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40767c:	2e00      	cmp	r6, #0
  40767e:	d0dc      	beq.n	40763a <__register_exitproc+0x4a>
  407680:	e7cc      	b.n	40761c <__register_exitproc+0x2c>
  407682:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407686:	430c      	orrs	r4, r1
  407688:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40768c:	e7d5      	b.n	40763a <__register_exitproc+0x4a>
  40768e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407692:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407696:	e7bb      	b.n	407610 <__register_exitproc+0x20>
  407698:	6828      	ldr	r0, [r5, #0]
  40769a:	f7fe fd6b 	bl	406174 <__retarget_lock_release_recursive>
  40769e:	f04f 30ff 	mov.w	r0, #4294967295
  4076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076a6:	bf00      	nop
  4076a8:	20400448 	.word	0x20400448
  4076ac:	004081b8 	.word	0x004081b8
  4076b0:	00406269 	.word	0x00406269

004076b4 <_calloc_r>:
  4076b4:	b510      	push	{r4, lr}
  4076b6:	fb02 f101 	mul.w	r1, r2, r1
  4076ba:	f7fe fddd 	bl	406278 <_malloc_r>
  4076be:	4604      	mov	r4, r0
  4076c0:	b1d8      	cbz	r0, 4076fa <_calloc_r+0x46>
  4076c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4076c6:	f022 0203 	bic.w	r2, r2, #3
  4076ca:	3a04      	subs	r2, #4
  4076cc:	2a24      	cmp	r2, #36	; 0x24
  4076ce:	d818      	bhi.n	407702 <_calloc_r+0x4e>
  4076d0:	2a13      	cmp	r2, #19
  4076d2:	d914      	bls.n	4076fe <_calloc_r+0x4a>
  4076d4:	2300      	movs	r3, #0
  4076d6:	2a1b      	cmp	r2, #27
  4076d8:	6003      	str	r3, [r0, #0]
  4076da:	6043      	str	r3, [r0, #4]
  4076dc:	d916      	bls.n	40770c <_calloc_r+0x58>
  4076de:	2a24      	cmp	r2, #36	; 0x24
  4076e0:	6083      	str	r3, [r0, #8]
  4076e2:	60c3      	str	r3, [r0, #12]
  4076e4:	bf11      	iteee	ne
  4076e6:	f100 0210 	addne.w	r2, r0, #16
  4076ea:	6103      	streq	r3, [r0, #16]
  4076ec:	6143      	streq	r3, [r0, #20]
  4076ee:	f100 0218 	addeq.w	r2, r0, #24
  4076f2:	2300      	movs	r3, #0
  4076f4:	6013      	str	r3, [r2, #0]
  4076f6:	6053      	str	r3, [r2, #4]
  4076f8:	6093      	str	r3, [r2, #8]
  4076fa:	4620      	mov	r0, r4
  4076fc:	bd10      	pop	{r4, pc}
  4076fe:	4602      	mov	r2, r0
  407700:	e7f7      	b.n	4076f2 <_calloc_r+0x3e>
  407702:	2100      	movs	r1, #0
  407704:	f7fb faac 	bl	402c60 <memset>
  407708:	4620      	mov	r0, r4
  40770a:	bd10      	pop	{r4, pc}
  40770c:	f100 0208 	add.w	r2, r0, #8
  407710:	e7ef      	b.n	4076f2 <_calloc_r+0x3e>
  407712:	bf00      	nop

00407714 <_close_r>:
  407714:	b538      	push	{r3, r4, r5, lr}
  407716:	4c07      	ldr	r4, [pc, #28]	; (407734 <_close_r+0x20>)
  407718:	2300      	movs	r3, #0
  40771a:	4605      	mov	r5, r0
  40771c:	4608      	mov	r0, r1
  40771e:	6023      	str	r3, [r4, #0]
  407720:	f7fa fc7e 	bl	402020 <_close>
  407724:	1c43      	adds	r3, r0, #1
  407726:	d000      	beq.n	40772a <_close_r+0x16>
  407728:	bd38      	pop	{r3, r4, r5, pc}
  40772a:	6823      	ldr	r3, [r4, #0]
  40772c:	2b00      	cmp	r3, #0
  40772e:	d0fb      	beq.n	407728 <_close_r+0x14>
  407730:	602b      	str	r3, [r5, #0]
  407732:	bd38      	pop	{r3, r4, r5, pc}
  407734:	2040168c 	.word	0x2040168c

00407738 <_fclose_r>:
  407738:	b570      	push	{r4, r5, r6, lr}
  40773a:	b159      	cbz	r1, 407754 <_fclose_r+0x1c>
  40773c:	4605      	mov	r5, r0
  40773e:	460c      	mov	r4, r1
  407740:	b110      	cbz	r0, 407748 <_fclose_r+0x10>
  407742:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407744:	2b00      	cmp	r3, #0
  407746:	d03c      	beq.n	4077c2 <_fclose_r+0x8a>
  407748:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40774a:	07d8      	lsls	r0, r3, #31
  40774c:	d505      	bpl.n	40775a <_fclose_r+0x22>
  40774e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407752:	b92b      	cbnz	r3, 407760 <_fclose_r+0x28>
  407754:	2600      	movs	r6, #0
  407756:	4630      	mov	r0, r6
  407758:	bd70      	pop	{r4, r5, r6, pc}
  40775a:	89a3      	ldrh	r3, [r4, #12]
  40775c:	0599      	lsls	r1, r3, #22
  40775e:	d53c      	bpl.n	4077da <_fclose_r+0xa2>
  407760:	4621      	mov	r1, r4
  407762:	4628      	mov	r0, r5
  407764:	f7fe f806 	bl	405774 <__sflush_r>
  407768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40776a:	4606      	mov	r6, r0
  40776c:	b133      	cbz	r3, 40777c <_fclose_r+0x44>
  40776e:	69e1      	ldr	r1, [r4, #28]
  407770:	4628      	mov	r0, r5
  407772:	4798      	blx	r3
  407774:	2800      	cmp	r0, #0
  407776:	bfb8      	it	lt
  407778:	f04f 36ff 	movlt.w	r6, #4294967295
  40777c:	89a3      	ldrh	r3, [r4, #12]
  40777e:	061a      	lsls	r2, r3, #24
  407780:	d422      	bmi.n	4077c8 <_fclose_r+0x90>
  407782:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407784:	b141      	cbz	r1, 407798 <_fclose_r+0x60>
  407786:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40778a:	4299      	cmp	r1, r3
  40778c:	d002      	beq.n	407794 <_fclose_r+0x5c>
  40778e:	4628      	mov	r0, r5
  407790:	f7fe fa20 	bl	405bd4 <_free_r>
  407794:	2300      	movs	r3, #0
  407796:	6323      	str	r3, [r4, #48]	; 0x30
  407798:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40779a:	b121      	cbz	r1, 4077a6 <_fclose_r+0x6e>
  40779c:	4628      	mov	r0, r5
  40779e:	f7fe fa19 	bl	405bd4 <_free_r>
  4077a2:	2300      	movs	r3, #0
  4077a4:	6463      	str	r3, [r4, #68]	; 0x44
  4077a6:	f7fe f91b 	bl	4059e0 <__sfp_lock_acquire>
  4077aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4077ac:	2200      	movs	r2, #0
  4077ae:	07db      	lsls	r3, r3, #31
  4077b0:	81a2      	strh	r2, [r4, #12]
  4077b2:	d50e      	bpl.n	4077d2 <_fclose_r+0x9a>
  4077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4077b6:	f7fe fcd9 	bl	40616c <__retarget_lock_close_recursive>
  4077ba:	f7fe f917 	bl	4059ec <__sfp_lock_release>
  4077be:	4630      	mov	r0, r6
  4077c0:	bd70      	pop	{r4, r5, r6, pc}
  4077c2:	f7fe f8e1 	bl	405988 <__sinit>
  4077c6:	e7bf      	b.n	407748 <_fclose_r+0x10>
  4077c8:	6921      	ldr	r1, [r4, #16]
  4077ca:	4628      	mov	r0, r5
  4077cc:	f7fe fa02 	bl	405bd4 <_free_r>
  4077d0:	e7d7      	b.n	407782 <_fclose_r+0x4a>
  4077d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4077d4:	f7fe fcce 	bl	406174 <__retarget_lock_release_recursive>
  4077d8:	e7ec      	b.n	4077b4 <_fclose_r+0x7c>
  4077da:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4077dc:	f7fe fcc8 	bl	406170 <__retarget_lock_acquire_recursive>
  4077e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4077e4:	2b00      	cmp	r3, #0
  4077e6:	d1bb      	bne.n	407760 <_fclose_r+0x28>
  4077e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4077ea:	f016 0601 	ands.w	r6, r6, #1
  4077ee:	d1b1      	bne.n	407754 <_fclose_r+0x1c>
  4077f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4077f2:	f7fe fcbf 	bl	406174 <__retarget_lock_release_recursive>
  4077f6:	4630      	mov	r0, r6
  4077f8:	bd70      	pop	{r4, r5, r6, pc}
  4077fa:	bf00      	nop

004077fc <_fstat_r>:
  4077fc:	b538      	push	{r3, r4, r5, lr}
  4077fe:	460b      	mov	r3, r1
  407800:	4c07      	ldr	r4, [pc, #28]	; (407820 <_fstat_r+0x24>)
  407802:	4605      	mov	r5, r0
  407804:	4611      	mov	r1, r2
  407806:	4618      	mov	r0, r3
  407808:	2300      	movs	r3, #0
  40780a:	6023      	str	r3, [r4, #0]
  40780c:	f7fa fc0b 	bl	402026 <_fstat>
  407810:	1c43      	adds	r3, r0, #1
  407812:	d000      	beq.n	407816 <_fstat_r+0x1a>
  407814:	bd38      	pop	{r3, r4, r5, pc}
  407816:	6823      	ldr	r3, [r4, #0]
  407818:	2b00      	cmp	r3, #0
  40781a:	d0fb      	beq.n	407814 <_fstat_r+0x18>
  40781c:	602b      	str	r3, [r5, #0]
  40781e:	bd38      	pop	{r3, r4, r5, pc}
  407820:	2040168c 	.word	0x2040168c

00407824 <_isatty_r>:
  407824:	b538      	push	{r3, r4, r5, lr}
  407826:	4c07      	ldr	r4, [pc, #28]	; (407844 <_isatty_r+0x20>)
  407828:	2300      	movs	r3, #0
  40782a:	4605      	mov	r5, r0
  40782c:	4608      	mov	r0, r1
  40782e:	6023      	str	r3, [r4, #0]
  407830:	f7fa fbfe 	bl	402030 <_isatty>
  407834:	1c43      	adds	r3, r0, #1
  407836:	d000      	beq.n	40783a <_isatty_r+0x16>
  407838:	bd38      	pop	{r3, r4, r5, pc}
  40783a:	6823      	ldr	r3, [r4, #0]
  40783c:	2b00      	cmp	r3, #0
  40783e:	d0fb      	beq.n	407838 <_isatty_r+0x14>
  407840:	602b      	str	r3, [r5, #0]
  407842:	bd38      	pop	{r3, r4, r5, pc}
  407844:	2040168c 	.word	0x2040168c

00407848 <_lseek_r>:
  407848:	b570      	push	{r4, r5, r6, lr}
  40784a:	460d      	mov	r5, r1
  40784c:	4c08      	ldr	r4, [pc, #32]	; (407870 <_lseek_r+0x28>)
  40784e:	4611      	mov	r1, r2
  407850:	4606      	mov	r6, r0
  407852:	461a      	mov	r2, r3
  407854:	4628      	mov	r0, r5
  407856:	2300      	movs	r3, #0
  407858:	6023      	str	r3, [r4, #0]
  40785a:	f7fa fbeb 	bl	402034 <_lseek>
  40785e:	1c43      	adds	r3, r0, #1
  407860:	d000      	beq.n	407864 <_lseek_r+0x1c>
  407862:	bd70      	pop	{r4, r5, r6, pc}
  407864:	6823      	ldr	r3, [r4, #0]
  407866:	2b00      	cmp	r3, #0
  407868:	d0fb      	beq.n	407862 <_lseek_r+0x1a>
  40786a:	6033      	str	r3, [r6, #0]
  40786c:	bd70      	pop	{r4, r5, r6, pc}
  40786e:	bf00      	nop
  407870:	2040168c 	.word	0x2040168c

00407874 <_read_r>:
  407874:	b570      	push	{r4, r5, r6, lr}
  407876:	460d      	mov	r5, r1
  407878:	4c08      	ldr	r4, [pc, #32]	; (40789c <_read_r+0x28>)
  40787a:	4611      	mov	r1, r2
  40787c:	4606      	mov	r6, r0
  40787e:	461a      	mov	r2, r3
  407880:	4628      	mov	r0, r5
  407882:	2300      	movs	r3, #0
  407884:	6023      	str	r3, [r4, #0]
  407886:	f7f8 fc91 	bl	4001ac <_read>
  40788a:	1c43      	adds	r3, r0, #1
  40788c:	d000      	beq.n	407890 <_read_r+0x1c>
  40788e:	bd70      	pop	{r4, r5, r6, pc}
  407890:	6823      	ldr	r3, [r4, #0]
  407892:	2b00      	cmp	r3, #0
  407894:	d0fb      	beq.n	40788e <_read_r+0x1a>
  407896:	6033      	str	r3, [r6, #0]
  407898:	bd70      	pop	{r4, r5, r6, pc}
  40789a:	bf00      	nop
  40789c:	2040168c 	.word	0x2040168c

004078a0 <__gedf2>:
  4078a0:	f04f 3cff 	mov.w	ip, #4294967295
  4078a4:	e006      	b.n	4078b4 <__cmpdf2+0x4>
  4078a6:	bf00      	nop

004078a8 <__ledf2>:
  4078a8:	f04f 0c01 	mov.w	ip, #1
  4078ac:	e002      	b.n	4078b4 <__cmpdf2+0x4>
  4078ae:	bf00      	nop

004078b0 <__cmpdf2>:
  4078b0:	f04f 0c01 	mov.w	ip, #1
  4078b4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078c4:	bf18      	it	ne
  4078c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4078ca:	d01b      	beq.n	407904 <__cmpdf2+0x54>
  4078cc:	b001      	add	sp, #4
  4078ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4078d2:	bf0c      	ite	eq
  4078d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4078d8:	ea91 0f03 	teqne	r1, r3
  4078dc:	bf02      	ittt	eq
  4078de:	ea90 0f02 	teqeq	r0, r2
  4078e2:	2000      	moveq	r0, #0
  4078e4:	4770      	bxeq	lr
  4078e6:	f110 0f00 	cmn.w	r0, #0
  4078ea:	ea91 0f03 	teq	r1, r3
  4078ee:	bf58      	it	pl
  4078f0:	4299      	cmppl	r1, r3
  4078f2:	bf08      	it	eq
  4078f4:	4290      	cmpeq	r0, r2
  4078f6:	bf2c      	ite	cs
  4078f8:	17d8      	asrcs	r0, r3, #31
  4078fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4078fe:	f040 0001 	orr.w	r0, r0, #1
  407902:	4770      	bx	lr
  407904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40790c:	d102      	bne.n	407914 <__cmpdf2+0x64>
  40790e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407912:	d107      	bne.n	407924 <__cmpdf2+0x74>
  407914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40791c:	d1d6      	bne.n	4078cc <__cmpdf2+0x1c>
  40791e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407922:	d0d3      	beq.n	4078cc <__cmpdf2+0x1c>
  407924:	f85d 0b04 	ldr.w	r0, [sp], #4
  407928:	4770      	bx	lr
  40792a:	bf00      	nop

0040792c <__aeabi_cdrcmple>:
  40792c:	4684      	mov	ip, r0
  40792e:	4610      	mov	r0, r2
  407930:	4662      	mov	r2, ip
  407932:	468c      	mov	ip, r1
  407934:	4619      	mov	r1, r3
  407936:	4663      	mov	r3, ip
  407938:	e000      	b.n	40793c <__aeabi_cdcmpeq>
  40793a:	bf00      	nop

0040793c <__aeabi_cdcmpeq>:
  40793c:	b501      	push	{r0, lr}
  40793e:	f7ff ffb7 	bl	4078b0 <__cmpdf2>
  407942:	2800      	cmp	r0, #0
  407944:	bf48      	it	mi
  407946:	f110 0f00 	cmnmi.w	r0, #0
  40794a:	bd01      	pop	{r0, pc}

0040794c <__aeabi_dcmpeq>:
  40794c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407950:	f7ff fff4 	bl	40793c <__aeabi_cdcmpeq>
  407954:	bf0c      	ite	eq
  407956:	2001      	moveq	r0, #1
  407958:	2000      	movne	r0, #0
  40795a:	f85d fb08 	ldr.w	pc, [sp], #8
  40795e:	bf00      	nop

00407960 <__aeabi_dcmplt>:
  407960:	f84d ed08 	str.w	lr, [sp, #-8]!
  407964:	f7ff ffea 	bl	40793c <__aeabi_cdcmpeq>
  407968:	bf34      	ite	cc
  40796a:	2001      	movcc	r0, #1
  40796c:	2000      	movcs	r0, #0
  40796e:	f85d fb08 	ldr.w	pc, [sp], #8
  407972:	bf00      	nop

00407974 <__aeabi_dcmple>:
  407974:	f84d ed08 	str.w	lr, [sp, #-8]!
  407978:	f7ff ffe0 	bl	40793c <__aeabi_cdcmpeq>
  40797c:	bf94      	ite	ls
  40797e:	2001      	movls	r0, #1
  407980:	2000      	movhi	r0, #0
  407982:	f85d fb08 	ldr.w	pc, [sp], #8
  407986:	bf00      	nop

00407988 <__aeabi_dcmpge>:
  407988:	f84d ed08 	str.w	lr, [sp, #-8]!
  40798c:	f7ff ffce 	bl	40792c <__aeabi_cdrcmple>
  407990:	bf94      	ite	ls
  407992:	2001      	movls	r0, #1
  407994:	2000      	movhi	r0, #0
  407996:	f85d fb08 	ldr.w	pc, [sp], #8
  40799a:	bf00      	nop

0040799c <__aeabi_dcmpgt>:
  40799c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079a0:	f7ff ffc4 	bl	40792c <__aeabi_cdrcmple>
  4079a4:	bf34      	ite	cc
  4079a6:	2001      	movcc	r0, #1
  4079a8:	2000      	movcs	r0, #0
  4079aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4079ae:	bf00      	nop

004079b0 <__aeabi_dcmpun>:
  4079b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079b8:	d102      	bne.n	4079c0 <__aeabi_dcmpun+0x10>
  4079ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4079be:	d10a      	bne.n	4079d6 <__aeabi_dcmpun+0x26>
  4079c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4079c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079c8:	d102      	bne.n	4079d0 <__aeabi_dcmpun+0x20>
  4079ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4079ce:	d102      	bne.n	4079d6 <__aeabi_dcmpun+0x26>
  4079d0:	f04f 0000 	mov.w	r0, #0
  4079d4:	4770      	bx	lr
  4079d6:	f04f 0001 	mov.w	r0, #1
  4079da:	4770      	bx	lr

004079dc <__aeabi_d2iz>:
  4079dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4079e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4079e4:	d215      	bcs.n	407a12 <__aeabi_d2iz+0x36>
  4079e6:	d511      	bpl.n	407a0c <__aeabi_d2iz+0x30>
  4079e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4079ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4079f0:	d912      	bls.n	407a18 <__aeabi_d2iz+0x3c>
  4079f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4079f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4079fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4079fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a02:	fa23 f002 	lsr.w	r0, r3, r2
  407a06:	bf18      	it	ne
  407a08:	4240      	negne	r0, r0
  407a0a:	4770      	bx	lr
  407a0c:	f04f 0000 	mov.w	r0, #0
  407a10:	4770      	bx	lr
  407a12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a16:	d105      	bne.n	407a24 <__aeabi_d2iz+0x48>
  407a18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a1c:	bf08      	it	eq
  407a1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a22:	4770      	bx	lr
  407a24:	f04f 0000 	mov.w	r0, #0
  407a28:	4770      	bx	lr
  407a2a:	bf00      	nop
  407a2c:	2d0a0a0d 	.word	0x2d0a0a0d
  407a30:	2d2d2d2d 	.word	0x2d2d2d2d
  407a34:	2d2d2d2d 	.word	0x2d2d2d2d
  407a38:	2d2d2d2d 	.word	0x2d2d2d2d
  407a3c:	2d2d2d2d 	.word	0x2d2d2d2d
  407a40:	2d2d2d2d 	.word	0x2d2d2d2d
  407a44:	2d2d2d2d 	.word	0x2d2d2d2d
  407a48:	2d2d2d2d 	.word	0x2d2d2d2d
  407a4c:	2d2d2d2d 	.word	0x2d2d2d2d
  407a50:	2d2d2d2d 	.word	0x2d2d2d2d
  407a54:	2d2d2d2d 	.word	0x2d2d2d2d
  407a58:	2d2d2d2d 	.word	0x2d2d2d2d
  407a5c:	2d0a0d2d 	.word	0x2d0a0d2d
  407a60:	6144203e 	.word	0x6144203e
  407a64:	69566b72 	.word	0x69566b72
  407a68:	6e6f6973 	.word	0x6e6f6973
  407a6c:	334c5020 	.word	0x334c5020
  407a70:	47203036 	.word	0x47203036
  407a74:	4c502d33 	.word	0x4c502d33
  407a78:	414d2043 	.word	0x414d2043
  407a7c:	54522043 	.word	0x54522043
  407a80:	6c655420 	.word	0x6c655420
  407a84:	74656d65 	.word	0x74656d65
  407a88:	0a0d7972 	.word	0x0a0d7972
  407a8c:	44203e2d 	.word	0x44203e2d
  407a90:	33333156 	.word	0x33333156
  407a94:	2f413134 	.word	0x2f413134
  407a98:	33315644 	.word	0x33315644
  407a9c:	41313833 	.word	0x41313833
  407aa0:	3e2d0a0d 	.word	0x3e2d0a0d
  407aa4:	6d6f4320 	.word	0x6d6f4320
  407aa8:	656c6970 	.word	0x656c6970
  407aac:	41203a64 	.word	0x41203a64
  407ab0:	31207270 	.word	0x31207270
  407ab4:	30322037 	.word	0x30322037
  407ab8:	31203032 	.word	0x31203032
  407abc:	38323a32 	.word	0x38323a32
  407ac0:	0d36333a 	.word	0x0d36333a
  407ac4:	2d2d2d0a 	.word	0x2d2d2d0a
  407ac8:	2d2d2d2d 	.word	0x2d2d2d2d
  407acc:	2d2d2d2d 	.word	0x2d2d2d2d
  407ad0:	2d2d2d2d 	.word	0x2d2d2d2d
  407ad4:	2d2d2d2d 	.word	0x2d2d2d2d
  407ad8:	2d2d2d2d 	.word	0x2d2d2d2d
  407adc:	2d2d2d2d 	.word	0x2d2d2d2d
  407ae0:	2d2d2d2d 	.word	0x2d2d2d2d
  407ae4:	2d2d2d2d 	.word	0x2d2d2d2d
  407ae8:	2d2d2d2d 	.word	0x2d2d2d2d
  407aec:	2d2d2d2d 	.word	0x2d2d2d2d
  407af0:	0d2d2d2d 	.word	0x0d2d2d2d
  407af4:	0000000a 	.word	0x0000000a
  407af8:	666e695b 	.word	0x666e695b
  407afc:	49095d6f 	.word	0x49095d6f
  407b00:	61562052 	.word	0x61562052
  407b04:	3a65756c 	.word	0x3a65756c
  407b08:	322e2520 	.word	0x322e2520
  407b0c:	000a0d66 	.word	0x000a0d66
  407b10:	666e695b 	.word	0x666e695b
  407b14:	52095d6f 	.word	0x52095d6f
  407b18:	44204354 	.word	0x44204354
  407b1c:	3a617461 	.word	0x3a617461
  407b20:	25783020 	.word	0x25783020
  407b24:	0d583230 	.word	0x0d583230
  407b28:	000a0d0a 	.word	0x000a0d0a
  407b2c:	666e695b 	.word	0x666e695b
  407b30:	53095d6f 	.word	0x53095d6f
  407b34:	63204950 	.word	0x63204950
  407b38:	756d6d6f 	.word	0x756d6d6f
  407b3c:	6163696e 	.word	0x6163696e
  407b40:	6e6f6974 	.word	0x6e6f6974
  407b44:	746e6920 	.word	0x746e6920
  407b48:	61667265 	.word	0x61667265
  407b4c:	66206563 	.word	0x66206563
  407b50:	656c6961 	.word	0x656c6961
  407b54:	000d2164 	.word	0x000d2164
  407b58:	666e695b 	.word	0x666e695b
  407b5c:	53095d6f 	.word	0x53095d6f
  407b60:	63204950 	.word	0x63204950
  407b64:	756d6d6f 	.word	0x756d6d6f
  407b68:	6163696e 	.word	0x6163696e
  407b6c:	6e6f6974 	.word	0x6e6f6974
  407b70:	746e6920 	.word	0x746e6920
  407b74:	61667265 	.word	0x61667265
  407b78:	73206563 	.word	0x73206563
  407b7c:	65636375 	.word	0x65636375
  407b80:	75667373 	.word	0x75667373
  407b84:	000d216c 	.word	0x000d216c
  407b88:	666e695b 	.word	0x666e695b
  407b8c:	46095d6f 	.word	0x46095d6f
  407b90:	73696e69 	.word	0x73696e69
  407b94:	20646568 	.word	0x20646568
  407b98:	63657865 	.word	0x63657865
  407b9c:	6e697475 	.word	0x6e697475
  407ba0:	444c2067 	.word	0x444c2067
  407ba4:	31363143 	.word	0x31363143
  407ba8:	6e692034 	.word	0x6e692034
  407bac:	61697469 	.word	0x61697469
  407bb0:	617a696c 	.word	0x617a696c
  407bb4:	6e6f6974 	.word	0x6e6f6974
  407bb8:	756f7220 	.word	0x756f7220
  407bbc:	656e6974 	.word	0x656e6974
  407bc0:	0000000d 	.word	0x0000000d
  407bc4:	666e695b 	.word	0x666e695b
  407bc8:	46095d6f 	.word	0x46095d6f
  407bcc:	73696e69 	.word	0x73696e69
  407bd0:	20646568 	.word	0x20646568
  407bd4:	74746567 	.word	0x74746567
  407bd8:	20676e69 	.word	0x20676e69
  407bdc:	6c696f63 	.word	0x6c696f63
  407be0:	6c617620 	.word	0x6c617620
  407be4:	0d736575 	.word	0x0d736575
  407be8:	00000000 	.word	0x00000000
  407bec:	7272655b 	.word	0x7272655b
  407bf0:	095d726f 	.word	0x095d726f
  407bf4:	626f7250 	.word	0x626f7250
  407bf8:	736d656c 	.word	0x736d656c
  407bfc:	69727720 	.word	0x69727720
  407c00:	676e6974 	.word	0x676e6974
  407c04:	206f7420 	.word	0x206f7420
  407c08:	4d456f50 	.word	0x4d456f50
  407c0c:	616f6220 	.word	0x616f6220
  407c10:	76206472 	.word	0x76206472
  407c14:	53206169 	.word	0x53206169
  407c18:	0d214950 	.word	0x0d214950
  407c1c:	00000000 	.word	0x00000000
  407c20:	666e695b 	.word	0x666e695b
  407c24:	4e095d6f 	.word	0x4e095d6f
  407c28:	6968746f 	.word	0x6968746f
  407c2c:	7420676e 	.word	0x7420676e
  407c30:	6572206f 	.word	0x6572206f
  407c34:	2e2e6461 	.word	0x2e2e6461
  407c38:	00000d2e 	.word	0x00000d2e
  407c3c:	7272655b 	.word	0x7272655b
  407c40:	095d726f 	.word	0x095d726f
  407c44:	676e6952 	.word	0x676e6952
  407c48:	66756220 	.word	0x66756220
  407c4c:	20726566 	.word	0x20726566
  407c50:	6c6c7566 	.word	0x6c6c7566
  407c54:	6769202c 	.word	0x6769202c
  407c58:	69726f6e 	.word	0x69726f6e
  407c5c:	7720676e 	.word	0x7720676e
  407c60:	65746972 	.word	0x65746972
  407c64:	000d2173 	.word	0x000d2173
  407c68:	666e695b 	.word	0x666e695b
  407c6c:	47095d6f 	.word	0x47095d6f
  407c70:	6e656572 	.word	0x6e656572
  407c74:	44454c20 	.word	0x44454c20
  407c78:	72757420 	.word	0x72757420
  407c7c:	2064656e 	.word	0x2064656e
  407c80:	2166666f 	.word	0x2166666f
  407c84:	0000000d 	.word	0x0000000d
  407c88:	7272655b 	.word	0x7272655b
  407c8c:	095d726f 	.word	0x095d726f
  407c90:	65657247 	.word	0x65657247
  407c94:	454c206e 	.word	0x454c206e
  407c98:	69642044 	.word	0x69642044
  407c9c:	6f6e2064 	.word	0x6f6e2064
  407ca0:	75742074 	.word	0x75742074
  407ca4:	6f206e72 	.word	0x6f206e72
  407ca8:	73206666 	.word	0x73206666
  407cac:	65636375 	.word	0x65636375
  407cb0:	75667373 	.word	0x75667373
  407cb4:	21796c6c 	.word	0x21796c6c
  407cb8:	0000000d 	.word	0x0000000d
  407cbc:	666e695b 	.word	0x666e695b
  407cc0:	49095d6f 	.word	0x49095d6f
  407cc4:	75742052 	.word	0x75742052
  407cc8:	64656e72 	.word	0x64656e72
  407ccc:	66666f20 	.word	0x66666f20
  407cd0:	00000d21 	.word	0x00000d21
  407cd4:	7272655b 	.word	0x7272655b
  407cd8:	095d726f 	.word	0x095d726f
  407cdc:	64205249 	.word	0x64205249
  407ce0:	6e206469 	.word	0x6e206469
  407ce4:	7420746f 	.word	0x7420746f
  407ce8:	206e7275 	.word	0x206e7275
  407cec:	2066666f 	.word	0x2066666f
  407cf0:	63637573 	.word	0x63637573
  407cf4:	66737365 	.word	0x66737365
  407cf8:	796c6c75 	.word	0x796c6c75
  407cfc:	00000d21 	.word	0x00000d21
  407d00:	666e695b 	.word	0x666e695b
  407d04:	52095d6f 	.word	0x52095d6f
  407d08:	4c206465 	.word	0x4c206465
  407d0c:	74204445 	.word	0x74204445
  407d10:	656e7275 	.word	0x656e7275
  407d14:	666f2064 	.word	0x666f2064
  407d18:	000d2166 	.word	0x000d2166
  407d1c:	7272655b 	.word	0x7272655b
  407d20:	095d726f 	.word	0x095d726f
  407d24:	20646552 	.word	0x20646552
  407d28:	2044454c 	.word	0x2044454c
  407d2c:	20646964 	.word	0x20646964
  407d30:	20746f6e 	.word	0x20746f6e
  407d34:	6e727574 	.word	0x6e727574
  407d38:	66666f20 	.word	0x66666f20
  407d3c:	63757320 	.word	0x63757320
  407d40:	73736563 	.word	0x73736563
  407d44:	6c6c7566 	.word	0x6c6c7566
  407d48:	000d2179 	.word	0x000d2179
  407d4c:	666e695b 	.word	0x666e695b
  407d50:	47095d6f 	.word	0x47095d6f
  407d54:	6e656572 	.word	0x6e656572
  407d58:	44454c20 	.word	0x44454c20
  407d5c:	72757420 	.word	0x72757420
  407d60:	2064656e 	.word	0x2064656e
  407d64:	0d216e6f 	.word	0x0d216e6f
  407d68:	00000000 	.word	0x00000000
  407d6c:	7272655b 	.word	0x7272655b
  407d70:	095d726f 	.word	0x095d726f
  407d74:	65657247 	.word	0x65657247
  407d78:	454c206e 	.word	0x454c206e
  407d7c:	69642044 	.word	0x69642044
  407d80:	6f6e2064 	.word	0x6f6e2064
  407d84:	75742074 	.word	0x75742074
  407d88:	6f206e72 	.word	0x6f206e72
  407d8c:	7573206e 	.word	0x7573206e
  407d90:	73656363 	.word	0x73656363
  407d94:	6c756673 	.word	0x6c756673
  407d98:	0d21796c 	.word	0x0d21796c
  407d9c:	00000000 	.word	0x00000000
  407da0:	666e695b 	.word	0x666e695b
  407da4:	49095d6f 	.word	0x49095d6f
  407da8:	75742052 	.word	0x75742052
  407dac:	64656e72 	.word	0x64656e72
  407db0:	216e6f20 	.word	0x216e6f20
  407db4:	0000000d 	.word	0x0000000d
  407db8:	7272655b 	.word	0x7272655b
  407dbc:	095d726f 	.word	0x095d726f
  407dc0:	64205249 	.word	0x64205249
  407dc4:	6e206469 	.word	0x6e206469
  407dc8:	7420746f 	.word	0x7420746f
  407dcc:	206e7275 	.word	0x206e7275
  407dd0:	73206e6f 	.word	0x73206e6f
  407dd4:	65636375 	.word	0x65636375
  407dd8:	75667373 	.word	0x75667373
  407ddc:	21796c6c 	.word	0x21796c6c
  407de0:	0000000d 	.word	0x0000000d
  407de4:	666e695b 	.word	0x666e695b
  407de8:	52095d6f 	.word	0x52095d6f
  407dec:	4c206465 	.word	0x4c206465
  407df0:	74204445 	.word	0x74204445
  407df4:	656e7275 	.word	0x656e7275
  407df8:	6e6f2064 	.word	0x6e6f2064
  407dfc:	00000d21 	.word	0x00000d21
  407e00:	7272655b 	.word	0x7272655b
  407e04:	095d726f 	.word	0x095d726f
  407e08:	20646552 	.word	0x20646552
  407e0c:	2044454c 	.word	0x2044454c
  407e10:	20646964 	.word	0x20646964
  407e14:	20746f6e 	.word	0x20746f6e
  407e18:	6e727574 	.word	0x6e727574
  407e1c:	206e6f20 	.word	0x206e6f20
  407e20:	63637573 	.word	0x63637573
  407e24:	66737365 	.word	0x66737365
  407e28:	796c6c75 	.word	0x796c6c75
  407e2c:	00000d21 	.word	0x00000d21
  407e30:	7272655b 	.word	0x7272655b
  407e34:	095d726f 	.word	0x095d726f
  407e38:	49746567 	.word	0x49746567
  407e3c:	616e4172 	.word	0x616e4172
  407e40:	56676f6c 	.word	0x56676f6c
  407e44:	63206c61 	.word	0x63206c61
  407e48:	6e6e6168 	.word	0x6e6e6168
  407e4c:	6e206c65 	.word	0x6e206c65
  407e50:	7320746f 	.word	0x7320746f
  407e54:	6f707075 	.word	0x6f707075
  407e58:	64657472 	.word	0x64657472
  407e5c:	00000d21 	.word	0x00000d21
  407e60:	666e695b 	.word	0x666e695b
  407e64:	41095d6f 	.word	0x41095d6f
  407e68:	6f6c616e 	.word	0x6f6c616e
  407e6c:	61562067 	.word	0x61562067
  407e70:	5b65756c 	.word	0x5b65756c
  407e74:	3a5d7525 	.word	0x3a5d7525
  407e78:	322e2520 	.word	0x322e2520
  407e7c:	000a0d66 	.word	0x000a0d66
  407e80:	7272655b 	.word	0x7272655b
  407e84:	095d726f 	.word	0x095d726f
  407e88:	62616e55 	.word	0x62616e55
  407e8c:	7420656c 	.word	0x7420656c
  407e90:	6572206f 	.word	0x6572206f
  407e94:	5a206461 	.word	0x5a206461
  407e98:	616f622d 	.word	0x616f622d
  407e9c:	61206472 	.word	0x61206472
  407ea0:	6f6c616e 	.word	0x6f6c616e
  407ea4:	61762067 	.word	0x61762067
  407ea8:	2065756c 	.word	0x2065756c
  407eac:	63206e6f 	.word	0x63206e6f
  407eb0:	6e6e6168 	.word	0x6e6e6168
  407eb4:	203a6c65 	.word	0x203a6c65
  407eb8:	0a0d7525 	.word	0x0a0d7525
  407ebc:	00000000 	.word	0x00000000
  407ec0:	7272655b 	.word	0x7272655b
  407ec4:	095d726f 	.word	0x095d726f
  407ec8:	62616e55 	.word	0x62616e55
  407ecc:	7420656c 	.word	0x7420656c
  407ed0:	6572206f 	.word	0x6572206f
  407ed4:	49206461 	.word	0x49206461
  407ed8:	61762052 	.word	0x61762052
  407edc:	0d65756c 	.word	0x0d65756c
  407ee0:	00000000 	.word	0x00000000
  407ee4:	7272655b 	.word	0x7272655b
  407ee8:	095d726f 	.word	0x095d726f
  407eec:	20746f4e 	.word	0x20746f4e
  407ef0:	656c6261 	.word	0x656c6261
  407ef4:	69727720 	.word	0x69727720
  407ef8:	63206574 	.word	0x63206574
  407efc:	69666e6f 	.word	0x69666e6f
  407f00:	61727567 	.word	0x61727567
  407f04:	6e6f6974 	.word	0x6e6f6974
  407f08:	74796220 	.word	0x74796220
  407f0c:	6f742065 	.word	0x6f742065
  407f10:	69707320 	.word	0x69707320
  407f14:	6220656e 	.word	0x6220656e
  407f18:	6472616f 	.word	0x6472616f
  407f1c:	43444120 	.word	0x43444120
  407f20:	00000d21 	.word	0x00000d21
  407f24:	666e695b 	.word	0x666e695b
  407f28:	53095d6f 	.word	0x53095d6f
  407f2c:	656e6970 	.word	0x656e6970
  407f30:	616f4220 	.word	0x616f4220
  407f34:	41206472 	.word	0x41206472
  407f38:	6f6c616e 	.word	0x6f6c616e
  407f3c:	61562067 	.word	0x61562067
  407f40:	5b65756c 	.word	0x5b65756c
  407f44:	3a5d7525 	.word	0x3a5d7525
  407f48:	322e2520 	.word	0x322e2520
  407f4c:	000a0d66 	.word	0x000a0d66
  407f50:	7272655b 	.word	0x7272655b
  407f54:	095d726f 	.word	0x095d726f
  407f58:	20746f4e 	.word	0x20746f4e
  407f5c:	656c6261 	.word	0x656c6261
  407f60:	61657220 	.word	0x61657220
  407f64:	72662064 	.word	0x72662064
  407f68:	73206d6f 	.word	0x73206d6f
  407f6c:	656e6970 	.word	0x656e6970
  407f70:	616f6220 	.word	0x616f6220
  407f74:	41206472 	.word	0x41206472
  407f78:	0d214344 	.word	0x0d214344
  407f7c:	00000000 	.word	0x00000000
  407f80:	7272655b 	.word	0x7272655b
  407f84:	095d726f 	.word	0x095d726f
  407f88:	6f636e49 	.word	0x6f636e49
  407f8c:	63657272 	.word	0x63657272
  407f90:	65722074 	.word	0x65722074
  407f94:	69206461 	.word	0x69206461
  407f98:	7265746e 	.word	0x7265746e
  407f9c:	65636166 	.word	0x65636166
  407fa0:	6f726620 	.word	0x6f726620
  407fa4:	2d5a206d 	.word	0x2d5a206d
  407fa8:	72616f42 	.word	0x72616f42
  407fac:	00000d64 	.word	0x00000d64
  407fb0:	7272655b 	.word	0x7272655b
  407fb4:	095d726f 	.word	0x095d726f
  407fb8:	6f636e49 	.word	0x6f636e49
  407fbc:	63657272 	.word	0x63657272
  407fc0:	65722074 	.word	0x65722074
  407fc4:	62206461 	.word	0x62206461
  407fc8:	20657479 	.word	0x20657479
  407fcc:	6e617274 	.word	0x6e617274
  407fd0:	72656673 	.word	0x72656673
  407fd4:	6e656c20 	.word	0x6e656c20
  407fd8:	20687467 	.word	0x20687467
  407fdc:	5a206f74 	.word	0x5a206f74
  407fe0:	616f422d 	.word	0x616f422d
  407fe4:	000d6472 	.word	0x000d6472
  407fe8:	7272655b 	.word	0x7272655b
  407fec:	095d726f 	.word	0x095d726f
  407ff0:	20646142 	.word	0x20646142
  407ff4:	6f422d5a 	.word	0x6f422d5a
  407ff8:	20647261 	.word	0x20647261
  407ffc:	20495053 	.word	0x20495053
  408000:	64616572 	.word	0x64616572
  408004:	74666120 	.word	0x74666120
  408008:	25207265 	.word	0x25207265
  40800c:	65722075 	.word	0x65722075
  408010:	65697274 	.word	0x65697274
  408014:	0a0d2173 	.word	0x0a0d2173
  408018:	00000000 	.word	0x00000000
  40801c:	7272655b 	.word	0x7272655b
  408020:	095d726f 	.word	0x095d726f
  408024:	6f636e49 	.word	0x6f636e49
  408028:	63657272 	.word	0x63657272
  40802c:	72772074 	.word	0x72772074
  408030:	20657469 	.word	0x20657469
  408034:	65746e69 	.word	0x65746e69
  408038:	63616672 	.word	0x63616672
  40803c:	6f742065 	.word	0x6f742065
  408040:	422d5a20 	.word	0x422d5a20
  408044:	6472616f 	.word	0x6472616f
  408048:	0000000d 	.word	0x0000000d
  40804c:	7272655b 	.word	0x7272655b
  408050:	095d726f 	.word	0x095d726f
  408054:	6f636e49 	.word	0x6f636e49
  408058:	63657272 	.word	0x63657272
  40805c:	72772074 	.word	0x72772074
  408060:	20657469 	.word	0x20657469
  408064:	65747962 	.word	0x65747962
  408068:	61727420 	.word	0x61727420
  40806c:	6566736e 	.word	0x6566736e
  408070:	656c2072 	.word	0x656c2072
  408074:	6874676e 	.word	0x6874676e
  408078:	206f7420 	.word	0x206f7420
  40807c:	6f422d5a 	.word	0x6f422d5a
  408080:	0d647261 	.word	0x0d647261
  408084:	00000000 	.word	0x00000000
  408088:	7272655b 	.word	0x7272655b
  40808c:	095d726f 	.word	0x095d726f
  408090:	20646142 	.word	0x20646142
  408094:	6f422d5a 	.word	0x6f422d5a
  408098:	20647261 	.word	0x20647261
  40809c:	20495053 	.word	0x20495053
  4080a0:	74697277 	.word	0x74697277
  4080a4:	66612065 	.word	0x66612065
  4080a8:	20726574 	.word	0x20726574
  4080ac:	72207525 	.word	0x72207525
  4080b0:	69727465 	.word	0x69727465
  4080b4:	0d217365 	.word	0x0d217365
  4080b8:	0000000a 	.word	0x0000000a
  4080bc:	7272655b 	.word	0x7272655b
  4080c0:	095d726f 	.word	0x095d726f
  4080c4:	74697257 	.word	0x74697257
  4080c8:	20676e69 	.word	0x20676e69
  4080cc:	69646e69 	.word	0x69646e69
  4080d0:	75646976 	.word	0x75646976
  4080d4:	4c206c61 	.word	0x4c206c61
  4080d8:	36314344 	.word	0x36314344
  4080dc:	64203431 	.word	0x64203431
  4080e0:	75616665 	.word	0x75616665
  4080e4:	6320746c 	.word	0x6320746c
  4080e8:	69666e6f 	.word	0x69666e6f
  4080ec:	61727567 	.word	0x61727567
  4080f0:	6e6f6974 	.word	0x6e6f6974
  4080f4:	69616620 	.word	0x69616620
  4080f8:	2164656c 	.word	0x2164656c
  4080fc:	0000000d 	.word	0x0000000d
  408100:	7272655b 	.word	0x7272655b
  408104:	095d726f 	.word	0x095d726f
  408108:	64616552 	.word	0x64616552
  40810c:	20676e69 	.word	0x20676e69
  408110:	69646e69 	.word	0x69646e69
  408114:	75646976 	.word	0x75646976
  408118:	4c206c61 	.word	0x4c206c61
  40811c:	36314344 	.word	0x36314344
  408120:	64203431 	.word	0x64203431
  408124:	75616665 	.word	0x75616665
  408128:	6320746c 	.word	0x6320746c
  40812c:	69666e6f 	.word	0x69666e6f
  408130:	61727567 	.word	0x61727567
  408134:	6e6f6974 	.word	0x6e6f6974
  408138:	69616620 	.word	0x69616620
  40813c:	2164656c 	.word	0x2164656c
  408140:	0000000d 	.word	0x0000000d
  408144:	7272655b 	.word	0x7272655b
  408148:	095d726f 	.word	0x095d726f
  40814c:	6c696f43 	.word	0x6c696f43
  408150:	616f6220 	.word	0x616f6220
  408154:	63206472 	.word	0x63206472
  408158:	69666e6f 	.word	0x69666e6f
  40815c:	61727567 	.word	0x61727567
  408160:	6e6f6974 	.word	0x6e6f6974
  408164:	61657220 	.word	0x61657220
  408168:	61622d64 	.word	0x61622d64
  40816c:	65206b63 	.word	0x65206b63
  408170:	726f7272 	.word	0x726f7272
  408174:	20746120 	.word	0x20746120
  408178:	65646e69 	.word	0x65646e69
  40817c:	20692078 	.word	0x20692078
  408180:	7525203d 	.word	0x7525203d
  408184:	000a0d21 	.word	0x000a0d21

00408188 <tx_config_addr>:
  408188:	0b0a0908 13121110 17161514 001a1b19     ................

00408198 <tx_config_value>:
  408198:	ffffffff ffffffff 00040004 00040004     ................
  4081a8:	01100110 01100110 0dc20100 0000011c     ................

004081b8 <_global_impure_ptr>:
  4081b8:	20400020 00464e49 00666e69 004e414e      .@ INF.inf.NAN.
  4081c8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  4081d8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4081e8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4081f8:	0000296c 00000030                       l)..0...

00408200 <blanks.7238>:
  408200:	20202020 20202020 20202020 20202020                     

00408210 <zeroes.7239>:
  408210:	30303030 30303030 30303030 30303030     0000000000000000
  408220:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408230:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408240 <__mprec_bigtens>:
  408240:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408250:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408260:	7f73bf3c 75154fdd                       <.s..O.u

00408268 <__mprec_tens>:
  408268:	00000000 3ff00000 00000000 40240000     .......?......$@
  408278:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408288:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408298:	00000000 412e8480 00000000 416312d0     .......A......cA
  4082a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4082b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4082c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4082d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4082e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4082f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408308:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408318:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408328:	79d99db4 44ea7843                       ...yCx.D

00408330 <p05.6055>:
  408330:	00000005 00000019 0000007d              ........}...

0040833c <_ctype_>:
  40833c:	20202000 20202020 28282020 20282828     .         ((((( 
  40834c:	20202020 20202020 20202020 20202020                     
  40835c:	10108820 10101010 10101010 10101010      ...............
  40836c:	04040410 04040404 10040404 10101010     ................
  40837c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40838c:	01010101 01010101 01010101 10101010     ................
  40839c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4083ac:	02020202 02020202 02020202 10101010     ................
  4083bc:	00000020 00000000 00000000 00000000      ...............
	...

00408440 <_init>:
  408440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408442:	bf00      	nop
  408444:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408446:	bc08      	pop	{r3}
  408448:	469e      	mov	lr, r3
  40844a:	4770      	bx	lr

0040844c <__init_array_start>:
  40844c:	004047d5 	.word	0x004047d5

00408450 <__frame_dummy_init_array_entry>:
  408450:	00400165                                e.@.

00408454 <_fini>:
  408454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408456:	bf00      	nop
  408458:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40845a:	bc08      	pop	{r3}
  40845c:	469e      	mov	lr, r3
  40845e:	4770      	bx	lr

00408460 <__fini_array_start>:
  408460:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sul_count_ms>:
2040000c:	01f4 0000                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	1668 2040                                   h.@ 

2040044c <__global_locale>:
2040044c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	75a9 0040 67d9 0040 0000 0000 833c 0040     .u@..g@.....<.@.
2040053c:	823c 0040 8018 0040 8018 0040 8018 0040     <.@...@...@...@.
2040054c:	8018 0040 8018 0040 8018 0040 8018 0040     ..@...@...@...@.
2040055c:	8018 0040 8018 0040 ffff ffff ffff ffff     ..@...@.........
2040056c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400594:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b8 <__malloc_av_>:
	...
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 

204009c0 <__malloc_sbrk_base>:
204009c0:	ffff ffff                                   ....

204009c4 <__malloc_trim_threshold>:
204009c4:	0000 0002                                   ....
