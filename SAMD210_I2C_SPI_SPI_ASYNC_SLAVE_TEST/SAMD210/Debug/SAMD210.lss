
SAMD210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008008  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d0  20000000  00008008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d8  200001d0  000081d8  000201d0  2**2
                  ALLOC
  3 .stack        00001000  200004a8  000084b0  000201d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00030a58  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004907  00000000  00000000  00050ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011f04  00000000  00000000  000555b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f98  00000000  00000000  000674b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001500  00000000  00000000  0006844c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001be54  00000000  00000000  0006994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017973  00000000  00000000  000857a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078d44  00000000  00000000  0009d113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035fc  00000000  00000000  00115e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 14 00 20 31 01 00 00 2d 01 00 00 2d 01 00 00     ... 1...-...-...
	...
      2c:	2d 01 00 00 00 00 00 00 00 00 00 00 2d 01 00 00     -...........-...
      3c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
      4c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
      5c:	00 00 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     ....-...-...-...
      6c:	2d 01 00 00 2d 01 00 00 71 21 00 00 2d 01 00 00     -...-...q!..-...
      7c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 e9 26 00 00     -...-...-....&..
      8c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
      9c:	85 18 00 00 2d 01 00 00 2d 01 00 00 00 00 00 00     ....-...-.......
      ac:	00 00 00 00 2d 01 00 00 2d 01 00 00                 ....-...-...

000000b8 <__do_global_dtors_aux>:
      b8:	b510      	push	{r4, lr}
      ba:	4c06      	ldr	r4, [pc, #24]	; (d4 <__do_global_dtors_aux+0x1c>)
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d107      	bne.n	d2 <__do_global_dtors_aux+0x1a>
      c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <__do_global_dtors_aux+0x20>)
      c4:	2b00      	cmp	r3, #0
      c6:	d002      	beq.n	ce <__do_global_dtors_aux+0x16>
      c8:	4804      	ldr	r0, [pc, #16]	; (dc <__do_global_dtors_aux+0x24>)
      ca:	e000      	b.n	ce <__do_global_dtors_aux+0x16>
      cc:	bf00      	nop
      ce:	2301      	movs	r3, #1
      d0:	7023      	strb	r3, [r4, #0]
      d2:	bd10      	pop	{r4, pc}
      d4:	200001d0 	.word	0x200001d0
      d8:	00000000 	.word	0x00000000
      dc:	00008008 	.word	0x00008008

000000e0 <frame_dummy>:
      e0:	4b08      	ldr	r3, [pc, #32]	; (104 <frame_dummy+0x24>)
      e2:	b510      	push	{r4, lr}
      e4:	2b00      	cmp	r3, #0
      e6:	d003      	beq.n	f0 <frame_dummy+0x10>
      e8:	4907      	ldr	r1, [pc, #28]	; (108 <frame_dummy+0x28>)
      ea:	4808      	ldr	r0, [pc, #32]	; (10c <frame_dummy+0x2c>)
      ec:	e000      	b.n	f0 <frame_dummy+0x10>
      ee:	bf00      	nop
      f0:	4807      	ldr	r0, [pc, #28]	; (110 <frame_dummy+0x30>)
      f2:	6803      	ldr	r3, [r0, #0]
      f4:	2b00      	cmp	r3, #0
      f6:	d100      	bne.n	fa <frame_dummy+0x1a>
      f8:	bd10      	pop	{r4, pc}
      fa:	4b06      	ldr	r3, [pc, #24]	; (114 <frame_dummy+0x34>)
      fc:	2b00      	cmp	r3, #0
      fe:	d0fb      	beq.n	f8 <frame_dummy+0x18>
     100:	4798      	blx	r3
     102:	e7f9      	b.n	f8 <frame_dummy+0x18>
     104:	00000000 	.word	0x00000000
     108:	200001d4 	.word	0x200001d4
     10c:	00008008 	.word	0x00008008
     110:	00008008 	.word	0x00008008
     114:	00000000 	.word	0x00000000

00000118 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     118:	b510      	push	{r4, lr}
	system_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0xc>)
     11c:	4798      	blx	r3
	stdio_redirect_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0x10>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	000006c9 	.word	0x000006c9
     128:	00003025 	.word	0x00003025

0000012c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     12c:	e7fe      	b.n	12c <Dummy_Handler>
	...

00000130 <Reset_Handler>:
{
     130:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     132:	4a26      	ldr	r2, [pc, #152]	; (1cc <Reset_Handler+0x9c>)
     134:	4b26      	ldr	r3, [pc, #152]	; (1d0 <Reset_Handler+0xa0>)
     136:	429a      	cmp	r2, r3
     138:	d011      	beq.n	15e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     13a:	001a      	movs	r2, r3
     13c:	4b25      	ldr	r3, [pc, #148]	; (1d4 <Reset_Handler+0xa4>)
     13e:	429a      	cmp	r2, r3
     140:	d20d      	bcs.n	15e <Reset_Handler+0x2e>
     142:	4a25      	ldr	r2, [pc, #148]	; (1d8 <Reset_Handler+0xa8>)
     144:	3303      	adds	r3, #3
     146:	1a9b      	subs	r3, r3, r2
     148:	089b      	lsrs	r3, r3, #2
     14a:	3301      	adds	r3, #1
     14c:	009b      	lsls	r3, r3, #2
     14e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     150:	481f      	ldr	r0, [pc, #124]	; (1d0 <Reset_Handler+0xa0>)
     152:	491e      	ldr	r1, [pc, #120]	; (1cc <Reset_Handler+0x9c>)
     154:	588c      	ldr	r4, [r1, r2]
     156:	5084      	str	r4, [r0, r2]
     158:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     15a:	429a      	cmp	r2, r3
     15c:	d1fa      	bne.n	154 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15e:	4a1f      	ldr	r2, [pc, #124]	; (1dc <Reset_Handler+0xac>)
     160:	4b1f      	ldr	r3, [pc, #124]	; (1e0 <Reset_Handler+0xb0>)
     162:	429a      	cmp	r2, r3
     164:	d20a      	bcs.n	17c <Reset_Handler+0x4c>
     166:	43d3      	mvns	r3, r2
     168:	491d      	ldr	r1, [pc, #116]	; (1e0 <Reset_Handler+0xb0>)
     16a:	185b      	adds	r3, r3, r1
     16c:	2103      	movs	r1, #3
     16e:	438b      	bics	r3, r1
     170:	3304      	adds	r3, #4
     172:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     174:	2100      	movs	r1, #0
     176:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     178:	4293      	cmp	r3, r2
     17a:	d1fc      	bne.n	176 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4a19      	ldr	r2, [pc, #100]	; (1e4 <Reset_Handler+0xb4>)
     17e:	21ff      	movs	r1, #255	; 0xff
     180:	4b19      	ldr	r3, [pc, #100]	; (1e8 <Reset_Handler+0xb8>)
     182:	438b      	bics	r3, r1
     184:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     186:	39fd      	subs	r1, #253	; 0xfd
     188:	2390      	movs	r3, #144	; 0x90
     18a:	005b      	lsls	r3, r3, #1
     18c:	4a17      	ldr	r2, [pc, #92]	; (1ec <Reset_Handler+0xbc>)
     18e:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     190:	4b17      	ldr	r3, [pc, #92]	; (1f0 <Reset_Handler+0xc0>)
     192:	7b9a      	ldrb	r2, [r3, #14]
     194:	312e      	adds	r1, #46	; 0x2e
     196:	438a      	bics	r2, r1
     198:	2120      	movs	r1, #32
     19a:	430a      	orrs	r2, r1
     19c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     19e:	7b9a      	ldrb	r2, [r3, #14]
     1a0:	210c      	movs	r1, #12
     1a2:	438a      	bics	r2, r1
     1a4:	2108      	movs	r1, #8
     1a6:	430a      	orrs	r2, r1
     1a8:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1aa:	7b9a      	ldrb	r2, [r3, #14]
     1ac:	2103      	movs	r1, #3
     1ae:	438a      	bics	r2, r1
     1b0:	2102      	movs	r1, #2
     1b2:	430a      	orrs	r2, r1
     1b4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b6:	4a0f      	ldr	r2, [pc, #60]	; (1f4 <Reset_Handler+0xc4>)
     1b8:	6853      	ldr	r3, [r2, #4]
     1ba:	2180      	movs	r1, #128	; 0x80
     1bc:	430b      	orrs	r3, r1
     1be:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c0:	4b0d      	ldr	r3, [pc, #52]	; (1f8 <Reset_Handler+0xc8>)
     1c2:	4798      	blx	r3
        main();
     1c4:	4b0d      	ldr	r3, [pc, #52]	; (1fc <Reset_Handler+0xcc>)
     1c6:	4798      	blx	r3
     1c8:	e7fe      	b.n	1c8 <Reset_Handler+0x98>
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00008008 	.word	0x00008008
     1d0:	20000000 	.word	0x20000000
     1d4:	200001d0 	.word	0x200001d0
     1d8:	20000004 	.word	0x20000004
     1dc:	200001d0 	.word	0x200001d0
     1e0:	200004a8 	.word	0x200004a8
     1e4:	e000ed00 	.word	0xe000ed00
     1e8:	00000000 	.word	0x00000000
     1ec:	41007000 	.word	0x41007000
     1f0:	41004800 	.word	0x41004800
     1f4:	41004000 	.word	0x41004000
     1f8:	00003045 	.word	0x00003045
     1fc:	00002709 	.word	0x00002709

00000200 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     200:	b5f0      	push	{r4, r5, r6, r7, lr}
     202:	b085      	sub	sp, #20
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     204:	4a2e      	ldr	r2, [pc, #184]	; (2c0 <ADC_0_init+0xc0>)
     206:	6a11      	ldr	r1, [r2, #32]
     208:	2380      	movs	r3, #128	; 0x80
     20a:	025b      	lsls	r3, r3, #9
     20c:	430b      	orrs	r3, r1
     20e:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     210:	4a2c      	ldr	r2, [pc, #176]	; (2c4 <ADC_0_init+0xc4>)
     212:	4b2d      	ldr	r3, [pc, #180]	; (2c8 <ADC_0_init+0xc8>)
     214:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     216:	4d2d      	ldr	r5, [pc, #180]	; (2cc <ADC_0_init+0xcc>)
     218:	4e2d      	ldr	r6, [pc, #180]	; (2d0 <ADC_0_init+0xd0>)
     21a:	2300      	movs	r3, #0
     21c:	9302      	str	r3, [sp, #8]
     21e:	4b2d      	ldr	r3, [pc, #180]	; (2d4 <ADC_0_init+0xd4>)
     220:	9301      	str	r3, [sp, #4]
     222:	2401      	movs	r4, #1
     224:	9400      	str	r4, [sp, #0]
     226:	2300      	movs	r3, #0
     228:	002a      	movs	r2, r5
     22a:	492b      	ldr	r1, [pc, #172]	; (2d8 <ADC_0_init+0xd8>)
     22c:	0030      	movs	r0, r6
     22e:	4f2b      	ldr	r7, [pc, #172]	; (2dc <ADC_0_init+0xdc>)
     230:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     232:	1d2a      	adds	r2, r5, #4
     234:	2310      	movs	r3, #16
     236:	2100      	movs	r1, #0
     238:	0030      	movs	r0, r6
     23a:	4d29      	ldr	r5, [pc, #164]	; (2e0 <ADC_0_init+0xe0>)
     23c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     23e:	23c0      	movs	r3, #192	; 0xc0
     240:	05db      	lsls	r3, r3, #23
     242:	469c      	mov	ip, r3
     244:	2304      	movs	r3, #4
     246:	4662      	mov	r2, ip
     248:	6053      	str	r3, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     24a:	4b26      	ldr	r3, [pc, #152]	; (2e4 <ADC_0_init+0xe4>)
     24c:	4a26      	ldr	r2, [pc, #152]	; (2e8 <ADC_0_init+0xe8>)
     24e:	629a      	str	r2, [r3, #40]	; 0x28
     250:	27c0      	movs	r7, #192	; 0xc0
     252:	063f      	lsls	r7, r7, #24
     254:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     256:	2142      	movs	r1, #66	; 0x42
     258:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     25a:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25c:	2001      	movs	r0, #1
     25e:	4302      	orrs	r2, r0
     260:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     262:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     264:	2631      	movs	r6, #49	; 0x31
     266:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     268:	250f      	movs	r5, #15
     26a:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     26c:	4302      	orrs	r2, r0
     26e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     270:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     272:	2208      	movs	r2, #8
     274:	4661      	mov	r1, ip
     276:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     278:	4a1c      	ldr	r2, [pc, #112]	; (2ec <ADC_0_init+0xec>)
     27a:	629a      	str	r2, [r3, #40]	; 0x28
     27c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27e:	2243      	movs	r2, #67	; 0x43
     280:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     282:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     284:	4301      	orrs	r1, r0
     286:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     288:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     28a:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     28c:	210f      	movs	r1, #15
     28e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     290:	3101      	adds	r1, #1
     292:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     294:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     296:	2240      	movs	r2, #64	; 0x40
     298:	4661      	mov	r1, ip
     29a:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29c:	4a14      	ldr	r2, [pc, #80]	; (2f0 <ADC_0_init+0xf0>)
     29e:	629a      	str	r2, [r3, #40]	; 0x28
     2a0:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a2:	2246      	movs	r2, #70	; 0x46
     2a4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a8:	4301      	orrs	r1, r0
     2aa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ac:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ae:	2133      	movs	r1, #51	; 0x33
     2b0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2b2:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     2b4:	4302      	orrs	r2, r0
     2b6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b8:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06B_ADC_AIN6);
}
     2ba:	b005      	add	sp, #20
     2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	40000400 	.word	0x40000400
     2c4:	0000401e 	.word	0x0000401e
     2c8:	40000c00 	.word	0x40000c00
     2cc:	200001ec 	.word	0x200001ec
     2d0:	200003cc 	.word	0x200003cc
     2d4:	200003f8 	.word	0x200003f8
     2d8:	42004000 	.word	0x42004000
     2dc:	0000082d 	.word	0x0000082d
     2e0:	000008d5 	.word	0x000008d5
     2e4:	41004400 	.word	0x41004400
     2e8:	40000004 	.word	0x40000004
     2ec:	40000008 	.word	0x40000008
     2f0:	40000040 	.word	0x40000040

000002f4 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     2f4:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2f6:	4b12      	ldr	r3, [pc, #72]	; (340 <I2C_0_PORT_init+0x4c>)
     2f8:	2050      	movs	r0, #80	; 0x50
     2fa:	5c19      	ldrb	r1, [r3, r0]
     2fc:	2204      	movs	r2, #4
     2fe:	4391      	bics	r1, r2
     300:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     302:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     304:	2501      	movs	r5, #1
     306:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	2401      	movs	r4, #1
     30a:	4321      	orrs	r1, r4
     30c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     310:	3818      	subs	r0, #24
     312:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     314:	260f      	movs	r6, #15
     316:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     318:	3e0d      	subs	r6, #13
     31a:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     31e:	2151      	movs	r1, #81	; 0x51
     320:	5c5e      	ldrb	r6, [r3, r1]
     322:	4396      	bics	r6, r2
     324:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     326:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     328:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     32a:	4322      	orrs	r2, r4
     32c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     32e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     330:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     332:	3942      	subs	r1, #66	; 0x42
     334:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     336:	3111      	adds	r1, #17
     338:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     33a:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL0, PINMUX_PA17C_SERCOM1_PAD1);
}
     33c:	bd70      	pop	{r4, r5, r6, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	41004400 	.word	0x41004400

00000344 <I2C_0_CLOCK_init>:
     344:	4a05      	ldr	r2, [pc, #20]	; (35c <I2C_0_CLOCK_init+0x18>)
     346:	6a13      	ldr	r3, [r2, #32]
     348:	2108      	movs	r1, #8
     34a:	430b      	orrs	r3, r1
     34c:	6213      	str	r3, [r2, #32]
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <I2C_0_CLOCK_init+0x1c>)
     350:	4a04      	ldr	r2, [pc, #16]	; (364 <I2C_0_CLOCK_init+0x20>)
     352:	805a      	strh	r2, [r3, #2]
     354:	4a04      	ldr	r2, [pc, #16]	; (368 <I2C_0_CLOCK_init+0x24>)
     356:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     358:	4770      	bx	lr
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	40000400 	.word	0x40000400
     360:	40000c00 	.word	0x40000c00
     364:	00004015 	.word	0x00004015
     368:	00004313 	.word	0x00004313

0000036c <I2C_0_init>:

void I2C_0_init(void)
{
     36c:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     36e:	4b04      	ldr	r3, [pc, #16]	; (380 <I2C_0_init+0x14>)
     370:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
     372:	4904      	ldr	r1, [pc, #16]	; (384 <I2C_0_init+0x18>)
     374:	4804      	ldr	r0, [pc, #16]	; (388 <I2C_0_init+0x1c>)
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <I2C_0_init+0x20>)
     378:	4798      	blx	r3
	I2C_0_PORT_init();
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <I2C_0_init+0x24>)
     37c:	4798      	blx	r3
}
     37e:	bd10      	pop	{r4, pc}
     380:	00000345 	.word	0x00000345
     384:	42000c00 	.word	0x42000c00
     388:	20000468 	.word	0x20000468
     38c:	00000c41 	.word	0x00000c41
     390:	000002f5 	.word	0x000002f5

00000394 <I2C_1_PORT_init>:

void I2C_1_PORT_init(void)
{
     394:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     396:	4b12      	ldr	r3, [pc, #72]	; (3e0 <I2C_1_PORT_init+0x4c>)
     398:	2048      	movs	r0, #72	; 0x48
     39a:	5c19      	ldrb	r1, [r3, r0]
     39c:	2204      	movs	r2, #4
     39e:	4391      	bics	r1, r2
     3a0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a4:	2501      	movs	r5, #1
     3a6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a8:	2401      	movs	r4, #1
     3aa:	4321      	orrs	r1, r4
     3ac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b0:	3814      	subs	r0, #20
     3b2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3b4:	260f      	movs	r6, #15
     3b6:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     3b8:	3e0c      	subs	r6, #12
     3ba:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3bc:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3be:	2149      	movs	r1, #73	; 0x49
     3c0:	5c5e      	ldrb	r6, [r3, r1]
     3c2:	4396      	bics	r6, r2
     3c4:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c8:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ca:	4322      	orrs	r2, r4
     3cc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ce:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d2:	393a      	subs	r1, #58	; 0x3a
     3d4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3d6:	3121      	adds	r1, #33	; 0x21
     3d8:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3da:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL1, PINMUX_PA09D_SERCOM2_PAD1);
}
     3dc:	bd70      	pop	{r4, r5, r6, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400

000003e4 <I2C_1_CLOCK_init>:
     3e4:	4a05      	ldr	r2, [pc, #20]	; (3fc <I2C_1_CLOCK_init+0x18>)
     3e6:	6a13      	ldr	r3, [r2, #32]
     3e8:	2110      	movs	r1, #16
     3ea:	430b      	orrs	r3, r1
     3ec:	6213      	str	r3, [r2, #32]
     3ee:	4b04      	ldr	r3, [pc, #16]	; (400 <I2C_1_CLOCK_init+0x1c>)
     3f0:	4a04      	ldr	r2, [pc, #16]	; (404 <I2C_1_CLOCK_init+0x20>)
     3f2:	805a      	strh	r2, [r3, #2]
     3f4:	4a04      	ldr	r2, [pc, #16]	; (408 <I2C_1_CLOCK_init+0x24>)
     3f6:	805a      	strh	r2, [r3, #2]
void I2C_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
}
     3f8:	4770      	bx	lr
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	40000400 	.word	0x40000400
     400:	40000c00 	.word	0x40000c00
     404:	00004016 	.word	0x00004016
     408:	00004313 	.word	0x00004313

0000040c <I2C_1_init>:

void I2C_1_init(void)
{
     40c:	b510      	push	{r4, lr}
	I2C_1_CLOCK_init();
     40e:	4b04      	ldr	r3, [pc, #16]	; (420 <I2C_1_init+0x14>)
     410:	4798      	blx	r3
	i2c_m_sync_init(&I2C_1, SERCOM2);
     412:	4904      	ldr	r1, [pc, #16]	; (424 <I2C_1_init+0x18>)
     414:	4804      	ldr	r0, [pc, #16]	; (428 <I2C_1_init+0x1c>)
     416:	4b05      	ldr	r3, [pc, #20]	; (42c <I2C_1_init+0x20>)
     418:	4798      	blx	r3
	I2C_1_PORT_init();
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <I2C_1_init+0x24>)
     41c:	4798      	blx	r3
}
     41e:	bd10      	pop	{r4, pc}
     420:	000003e5 	.word	0x000003e5
     424:	42001000 	.word	0x42001000
     428:	200003ac 	.word	0x200003ac
     42c:	00000c41 	.word	0x00000c41
     430:	00000395 	.word	0x00000395

00000434 <I2C_2_PORT_init>:

void I2C_2_PORT_init(void)
{
     434:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     436:	4b12      	ldr	r3, [pc, #72]	; (480 <I2C_2_PORT_init+0x4c>)
     438:	2056      	movs	r0, #86	; 0x56
     43a:	5c19      	ldrb	r1, [r3, r0]
     43c:	2204      	movs	r2, #4
     43e:	4391      	bics	r1, r2
     440:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     444:	2501      	movs	r5, #1
     446:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     448:	2401      	movs	r4, #1
     44a:	4321      	orrs	r1, r4
     44c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     450:	381b      	subs	r0, #27
     452:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     454:	260f      	movs	r6, #15
     456:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     458:	3e0d      	subs	r6, #13
     45a:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45e:	2157      	movs	r1, #87	; 0x57
     460:	5c5e      	ldrb	r6, [r3, r1]
     462:	4396      	bics	r6, r2
     464:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     466:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     468:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     46a:	4322      	orrs	r2, r4
     46c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     470:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     472:	3948      	subs	r1, #72	; 0x48
     474:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     476:	3111      	adds	r1, #17
     478:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47a:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL2, PINMUX_PA23C_SERCOM3_PAD1);
}
     47c:	bd70      	pop	{r4, r5, r6, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	41004400 	.word	0x41004400

00000484 <I2C_2_CLOCK_init>:
     484:	4a05      	ldr	r2, [pc, #20]	; (49c <I2C_2_CLOCK_init+0x18>)
     486:	6a13      	ldr	r3, [r2, #32]
     488:	2120      	movs	r1, #32
     48a:	430b      	orrs	r3, r1
     48c:	6213      	str	r3, [r2, #32]
     48e:	4b04      	ldr	r3, [pc, #16]	; (4a0 <I2C_2_CLOCK_init+0x1c>)
     490:	4a04      	ldr	r2, [pc, #16]	; (4a4 <I2C_2_CLOCK_init+0x20>)
     492:	805a      	strh	r2, [r3, #2]
     494:	4a04      	ldr	r2, [pc, #16]	; (4a8 <I2C_2_CLOCK_init+0x24>)
     496:	805a      	strh	r2, [r3, #2]
void I2C_2_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
	_gclk_enable_channel(SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC);
}
     498:	4770      	bx	lr
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	40000400 	.word	0x40000400
     4a0:	40000c00 	.word	0x40000c00
     4a4:	00004017 	.word	0x00004017
     4a8:	00004313 	.word	0x00004313

000004ac <I2C_2_init>:

void I2C_2_init(void)
{
     4ac:	b510      	push	{r4, lr}
	I2C_2_CLOCK_init();
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <I2C_2_init+0x14>)
     4b0:	4798      	blx	r3
	i2c_m_sync_init(&I2C_2, SERCOM3);
     4b2:	4904      	ldr	r1, [pc, #16]	; (4c4 <I2C_2_init+0x18>)
     4b4:	4804      	ldr	r0, [pc, #16]	; (4c8 <I2C_2_init+0x1c>)
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <I2C_2_init+0x20>)
     4b8:	4798      	blx	r3
	I2C_2_PORT_init();
     4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <I2C_2_init+0x24>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	00000485 	.word	0x00000485
     4c4:	42001400 	.word	0x42001400
     4c8:	20000380 	.word	0x20000380
     4cc:	00000c41 	.word	0x00000c41
     4d0:	00000435 	.word	0x00000435

000004d4 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d6:	46de      	mov	lr, fp
     4d8:	4657      	mov	r7, sl
     4da:	464e      	mov	r6, r9
     4dc:	4645      	mov	r5, r8
     4de:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e0:	20c0      	movs	r0, #192	; 0xc0
     4e2:	05c0      	lsls	r0, r0, #23
     4e4:	2380      	movs	r3, #128	; 0x80
     4e6:	005b      	lsls	r3, r3, #1
     4e8:	2294      	movs	r2, #148	; 0x94
     4ea:	5083      	str	r3, [r0, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ec:	3a0c      	subs	r2, #12
     4ee:	5083      	str	r3, [r0, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f0:	4b37      	ldr	r3, [pc, #220]	; (5d0 <SPI_0_PORT_init+0xfc>)
     4f2:	3220      	adds	r2, #32
     4f4:	4937      	ldr	r1, [pc, #220]	; (5d4 <SPI_0_PORT_init+0x100>)
     4f6:	5099      	str	r1, [r3, r2]
     4f8:	21c0      	movs	r1, #192	; 0xc0
     4fa:	0609      	lsls	r1, r1, #24
     4fc:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fe:	26c8      	movs	r6, #200	; 0xc8
     500:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     502:	2501      	movs	r5, #1
     504:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     506:	2401      	movs	r4, #1
     508:	4321      	orrs	r1, r4
     50a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50e:	3e14      	subs	r6, #20
     510:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     512:	270f      	movs	r7, #15
     514:	46b8      	mov	r8, r7
     516:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     518:	3f0c      	subs	r7, #12
     51a:	4339      	orrs	r1, r7
     51c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51e:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     520:	2184      	movs	r1, #132	; 0x84
     522:	468b      	mov	fp, r1
     524:	317d      	adds	r1, #125	; 0x7d
     526:	31ff      	adds	r1, #255	; 0xff
     528:	465f      	mov	r7, fp
     52a:	51c1      	str	r1, [r0, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52c:	492a      	ldr	r1, [pc, #168]	; (5d8 <SPI_0_PORT_init+0x104>)
     52e:	5099      	str	r1, [r3, r2]
     530:	492a      	ldr	r1, [pc, #168]	; (5dc <SPI_0_PORT_init+0x108>)
     532:	468a      	mov	sl, r1
     534:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     536:	3745      	adds	r7, #69	; 0x45
     538:	5dd9      	ldrb	r1, [r3, r7]
     53a:	3403      	adds	r4, #3
     53c:	46a1      	mov	r9, r4
     53e:	43a1      	bics	r1, r4
     540:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     542:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     544:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     546:	3c03      	subs	r4, #3
     548:	4321      	orrs	r1, r4
     54a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     54c:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54e:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     550:	340e      	adds	r4, #14
     552:	46a4      	mov	ip, r4
     554:	4021      	ands	r1, r4
	tmp |= PORT_PMUX_PMUXO(data);
     556:	2730      	movs	r7, #48	; 0x30
     558:	4339      	orrs	r1, r7
     55a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     55c:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     55e:	2180      	movs	r1, #128	; 0x80
     560:	00c9      	lsls	r1, r1, #3
     562:	465c      	mov	r4, fp
     564:	5101      	str	r1, [r0, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     566:	491e      	ldr	r1, [pc, #120]	; (5e0 <SPI_0_PORT_init+0x10c>)
     568:	5099      	str	r1, [r3, r2]
     56a:	4651      	mov	r1, sl
     56c:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     56e:	21ca      	movs	r1, #202	; 0xca
     570:	5c5e      	ldrb	r6, [r3, r1]
     572:	464c      	mov	r4, r9
     574:	43a6      	bics	r6, r4
     576:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	5c5e      	ldrb	r6, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     57a:	43ae      	bics	r6, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	3c03      	subs	r4, #3
     57e:	4326      	orrs	r6, r4
     580:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	26b5      	movs	r6, #181	; 0xb5
     586:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     588:	4644      	mov	r4, r8
     58a:	43a1      	bics	r1, r4
	tmp |= PORT_PMUX_PMUXE(data);
     58c:	3c0c      	subs	r4, #12
     58e:	4321      	orrs	r1, r4
     590:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     594:	2180      	movs	r1, #128	; 0x80
     596:	0109      	lsls	r1, r1, #4
     598:	3491      	adds	r4, #145	; 0x91
     59a:	5101      	str	r1, [r0, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     59c:	3c0c      	subs	r4, #12
     59e:	5101      	str	r1, [r0, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a0:	4910      	ldr	r1, [pc, #64]	; (5e4 <SPI_0_PORT_init+0x110>)
     5a2:	5099      	str	r1, [r3, r2]
     5a4:	21c0      	movs	r1, #192	; 0xc0
     5a6:	0609      	lsls	r1, r1, #24
     5a8:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5aa:	21cb      	movs	r1, #203	; 0xcb
     5ac:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ae:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b0:	3c87      	subs	r4, #135	; 0x87
     5b2:	4314      	orrs	r4, r2
     5b4:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b6:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b8:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ba:	4661      	mov	r1, ip
     5bc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5be:	4317      	orrs	r7, r2
     5c0:	b2ff      	uxtb	r7, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c2:	559f      	strb	r7, [r3, r6]

	// Set pin direction to output
	gpio_set_pin_direction(SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK, PINMUX_PB11D_SERCOM4_PAD3);
}
     5c4:	bc3c      	pop	{r2, r3, r4, r5}
     5c6:	4690      	mov	r8, r2
     5c8:	4699      	mov	r9, r3
     5ca:	46a2      	mov	sl, r4
     5cc:	46ab      	mov	fp, r5
     5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5d0:	41004400 	.word	0x41004400
     5d4:	40000100 	.word	0x40000100
     5d8:	40020200 	.word	0x40020200
     5dc:	c0020000 	.word	0xc0020000
     5e0:	40020400 	.word	0x40020400
     5e4:	40000800 	.word	0x40000800

000005e8 <SPI_0_CLOCK_init>:
     5e8:	4a04      	ldr	r2, [pc, #16]	; (5fc <SPI_0_CLOCK_init+0x14>)
     5ea:	6a13      	ldr	r3, [r2, #32]
     5ec:	2140      	movs	r1, #64	; 0x40
     5ee:	430b      	orrs	r3, r1
     5f0:	6213      	str	r3, [r2, #32]
     5f2:	4a03      	ldr	r2, [pc, #12]	; (600 <SPI_0_CLOCK_init+0x18>)
     5f4:	4b03      	ldr	r3, [pc, #12]	; (604 <SPI_0_CLOCK_init+0x1c>)
     5f6:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
     5f8:	4770      	bx	lr
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	40000400 	.word	0x40000400
     600:	00004018 	.word	0x00004018
     604:	40000c00 	.word	0x40000c00

00000608 <SPI_0_init>:

void SPI_0_init(void)
{
     608:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <SPI_0_init+0x1c>)
     60c:	4798      	blx	r3
	spi_s_async_init(&SPI_0, SERCOM4, (uint8_t *)SPI_0_buf, 32);
     60e:	2320      	movs	r3, #32
     610:	4a05      	ldr	r2, [pc, #20]	; (628 <SPI_0_init+0x20>)
     612:	3214      	adds	r2, #20
     614:	4905      	ldr	r1, [pc, #20]	; (62c <SPI_0_init+0x24>)
     616:	4806      	ldr	r0, [pc, #24]	; (630 <SPI_0_init+0x28>)
     618:	4c06      	ldr	r4, [pc, #24]	; (634 <SPI_0_init+0x2c>)
     61a:	47a0      	blx	r4
	SPI_0_PORT_init();
     61c:	4b06      	ldr	r3, [pc, #24]	; (638 <SPI_0_init+0x30>)
     61e:	4798      	blx	r3
}
     620:	bd10      	pop	{r4, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	000005e9 	.word	0x000005e9
     628:	200001ec 	.word	0x200001ec
     62c:	42001800 	.word	0x42001800
     630:	20000410 	.word	0x20000410
     634:	00000f89 	.word	0x00000f89
     638:	000004d5 	.word	0x000004d5

0000063c <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     63c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <TARGET_IO_PORT_init+0x3c>)
     640:	22c0      	movs	r2, #192	; 0xc0
     642:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     644:	2501      	movs	r5, #1
     646:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     648:	2401      	movs	r4, #1
     64a:	4321      	orrs	r1, r4
     64c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     650:	20b0      	movs	r0, #176	; 0xb0
     652:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     654:	3ab1      	subs	r2, #177	; 0xb1
     656:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     658:	3a0c      	subs	r2, #12
     65a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	21c1      	movs	r1, #193	; 0xc1
     660:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     664:	4322      	orrs	r2, r4
     666:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     668:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     66c:	39b2      	subs	r1, #178	; 0xb2
     66e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     670:	3121      	adds	r1, #33	; 0x21
     672:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     674:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB00, PINMUX_PB00D_SERCOM5_PAD2);

	gpio_set_pin_function(PB01, PINMUX_PB01D_SERCOM5_PAD3);
}
     676:	bd30      	pop	{r4, r5, pc}
     678:	41004400 	.word	0x41004400

0000067c <TARGET_IO_CLOCK_init>:
     67c:	4a04      	ldr	r2, [pc, #16]	; (690 <TARGET_IO_CLOCK_init+0x14>)
     67e:	6a13      	ldr	r3, [r2, #32]
     680:	2180      	movs	r1, #128	; 0x80
     682:	430b      	orrs	r3, r1
     684:	6213      	str	r3, [r2, #32]
     686:	4a03      	ldr	r2, [pc, #12]	; (694 <TARGET_IO_CLOCK_init+0x18>)
     688:	4b03      	ldr	r3, [pc, #12]	; (698 <TARGET_IO_CLOCK_init+0x1c>)
     68a:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     68c:	4770      	bx	lr
     68e:	46c0      	nop			; (mov r8, r8)
     690:	40000400 	.word	0x40000400
     694:	00004019 	.word	0x00004019
     698:	40000c00 	.word	0x40000c00

0000069c <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     69c:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     69e:	4b05      	ldr	r3, [pc, #20]	; (6b4 <TARGET_IO_init+0x18>)
     6a0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM5, (void *)NULL);
     6a2:	2200      	movs	r2, #0
     6a4:	4904      	ldr	r1, [pc, #16]	; (6b8 <TARGET_IO_init+0x1c>)
     6a6:	4805      	ldr	r0, [pc, #20]	; (6bc <TARGET_IO_init+0x20>)
     6a8:	4b05      	ldr	r3, [pc, #20]	; (6c0 <TARGET_IO_init+0x24>)
     6aa:	4798      	blx	r3
	TARGET_IO_PORT_init();
     6ac:	4b05      	ldr	r3, [pc, #20]	; (6c4 <TARGET_IO_init+0x28>)
     6ae:	4798      	blx	r3
}
     6b0:	bd10      	pop	{r4, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	0000067d 	.word	0x0000067d
     6b8:	42001c00 	.word	0x42001c00
     6bc:	200003a0 	.word	0x200003a0
     6c0:	00001449 	.word	0x00001449
     6c4:	0000063d 	.word	0x0000063d

000006c8 <system_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void system_init(void)
{
     6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ca:	46c6      	mov	lr, r8
     6cc:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     6ce:	4b27      	ldr	r3, [pc, #156]	; (76c <system_init+0xa4>)
     6d0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6d2:	21c0      	movs	r1, #192	; 0xc0
     6d4:	05c9      	lsls	r1, r1, #23
     6d6:	2398      	movs	r3, #152	; 0x98
     6d8:	4698      	mov	r8, r3
     6da:	3b94      	subs	r3, #148	; 0x94
     6dc:	4642      	mov	r2, r8
     6de:	508b      	str	r3, [r1, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e0:	2588      	movs	r5, #136	; 0x88
     6e2:	514b      	str	r3, [r1, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e4:	4b22      	ldr	r3, [pc, #136]	; (770 <system_init+0xa8>)
     6e6:	3210      	adds	r2, #16
     6e8:	4822      	ldr	r0, [pc, #136]	; (774 <system_init+0xac>)
     6ea:	5098      	str	r0, [r3, r2]
     6ec:	24c0      	movs	r4, #192	; 0xc0
     6ee:	0624      	lsls	r4, r4, #24
     6f0:	509c      	str	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	20c2      	movs	r0, #194	; 0xc2
     6f4:	4684      	mov	ip, r0
     6f6:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f8:	38c1      	subs	r0, #193	; 0xc1
     6fa:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fc:	4667      	mov	r7, ip
     6fe:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     700:	2608      	movs	r6, #8
     702:	4647      	mov	r7, r8
     704:	51ce      	str	r6, [r1, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     706:	514e      	str	r6, [r1, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     708:	4e1b      	ldr	r6, [pc, #108]	; (778 <system_init+0xb0>)
     70a:	509e      	str	r6, [r3, r2]
     70c:	509c      	str	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     70e:	372b      	adds	r7, #43	; 0x2b
     710:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     712:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     714:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     716:	2610      	movs	r6, #16
     718:	3f2f      	subs	r7, #47	; 0x2f
     71a:	51ce      	str	r6, [r1, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     71c:	514e      	str	r6, [r1, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     71e:	4917      	ldr	r1, [pc, #92]	; (77c <system_init+0xb4>)
     720:	5099      	str	r1, [r3, r2]
     722:	509c      	str	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     724:	21c4      	movs	r1, #196	; 0xc4
     726:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     728:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     72a:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(IR_CTRL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(IR_CTRL, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     72c:	4b14      	ldr	r3, [pc, #80]	; (780 <system_init+0xb8>)
     72e:	4798      	blx	r3

	I2C_0_init();
     730:	4b14      	ldr	r3, [pc, #80]	; (784 <system_init+0xbc>)
     732:	4798      	blx	r3

	I2C_1_init();
     734:	4b14      	ldr	r3, [pc, #80]	; (788 <system_init+0xc0>)
     736:	4798      	blx	r3

	I2C_2_init();
     738:	4b14      	ldr	r3, [pc, #80]	; (78c <system_init+0xc4>)
     73a:	4798      	blx	r3

	SPI_0_init();
     73c:	4b14      	ldr	r3, [pc, #80]	; (790 <system_init+0xc8>)
     73e:	4798      	blx	r3

	TARGET_IO_init();
     740:	4b14      	ldr	r3, [pc, #80]	; (794 <system_init+0xcc>)
     742:	4798      	blx	r3
     744:	4a14      	ldr	r2, [pc, #80]	; (798 <system_init+0xd0>)
     746:	6a11      	ldr	r1, [r2, #32]
     748:	2380      	movs	r3, #128	; 0x80
     74a:	011b      	lsls	r3, r3, #4
     74c:	430b      	orrs	r3, r1
     74e:	6213      	str	r3, [r2, #32]
     750:	4a12      	ldr	r2, [pc, #72]	; (79c <system_init+0xd4>)
     752:	4b13      	ldr	r3, [pc, #76]	; (7a0 <system_init+0xd8>)
     754:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     756:	4b13      	ldr	r3, [pc, #76]	; (7a4 <system_init+0xdc>)
     758:	4798      	blx	r3
     75a:	0002      	movs	r2, r0
     75c:	4912      	ldr	r1, [pc, #72]	; (7a8 <system_init+0xe0>)
     75e:	4813      	ldr	r0, [pc, #76]	; (7ac <system_init+0xe4>)
     760:	4b13      	ldr	r3, [pc, #76]	; (7b0 <system_init+0xe8>)
     762:	4798      	blx	r3

	TIMER_0_init();
}
     764:	bc04      	pop	{r2}
     766:	4690      	mov	r8, r2
     768:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00001915 	.word	0x00001915
     770:	41004400 	.word	0x41004400
     774:	40000004 	.word	0x40000004
     778:	40000008 	.word	0x40000008
     77c:	40000010 	.word	0x40000010
     780:	00000201 	.word	0x00000201
     784:	0000036d 	.word	0x0000036d
     788:	0000040d 	.word	0x0000040d
     78c:	000004ad 	.word	0x000004ad
     790:	00000609 	.word	0x00000609
     794:	0000069d 	.word	0x0000069d
     798:	40000400 	.word	0x40000400
     79c:	0000401b 	.word	0x0000401b
     7a0:	40000c00 	.word	0x40000c00
     7a4:	000026c3 	.word	0x000026c3
     7a8:	42002c00 	.word	0x42002c00
     7ac:	20000488 	.word	0x20000488
     7b0:	00001239 	.word	0x00001239

000007b4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     7b4:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     7b6:	6983      	ldr	r3, [r0, #24]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d000      	beq.n	7be <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     7bc:	4798      	blx	r3
	}
}
     7be:	bd10      	pop	{r4, pc}

000007c0 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     7c0:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     7c2:	69c3      	ldr	r3, [r0, #28]
     7c4:	2b00      	cmp	r3, #0
     7c6:	d000      	beq.n	7ca <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     7c8:	4798      	blx	r3
	}
}
     7ca:	bd10      	pop	{r4, pc}

000007cc <adc_async_channel_conversion_done>:
{
     7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ce:	b083      	sub	sp, #12
     7d0:	0005      	movs	r5, r0
     7d2:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     7d4:	6a03      	ldr	r3, [r0, #32]
     7d6:	5c5b      	ldrb	r3, [r3, r1]
     7d8:	005c      	lsls	r4, r3, #1
     7da:	18e4      	adds	r4, r4, r3
     7dc:	00e4      	lsls	r4, r4, #3
     7de:	6a83      	ldr	r3, [r0, #40]	; 0x28
     7e0:	469c      	mov	ip, r3
     7e2:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     7e4:	1d27      	adds	r7, r4, #4
     7e6:	9201      	str	r2, [sp, #4]
     7e8:	466b      	mov	r3, sp
     7ea:	7919      	ldrb	r1, [r3, #4]
     7ec:	0038      	movs	r0, r7
     7ee:	4b0d      	ldr	r3, [pc, #52]	; (824 <adc_async_channel_conversion_done+0x58>)
     7f0:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     7f2:	0028      	movs	r0, r5
     7f4:	4b0c      	ldr	r3, [pc, #48]	; (828 <adc_async_channel_conversion_done+0x5c>)
     7f6:	4798      	blx	r3
     7f8:	2801      	cmp	r0, #1
     7fa:	d907      	bls.n	80c <adc_async_channel_conversion_done+0x40>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     7fc:	9b01      	ldr	r3, [sp, #4]
     7fe:	0a19      	lsrs	r1, r3, #8
     800:	0038      	movs	r0, r7
     802:	4b08      	ldr	r3, [pc, #32]	; (824 <adc_async_channel_conversion_done+0x58>)
     804:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     806:	8aa3      	ldrh	r3, [r4, #20]
     808:	3301      	adds	r3, #1
     80a:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     80c:	8aa3      	ldrh	r3, [r4, #20]
     80e:	3301      	adds	r3, #1
     810:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     812:	6823      	ldr	r3, [r4, #0]
     814:	2b00      	cmp	r3, #0
     816:	d002      	beq.n	81e <adc_async_channel_conversion_done+0x52>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     818:	0031      	movs	r1, r6
     81a:	0028      	movs	r0, r5
     81c:	4798      	blx	r3
}
     81e:	b003      	add	sp, #12
     820:	bdf0      	pop	{r4, r5, r6, r7, pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	000015cd 	.word	0x000015cd
     828:	000017e1 	.word	0x000017e1

0000082c <adc_async_init>:
{
     82c:	b5f0      	push	{r4, r5, r6, r7, lr}
     82e:	46d6      	mov	lr, sl
     830:	b500      	push	{lr}
     832:	b082      	sub	sp, #8
     834:	0005      	movs	r5, r0
     836:	9101      	str	r1, [sp, #4]
     838:	0016      	movs	r6, r2
     83a:	001c      	movs	r4, r3
     83c:	ab08      	add	r3, sp, #32
     83e:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     840:	2800      	cmp	r0, #0
     842:	d035      	beq.n	8b0 <adc_async_init+0x84>
     844:	2900      	cmp	r1, #0
     846:	d035      	beq.n	8b4 <adc_async_init+0x88>
     848:	2a00      	cmp	r2, #0
     84a:	d035      	beq.n	8b8 <adc_async_init+0x8c>
     84c:	2000      	movs	r0, #0
     84e:	2f00      	cmp	r7, #0
     850:	d002      	beq.n	858 <adc_async_init+0x2c>
     852:	9809      	ldr	r0, [sp, #36]	; 0x24
     854:	1e43      	subs	r3, r0, #1
     856:	4198      	sbcs	r0, r3
     858:	223f      	movs	r2, #63	; 0x3f
     85a:	4918      	ldr	r1, [pc, #96]	; (8bc <adc_async_init+0x90>)
     85c:	4b18      	ldr	r3, [pc, #96]	; (8c0 <adc_async_init+0x94>)
     85e:	469a      	mov	sl, r3
     860:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     862:	1c62      	adds	r2, r4, #1
     864:	0ffb      	lsrs	r3, r7, #31
     866:	17d0      	asrs	r0, r2, #31
     868:	42ba      	cmp	r2, r7
     86a:	4158      	adcs	r0, r3
     86c:	b2c0      	uxtb	r0, r0
     86e:	2240      	movs	r2, #64	; 0x40
     870:	4912      	ldr	r1, [pc, #72]	; (8bc <adc_async_init+0x90>)
     872:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     874:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     876:	22ff      	movs	r2, #255	; 0xff
     878:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     87a:	3301      	adds	r3, #1
     87c:	b2db      	uxtb	r3, r3
     87e:	429c      	cmp	r4, r3
     880:	d2fa      	bcs.n	878 <adc_async_init+0x4c>
	descr->channel_map    = channel_map;
     882:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     884:	2324      	movs	r3, #36	; 0x24
     886:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     888:	3301      	adds	r3, #1
     88a:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     88e:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     890:	9901      	ldr	r1, [sp, #4]
     892:	0028      	movs	r0, r5
     894:	4b0b      	ldr	r3, [pc, #44]	; (8c4 <adc_async_init+0x98>)
     896:	4798      	blx	r3
	if (init_status) {
     898:	2800      	cmp	r0, #0
     89a:	d105      	bne.n	8a8 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     89c:	4b0a      	ldr	r3, [pc, #40]	; (8c8 <adc_async_init+0x9c>)
     89e:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <adc_async_init+0xa0>)
     8a2:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <adc_async_init+0xa4>)
     8a6:	606b      	str	r3, [r5, #4]
}
     8a8:	b002      	add	sp, #8
     8aa:	bc04      	pop	{r2}
     8ac:	4692      	mov	sl, r2
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     8b0:	2000      	movs	r0, #0
     8b2:	e7d1      	b.n	858 <adc_async_init+0x2c>
     8b4:	2000      	movs	r0, #0
     8b6:	e7cf      	b.n	858 <adc_async_init+0x2c>
     8b8:	2000      	movs	r0, #0
     8ba:	e7cd      	b.n	858 <adc_async_init+0x2c>
     8bc:	0000795c 	.word	0x0000795c
     8c0:	000014c1 	.word	0x000014c1
     8c4:	00001775 	.word	0x00001775
     8c8:	000007cd 	.word	0x000007cd
     8cc:	000007b5 	.word	0x000007b5
     8d0:	000007c1 	.word	0x000007c1

000008d4 <adc_async_register_channel_buffer>:
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	b083      	sub	sp, #12
     8d8:	0007      	movs	r7, r0
     8da:	000c      	movs	r4, r1
     8dc:	9200      	str	r2, [sp, #0]
     8de:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     8e0:	2800      	cmp	r0, #0
     8e2:	d01b      	beq.n	91c <adc_async_register_channel_buffer+0x48>
     8e4:	2a00      	cmp	r2, #0
     8e6:	d01b      	beq.n	920 <adc_async_register_channel_buffer+0x4c>
     8e8:	0018      	movs	r0, r3
     8ea:	1e43      	subs	r3, r0, #1
     8ec:	4198      	sbcs	r0, r3
     8ee:	4e23      	ldr	r6, [pc, #140]	; (97c <adc_async_register_channel_buffer+0xa8>)
     8f0:	2266      	movs	r2, #102	; 0x66
     8f2:	0031      	movs	r1, r6
     8f4:	4d22      	ldr	r5, [pc, #136]	; (980 <adc_async_register_channel_buffer+0xac>)
     8f6:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     8f8:	2324      	movs	r3, #36	; 0x24
     8fa:	5cfb      	ldrb	r3, [r7, r3]
     8fc:	2000      	movs	r0, #0
     8fe:	42a3      	cmp	r3, r4
     900:	4140      	adcs	r0, r0
     902:	b2c0      	uxtb	r0, r0
     904:	2267      	movs	r2, #103	; 0x67
     906:	0031      	movs	r1, r6
     908:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     90a:	6a39      	ldr	r1, [r7, #32]
     90c:	5d0b      	ldrb	r3, [r1, r4]
     90e:	2bff      	cmp	r3, #255	; 0xff
     910:	d12a      	bne.n	968 <adc_async_register_channel_buffer+0x94>
	for (i = 0; i <= descr->channel_max; i++) {
     912:	3bdb      	subs	r3, #219	; 0xdb
     914:	5cf8      	ldrb	r0, [r7, r3]
     916:	2600      	movs	r6, #0
     918:	2300      	movs	r3, #0
     91a:	e007      	b.n	92c <adc_async_register_channel_buffer+0x58>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     91c:	2000      	movs	r0, #0
     91e:	e7e6      	b.n	8ee <adc_async_register_channel_buffer+0x1a>
     920:	2000      	movs	r0, #0
     922:	e7e4      	b.n	8ee <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     924:	3301      	adds	r3, #1
     926:	b2db      	uxtb	r3, r3
     928:	4283      	cmp	r3, r0
     92a:	d805      	bhi.n	938 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
     92c:	5cca      	ldrb	r2, [r1, r3]
     92e:	2aff      	cmp	r2, #255	; 0xff
     930:	d0f8      	beq.n	924 <adc_async_register_channel_buffer+0x50>
			index++;
     932:	3601      	adds	r6, #1
     934:	b2f6      	uxtb	r6, r6
     936:	e7f5      	b.n	924 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     938:	2325      	movs	r3, #37	; 0x25
     93a:	5cfb      	ldrb	r3, [r7, r3]
     93c:	42b3      	cmp	r3, r6
     93e:	d316      	bcc.n	96e <adc_async_register_channel_buffer+0x9a>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     940:	0073      	lsls	r3, r6, #1
     942:	199b      	adds	r3, r3, r6
     944:	00dd      	lsls	r5, r3, #3
     946:	6abb      	ldr	r3, [r7, #40]	; 0x28
     948:	1958      	adds	r0, r3, r5
     94a:	3004      	adds	r0, #4
     94c:	9a01      	ldr	r2, [sp, #4]
     94e:	9900      	ldr	r1, [sp, #0]
     950:	4b0c      	ldr	r3, [pc, #48]	; (984 <adc_async_register_channel_buffer+0xb0>)
     952:	4798      	blx	r3
     954:	2800      	cmp	r0, #0
     956:	d10d      	bne.n	974 <adc_async_register_channel_buffer+0xa0>
	descr->channel_map[channel]            = index;
     958:	6a3b      	ldr	r3, [r7, #32]
     95a:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     95e:	195b      	adds	r3, r3, r5
     960:	2200      	movs	r2, #0
     962:	829a      	strh	r2, [r3, #20]
}
     964:	b003      	add	sp, #12
     966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     968:	200d      	movs	r0, #13
     96a:	4240      	negs	r0, r0
     96c:	e7fa      	b.n	964 <adc_async_register_channel_buffer+0x90>
		return ERR_NO_RESOURCE;
     96e:	201c      	movs	r0, #28
     970:	4240      	negs	r0, r0
     972:	e7f7      	b.n	964 <adc_async_register_channel_buffer+0x90>
		return ERR_INVALID_ARG;
     974:	200d      	movs	r0, #13
     976:	4240      	negs	r0, r0
     978:	e7f4      	b.n	964 <adc_async_register_channel_buffer+0x90>
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	0000795c 	.word	0x0000795c
     980:	000014c1 	.word	0x000014c1
     984:	00001531 	.word	0x00001531

00000988 <adc_async_enable_channel>:
{
     988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     98a:	0006      	movs	r6, r0
     98c:	000c      	movs	r4, r1
	ASSERT(descr);
     98e:	4d0b      	ldr	r5, [pc, #44]	; (9bc <adc_async_enable_channel+0x34>)
     990:	1e43      	subs	r3, r0, #1
     992:	4198      	sbcs	r0, r3
     994:	b2c0      	uxtb	r0, r0
     996:	2283      	movs	r2, #131	; 0x83
     998:	0029      	movs	r1, r5
     99a:	4f09      	ldr	r7, [pc, #36]	; (9c0 <adc_async_enable_channel+0x38>)
     99c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     99e:	2324      	movs	r3, #36	; 0x24
     9a0:	5cf3      	ldrb	r3, [r6, r3]
     9a2:	2000      	movs	r0, #0
     9a4:	42a3      	cmp	r3, r4
     9a6:	4140      	adcs	r0, r0
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	2284      	movs	r2, #132	; 0x84
     9ac:	0029      	movs	r1, r5
     9ae:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     9b0:	0021      	movs	r1, r4
     9b2:	0030      	movs	r0, r6
     9b4:	4b03      	ldr	r3, [pc, #12]	; (9c4 <adc_async_enable_channel+0x3c>)
     9b6:	4798      	blx	r3
}
     9b8:	2000      	movs	r0, #0
     9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9bc:	0000795c 	.word	0x0000795c
     9c0:	000014c1 	.word	0x000014c1
     9c4:	000017d5 	.word	0x000017d5

000009c8 <adc_async_register_callback>:
{
     9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ca:	b083      	sub	sp, #12
     9cc:	0007      	movs	r7, r0
     9ce:	9101      	str	r1, [sp, #4]
     9d0:	0015      	movs	r5, r2
     9d2:	001e      	movs	r6, r3
	ASSERT(descr);
     9d4:	1e43      	subs	r3, r0, #1
     9d6:	4198      	sbcs	r0, r3
     9d8:	b2c0      	uxtb	r0, r0
     9da:	229c      	movs	r2, #156	; 0x9c
     9dc:	4916      	ldr	r1, [pc, #88]	; (a38 <adc_async_register_callback+0x70>)
     9de:	4c17      	ldr	r4, [pc, #92]	; (a3c <adc_async_register_callback+0x74>)
     9e0:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     9e2:	2324      	movs	r3, #36	; 0x24
     9e4:	5cfb      	ldrb	r3, [r7, r3]
     9e6:	2000      	movs	r0, #0
     9e8:	9a01      	ldr	r2, [sp, #4]
     9ea:	4293      	cmp	r3, r2
     9ec:	4140      	adcs	r0, r0
     9ee:	b2c0      	uxtb	r0, r0
     9f0:	229d      	movs	r2, #157	; 0x9d
     9f2:	4911      	ldr	r1, [pc, #68]	; (a38 <adc_async_register_callback+0x70>)
     9f4:	47a0      	blx	r4
	switch (type) {
     9f6:	2d01      	cmp	r5, #1
     9f8:	d019      	beq.n	a2e <adc_async_register_callback+0x66>
     9fa:	2d00      	cmp	r5, #0
     9fc:	d004      	beq.n	a08 <adc_async_register_callback+0x40>
     9fe:	2d02      	cmp	r5, #2
     a00:	d017      	beq.n	a32 <adc_async_register_callback+0x6a>
		return ERR_INVALID_ARG;
     a02:	200d      	movs	r0, #13
     a04:	4240      	negs	r0, r0
     a06:	e010      	b.n	a2a <adc_async_register_callback+0x62>
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     a08:	6a3b      	ldr	r3, [r7, #32]
     a0a:	9a01      	ldr	r2, [sp, #4]
     a0c:	5c9a      	ldrb	r2, [r3, r2]
     a0e:	0053      	lsls	r3, r2, #1
     a10:	189b      	adds	r3, r3, r2
     a12:	00db      	lsls	r3, r3, #3
     a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a16:	509e      	str	r6, [r3, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     a18:	1e73      	subs	r3, r6, #1
     a1a:	419e      	sbcs	r6, r3
     a1c:	b2f3      	uxtb	r3, r6
     a1e:	002a      	movs	r2, r5
     a20:	9901      	ldr	r1, [sp, #4]
     a22:	0038      	movs	r0, r7
     a24:	4c06      	ldr	r4, [pc, #24]	; (a40 <adc_async_register_callback+0x78>)
     a26:	47a0      	blx	r4
	return ERR_NONE;
     a28:	2000      	movs	r0, #0
}
     a2a:	b003      	add	sp, #12
     a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		descr->adc_async_cb.monitor = cb;
     a2e:	61be      	str	r6, [r7, #24]
		break;
     a30:	e7f2      	b.n	a18 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     a32:	61fe      	str	r6, [r7, #28]
		break;
     a34:	e7f0      	b.n	a18 <adc_async_register_callback+0x50>
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	0000795c 	.word	0x0000795c
     a3c:	000014c1 	.word	0x000014c1
     a40:	00001845 	.word	0x00001845

00000a44 <adc_async_read_channel>:
{
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	46ce      	mov	lr, r9
     a48:	4647      	mov	r7, r8
     a4a:	b580      	push	{r7, lr}
     a4c:	b085      	sub	sp, #20
     a4e:	0005      	movs	r5, r0
     a50:	000c      	movs	r4, r1
     a52:	0017      	movs	r7, r2
     a54:	4698      	mov	r8, r3
	ASSERT(descr && buffer && length);
     a56:	2800      	cmp	r0, #0
     a58:	d052      	beq.n	b00 <adc_async_read_channel+0xbc>
     a5a:	2a00      	cmp	r2, #0
     a5c:	d052      	beq.n	b04 <adc_async_read_channel+0xc0>
     a5e:	0018      	movs	r0, r3
     a60:	1e43      	subs	r3, r0, #1
     a62:	4198      	sbcs	r0, r3
     a64:	22bc      	movs	r2, #188	; 0xbc
     a66:	492a      	ldr	r1, [pc, #168]	; (b10 <adc_async_read_channel+0xcc>)
     a68:	4e2a      	ldr	r6, [pc, #168]	; (b14 <adc_async_read_channel+0xd0>)
     a6a:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     a6c:	2324      	movs	r3, #36	; 0x24
     a6e:	5ceb      	ldrb	r3, [r5, r3]
     a70:	2000      	movs	r0, #0
     a72:	42a3      	cmp	r3, r4
     a74:	4140      	adcs	r0, r0
     a76:	b2c0      	uxtb	r0, r0
     a78:	22bd      	movs	r2, #189	; 0xbd
     a7a:	4925      	ldr	r1, [pc, #148]	; (b10 <adc_async_read_channel+0xcc>)
     a7c:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     a7e:	0028      	movs	r0, r5
     a80:	4b25      	ldr	r3, [pc, #148]	; (b18 <adc_async_read_channel+0xd4>)
     a82:	4798      	blx	r3
     a84:	0001      	movs	r1, r0
	ASSERT(!(length % data_size));
     a86:	4640      	mov	r0, r8
     a88:	4b24      	ldr	r3, [pc, #144]	; (b1c <adc_async_read_channel+0xd8>)
     a8a:	4798      	blx	r3
     a8c:	4248      	negs	r0, r1
     a8e:	4148      	adcs	r0, r1
     a90:	b2c0      	uxtb	r0, r0
     a92:	22bf      	movs	r2, #191	; 0xbf
     a94:	491e      	ldr	r1, [pc, #120]	; (b10 <adc_async_read_channel+0xcc>)
     a96:	47b0      	blx	r6
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     a98:	6a2b      	ldr	r3, [r5, #32]
     a9a:	5d1a      	ldrb	r2, [r3, r4]
     a9c:	0053      	lsls	r3, r2, #1
     a9e:	189b      	adds	r3, r3, r2
     aa0:	00db      	lsls	r3, r3, #3
     aa2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     aa4:	4691      	mov	r9, r2
     aa6:	4499      	add	r9, r3
	CRITICAL_SECTION_ENTER()
     aa8:	a803      	add	r0, sp, #12
     aaa:	4b1d      	ldr	r3, [pc, #116]	; (b20 <adc_async_read_channel+0xdc>)
     aac:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     aae:	464b      	mov	r3, r9
     ab0:	3304      	adds	r3, #4
     ab2:	9301      	str	r3, [sp, #4]
     ab4:	0018      	movs	r0, r3
     ab6:	4b1b      	ldr	r3, [pc, #108]	; (b24 <adc_async_read_channel+0xe0>)
     ab8:	4798      	blx	r3
     aba:	0004      	movs	r4, r0
	CRITICAL_SECTION_LEAVE()
     abc:	a803      	add	r0, sp, #12
     abe:	4b1a      	ldr	r3, [pc, #104]	; (b28 <adc_async_read_channel+0xe4>)
     ac0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     ac2:	2c00      	cmp	r4, #0
     ac4:	d020      	beq.n	b08 <adc_async_read_channel+0xc4>
     ac6:	4643      	mov	r3, r8
     ac8:	2b00      	cmp	r3, #0
     aca:	d01f      	beq.n	b0c <adc_async_read_channel+0xc8>
     acc:	003d      	movs	r5, r7
     ace:	3c01      	subs	r4, #1
     ad0:	193f      	adds	r7, r7, r4
     ad2:	2400      	movs	r4, #0
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     ad4:	4e15      	ldr	r6, [pc, #84]	; (b2c <adc_async_read_channel+0xe8>)
     ad6:	3401      	adds	r4, #1
     ad8:	b2a4      	uxth	r4, r4
     ada:	0029      	movs	r1, r5
     adc:	9801      	ldr	r0, [sp, #4]
     ade:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
     ae0:	42bd      	cmp	r5, r7
     ae2:	d002      	beq.n	aea <adc_async_read_channel+0xa6>
     ae4:	3501      	adds	r5, #1
     ae6:	45a0      	cmp	r8, r4
     ae8:	d1f5      	bne.n	ad6 <adc_async_read_channel+0x92>
	descr_ch->bytes_in_buffer -= was_read;
     aea:	464b      	mov	r3, r9
     aec:	8a9b      	ldrh	r3, [r3, #20]
     aee:	1b1b      	subs	r3, r3, r4
     af0:	464a      	mov	r2, r9
     af2:	8293      	strh	r3, [r2, #20]
}
     af4:	0020      	movs	r0, r4
     af6:	b005      	add	sp, #20
     af8:	bc0c      	pop	{r2, r3}
     afa:	4690      	mov	r8, r2
     afc:	4699      	mov	r9, r3
     afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && buffer && length);
     b00:	2000      	movs	r0, #0
     b02:	e7af      	b.n	a64 <adc_async_read_channel+0x20>
     b04:	2000      	movs	r0, #0
     b06:	e7ad      	b.n	a64 <adc_async_read_channel+0x20>
	uint16_t was_read = 0;
     b08:	2400      	movs	r4, #0
     b0a:	e7ee      	b.n	aea <adc_async_read_channel+0xa6>
     b0c:	2400      	movs	r4, #0
     b0e:	e7ec      	b.n	aea <adc_async_read_channel+0xa6>
     b10:	0000795c 	.word	0x0000795c
     b14:	000014c1 	.word	0x000014c1
     b18:	000017e1 	.word	0x000017e1
     b1c:	00005d49 	.word	0x00005d49
     b20:	00000ba5 	.word	0x00000ba5
     b24:	0000160d 	.word	0x0000160d
     b28:	00000bb3 	.word	0x00000bb3
     b2c:	00001585 	.word	0x00001585

00000b30 <adc_async_start_conversion>:
{
     b30:	b510      	push	{r4, lr}
     b32:	0004      	movs	r4, r0
	ASSERT(descr);
     b34:	1e43      	subs	r3, r0, #1
     b36:	4198      	sbcs	r0, r3
     b38:	b2c0      	uxtb	r0, r0
     b3a:	22d6      	movs	r2, #214	; 0xd6
     b3c:	4903      	ldr	r1, [pc, #12]	; (b4c <adc_async_start_conversion+0x1c>)
     b3e:	4b04      	ldr	r3, [pc, #16]	; (b50 <adc_async_start_conversion+0x20>)
     b40:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     b42:	0020      	movs	r0, r4
     b44:	4b03      	ldr	r3, [pc, #12]	; (b54 <adc_async_start_conversion+0x24>)
     b46:	4798      	blx	r3
}
     b48:	2000      	movs	r0, #0
     b4a:	bd10      	pop	{r4, pc}
     b4c:	0000795c 	.word	0x0000795c
     b50:	000014c1 	.word	0x000014c1
     b54:	000017f9 	.word	0x000017f9

00000b58 <adc_async_set_inputs>:
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	b083      	sub	sp, #12
     b5c:	0006      	movs	r6, r0
     b5e:	9100      	str	r1, [sp, #0]
     b60:	9201      	str	r2, [sp, #4]
     b62:	001c      	movs	r4, r3
	ASSERT(descr);
     b64:	4d0c      	ldr	r5, [pc, #48]	; (b98 <adc_async_set_inputs+0x40>)
     b66:	1e43      	subs	r3, r0, #1
     b68:	4198      	sbcs	r0, r3
     b6a:	b2c0      	uxtb	r0, r0
     b6c:	22f5      	movs	r2, #245	; 0xf5
     b6e:	0029      	movs	r1, r5
     b70:	4f0a      	ldr	r7, [pc, #40]	; (b9c <adc_async_set_inputs+0x44>)
     b72:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     b74:	2324      	movs	r3, #36	; 0x24
     b76:	5cf3      	ldrb	r3, [r6, r3]
     b78:	2000      	movs	r0, #0
     b7a:	42a3      	cmp	r3, r4
     b7c:	4140      	adcs	r0, r0
     b7e:	b2c0      	uxtb	r0, r0
     b80:	22f6      	movs	r2, #246	; 0xf6
     b82:	0029      	movs	r1, r5
     b84:	47b8      	blx	r7
	_adc_async_set_inputs(&descr->device, pos_input, neg_input, channel);
     b86:	0023      	movs	r3, r4
     b88:	9a01      	ldr	r2, [sp, #4]
     b8a:	9900      	ldr	r1, [sp, #0]
     b8c:	0030      	movs	r0, r6
     b8e:	4c04      	ldr	r4, [pc, #16]	; (ba0 <adc_async_set_inputs+0x48>)
     b90:	47a0      	blx	r4
}
     b92:	2000      	movs	r0, #0
     b94:	b003      	add	sp, #12
     b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b98:	0000795c 	.word	0x0000795c
     b9c:	000014c1 	.word	0x000014c1
     ba0:	0000180d 	.word	0x0000180d

00000ba4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ba4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     ba8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     baa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bac:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     bb0:	4770      	bx	lr

00000bb2 <atomic_leave_critical>:
     bb2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     bb6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     bb8:	f383 8810 	msr	PRIMASK, r3
}
     bbc:	4770      	bx	lr
	...

00000bc0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     bc0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     bc2:	4b04      	ldr	r3, [pc, #16]	; (bd4 <delay_ms+0x14>)
     bc4:	681c      	ldr	r4, [r3, #0]
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <delay_ms+0x18>)
     bc8:	4798      	blx	r3
     bca:	0001      	movs	r1, r0
     bcc:	0020      	movs	r0, r4
     bce:	4b03      	ldr	r3, [pc, #12]	; (bdc <delay_ms+0x1c>)
     bd0:	4798      	blx	r3
}
     bd2:	bd10      	pop	{r4, pc}
     bd4:	20000220 	.word	0x20000220
     bd8:	000018ed 	.word	0x000018ed
     bdc:	0000190d 	.word	0x0000190d

00000be0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     be0:	b510      	push	{r4, lr}
     be2:	b084      	sub	sp, #16
     be4:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     be6:	ab01      	add	r3, sp, #4
     be8:	3814      	subs	r0, #20
     bea:	8b82      	ldrh	r2, [r0, #28]
     bec:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     bee:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     bf0:	4a05      	ldr	r2, [pc, #20]	; (c08 <i2c_m_sync_write+0x28>)
     bf2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     bf4:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     bf6:	0019      	movs	r1, r3
     bf8:	4b04      	ldr	r3, [pc, #16]	; (c0c <i2c_m_sync_write+0x2c>)
     bfa:	4798      	blx	r3

	if (ret) {
     bfc:	2800      	cmp	r0, #0
     bfe:	d100      	bne.n	c02 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     c00:	0020      	movs	r0, r4
}
     c02:	b004      	add	sp, #16
     c04:	bd10      	pop	{r4, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	ffff8000 	.word	0xffff8000
     c0c:	00001c39 	.word	0x00001c39

00000c10 <i2c_m_sync_read>:
{
     c10:	b510      	push	{r4, lr}
     c12:	b084      	sub	sp, #16
     c14:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     c16:	ab01      	add	r3, sp, #4
     c18:	3814      	subs	r0, #20
     c1a:	8b82      	ldrh	r2, [r0, #28]
     c1c:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     c1e:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     c20:	4a05      	ldr	r2, [pc, #20]	; (c38 <i2c_m_sync_read+0x28>)
     c22:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     c24:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     c26:	0019      	movs	r1, r3
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <i2c_m_sync_read+0x2c>)
     c2a:	4798      	blx	r3
	if (ret) {
     c2c:	2800      	cmp	r0, #0
     c2e:	d100      	bne.n	c32 <i2c_m_sync_read+0x22>
	return n;
     c30:	0020      	movs	r0, r4
}
     c32:	b004      	add	sp, #16
     c34:	bd10      	pop	{r4, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	ffff8001 	.word	0xffff8001
     c3c:	00001c39 	.word	0x00001c39

00000c40 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	0004      	movs	r4, r0
     c44:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     c46:	1e43      	subs	r3, r0, #1
     c48:	4198      	sbcs	r0, r3
     c4a:	b2c0      	uxtb	r0, r0
     c4c:	225e      	movs	r2, #94	; 0x5e
     c4e:	4907      	ldr	r1, [pc, #28]	; (c6c <i2c_m_sync_init+0x2c>)
     c50:	4b07      	ldr	r3, [pc, #28]	; (c70 <i2c_m_sync_init+0x30>)
     c52:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     c54:	0029      	movs	r1, r5
     c56:	0020      	movs	r0, r4
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <i2c_m_sync_init+0x34>)
     c5a:	4798      	blx	r3
	if (init_status) {
     c5c:	2800      	cmp	r0, #0
     c5e:	d103      	bne.n	c68 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     c60:	4b05      	ldr	r3, [pc, #20]	; (c78 <i2c_m_sync_init+0x38>)
     c62:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <i2c_m_sync_init+0x3c>)
     c66:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     c68:	bd70      	pop	{r4, r5, r6, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00007978 	.word	0x00007978
     c70:	000014c1 	.word	0x000014c1
     c74:	00001c09 	.word	0x00001c09
     c78:	00000c11 	.word	0x00000c11
     c7c:	00000be1 	.word	0x00000be1

00000c80 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     c80:	0589      	lsls	r1, r1, #22
     c82:	0d89      	lsrs	r1, r1, #22
     c84:	2380      	movs	r3, #128	; 0x80
     c86:	00db      	lsls	r3, r3, #3
     c88:	401a      	ands	r2, r3
     c8a:	430a      	orrs	r2, r1
     c8c:	8382      	strh	r2, [r0, #28]
}
     c8e:	0010      	movs	r0, r2
     c90:	4770      	bx	lr
	...

00000c94 <i2c_m_sync_cmd_write_m>:

	return ERR_NONE;
}

int32_t i2c_m_sync_cmd_write_m(struct i2c_m_sync_desc *i2c, uint8_t *reg_data, uint8_t length)
{
     c94:	b510      	push	{r4, lr}
     c96:	b084      	sub	sp, #16
    struct _i2c_m_msg msg;
    int32_t           ret;

    msg.addr   = i2c->slave_addr;
     c98:	8b84      	ldrh	r4, [r0, #28]
     c9a:	ab01      	add	r3, sp, #4
     c9c:	801c      	strh	r4, [r3, #0]
    if (length == 1) {
     c9e:	2a01      	cmp	r2, #1
     ca0:	d00a      	beq.n	cb8 <i2c_m_sync_cmd_write_m+0x24>
        msg.len    = 2;    
    }
    else {
        msg.len = 3;
     ca2:	2303      	movs	r3, #3
     ca4:	9302      	str	r3, [sp, #8]
    }
    
    msg.flags  = I2C_M_STOP;
     ca6:	ab01      	add	r3, sp, #4
     ca8:	4a05      	ldr	r2, [pc, #20]	; (cc0 <i2c_m_sync_cmd_write_m+0x2c>)
     caa:	805a      	strh	r2, [r3, #2]
    msg.buffer = reg_data;
     cac:	9103      	str	r1, [sp, #12]

    ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     cae:	0019      	movs	r1, r3
     cb0:	4b04      	ldr	r3, [pc, #16]	; (cc4 <i2c_m_sync_cmd_write_m+0x30>)
     cb2:	4798      	blx	r3
        /* error occurred */
        return ret;
    }

    return ERR_NONE;
}
     cb4:	b004      	add	sp, #16
     cb6:	bd10      	pop	{r4, pc}
        msg.len    = 2;    
     cb8:	2302      	movs	r3, #2
     cba:	9302      	str	r3, [sp, #8]
     cbc:	e7f3      	b.n	ca6 <i2c_m_sync_cmd_write_m+0x12>
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	ffff8000 	.word	0xffff8000
     cc4:	00001c39 	.word	0x00001c39

00000cc8 <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	b086      	sub	sp, #24
     ccc:	0004      	movs	r4, r0
     cce:	0016      	movs	r6, r2
     cd0:	001d      	movs	r5, r3
     cd2:	466b      	mov	r3, sp
     cd4:	71d9      	strb	r1, [r3, #7]
     cd6:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     cd8:	a903      	add	r1, sp, #12
     cda:	8b82      	ldrh	r2, [r0, #28]
     cdc:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     cde:	2201      	movs	r2, #1
     ce0:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     ce2:	2200      	movs	r2, #0
     ce4:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     ce6:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ce8:	4b07      	ldr	r3, [pc, #28]	; (d08 <i2c_m_sync_cmd_read+0x40>)
     cea:	4798      	blx	r3

	if (ret != 0) {
     cec:	2800      	cmp	r0, #0
     cee:	d001      	beq.n	cf4 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     cf0:	b006      	add	sp, #24
     cf2:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     cf4:	a903      	add	r1, sp, #12
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <i2c_m_sync_cmd_read+0x44>)
     cf8:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     cfa:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     cfc:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     cfe:	0020      	movs	r0, r4
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <i2c_m_sync_cmd_read+0x40>)
     d02:	4798      	blx	r3
     d04:	e7f4      	b.n	cf0 <i2c_m_sync_cmd_read+0x28>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00001c39 	.word	0x00001c39
     d0c:	ffff8001 	.word	0xffff8001

00000d10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     d10:	b570      	push	{r4, r5, r6, lr}
     d12:	0006      	movs	r6, r0
     d14:	000c      	movs	r4, r1
     d16:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     d18:	2800      	cmp	r0, #0
     d1a:	d00d      	beq.n	d38 <io_write+0x28>
     d1c:	0008      	movs	r0, r1
     d1e:	1e43      	subs	r3, r0, #1
     d20:	4198      	sbcs	r0, r3
     d22:	b2c0      	uxtb	r0, r0
     d24:	2234      	movs	r2, #52	; 0x34
     d26:	4905      	ldr	r1, [pc, #20]	; (d3c <io_write+0x2c>)
     d28:	4b05      	ldr	r3, [pc, #20]	; (d40 <io_write+0x30>)
     d2a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     d2c:	6833      	ldr	r3, [r6, #0]
     d2e:	002a      	movs	r2, r5
     d30:	0021      	movs	r1, r4
     d32:	0030      	movs	r0, r6
     d34:	4798      	blx	r3
}
     d36:	bd70      	pop	{r4, r5, r6, pc}
     d38:	2000      	movs	r0, #0
     d3a:	e7f3      	b.n	d24 <io_write+0x14>
     d3c:	00007994 	.word	0x00007994
     d40:	000014c1 	.word	0x000014c1

00000d44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	0006      	movs	r6, r0
     d48:	000c      	movs	r4, r1
     d4a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     d4c:	2800      	cmp	r0, #0
     d4e:	d00d      	beq.n	d6c <io_read+0x28>
     d50:	0008      	movs	r0, r1
     d52:	1e43      	subs	r3, r0, #1
     d54:	4198      	sbcs	r0, r3
     d56:	b2c0      	uxtb	r0, r0
     d58:	223d      	movs	r2, #61	; 0x3d
     d5a:	4905      	ldr	r1, [pc, #20]	; (d70 <io_read+0x2c>)
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <io_read+0x30>)
     d5e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     d60:	6873      	ldr	r3, [r6, #4]
     d62:	002a      	movs	r2, r5
     d64:	0021      	movs	r1, r4
     d66:	0030      	movs	r0, r6
     d68:	4798      	blx	r3
}
     d6a:	bd70      	pop	{r4, r5, r6, pc}
     d6c:	2000      	movs	r0, #0
     d6e:	e7f3      	b.n	d58 <io_read+0x14>
     d70:	00007994 	.word	0x00007994
     d74:	000014c1 	.word	0x000014c1

00000d78 <spi_s_async_dev_complete>:

	spi->callbacks.rx(spi);
}

static void spi_s_async_dev_complete(struct _spi_s_async_dev *dev)
{
     d78:	b510      	push	{r4, lr}
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
     d7a:	3804      	subs	r0, #4

	spi->callbacks.complete(spi);
     d7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     d7e:	4798      	blx	r3
}
     d80:	bd10      	pop	{r4, pc}

00000d82 <spi_s_async_dummy_func>:
 */
static void spi_s_async_dummy_func(struct spi_s_async_descriptor *spi, uint32_t param)
{
	(void)spi;
	(void)param;
}
     d82:	4770      	bx	lr

00000d84 <_spi_s_async_io_write>:
{
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
     d86:	b083      	sub	sp, #12
     d88:	0004      	movs	r4, r0
     d8a:	000d      	movs	r5, r1
     d8c:	0016      	movs	r6, r2
	ASSERT(io);
     d8e:	1e43      	subs	r3, r0, #1
     d90:	4198      	sbcs	r0, r3
     d92:	b2c0      	uxtb	r0, r0
     d94:	2288      	movs	r2, #136	; 0x88
     d96:	4917      	ldr	r1, [pc, #92]	; (df4 <_spi_s_async_io_write+0x70>)
     d98:	4b17      	ldr	r3, [pc, #92]	; (df8 <_spi_s_async_io_write+0x74>)
     d9a:	4798      	blx	r3
		return ERR_NONE;
     d9c:	2000      	movs	r0, #0
	if (size == 0) {
     d9e:	2e00      	cmp	r6, #0
     da0:	d101      	bne.n	da6 <_spi_s_async_io_write+0x22>
}
     da2:	b003      	add	sp, #12
     da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_enter_critical(&flags);
     da6:	a801      	add	r0, sp, #4
     da8:	4b14      	ldr	r3, [pc, #80]	; (dfc <_spi_s_async_io_write+0x78>)
     daa:	4798      	blx	r3
	if (spi->busy) {
     dac:	2255      	movs	r2, #85	; 0x55
     dae:	0023      	movs	r3, r4
     db0:	3b24      	subs	r3, #36	; 0x24
     db2:	5c9b      	ldrb	r3, [r3, r2]
     db4:	07db      	lsls	r3, r3, #31
     db6:	d416      	bmi.n	de6 <_spi_s_async_io_write+0x62>
	spi->busy = 1;
     db8:	0027      	movs	r7, r4
     dba:	3f24      	subs	r7, #36	; 0x24
     dbc:	2255      	movs	r2, #85	; 0x55
     dbe:	5cbb      	ldrb	r3, [r7, r2]
     dc0:	2101      	movs	r1, #1
     dc2:	430b      	orrs	r3, r1
     dc4:	54bb      	strb	r3, [r7, r2]
	atomic_leave_critical(&flags);
     dc6:	a801      	add	r0, sp, #4
     dc8:	4b0d      	ldr	r3, [pc, #52]	; (e00 <_spi_s_async_io_write+0x7c>)
     dca:	4798      	blx	r3
	spi->txbuf  = (uint8_t *)buf;
     dcc:	63fd      	str	r5, [r7, #60]	; 0x3c
	spi->txcnt  = 0;
     dce:	2200      	movs	r2, #0
     dd0:	2342      	movs	r3, #66	; 0x42
     dd2:	52fa      	strh	r2, [r7, r3]
	spi->txsize = size;
     dd4:	3b02      	subs	r3, #2
     dd6:	52fe      	strh	r6, [r7, r3]
	_spi_s_async_enable_tx(&spi->dev, true);
     dd8:	0020      	movs	r0, r4
     dda:	3820      	subs	r0, #32
     ddc:	2101      	movs	r1, #1
     dde:	4b09      	ldr	r3, [pc, #36]	; (e04 <_spi_s_async_io_write+0x80>)
     de0:	4798      	blx	r3
	return ERR_NONE;
     de2:	2000      	movs	r0, #0
     de4:	e7dd      	b.n	da2 <_spi_s_async_io_write+0x1e>
		atomic_leave_critical(&flags);
     de6:	a801      	add	r0, sp, #4
     de8:	4b05      	ldr	r3, [pc, #20]	; (e00 <_spi_s_async_io_write+0x7c>)
     dea:	4798      	blx	r3
		return ERR_BUSY;
     dec:	2004      	movs	r0, #4
     dee:	4240      	negs	r0, r0
     df0:	e7d7      	b.n	da2 <_spi_s_async_io_write+0x1e>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	000079a8 	.word	0x000079a8
     df8:	000014c1 	.word	0x000014c1
     dfc:	00000ba5 	.word	0x00000ba5
     e00:	00000bb3 	.word	0x00000bb3
     e04:	000023ad 	.word	0x000023ad

00000e08 <_spi_s_async_io_read>:
{
     e08:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0a:	46c6      	mov	lr, r8
     e0c:	b500      	push	{lr}
     e0e:	b084      	sub	sp, #16
     e10:	0007      	movs	r7, r0
     e12:	000c      	movs	r4, r1
     e14:	0016      	movs	r6, r2
	ASSERT(io);
     e16:	1e43      	subs	r3, r0, #1
     e18:	4198      	sbcs	r0, r3
     e1a:	b2c0      	uxtb	r0, r0
     e1c:	22b6      	movs	r2, #182	; 0xb6
     e1e:	4920      	ldr	r1, [pc, #128]	; (ea0 <_spi_s_async_io_read+0x98>)
     e20:	4b20      	ldr	r3, [pc, #128]	; (ea4 <_spi_s_async_io_read+0x9c>)
     e22:	4798      	blx	r3
		return 0;
     e24:	2000      	movs	r0, #0
	if (size == 0) {
     e26:	2e00      	cmp	r6, #0
     e28:	d103      	bne.n	e32 <_spi_s_async_io_read+0x2a>
}
     e2a:	b004      	add	sp, #16
     e2c:	bc04      	pop	{r2}
     e2e:	4690      	mov	r8, r2
     e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n_bytes = ringbuffer_num(&spi->rx_rb);
     e32:	2320      	movs	r3, #32
     e34:	469c      	mov	ip, r3
     e36:	44bc      	add	ip, r7
     e38:	4663      	mov	r3, ip
     e3a:	9301      	str	r3, [sp, #4]
     e3c:	4660      	mov	r0, ip
     e3e:	4b1a      	ldr	r3, [pc, #104]	; (ea8 <_spi_s_async_io_read+0xa0>)
     e40:	4798      	blx	r3
     e42:	0003      	movs	r3, r0
		return 0;
     e44:	2000      	movs	r0, #0
	if (n_bytes == 0) {
     e46:	2b00      	cmp	r3, #0
     e48:	d0ef      	beq.n	e2a <_spi_s_async_io_read+0x22>
		switch (spi->dev.char_size) {
     e4a:	003a      	movs	r2, r7
     e4c:	3a24      	subs	r2, #36	; 0x24
     e4e:	7a12      	ldrb	r2, [r2, #8]
     e50:	2a02      	cmp	r2, #2
     e52:	d101      	bne.n	e58 <_spi_s_async_io_read+0x50>
			n <<= 1;
     e54:	0076      	lsls	r6, r6, #1
     e56:	b2b6      	uxth	r6, r6
     e58:	429e      	cmp	r6, r3
     e5a:	d900      	bls.n	e5e <_spi_s_async_io_read+0x56>
     e5c:	001e      	movs	r6, r3
	if (p == NULL) {
     e5e:	2c00      	cmp	r4, #0
     e60:	d012      	beq.n	e88 <_spi_s_async_io_read+0x80>
     e62:	19a3      	adds	r3, r4, r6
     e64:	4698      	mov	r8, r3
		for (i = 0; i < n_bytes; i++) {
     e66:	0021      	movs	r1, r4
     e68:	2e00      	cmp	r6, #0
     e6a:	d006      	beq.n	e7a <_spi_s_async_io_read+0x72>
			ringbuffer_get(&spi->rx_rb, p++);
     e6c:	4d0f      	ldr	r5, [pc, #60]	; (eac <_spi_s_async_io_read+0xa4>)
     e6e:	1c4c      	adds	r4, r1, #1
     e70:	9801      	ldr	r0, [sp, #4]
     e72:	47a8      	blx	r5
     e74:	0021      	movs	r1, r4
		for (i = 0; i < n_bytes; i++) {
     e76:	4544      	cmp	r4, r8
     e78:	d1f9      	bne.n	e6e <_spi_s_async_io_read+0x66>
	switch (spi->dev.char_size) {
     e7a:	3f24      	subs	r7, #36	; 0x24
     e7c:	7a3b      	ldrb	r3, [r7, #8]
		return (int32_t)(n_bytes >> 1);
     e7e:	0870      	lsrs	r0, r6, #1
	switch (spi->dev.char_size) {
     e80:	2b02      	cmp	r3, #2
     e82:	d0d2      	beq.n	e2a <_spi_s_async_io_read+0x22>
		return (int32_t)n_bytes;
     e84:	0030      	movs	r0, r6
     e86:	e7d0      	b.n	e2a <_spi_s_async_io_read+0x22>
		for (i = 0; i < n_bytes; i++) {
     e88:	2e00      	cmp	r6, #0
     e8a:	d0f6      	beq.n	e7a <_spi_s_async_io_read+0x72>
     e8c:	2400      	movs	r4, #0
			ringbuffer_get(&spi->rx_rb, &tmp);
     e8e:	4d07      	ldr	r5, [pc, #28]	; (eac <_spi_s_async_io_read+0xa4>)
     e90:	ab02      	add	r3, sp, #8
     e92:	1dd9      	adds	r1, r3, #7
     e94:	9801      	ldr	r0, [sp, #4]
     e96:	47a8      	blx	r5
		for (i = 0; i < n_bytes; i++) {
     e98:	3401      	adds	r4, #1
     e9a:	42a6      	cmp	r6, r4
     e9c:	d1f8      	bne.n	e90 <_spi_s_async_io_read+0x88>
     e9e:	e7ec      	b.n	e7a <_spi_s_async_io_read+0x72>
     ea0:	000079a8 	.word	0x000079a8
     ea4:	000014c1 	.word	0x000014c1
     ea8:	0000160d 	.word	0x0000160d
     eac:	00001585 	.word	0x00001585

00000eb0 <spi_s_async_dev_error>:
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	0004      	movs	r4, r0
     eb4:	000d      	movs	r5, r1
	_spi_s_async_enable_tx(dev, false);
     eb6:	2100      	movs	r1, #0
     eb8:	4b09      	ldr	r3, [pc, #36]	; (ee0 <spi_s_async_dev_error+0x30>)
     eba:	4798      	blx	r3
	_spi_s_async_enable_rx(dev, false);
     ebc:	2100      	movs	r1, #0
     ebe:	0020      	movs	r0, r4
     ec0:	4b08      	ldr	r3, [pc, #32]	; (ee4 <spi_s_async_dev_error+0x34>)
     ec2:	4798      	blx	r3
	_spi_s_async_enable_ss_detect(dev, false);
     ec4:	2100      	movs	r1, #0
     ec6:	0020      	movs	r0, r4
     ec8:	4b07      	ldr	r3, [pc, #28]	; (ee8 <spi_s_async_dev_error+0x38>)
     eca:	4798      	blx	r3
	spi->busy = 0;
     ecc:	1f20      	subs	r0, r4, #4
     ece:	2255      	movs	r2, #85	; 0x55
     ed0:	5c83      	ldrb	r3, [r0, r2]
     ed2:	2101      	movs	r1, #1
     ed4:	438b      	bics	r3, r1
     ed6:	5483      	strb	r3, [r0, r2]
	spi->callbacks.err(spi, status);
     ed8:	6b83      	ldr	r3, [r0, #56]	; 0x38
     eda:	0029      	movs	r1, r5
     edc:	4798      	blx	r3
}
     ede:	bd70      	pop	{r4, r5, r6, pc}
     ee0:	000023ad 	.word	0x000023ad
     ee4:	000023fd 	.word	0x000023fd
     ee8:	00002449 	.word	0x00002449

00000eec <spi_s_async_dev_rx>:
{
     eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eee:	0004      	movs	r4, r0
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
     ef0:	1f07      	subs	r7, r0, #4
	tmp.u16 = _spi_s_async_read_one(dev);
     ef2:	4b0a      	ldr	r3, [pc, #40]	; (f1c <spi_s_async_dev_rx+0x30>)
     ef4:	4798      	blx	r3
     ef6:	0005      	movs	r5, r0
	ringbuffer_put(&spi->rx_rb, tmp.u8[0]);
     ef8:	0026      	movs	r6, r4
     efa:	3640      	adds	r6, #64	; 0x40
     efc:	b2c1      	uxtb	r1, r0
     efe:	0030      	movs	r0, r6
     f00:	4b07      	ldr	r3, [pc, #28]	; (f20 <spi_s_async_dev_rx+0x34>)
     f02:	4798      	blx	r3
	if (dev->char_size > 1) {
     f04:	7923      	ldrb	r3, [r4, #4]
     f06:	2b01      	cmp	r3, #1
     f08:	d904      	bls.n	f14 <spi_s_async_dev_rx+0x28>
		ringbuffer_put(&spi->rx_rb, tmp.u8[1]);
     f0a:	0429      	lsls	r1, r5, #16
     f0c:	0e09      	lsrs	r1, r1, #24
     f0e:	0030      	movs	r0, r6
     f10:	4b03      	ldr	r3, [pc, #12]	; (f20 <spi_s_async_dev_rx+0x34>)
     f12:	4798      	blx	r3
	spi->callbacks.rx(spi);
     f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f16:	0038      	movs	r0, r7
     f18:	4798      	blx	r3
}
     f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f1c:	00002489 	.word	0x00002489
     f20:	000015cd 	.word	0x000015cd

00000f24 <spi_s_async_dev_tx>:
{
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	0004      	movs	r4, r0
	if (dev->char_size > 1) {
     f28:	7903      	ldrb	r3, [r0, #4]
     f2a:	2b01      	cmp	r3, #1
     f2c:	d90f      	bls.n	f4e <spi_s_async_dev_tx+0x2a>
		_spi_s_async_write_one(dev, ((uint16_t *)spi->txbuf)[spi->txcnt++]);
     f2e:	1f02      	subs	r2, r0, #4
     f30:	6b80      	ldr	r0, [r0, #56]	; 0x38
     f32:	2142      	movs	r1, #66	; 0x42
     f34:	5a53      	ldrh	r3, [r2, r1]
     f36:	1c5d      	adds	r5, r3, #1
     f38:	5255      	strh	r5, [r2, r1]
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	5a19      	ldrh	r1, [r3, r0]
     f3e:	0020      	movs	r0, r4
     f40:	4b0f      	ldr	r3, [pc, #60]	; (f80 <spi_s_async_dev_tx+0x5c>)
     f42:	4798      	blx	r3
	if (spi->txcnt >= spi->txsize) {
     f44:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
     f46:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
     f48:	429a      	cmp	r2, r3
     f4a:	d20b      	bcs.n	f64 <spi_s_async_dev_tx+0x40>
}
     f4c:	bd70      	pop	{r4, r5, r6, pc}
		_spi_s_async_write_one(dev, spi->txbuf[spi->txcnt++]);
     f4e:	1f03      	subs	r3, r0, #4
     f50:	6b80      	ldr	r0, [r0, #56]	; 0x38
     f52:	2142      	movs	r1, #66	; 0x42
     f54:	5a5a      	ldrh	r2, [r3, r1]
     f56:	1c55      	adds	r5, r2, #1
     f58:	525d      	strh	r5, [r3, r1]
     f5a:	5c81      	ldrb	r1, [r0, r2]
     f5c:	0020      	movs	r0, r4
     f5e:	4b08      	ldr	r3, [pc, #32]	; (f80 <spi_s_async_dev_tx+0x5c>)
     f60:	4798      	blx	r3
     f62:	e7ef      	b.n	f44 <spi_s_async_dev_tx+0x20>
		_spi_s_async_enable_tx(dev, false);
     f64:	2100      	movs	r1, #0
     f66:	0020      	movs	r0, r4
     f68:	4b06      	ldr	r3, [pc, #24]	; (f84 <spi_s_async_dev_tx+0x60>)
     f6a:	4798      	blx	r3
		spi->busy = 0;
     f6c:	1f20      	subs	r0, r4, #4
     f6e:	2255      	movs	r2, #85	; 0x55
     f70:	5c83      	ldrb	r3, [r0, r2]
     f72:	2101      	movs	r1, #1
     f74:	438b      	bics	r3, r1
     f76:	5483      	strb	r3, [r0, r2]
		spi->callbacks.tx(spi);
     f78:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f7a:	4798      	blx	r3
}
     f7c:	e7e6      	b.n	f4c <spi_s_async_dev_tx+0x28>
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	00002455 	.word	0x00002455
     f84:	000023ad 	.word	0x000023ad

00000f88 <spi_s_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_s_async_hpl_interface *)func;
}

int32_t spi_s_async_init(struct spi_s_async_descriptor *spi, void *const hw, uint8_t *const rxbuf, int16_t bufsize)
{
     f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f8a:	0004      	movs	r4, r0
     f8c:	000d      	movs	r5, r1
     f8e:	0016      	movs	r6, r2
     f90:	001f      	movs	r7, r3
	int32_t rc;
	ASSERT(spi && hw && rxbuf && bufsize);
     f92:	2800      	cmp	r0, #0
     f94:	d03c      	beq.n	1010 <STACK_SIZE+0x10>
     f96:	2900      	cmp	r1, #0
     f98:	d03c      	beq.n	1014 <STACK_SIZE+0x14>
     f9a:	2a00      	cmp	r2, #0
     f9c:	d03c      	beq.n	1018 <STACK_SIZE+0x18>
     f9e:	0018      	movs	r0, r3
     fa0:	1e43      	subs	r3, r0, #1
     fa2:	4198      	sbcs	r0, r3
     fa4:	22fb      	movs	r2, #251	; 0xfb
     fa6:	491d      	ldr	r1, [pc, #116]	; (101c <STACK_SIZE+0x1c>)
     fa8:	4b1d      	ldr	r3, [pc, #116]	; (1020 <STACK_SIZE+0x20>)
     faa:	4798      	blx	r3

	rc = ringbuffer_init(&spi->rx_rb, rxbuf, bufsize);
     fac:	0020      	movs	r0, r4
     fae:	3044      	adds	r0, #68	; 0x44
     fb0:	003a      	movs	r2, r7
     fb2:	0031      	movs	r1, r6
     fb4:	4b1b      	ldr	r3, [pc, #108]	; (1024 <STACK_SIZE+0x24>)
     fb6:	4798      	blx	r3
	if (rc < 0) {
     fb8:	2800      	cmp	r0, #0
     fba:	db28      	blt.n	100e <STACK_SIZE+0xe>
		return rc;
	}
	rc = _spi_s_async_init(&spi->dev, hw);
     fbc:	1d26      	adds	r6, r4, #4
     fbe:	0029      	movs	r1, r5
     fc0:	0030      	movs	r0, r6
     fc2:	4b19      	ldr	r3, [pc, #100]	; (1028 <STACK_SIZE+0x28>)
     fc4:	4798      	blx	r3

	if (rc < 0) {
     fc6:	2800      	cmp	r0, #0
     fc8:	db21      	blt.n	100e <STACK_SIZE+0xe>
		return rc;
	}
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (const FUNC_PTR)spi_s_async_dev_tx);
     fca:	4a18      	ldr	r2, [pc, #96]	; (102c <STACK_SIZE+0x2c>)
     fcc:	2100      	movs	r1, #0
     fce:	0030      	movs	r0, r6
     fd0:	4d17      	ldr	r5, [pc, #92]	; (1030 <STACK_SIZE+0x30>)
     fd2:	47a8      	blx	r5
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (const FUNC_PTR)spi_s_async_dev_rx);
     fd4:	4a17      	ldr	r2, [pc, #92]	; (1034 <STACK_SIZE+0x34>)
     fd6:	2101      	movs	r1, #1
     fd8:	0030      	movs	r0, r6
     fda:	47a8      	blx	r5
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (const FUNC_PTR)spi_s_async_dev_complete);
     fdc:	4a16      	ldr	r2, [pc, #88]	; (1038 <STACK_SIZE+0x38>)
     fde:	2102      	movs	r1, #2
     fe0:	0030      	movs	r0, r6
     fe2:	47a8      	blx	r5
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (const FUNC_PTR)spi_s_async_dev_error);
     fe4:	4a15      	ldr	r2, [pc, #84]	; (103c <STACK_SIZE+0x3c>)
     fe6:	2103      	movs	r1, #3
     fe8:	0030      	movs	r0, r6
     fea:	47a8      	blx	r5

	spi->enabled = 0;
     fec:	2255      	movs	r2, #85	; 0x55
     fee:	5ca3      	ldrb	r3, [r4, r2]
	spi->busy    = 0;
     ff0:	2102      	movs	r1, #2
     ff2:	438b      	bics	r3, r1
     ff4:	3901      	subs	r1, #1
     ff6:	438b      	bics	r3, r1
     ff8:	54a3      	strb	r3, [r4, r2]

	spi->callbacks.err      = (spi_s_async_cb_error_t)spi_s_async_dummy_func;
     ffa:	4b11      	ldr	r3, [pc, #68]	; (1040 <STACK_SIZE+0x40>)
     ffc:	63a3      	str	r3, [r4, #56]	; 0x38
	spi->callbacks.complete = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
     ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
	spi->callbacks.tx       = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
    1000:	6323      	str	r3, [r4, #48]	; 0x30
	spi->callbacks.rx       = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
    1002:	6363      	str	r3, [r4, #52]	; 0x34

	spi->io.read  = _spi_s_async_io_read;
    1004:	4b0f      	ldr	r3, [pc, #60]	; (1044 <STACK_SIZE+0x44>)
    1006:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_s_async_io_write;
    1008:	4b0f      	ldr	r3, [pc, #60]	; (1048 <STACK_SIZE+0x48>)
    100a:	6263      	str	r3, [r4, #36]	; 0x24

	return ERR_NONE;
    100c:	2000      	movs	r0, #0
}
    100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(spi && hw && rxbuf && bufsize);
    1010:	2000      	movs	r0, #0
    1012:	e7c7      	b.n	fa4 <spi_s_async_init+0x1c>
    1014:	2000      	movs	r0, #0
    1016:	e7c5      	b.n	fa4 <spi_s_async_init+0x1c>
    1018:	2000      	movs	r0, #0
    101a:	e7c3      	b.n	fa4 <spi_s_async_init+0x1c>
    101c:	000079a8 	.word	0x000079a8
    1020:	000014c1 	.word	0x000014c1
    1024:	00001531 	.word	0x00001531
    1028:	00002335 	.word	0x00002335
    102c:	00000f25 	.word	0x00000f25
    1030:	000024f5 	.word	0x000024f5
    1034:	00000eed 	.word	0x00000eed
    1038:	00000d79 	.word	0x00000d79
    103c:	00000eb1 	.word	0x00000eb1
    1040:	00000d83 	.word	0x00000d83
    1044:	00000e09 	.word	0x00000e09
    1048:	00000d85 	.word	0x00000d85

0000104c <spi_s_async_enable>:
	_spi_s_async_enable_tx(&spi->dev, false);
	_spi_s_async_deinit(&spi->dev);
}

void spi_s_async_enable(struct spi_s_async_descriptor *spi)
{
    104c:	b570      	push	{r4, r5, r6, lr}
    104e:	0004      	movs	r4, r0
	ASSERT(spi);
    1050:	1e43      	subs	r3, r0, #1
    1052:	4198      	sbcs	r0, r3
    1054:	b2c0      	uxtb	r0, r0
    1056:	2292      	movs	r2, #146	; 0x92
    1058:	0052      	lsls	r2, r2, #1
    105a:	490e      	ldr	r1, [pc, #56]	; (1094 <spi_s_async_enable+0x48>)
    105c:	4b0e      	ldr	r3, [pc, #56]	; (1098 <spi_s_async_enable+0x4c>)
    105e:	4798      	blx	r3

	if (spi->enabled) {
    1060:	2355      	movs	r3, #85	; 0x55
    1062:	5ce3      	ldrb	r3, [r4, r3]
    1064:	079b      	lsls	r3, r3, #30
    1066:	d500      	bpl.n	106a <spi_s_async_enable+0x1e>
	}

	spi->enabled = 1;
	_spi_s_async_enable_rx(&spi->dev, true);
	_spi_s_async_enable_ss_detect(&spi->dev, true);
}
    1068:	bd70      	pop	{r4, r5, r6, pc}
	if (_spi_s_async_enable(&spi->dev) != 0) {
    106a:	1d25      	adds	r5, r4, #4
    106c:	0028      	movs	r0, r5
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <spi_s_async_enable+0x50>)
    1070:	4798      	blx	r3
    1072:	2800      	cmp	r0, #0
    1074:	d1f8      	bne.n	1068 <spi_s_async_enable+0x1c>
	spi->enabled = 1;
    1076:	2255      	movs	r2, #85	; 0x55
    1078:	5ca3      	ldrb	r3, [r4, r2]
    107a:	2102      	movs	r1, #2
    107c:	430b      	orrs	r3, r1
    107e:	54a3      	strb	r3, [r4, r2]
	_spi_s_async_enable_rx(&spi->dev, true);
    1080:	2101      	movs	r1, #1
    1082:	0028      	movs	r0, r5
    1084:	4b06      	ldr	r3, [pc, #24]	; (10a0 <spi_s_async_enable+0x54>)
    1086:	4798      	blx	r3
	_spi_s_async_enable_ss_detect(&spi->dev, true);
    1088:	2101      	movs	r1, #1
    108a:	0028      	movs	r0, r5
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <spi_s_async_enable+0x58>)
    108e:	4798      	blx	r3
    1090:	e7ea      	b.n	1068 <spi_s_async_enable+0x1c>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000079a8 	.word	0x000079a8
    1098:	000014c1 	.word	0x000014c1
    109c:	00002341 	.word	0x00002341
    10a0:	000023fd 	.word	0x000023fd
    10a4:	00002449 	.word	0x00002449

000010a8 <spi_s_async_register_callback>:
	return spi->busy ? ERR_BUSY : spi->error;
}

void spi_s_async_register_callback(struct spi_s_async_descriptor *spi, const enum spi_s_async_cb_type type,
                                   const FUNC_PTR func)
{
    10a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10aa:	0006      	movs	r6, r0
    10ac:	000d      	movs	r5, r1
    10ae:	0014      	movs	r4, r2
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)spi_s_async_dummy_func : (FUNC_PTR)func;
    10b0:	1e17      	subs	r7, r2, #0
    10b2:	d011      	beq.n	10d8 <spi_s_async_register_callback+0x30>

	ASSERT(spi);
    10b4:	0030      	movs	r0, r6
    10b6:	1e43      	subs	r3, r0, #1
    10b8:	4198      	sbcs	r0, r3
    10ba:	b2c0      	uxtb	r0, r0
    10bc:	22ba      	movs	r2, #186	; 0xba
    10be:	0052      	lsls	r2, r2, #1
    10c0:	490e      	ldr	r1, [pc, #56]	; (10fc <spi_s_async_register_callback+0x54>)
    10c2:	4b0f      	ldr	r3, [pc, #60]	; (1100 <spi_s_async_register_callback+0x58>)
    10c4:	4798      	blx	r3

	switch (type) {
    10c6:	2d01      	cmp	r5, #1
    10c8:	d00a      	beq.n	10e0 <spi_s_async_register_callback+0x38>
    10ca:	2d00      	cmp	r5, #0
    10cc:	d006      	beq.n	10dc <spi_s_async_register_callback+0x34>
    10ce:	2d02      	cmp	r5, #2
    10d0:	d008      	beq.n	10e4 <spi_s_async_register_callback+0x3c>
    10d2:	2d03      	cmp	r5, #3
    10d4:	d008      	beq.n	10e8 <spi_s_async_register_callback+0x40>
		_spi_s_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
		break;
	default:
		break;
	}
}
    10d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)spi_s_async_dummy_func : (FUNC_PTR)func;
    10d8:	4f0a      	ldr	r7, [pc, #40]	; (1104 <spi_s_async_register_callback+0x5c>)
    10da:	e7eb      	b.n	10b4 <spi_s_async_register_callback+0xc>
		spi->callbacks.tx = (spi_s_async_cb_xfer_t)f;
    10dc:	6337      	str	r7, [r6, #48]	; 0x30
		break;
    10de:	e7fa      	b.n	10d6 <spi_s_async_register_callback+0x2e>
		spi->callbacks.rx = (spi_s_async_cb_xfer_t)f;
    10e0:	6377      	str	r7, [r6, #52]	; 0x34
		break;
    10e2:	e7f8      	b.n	10d6 <spi_s_async_register_callback+0x2e>
		spi->callbacks.complete = (spi_s_async_cb_xfer_t)f;
    10e4:	62f7      	str	r7, [r6, #44]	; 0x2c
		break;
    10e6:	e7f6      	b.n	10d6 <spi_s_async_register_callback+0x2e>
		spi->callbacks.err = (spi_s_async_cb_error_t)f;
    10e8:	63b7      	str	r7, [r6, #56]	; 0x38
		_spi_s_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    10ea:	1e62      	subs	r2, r4, #1
    10ec:	4194      	sbcs	r4, r2
    10ee:	b2e2      	uxtb	r2, r4
    10f0:	1d30      	adds	r0, r6, #4
    10f2:	2103      	movs	r1, #3
    10f4:	4b04      	ldr	r3, [pc, #16]	; (1108 <spi_s_async_register_callback+0x60>)
    10f6:	4798      	blx	r3
}
    10f8:	e7ed      	b.n	10d6 <spi_s_async_register_callback+0x2e>
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	000079a8 	.word	0x000079a8
    1100:	000014c1 	.word	0x000014c1
    1104:	00000d83 	.word	0x00000d83
    1108:	0000253d 	.word	0x0000253d

0000110c <spi_s_async_get_io_descriptor>:

	spi->busy = 0;
}

int32_t spi_s_async_get_io_descriptor(struct spi_s_async_descriptor *spi, struct io_descriptor **io)
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	0004      	movs	r4, r0
    1110:	000d      	movs	r5, r1
	ASSERT(spi && io);
    1112:	2800      	cmp	r0, #0
    1114:	d00c      	beq.n	1130 <spi_s_async_get_io_descriptor+0x24>
    1116:	0008      	movs	r0, r1
    1118:	1e43      	subs	r3, r0, #1
    111a:	4198      	sbcs	r0, r3
    111c:	b2c0      	uxtb	r0, r0
    111e:	22cf      	movs	r2, #207	; 0xcf
    1120:	0052      	lsls	r2, r2, #1
    1122:	4904      	ldr	r1, [pc, #16]	; (1134 <spi_s_async_get_io_descriptor+0x28>)
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <spi_s_async_get_io_descriptor+0x2c>)
    1126:	4798      	blx	r3
	*io = &spi->io;
    1128:	3424      	adds	r4, #36	; 0x24
    112a:	602c      	str	r4, [r5, #0]
	return ERR_NONE;
}
    112c:	2000      	movs	r0, #0
    112e:	bd70      	pop	{r4, r5, r6, pc}
    1130:	2000      	movs	r0, #0
    1132:	e7f4      	b.n	111e <spi_s_async_get_io_descriptor+0x12>
    1134:	000079a8 	.word	0x000079a8
    1138:	000014c1 	.word	0x000014c1

0000113c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113e:	46ce      	mov	lr, r9
    1140:	4647      	mov	r7, r8
    1142:	b580      	push	{r7, lr}
    1144:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1146:	6803      	ldr	r3, [r0, #0]
    1148:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    114a:	2b00      	cmp	r3, #0
    114c:	d005      	beq.n	115a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    114e:	688e      	ldr	r6, [r1, #8]
    1150:	001c      	movs	r4, r3
    1152:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1154:	2701      	movs	r7, #1
    1156:	1abf      	subs	r7, r7, r2
    1158:	e00d      	b.n	1176 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    115a:	4b12      	ldr	r3, [pc, #72]	; (11a4 <timer_add_timer_task+0x68>)
    115c:	4798      	blx	r3
		return;
    115e:	e018      	b.n	1192 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1160:	18fb      	adds	r3, r7, r3
    1162:	68a0      	ldr	r0, [r4, #8]
    1164:	4680      	mov	r8, r0
    1166:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1168:	42b3      	cmp	r3, r6
    116a:	d20c      	bcs.n	1186 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    116c:	6823      	ldr	r3, [r4, #0]
    116e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1170:	2b00      	cmp	r3, #0
    1172:	d00b      	beq.n	118c <timer_add_timer_task+0x50>
    1174:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1176:	6863      	ldr	r3, [r4, #4]
    1178:	4293      	cmp	r3, r2
    117a:	d8f1      	bhi.n	1160 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    117c:	68a0      	ldr	r0, [r4, #8]
    117e:	4680      	mov	r8, r0
    1180:	4443      	add	r3, r8
    1182:	1a9b      	subs	r3, r3, r2
    1184:	e7f0      	b.n	1168 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1186:	45a4      	cmp	ip, r4
    1188:	d007      	beq.n	119a <timer_add_timer_task+0x5e>
    118a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    118c:	0020      	movs	r0, r4
    118e:	4b06      	ldr	r3, [pc, #24]	; (11a8 <timer_add_timer_task+0x6c>)
    1190:	4798      	blx	r3
	}
}
    1192:	bc0c      	pop	{r2, r3}
    1194:	4690      	mov	r8, r2
    1196:	4699      	mov	r9, r3
    1198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    119a:	4648      	mov	r0, r9
    119c:	4b01      	ldr	r3, [pc, #4]	; (11a4 <timer_add_timer_task+0x68>)
    119e:	4798      	blx	r3
    11a0:	e7f7      	b.n	1192 <timer_add_timer_task+0x56>
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	000014ed 	.word	0x000014ed
    11a8:	00001519 	.word	0x00001519

000011ac <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ae:	46c6      	mov	lr, r8
    11b0:	b500      	push	{lr}
    11b2:	b082      	sub	sp, #8
    11b4:	0007      	movs	r7, r0
	return (void *)list->head;
    11b6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    11b8:	6903      	ldr	r3, [r0, #16]
    11ba:	3301      	adds	r3, #1
    11bc:	4698      	mov	r8, r3
    11be:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    11c0:	7e03      	ldrb	r3, [r0, #24]
    11c2:	07db      	lsls	r3, r3, #31
    11c4:	d411      	bmi.n	11ea <timer_process_counted+0x3e>
    11c6:	7e03      	ldrb	r3, [r0, #24]
    11c8:	079b      	lsls	r3, r3, #30
    11ca:	d40e      	bmi.n	11ea <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    11cc:	2c00      	cmp	r4, #0
    11ce:	d010      	beq.n	11f2 <timer_process_counted+0x46>
    11d0:	4643      	mov	r3, r8
    11d2:	6862      	ldr	r2, [r4, #4]
    11d4:	1a9b      	subs	r3, r3, r2
    11d6:	68a2      	ldr	r2, [r4, #8]
    11d8:	4293      	cmp	r3, r2
    11da:	d30a      	bcc.n	11f2 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    11dc:	2314      	movs	r3, #20
    11de:	469c      	mov	ip, r3
    11e0:	4484      	add	ip, r0
    11e2:	4663      	mov	r3, ip
    11e4:	9301      	str	r3, [sp, #4]
    11e6:	4e12      	ldr	r6, [pc, #72]	; (1230 <timer_process_counted+0x84>)
    11e8:	e014      	b.n	1214 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    11ea:	7e3b      	ldrb	r3, [r7, #24]
    11ec:	2202      	movs	r2, #2
    11ee:	4313      	orrs	r3, r2
    11f0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    11f2:	b002      	add	sp, #8
    11f4:	bc04      	pop	{r2}
    11f6:	4690      	mov	r8, r2
    11f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fa:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    11fc:	68e3      	ldr	r3, [r4, #12]
    11fe:	0020      	movs	r0, r4
    1200:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1202:	2d00      	cmp	r5, #0
    1204:	d0f5      	beq.n	11f2 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1206:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1208:	4643      	mov	r3, r8
    120a:	686a      	ldr	r2, [r5, #4]
    120c:	1a9b      	subs	r3, r3, r2
    120e:	68aa      	ldr	r2, [r5, #8]
    1210:	4293      	cmp	r3, r2
    1212:	d3ee      	bcc.n	11f2 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    1214:	9801      	ldr	r0, [sp, #4]
    1216:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1218:	7c23      	ldrb	r3, [r4, #16]
    121a:	2b01      	cmp	r3, #1
    121c:	d1ed      	bne.n	11fa <timer_process_counted+0x4e>
			tmp->time_label = time;
    121e:	4643      	mov	r3, r8
    1220:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1222:	4642      	mov	r2, r8
    1224:	0021      	movs	r1, r4
    1226:	9801      	ldr	r0, [sp, #4]
    1228:	4b02      	ldr	r3, [pc, #8]	; (1234 <timer_process_counted+0x88>)
    122a:	4798      	blx	r3
    122c:	e7e5      	b.n	11fa <timer_process_counted+0x4e>
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	00001521 	.word	0x00001521
    1234:	0000113d 	.word	0x0000113d

00001238 <timer_init>:
{
    1238:	b570      	push	{r4, r5, r6, lr}
    123a:	0005      	movs	r5, r0
    123c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    123e:	2800      	cmp	r0, #0
    1240:	d011      	beq.n	1266 <timer_init+0x2e>
    1242:	0008      	movs	r0, r1
    1244:	1e43      	subs	r3, r0, #1
    1246:	4198      	sbcs	r0, r3
    1248:	b2c0      	uxtb	r0, r0
    124a:	223b      	movs	r2, #59	; 0x3b
    124c:	4907      	ldr	r1, [pc, #28]	; (126c <timer_init+0x34>)
    124e:	4b08      	ldr	r3, [pc, #32]	; (1270 <timer_init+0x38>)
    1250:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1252:	0021      	movs	r1, r4
    1254:	0028      	movs	r0, r5
    1256:	4b07      	ldr	r3, [pc, #28]	; (1274 <timer_init+0x3c>)
    1258:	4798      	blx	r3
	descr->time                           = 0;
    125a:	2300      	movs	r3, #0
    125c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    125e:	4b06      	ldr	r3, [pc, #24]	; (1278 <timer_init+0x40>)
    1260:	602b      	str	r3, [r5, #0]
}
    1262:	2000      	movs	r0, #0
    1264:	bd70      	pop	{r4, r5, r6, pc}
    1266:	2000      	movs	r0, #0
    1268:	e7ef      	b.n	124a <timer_init+0x12>
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	000079c8 	.word	0x000079c8
    1270:	000014c1 	.word	0x000014c1
    1274:	00002599 	.word	0x00002599
    1278:	000011ad 	.word	0x000011ad

0000127c <timer_start>:
{
    127c:	b510      	push	{r4, lr}
    127e:	0004      	movs	r4, r0
	ASSERT(descr);
    1280:	1e43      	subs	r3, r0, #1
    1282:	4198      	sbcs	r0, r3
    1284:	b2c0      	uxtb	r0, r0
    1286:	2253      	movs	r2, #83	; 0x53
    1288:	4907      	ldr	r1, [pc, #28]	; (12a8 <timer_start+0x2c>)
    128a:	4b08      	ldr	r3, [pc, #32]	; (12ac <timer_start+0x30>)
    128c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    128e:	0020      	movs	r0, r4
    1290:	4b07      	ldr	r3, [pc, #28]	; (12b0 <timer_start+0x34>)
    1292:	4798      	blx	r3
    1294:	2800      	cmp	r0, #0
    1296:	d104      	bne.n	12a2 <timer_start+0x26>
	_timer_start(&descr->device);
    1298:	0020      	movs	r0, r4
    129a:	4b06      	ldr	r3, [pc, #24]	; (12b4 <timer_start+0x38>)
    129c:	4798      	blx	r3
	return ERR_NONE;
    129e:	2000      	movs	r0, #0
}
    12a0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    12a2:	2011      	movs	r0, #17
    12a4:	4240      	negs	r0, r0
    12a6:	e7fb      	b.n	12a0 <timer_start+0x24>
    12a8:	000079c8 	.word	0x000079c8
    12ac:	000014c1 	.word	0x000014c1
    12b0:	000026b9 	.word	0x000026b9
    12b4:	000026ad 	.word	0x000026ad

000012b8 <timer_add_task>:
{
    12b8:	b570      	push	{r4, r5, r6, lr}
    12ba:	b082      	sub	sp, #8
    12bc:	0004      	movs	r4, r0
    12be:	000d      	movs	r5, r1
	ASSERT(descr && task);
    12c0:	2800      	cmp	r0, #0
    12c2:	d024      	beq.n	130e <timer_add_task+0x56>
    12c4:	0008      	movs	r0, r1
    12c6:	1e43      	subs	r3, r0, #1
    12c8:	4198      	sbcs	r0, r3
    12ca:	b2c0      	uxtb	r0, r0
    12cc:	227a      	movs	r2, #122	; 0x7a
    12ce:	491e      	ldr	r1, [pc, #120]	; (1348 <timer_add_task+0x90>)
    12d0:	4b1e      	ldr	r3, [pc, #120]	; (134c <timer_add_task+0x94>)
    12d2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    12d4:	7e23      	ldrb	r3, [r4, #24]
    12d6:	2201      	movs	r2, #1
    12d8:	4313      	orrs	r3, r2
    12da:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    12dc:	0026      	movs	r6, r4
    12de:	3614      	adds	r6, #20
    12e0:	0029      	movs	r1, r5
    12e2:	0030      	movs	r0, r6
    12e4:	4b1a      	ldr	r3, [pc, #104]	; (1350 <timer_add_task+0x98>)
    12e6:	4798      	blx	r3
    12e8:	2800      	cmp	r0, #0
    12ea:	d112      	bne.n	1312 <timer_add_task+0x5a>
	task->time_label = descr->time;
    12ec:	6923      	ldr	r3, [r4, #16]
    12ee:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    12f0:	6922      	ldr	r2, [r4, #16]
    12f2:	0029      	movs	r1, r5
    12f4:	0030      	movs	r0, r6
    12f6:	4b17      	ldr	r3, [pc, #92]	; (1354 <timer_add_task+0x9c>)
    12f8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    12fa:	7e23      	ldrb	r3, [r4, #24]
    12fc:	2201      	movs	r2, #1
    12fe:	4393      	bics	r3, r2
    1300:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1302:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    1304:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1306:	079b      	lsls	r3, r3, #30
    1308:	d40f      	bmi.n	132a <timer_add_task+0x72>
}
    130a:	b002      	add	sp, #8
    130c:	bd70      	pop	{r4, r5, r6, pc}
    130e:	2000      	movs	r0, #0
    1310:	e7dc      	b.n	12cc <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1312:	7e23      	ldrb	r3, [r4, #24]
    1314:	2201      	movs	r2, #1
    1316:	4393      	bics	r3, r2
    1318:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    131a:	327e      	adds	r2, #126	; 0x7e
    131c:	490a      	ldr	r1, [pc, #40]	; (1348 <timer_add_task+0x90>)
    131e:	2000      	movs	r0, #0
    1320:	4b0a      	ldr	r3, [pc, #40]	; (134c <timer_add_task+0x94>)
    1322:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1324:	2012      	movs	r0, #18
    1326:	4240      	negs	r0, r0
    1328:	e7ef      	b.n	130a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    132a:	a801      	add	r0, sp, #4
    132c:	4b0a      	ldr	r3, [pc, #40]	; (1358 <timer_add_task+0xa0>)
    132e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1330:	7e23      	ldrb	r3, [r4, #24]
    1332:	2202      	movs	r2, #2
    1334:	4393      	bics	r3, r2
    1336:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1338:	0020      	movs	r0, r4
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <timer_add_task+0xa4>)
    133c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    133e:	a801      	add	r0, sp, #4
    1340:	4b07      	ldr	r3, [pc, #28]	; (1360 <timer_add_task+0xa8>)
    1342:	4798      	blx	r3
	return ERR_NONE;
    1344:	2000      	movs	r0, #0
    1346:	e7e0      	b.n	130a <timer_add_task+0x52>
    1348:	000079c8 	.word	0x000079c8
    134c:	000014c1 	.word	0x000014c1
    1350:	000014c9 	.word	0x000014c9
    1354:	0000113d 	.word	0x0000113d
    1358:	00000ba5 	.word	0x00000ba5
    135c:	000026c9 	.word	0x000026c9
    1360:	00000bb3 	.word	0x00000bb3

00001364 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1366:	46ce      	mov	lr, r9
    1368:	4647      	mov	r7, r8
    136a:	b580      	push	{r7, lr}
    136c:	0004      	movs	r4, r0
    136e:	000f      	movs	r7, r1
    1370:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1372:	2800      	cmp	r0, #0
    1374:	d026      	beq.n	13c4 <usart_sync_write+0x60>
    1376:	2900      	cmp	r1, #0
    1378:	d026      	beq.n	13c8 <usart_sync_write+0x64>
    137a:	0010      	movs	r0, r2
    137c:	1e43      	subs	r3, r0, #1
    137e:	4198      	sbcs	r0, r3
    1380:	22f1      	movs	r2, #241	; 0xf1
    1382:	4912      	ldr	r1, [pc, #72]	; (13cc <usart_sync_write+0x68>)
    1384:	4b12      	ldr	r3, [pc, #72]	; (13d0 <usart_sync_write+0x6c>)
    1386:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1388:	3408      	adds	r4, #8
    138a:	4d12      	ldr	r5, [pc, #72]	; (13d4 <usart_sync_write+0x70>)
    138c:	0020      	movs	r0, r4
    138e:	47a8      	blx	r5
    1390:	2800      	cmp	r0, #0
    1392:	d0fb      	beq.n	138c <usart_sync_write+0x28>
    1394:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1396:	4b10      	ldr	r3, [pc, #64]	; (13d8 <usart_sync_write+0x74>)
    1398:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    139a:	4d0e      	ldr	r5, [pc, #56]	; (13d4 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    139c:	5db9      	ldrb	r1, [r7, r6]
    139e:	0020      	movs	r0, r4
    13a0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    13a2:	0020      	movs	r0, r4
    13a4:	47a8      	blx	r5
    13a6:	2800      	cmp	r0, #0
    13a8:	d0fb      	beq.n	13a2 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
    13aa:	3601      	adds	r6, #1
    13ac:	4546      	cmp	r6, r8
    13ae:	d3f5      	bcc.n	139c <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
    13b0:	4d0a      	ldr	r5, [pc, #40]	; (13dc <usart_sync_write+0x78>)
    13b2:	0020      	movs	r0, r4
    13b4:	47a8      	blx	r5
    13b6:	2800      	cmp	r0, #0
    13b8:	d0fb      	beq.n	13b2 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
    13ba:	0030      	movs	r0, r6
    13bc:	bc0c      	pop	{r2, r3}
    13be:	4690      	mov	r8, r2
    13c0:	4699      	mov	r9, r3
    13c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    13c4:	2000      	movs	r0, #0
    13c6:	e7db      	b.n	1380 <usart_sync_write+0x1c>
    13c8:	2000      	movs	r0, #0
    13ca:	e7d9      	b.n	1380 <usart_sync_write+0x1c>
    13cc:	000079e0 	.word	0x000079e0
    13d0:	000014c1 	.word	0x000014c1
    13d4:	00001be9 	.word	0x00001be9
    13d8:	00001bd9 	.word	0x00001bd9
    13dc:	00001bf3 	.word	0x00001bf3

000013e0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13e2:	46ce      	mov	lr, r9
    13e4:	4647      	mov	r7, r8
    13e6:	b580      	push	{r7, lr}
    13e8:	0004      	movs	r4, r0
    13ea:	000f      	movs	r7, r1
    13ec:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    13ee:	2800      	cmp	r0, #0
    13f0:	d01d      	beq.n	142e <usart_sync_read+0x4e>
    13f2:	2900      	cmp	r1, #0
    13f4:	d01d      	beq.n	1432 <usart_sync_read+0x52>
    13f6:	0010      	movs	r0, r2
    13f8:	1e43      	subs	r3, r0, #1
    13fa:	4198      	sbcs	r0, r3
    13fc:	2286      	movs	r2, #134	; 0x86
    13fe:	0052      	lsls	r2, r2, #1
    1400:	490d      	ldr	r1, [pc, #52]	; (1438 <usart_sync_read+0x58>)
    1402:	4b0e      	ldr	r3, [pc, #56]	; (143c <usart_sync_read+0x5c>)
    1404:	4798      	blx	r3
	uint32_t                      offset = 0;
    1406:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1408:	3408      	adds	r4, #8
    140a:	4d0d      	ldr	r5, [pc, #52]	; (1440 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    140c:	4b0d      	ldr	r3, [pc, #52]	; (1444 <usart_sync_read+0x64>)
    140e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    1410:	0020      	movs	r0, r4
    1412:	47a8      	blx	r5
    1414:	2800      	cmp	r0, #0
    1416:	d0fb      	beq.n	1410 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1418:	0020      	movs	r0, r4
    141a:	47c8      	blx	r9
    141c:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    141e:	3601      	adds	r6, #1
    1420:	4546      	cmp	r6, r8
    1422:	d3f5      	bcc.n	1410 <usart_sync_read+0x30>

	return (int32_t)offset;
}
    1424:	0030      	movs	r0, r6
    1426:	bc0c      	pop	{r2, r3}
    1428:	4690      	mov	r8, r2
    142a:	4699      	mov	r9, r3
    142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    142e:	2000      	movs	r0, #0
    1430:	e7e4      	b.n	13fc <usart_sync_read+0x1c>
    1432:	2000      	movs	r0, #0
    1434:	e7e2      	b.n	13fc <usart_sync_read+0x1c>
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	000079e0 	.word	0x000079e0
    143c:	000014c1 	.word	0x000014c1
    1440:	00001bfd 	.word	0x00001bfd
    1444:	00001be1 	.word	0x00001be1

00001448 <usart_sync_init>:
{
    1448:	b570      	push	{r4, r5, r6, lr}
    144a:	0005      	movs	r5, r0
    144c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    144e:	2800      	cmp	r0, #0
    1450:	d013      	beq.n	147a <usart_sync_init+0x32>
    1452:	0008      	movs	r0, r1
    1454:	1e43      	subs	r3, r0, #1
    1456:	4198      	sbcs	r0, r3
    1458:	b2c0      	uxtb	r0, r0
    145a:	2234      	movs	r2, #52	; 0x34
    145c:	4908      	ldr	r1, [pc, #32]	; (1480 <usart_sync_init+0x38>)
    145e:	4b09      	ldr	r3, [pc, #36]	; (1484 <usart_sync_init+0x3c>)
    1460:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1462:	0028      	movs	r0, r5
    1464:	3008      	adds	r0, #8
    1466:	0021      	movs	r1, r4
    1468:	4b07      	ldr	r3, [pc, #28]	; (1488 <usart_sync_init+0x40>)
    146a:	4798      	blx	r3
	if (init_status) {
    146c:	2800      	cmp	r0, #0
    146e:	d103      	bne.n	1478 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    1470:	4b06      	ldr	r3, [pc, #24]	; (148c <usart_sync_init+0x44>)
    1472:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    1474:	4b06      	ldr	r3, [pc, #24]	; (1490 <usart_sync_init+0x48>)
    1476:	602b      	str	r3, [r5, #0]
}
    1478:	bd70      	pop	{r4, r5, r6, pc}
    147a:	2000      	movs	r0, #0
    147c:	e7ed      	b.n	145a <usart_sync_init+0x12>
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	000079e0 	.word	0x000079e0
    1484:	000014c1 	.word	0x000014c1
    1488:	00001b99 	.word	0x00001b99
    148c:	000013e1 	.word	0x000013e1
    1490:	00001365 	.word	0x00001365

00001494 <usart_sync_enable>:
{
    1494:	b510      	push	{r4, lr}
    1496:	0004      	movs	r4, r0
	ASSERT(descr);
    1498:	1e43      	subs	r3, r0, #1
    149a:	4198      	sbcs	r0, r3
    149c:	b2c0      	uxtb	r0, r0
    149e:	2253      	movs	r2, #83	; 0x53
    14a0:	4904      	ldr	r1, [pc, #16]	; (14b4 <usart_sync_enable+0x20>)
    14a2:	4b05      	ldr	r3, [pc, #20]	; (14b8 <usart_sync_enable+0x24>)
    14a4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    14a6:	0020      	movs	r0, r4
    14a8:	3008      	adds	r0, #8
    14aa:	4b04      	ldr	r3, [pc, #16]	; (14bc <usart_sync_enable+0x28>)
    14ac:	4798      	blx	r3
}
    14ae:	2000      	movs	r0, #0
    14b0:	bd10      	pop	{r4, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	000079e0 	.word	0x000079e0
    14b8:	000014c1 	.word	0x000014c1
    14bc:	00001bc5 	.word	0x00001bc5

000014c0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    14c0:	2800      	cmp	r0, #0
    14c2:	d100      	bne.n	14c6 <assert+0x6>
		__asm("BKPT #0");
    14c4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    14c6:	4770      	bx	lr

000014c8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    14c8:	6803      	ldr	r3, [r0, #0]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d00a      	beq.n	14e4 <is_list_element+0x1c>
		if (it == element) {
    14ce:	428b      	cmp	r3, r1
    14d0:	d00a      	beq.n	14e8 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d003      	beq.n	14e0 <is_list_element+0x18>
		if (it == element) {
    14d8:	4299      	cmp	r1, r3
    14da:	d1fa      	bne.n	14d2 <is_list_element+0xa>
			return true;
    14dc:	2001      	movs	r0, #1
    14de:	e000      	b.n	14e2 <is_list_element+0x1a>
		}
	}

	return false;
    14e0:	2000      	movs	r0, #0
}
    14e2:	4770      	bx	lr
	return false;
    14e4:	2000      	movs	r0, #0
    14e6:	e7fc      	b.n	14e2 <is_list_element+0x1a>
			return true;
    14e8:	2001      	movs	r0, #1
    14ea:	e7fa      	b.n	14e2 <is_list_element+0x1a>

000014ec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    14ec:	b570      	push	{r4, r5, r6, lr}
    14ee:	0004      	movs	r4, r0
    14f0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    14f2:	4b06      	ldr	r3, [pc, #24]	; (150c <list_insert_as_head+0x20>)
    14f4:	4798      	blx	r3
    14f6:	2301      	movs	r3, #1
    14f8:	4058      	eors	r0, r3
    14fa:	b2c0      	uxtb	r0, r0
    14fc:	2239      	movs	r2, #57	; 0x39
    14fe:	4904      	ldr	r1, [pc, #16]	; (1510 <list_insert_as_head+0x24>)
    1500:	4b04      	ldr	r3, [pc, #16]	; (1514 <list_insert_as_head+0x28>)
    1502:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1504:	6823      	ldr	r3, [r4, #0]
    1506:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1508:	6025      	str	r5, [r4, #0]
}
    150a:	bd70      	pop	{r4, r5, r6, pc}
    150c:	000014c9 	.word	0x000014c9
    1510:	000079fc 	.word	0x000079fc
    1514:	000014c1 	.word	0x000014c1

00001518 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1518:	6803      	ldr	r3, [r0, #0]
    151a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    151c:	6001      	str	r1, [r0, #0]
}
    151e:	4770      	bx	lr

00001520 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1520:	6803      	ldr	r3, [r0, #0]
    1522:	2b00      	cmp	r3, #0
    1524:	d001      	beq.n	152a <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1526:	681a      	ldr	r2, [r3, #0]
    1528:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    152a:	0018      	movs	r0, r3
    152c:	4770      	bx	lr
	...

00001530 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1530:	b570      	push	{r4, r5, r6, lr}
    1532:	0004      	movs	r4, r0
    1534:	000e      	movs	r6, r1
    1536:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1538:	2800      	cmp	r0, #0
    153a:	d00b      	beq.n	1554 <ringbuffer_init+0x24>
    153c:	2900      	cmp	r1, #0
    153e:	d018      	beq.n	1572 <ringbuffer_init+0x42>
    1540:	2001      	movs	r0, #1
    1542:	2a00      	cmp	r2, #0
    1544:	d107      	bne.n	1556 <ringbuffer_init+0x26>
    1546:	2228      	movs	r2, #40	; 0x28
    1548:	490c      	ldr	r1, [pc, #48]	; (157c <ringbuffer_init+0x4c>)
    154a:	2000      	movs	r0, #0
    154c:	4b0c      	ldr	r3, [pc, #48]	; (1580 <ringbuffer_init+0x50>)
    154e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1550:	1e6b      	subs	r3, r5, #1
    1552:	e007      	b.n	1564 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    1554:	2000      	movs	r0, #0
    1556:	2228      	movs	r2, #40	; 0x28
    1558:	4908      	ldr	r1, [pc, #32]	; (157c <ringbuffer_init+0x4c>)
    155a:	4b09      	ldr	r3, [pc, #36]	; (1580 <ringbuffer_init+0x50>)
    155c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    155e:	1e6b      	subs	r3, r5, #1
    1560:	422b      	tst	r3, r5
    1562:	d108      	bne.n	1576 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1564:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1566:	2300      	movs	r3, #0
    1568:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    156a:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    156c:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    156e:	2000      	movs	r0, #0
}
    1570:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1572:	2000      	movs	r0, #0
    1574:	e7ef      	b.n	1556 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    1576:	200d      	movs	r0, #13
    1578:	4240      	negs	r0, r0
    157a:	e7f9      	b.n	1570 <ringbuffer_init+0x40>
    157c:	00007a1c 	.word	0x00007a1c
    1580:	000014c1 	.word	0x000014c1

00001584 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1584:	b570      	push	{r4, r5, r6, lr}
    1586:	0004      	movs	r4, r0
    1588:	000d      	movs	r5, r1
	ASSERT(rb && data);
    158a:	2800      	cmp	r0, #0
    158c:	d015      	beq.n	15ba <ringbuffer_get+0x36>
    158e:	0008      	movs	r0, r1
    1590:	1e43      	subs	r3, r0, #1
    1592:	4198      	sbcs	r0, r3
    1594:	b2c0      	uxtb	r0, r0
    1596:	2240      	movs	r2, #64	; 0x40
    1598:	490a      	ldr	r1, [pc, #40]	; (15c4 <ringbuffer_get+0x40>)
    159a:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <ringbuffer_get+0x44>)
    159c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    159e:	68a3      	ldr	r3, [r4, #8]
    15a0:	68e2      	ldr	r2, [r4, #12]
    15a2:	429a      	cmp	r2, r3
    15a4:	d00b      	beq.n	15be <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    15a6:	6862      	ldr	r2, [r4, #4]
    15a8:	4013      	ands	r3, r2
    15aa:	6822      	ldr	r2, [r4, #0]
    15ac:	5cd3      	ldrb	r3, [r2, r3]
    15ae:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    15b0:	68a3      	ldr	r3, [r4, #8]
    15b2:	3301      	adds	r3, #1
    15b4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    15b6:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    15b8:	bd70      	pop	{r4, r5, r6, pc}
    15ba:	2000      	movs	r0, #0
    15bc:	e7eb      	b.n	1596 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    15be:	200a      	movs	r0, #10
    15c0:	4240      	negs	r0, r0
    15c2:	e7f9      	b.n	15b8 <ringbuffer_get+0x34>
    15c4:	00007a1c 	.word	0x00007a1c
    15c8:	000014c1 	.word	0x000014c1

000015cc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	0004      	movs	r4, r0
    15d0:	000d      	movs	r5, r1
	ASSERT(rb);
    15d2:	1e43      	subs	r3, r0, #1
    15d4:	4198      	sbcs	r0, r3
    15d6:	b2c0      	uxtb	r0, r0
    15d8:	2251      	movs	r2, #81	; 0x51
    15da:	490a      	ldr	r1, [pc, #40]	; (1604 <ringbuffer_put+0x38>)
    15dc:	4b0a      	ldr	r3, [pc, #40]	; (1608 <ringbuffer_put+0x3c>)
    15de:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    15e0:	6863      	ldr	r3, [r4, #4]
    15e2:	68e2      	ldr	r2, [r4, #12]
    15e4:	4013      	ands	r3, r2
    15e6:	6822      	ldr	r2, [r4, #0]
    15e8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    15ea:	68e3      	ldr	r3, [r4, #12]
    15ec:	6861      	ldr	r1, [r4, #4]
    15ee:	68a2      	ldr	r2, [r4, #8]
    15f0:	1a9a      	subs	r2, r3, r2
    15f2:	428a      	cmp	r2, r1
    15f4:	d901      	bls.n	15fa <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    15f6:	1a59      	subs	r1, r3, r1
    15f8:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    15fa:	3301      	adds	r3, #1
    15fc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    15fe:	2000      	movs	r0, #0
    1600:	bd70      	pop	{r4, r5, r6, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00007a1c 	.word	0x00007a1c
    1608:	000014c1 	.word	0x000014c1

0000160c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    160c:	b510      	push	{r4, lr}
    160e:	0004      	movs	r4, r0
	ASSERT(rb);
    1610:	1e43      	subs	r3, r0, #1
    1612:	4198      	sbcs	r0, r3
    1614:	b2c0      	uxtb	r0, r0
    1616:	2267      	movs	r2, #103	; 0x67
    1618:	4903      	ldr	r1, [pc, #12]	; (1628 <ringbuffer_num+0x1c>)
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <ringbuffer_num+0x20>)
    161c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    161e:	68e0      	ldr	r0, [r4, #12]
    1620:	68a3      	ldr	r3, [r4, #8]
    1622:	1ac0      	subs	r0, r0, r3
}
    1624:	bd10      	pop	{r4, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	00007a1c 	.word	0x00007a1c
    162c:	000014c1 	.word	0x000014c1

00001630 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1630:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1632:	4a06      	ldr	r2, [pc, #24]	; (164c <_sbrk+0x1c>)
    1634:	6812      	ldr	r2, [r2, #0]
    1636:	2a00      	cmp	r2, #0
    1638:	d004      	beq.n	1644 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    163a:	4a04      	ldr	r2, [pc, #16]	; (164c <_sbrk+0x1c>)
    163c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    163e:	18c3      	adds	r3, r0, r3
    1640:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1642:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1644:	4902      	ldr	r1, [pc, #8]	; (1650 <_sbrk+0x20>)
    1646:	4a01      	ldr	r2, [pc, #4]	; (164c <_sbrk+0x1c>)
    1648:	6011      	str	r1, [r2, #0]
    164a:	e7f6      	b.n	163a <_sbrk+0xa>
    164c:	20000224 	.word	0x20000224
    1650:	200014a8 	.word	0x200014a8

00001654 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1654:	2001      	movs	r0, #1
    1656:	4240      	negs	r0, r0
    1658:	4770      	bx	lr

0000165a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    165a:	2380      	movs	r3, #128	; 0x80
    165c:	019b      	lsls	r3, r3, #6
    165e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1660:	2000      	movs	r0, #0
    1662:	4770      	bx	lr

00001664 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    1664:	2001      	movs	r0, #1
    1666:	4770      	bx	lr

00001668 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr

0000166c <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
    166c:	2000      	movs	r0, #0
    166e:	4770      	bx	lr

00001670 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1670:	b570      	push	{r4, r5, r6, lr}
    1672:	0004      	movs	r4, r0
    1674:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    1676:	4b39      	ldr	r3, [pc, #228]	; (175c <_adc_init+0xec>)
    1678:	18c0      	adds	r0, r0, r3
    167a:	4242      	negs	r2, r0
    167c:	4142      	adcs	r2, r0
    167e:	b2d0      	uxtb	r0, r2
    1680:	2294      	movs	r2, #148	; 0x94
    1682:	4937      	ldr	r1, [pc, #220]	; (1760 <_adc_init+0xf0>)
    1684:	4b37      	ldr	r3, [pc, #220]	; (1764 <_adc_init+0xf4>)
    1686:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1688:	4b37      	ldr	r3, [pc, #220]	; (1768 <_adc_init+0xf8>)
    168a:	681a      	ldr	r2, [r3, #0]
    168c:	0152      	lsls	r2, r2, #5
    168e:	23e0      	movs	r3, #224	; 0xe0
    1690:	00db      	lsls	r3, r3, #3
    1692:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    1694:	4b35      	ldr	r3, [pc, #212]	; (176c <_adc_init+0xfc>)
    1696:	6859      	ldr	r1, [r3, #4]
    1698:	0149      	lsls	r1, r1, #5
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	0edb      	lsrs	r3, r3, #27
    169e:	430b      	orrs	r3, r1
    16a0:	21ff      	movs	r1, #255	; 0xff
    16a2:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    16a4:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    16a6:	7e63      	ldrb	r3, [r4, #25]
    16a8:	09db      	lsrs	r3, r3, #7
    16aa:	d1fc      	bne.n	16a6 <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    16ac:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    16ae:	079b      	lsls	r3, r3, #30
    16b0:	d504      	bpl.n	16bc <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    16b2:	2300      	movs	r3, #0
    16b4:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    16b6:	7e63      	ldrb	r3, [r4, #25]
    16b8:	09db      	lsrs	r3, r3, #7
    16ba:	d1fc      	bne.n	16b6 <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
    16bc:	2301      	movs	r3, #1
    16be:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    16c0:	7e63      	ldrb	r3, [r4, #25]
    16c2:	09db      	lsrs	r3, r3, #7
    16c4:	d1fc      	bne.n	16c0 <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    16c6:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    16c8:	00ea      	lsls	r2, r5, #3
    16ca:	1b52      	subs	r2, r2, r5
    16cc:	0092      	lsls	r2, r2, #2
    16ce:	4b28      	ldr	r3, [pc, #160]	; (1770 <_adc_init+0x100>)
    16d0:	189b      	adds	r3, r3, r2
    16d2:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
    16d4:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    16d6:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
    16d8:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    16da:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
    16dc:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    16de:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
    16e0:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    16e2:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    16e4:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    16e6:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    16e8:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    16ea:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    16ec:	222a      	movs	r2, #42	; 0x2a
    16ee:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    16f0:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    16f2:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    16f4:	7e63      	ldrb	r3, [r4, #25]
    16f6:	09db      	lsrs	r3, r3, #7
    16f8:	d1fc      	bne.n	16f4 <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    16fa:	00eb      	lsls	r3, r5, #3
    16fc:	1b5b      	subs	r3, r3, r5
    16fe:	009b      	lsls	r3, r3, #2
    1700:	4a1b      	ldr	r2, [pc, #108]	; (1770 <_adc_init+0x100>)
    1702:	18d3      	adds	r3, r2, r3
    1704:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1706:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1708:	7e63      	ldrb	r3, [r4, #25]
    170a:	09db      	lsrs	r3, r3, #7
    170c:	d1fc      	bne.n	1708 <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    170e:	00eb      	lsls	r3, r5, #3
    1710:	1b5b      	subs	r3, r3, r5
    1712:	009b      	lsls	r3, r3, #2
    1714:	4a16      	ldr	r2, [pc, #88]	; (1770 <_adc_init+0x100>)
    1716:	18d3      	adds	r3, r2, r3
    1718:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    171a:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    171c:	7e63      	ldrb	r3, [r4, #25]
    171e:	09db      	lsrs	r3, r3, #7
    1720:	d1fc      	bne.n	171c <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1722:	00eb      	lsls	r3, r5, #3
    1724:	1b5b      	subs	r3, r3, r5
    1726:	009b      	lsls	r3, r3, #2
    1728:	4a11      	ldr	r2, [pc, #68]	; (1770 <_adc_init+0x100>)
    172a:	18d3      	adds	r3, r2, r3
    172c:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    172e:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1730:	7e63      	ldrb	r3, [r4, #25]
    1732:	09db      	lsrs	r3, r3, #7
    1734:	d1fc      	bne.n	1730 <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1736:	00eb      	lsls	r3, r5, #3
    1738:	1b5b      	subs	r3, r3, r5
    173a:	009b      	lsls	r3, r3, #2
    173c:	4a0c      	ldr	r2, [pc, #48]	; (1770 <_adc_init+0x100>)
    173e:	18d3      	adds	r3, r2, r3
    1740:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    1742:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1744:	7e63      	ldrb	r3, [r4, #25]
    1746:	09db      	lsrs	r3, r3, #7
    1748:	d1fc      	bne.n	1744 <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    174a:	00eb      	lsls	r3, r5, #3
    174c:	1b5d      	subs	r5, r3, r5
    174e:	00ad      	lsls	r5, r5, #2
    1750:	4b07      	ldr	r3, [pc, #28]	; (1770 <_adc_init+0x100>)
    1752:	195d      	adds	r5, r3, r5
    1754:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1756:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    1758:	2000      	movs	r0, #0
    175a:	bd70      	pop	{r4, r5, r6, pc}
    175c:	bdffc000 	.word	0xbdffc000
    1760:	00007a5c 	.word	0x00007a5c
    1764:	000014c1 	.word	0x000014c1
    1768:	00806024 	.word	0x00806024
    176c:	00806020 	.word	0x00806020
    1770:	00007a40 	.word	0x00007a40

00001774 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
    1774:	b570      	push	{r4, r5, r6, lr}
    1776:	0005      	movs	r5, r0
    1778:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
    177a:	1e43      	subs	r3, r0, #1
    177c:	4198      	sbcs	r0, r3
    177e:	b2c0      	uxtb	r0, r0
    1780:	22d3      	movs	r2, #211	; 0xd3
    1782:	490e      	ldr	r1, [pc, #56]	; (17bc <_adc_async_init+0x48>)
    1784:	4b0e      	ldr	r3, [pc, #56]	; (17c0 <_adc_async_init+0x4c>)
    1786:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1788:	0020      	movs	r0, r4
    178a:	4b0e      	ldr	r3, [pc, #56]	; (17c4 <_adc_async_init+0x50>)
    178c:	4798      	blx	r3
    178e:	0001      	movs	r1, r0
    1790:	0020      	movs	r0, r4
    1792:	4b0d      	ldr	r3, [pc, #52]	; (17c8 <_adc_async_init+0x54>)
    1794:	4798      	blx	r3
	if (init_status) {
    1796:	2800      	cmp	r0, #0
    1798:	d10f      	bne.n	17ba <_adc_async_init+0x46>
		return init_status;
	}
	device->hw = hw;
    179a:	616c      	str	r4, [r5, #20]
	_adc_dev   = device;
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <_adc_async_init+0x58>)
    179e:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a0:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <_adc_async_init+0x5c>)
    17a2:	2280      	movs	r2, #128	; 0x80
    17a4:	0412      	lsls	r2, r2, #16
    17a6:	2180      	movs	r1, #128	; 0x80
    17a8:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    17aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17ae:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17b2:	3101      	adds	r1, #1
    17b4:	31ff      	adds	r1, #255	; 0xff
    17b6:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17b8:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(ADC_IRQn);
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_EnableIRQ(ADC_IRQn);

	return ERR_NONE;
}
    17ba:	bd70      	pop	{r4, r5, r6, pc}
    17bc:	00007a5c 	.word	0x00007a5c
    17c0:	000014c1 	.word	0x000014c1
    17c4:	0000166d 	.word	0x0000166d
    17c8:	00001671 	.word	0x00001671
    17cc:	20000228 	.word	0x20000228
    17d0:	e000e100 	.word	0xe000e100

000017d4 <_adc_async_enable_channel>:
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    17d4:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    17d6:	7813      	ldrb	r3, [r2, #0]
    17d8:	2102      	movs	r1, #2
    17da:	430b      	orrs	r3, r1
    17dc:	7013      	strb	r3, [r2, #0]
}
    17de:	4770      	bx	lr

000017e0 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    17e0:	6942      	ldr	r2, [r0, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    17e2:	7e53      	ldrb	r3, [r2, #25]
    17e4:	09db      	lsrs	r3, r3, #7
    17e6:	d1fc      	bne.n	17e2 <_adc_async_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
    17e8:	8890      	ldrh	r0, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    17ea:	0680      	lsls	r0, r0, #26
    17ec:	0f80      	lsrs	r0, r0, #30
    17ee:	3803      	subs	r0, #3
    17f0:	1e43      	subs	r3, r0, #1
    17f2:	4198      	sbcs	r0, r3
    17f4:	3001      	adds	r0, #1
}
    17f6:	4770      	bx	lr

000017f8 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    17f8:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    17fa:	7b13      	ldrb	r3, [r2, #12]
    17fc:	2102      	movs	r1, #2
    17fe:	430b      	orrs	r3, r1
    1800:	7313      	strb	r3, [r2, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1802:	7e53      	ldrb	r3, [r2, #25]
    1804:	09db      	lsrs	r3, r3, #7
    1806:	d1fc      	bne.n	1802 <_adc_async_convert+0xa>
}
    1808:	4770      	bx	lr
	...

0000180c <_adc_async_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_async_set_inputs(struct _adc_async_device *const device, const adc_pos_input_t pos_input,
                           const adc_neg_input_t neg_input, const uint8_t channel)
{
    180c:	b530      	push	{r4, r5, lr}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    180e:	6944      	ldr	r4, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1810:	6925      	ldr	r5, [r4, #16]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    1812:	231f      	movs	r3, #31
    1814:	439d      	bics	r5, r3
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    1816:	4019      	ands	r1, r3
    1818:	4329      	orrs	r1, r5
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    181a:	6121      	str	r1, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    181c:	7e63      	ldrb	r3, [r4, #25]
    181e:	09db      	lsrs	r3, r3, #7
    1820:	d1fc      	bne.n	181c <_adc_async_set_inputs+0x10>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    1822:	6941      	ldr	r1, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1824:	690b      	ldr	r3, [r1, #16]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    1826:	4806      	ldr	r0, [pc, #24]	; (1840 <_adc_async_set_inputs+0x34>)
    1828:	4003      	ands	r3, r0
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    182a:	0212      	lsls	r2, r2, #8
    182c:	20f8      	movs	r0, #248	; 0xf8
    182e:	0140      	lsls	r0, r0, #5
    1830:	4002      	ands	r2, r0
    1832:	431a      	orrs	r2, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1834:	610a      	str	r2, [r1, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1836:	7e4b      	ldrb	r3, [r1, #25]
    1838:	09db      	lsrs	r3, r3, #7
    183a:	d1fc      	bne.n	1836 <_adc_async_set_inputs+0x2a>
}
    183c:	bd30      	pop	{r4, r5, pc}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	ffffe0ff 	.word	0xffffe0ff

00001844 <_adc_async_set_irq_state>:
void _adc_async_set_irq_state(struct _adc_async_device *const device, const uint8_t channel,
                              const enum _adc_async_callback_type type, const bool state)
{
	(void)channel;

	void *const hw = device->hw;
    1844:	6941      	ldr	r1, [r0, #20]

	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    1846:	2a01      	cmp	r2, #1
    1848:	d008      	beq.n	185c <_adc_async_set_irq_state+0x18>
		hri_adc_write_INTEN_WINMON_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    184a:	2a02      	cmp	r2, #2
    184c:	d00e      	beq.n	186c <_adc_async_set_irq_state+0x28>
		hri_adc_write_INTEN_OVERRUN_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    184e:	2a00      	cmp	r2, #0
    1850:	d103      	bne.n	185a <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
    1852:	2b00      	cmp	r3, #0
    1854:	d012      	beq.n	187c <_adc_async_set_irq_state+0x38>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    1856:	2301      	movs	r3, #1
    1858:	75cb      	strb	r3, [r1, #23]
		hri_adc_write_INTEN_RESRDY_bit(hw, state);
	}
}
    185a:	4770      	bx	lr
	if (value == 0x0) {
    185c:	2b00      	cmp	r3, #0
    185e:	d102      	bne.n	1866 <_adc_async_set_irq_state+0x22>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    1860:	3304      	adds	r3, #4
    1862:	758b      	strb	r3, [r1, #22]
    1864:	e7f9      	b.n	185a <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    1866:	2304      	movs	r3, #4
    1868:	75cb      	strb	r3, [r1, #23]
    186a:	e7f6      	b.n	185a <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
    186c:	2b00      	cmp	r3, #0
    186e:	d102      	bne.n	1876 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    1870:	3302      	adds	r3, #2
    1872:	758b      	strb	r3, [r1, #22]
    1874:	e7f1      	b.n	185a <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    1876:	2302      	movs	r3, #2
    1878:	75cb      	strb	r3, [r1, #23]
    187a:	e7ee      	b.n	185a <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    187c:	3301      	adds	r3, #1
    187e:	758b      	strb	r3, [r1, #22]
    1880:	e7eb      	b.n	185a <_adc_async_set_irq_state+0x16>
	...

00001884 <ADC_Handler>:

/**
 * \internal ADC interrupt handler
 */
void ADC_Handler(void)
{
    1884:	b510      	push	{r4, lr}
	void *const hw      = _adc_dev->hw;
    1886:	4b11      	ldr	r3, [pc, #68]	; (18cc <ADC_Handler+0x48>)
    1888:	6818      	ldr	r0, [r3, #0]
    188a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    188c:	7e11      	ldrb	r1, [r2, #24]
	return ((Adc *)hw)->INTENSET.reg;
    188e:	7dd3      	ldrb	r3, [r2, #23]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    1890:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1892:	07d9      	lsls	r1, r3, #31
    1894:	d50a      	bpl.n	18ac <ADC_Handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1896:	2301      	movs	r3, #1
    1898:	7613      	strb	r3, [r2, #24]
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		_adc_dev->adc_async_ch_cb.convert_done(_adc_dev, 0, hri_adc_read_RESULT_reg(hw));
    189a:	6884      	ldr	r4, [r0, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    189c:	7e53      	ldrb	r3, [r2, #25]
    189e:	09db      	lsrs	r3, r3, #7
    18a0:	d1fc      	bne.n	189c <ADC_Handler+0x18>
	return ((Adc *)hw)->RESULT.reg;
    18a2:	8b52      	ldrh	r2, [r2, #26]
    18a4:	b292      	uxth	r2, r2
    18a6:	2100      	movs	r1, #0
    18a8:	47a0      	blx	r4
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
	}
}
    18aa:	bd10      	pop	{r4, pc}
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    18ac:	0799      	lsls	r1, r3, #30
    18ae:	d407      	bmi.n	18c0 <ADC_Handler+0x3c>
	} else if (intflag & ADC_INTFLAG_WINMON) {
    18b0:	075b      	lsls	r3, r3, #29
    18b2:	d5fa      	bpl.n	18aa <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    18b4:	2304      	movs	r3, #4
    18b6:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
    18b8:	6803      	ldr	r3, [r0, #0]
    18ba:	2100      	movs	r1, #0
    18bc:	4798      	blx	r3
}
    18be:	e7f4      	b.n	18aa <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    18c0:	2302      	movs	r3, #2
    18c2:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
    18c4:	6843      	ldr	r3, [r0, #4]
    18c6:	2100      	movs	r1, #0
    18c8:	4798      	blx	r3
    18ca:	e7ee      	b.n	18aa <ADC_Handler+0x26>
    18cc:	20000228 	.word	0x20000228

000018d0 <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
    18d0:	b243      	sxtb	r3, r0
    18d2:	2b00      	cmp	r3, #0
    18d4:	db07      	blt.n	18e6 <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18d6:	231f      	movs	r3, #31
    18d8:	4018      	ands	r0, r3
    18da:	3b1e      	subs	r3, #30
    18dc:	4083      	lsls	r3, r0
    18de:	2280      	movs	r2, #128	; 0x80
    18e0:	0052      	lsls	r2, r2, #1
    18e2:	4901      	ldr	r1, [pc, #4]	; (18e8 <_irq_set+0x18>)
    18e4:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    18e6:	4770      	bx	lr
    18e8:	e000e100 	.word	0xe000e100

000018ec <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    18ec:	b510      	push	{r4, lr}
    18ee:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    18f0:	2064      	movs	r0, #100	; 0x64
    18f2:	4358      	muls	r0, r3
    18f4:	3002      	adds	r0, #2
    18f6:	2103      	movs	r1, #3
    18f8:	4b03      	ldr	r3, [pc, #12]	; (1908 <_get_cycles_for_ms+0x1c>)
    18fa:	4798      	blx	r3
    18fc:	0003      	movs	r3, r0
    18fe:	0080      	lsls	r0, r0, #2
    1900:	18c0      	adds	r0, r0, r3
    1902:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1904:	bd10      	pop	{r4, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	00005a69 	.word	0x00005a69

0000190c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    190c:	3901      	subs	r1, #1
    190e:	d8fd      	bhi.n	190c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1910:	4770      	bx	lr
	...

00001914 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1914:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1916:	4b06      	ldr	r3, [pc, #24]	; (1930 <_init_chip+0x1c>)
    1918:	685a      	ldr	r2, [r3, #4]
    191a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    191c:	4b05      	ldr	r3, [pc, #20]	; (1934 <_init_chip+0x20>)
    191e:	4798      	blx	r3
	_sysctrl_init_sources();
    1920:	4b05      	ldr	r3, [pc, #20]	; (1938 <_init_chip+0x24>)
    1922:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <_init_chip+0x28>)
    1926:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1928:	20ff      	movs	r0, #255	; 0xff
    192a:	4b05      	ldr	r3, [pc, #20]	; (1940 <_init_chip+0x2c>)
    192c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    192e:	bd10      	pop	{r4, pc}
    1930:	41004000 	.word	0x41004000
    1934:	00001965 	.word	0x00001965
    1938:	00002549 	.word	0x00002549
    193c:	00002589 	.word	0x00002589
    1940:	00001945 	.word	0x00001945

00001944 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1944:	07c3      	lsls	r3, r0, #31
    1946:	d50a      	bpl.n	195e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1948:	4b05      	ldr	r3, [pc, #20]	; (1960 <_gclk_init_generators_by_fref+0x1c>)
    194a:	2280      	movs	r2, #128	; 0x80
    194c:	0052      	lsls	r2, r2, #1
    194e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1950:	2283      	movs	r2, #131	; 0x83
    1952:	0252      	lsls	r2, r2, #9
    1954:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1956:	001a      	movs	r2, r3
    1958:	7853      	ldrb	r3, [r2, #1]
    195a:	09db      	lsrs	r3, r3, #7
    195c:	d1fc      	bne.n	1958 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    195e:	4770      	bx	lr
    1960:	40000c00 	.word	0x40000c00

00001964 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <_pm_init+0x1c>)
    1966:	7a1a      	ldrb	r2, [r3, #8]
    1968:	b2d2      	uxtb	r2, r2
    196a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    196c:	7a5a      	ldrb	r2, [r3, #9]
    196e:	b2d2      	uxtb	r2, r2
    1970:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1972:	7a9a      	ldrb	r2, [r3, #10]
    1974:	b2d2      	uxtb	r2, r2
    1976:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1978:	7ada      	ldrb	r2, [r3, #11]
    197a:	b2d2      	uxtb	r2, r2
    197c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    197e:	4770      	bx	lr
    1980:	40000400 	.word	0x40000400

00001984 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1984:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1986:	07db      	lsls	r3, r3, #31
    1988:	d409      	bmi.n	199e <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    198a:	6803      	ldr	r3, [r0, #0]
    198c:	2202      	movs	r2, #2
    198e:	4313      	orrs	r3, r2
    1990:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1992:	3201      	adds	r2, #1
    1994:	69c3      	ldr	r3, [r0, #28]
    1996:	421a      	tst	r2, r3
    1998:	d1fc      	bne.n	1994 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    199a:	2000      	movs	r0, #0
}
    199c:	4770      	bx	lr
		return ERR_BUSY;
    199e:	2004      	movs	r0, #4
    19a0:	4240      	negs	r0, r0
    19a2:	e7fb      	b.n	199c <_spi_sync_enable+0x18>

000019a4 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    19a4:	b510      	push	{r4, lr}
    19a6:	0004      	movs	r4, r0
	_spi_sync_enable(hw);
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <_spi_async_enable+0x28>)
    19aa:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <_spi_async_enable+0x2c>)
    19ae:	469c      	mov	ip, r3
    19b0:	4464      	add	r4, ip
    19b2:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    19b4:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    19b6:	b2e3      	uxtb	r3, r4
    19b8:	0622      	lsls	r2, r4, #24
    19ba:	d405      	bmi.n	19c8 <_spi_async_enable+0x24>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19bc:	221f      	movs	r2, #31
    19be:	401a      	ands	r2, r3
    19c0:	2301      	movs	r3, #1
    19c2:	4093      	lsls	r3, r2
    19c4:	4a03      	ldr	r2, [pc, #12]	; (19d4 <_spi_async_enable+0x30>)
    19c6:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
}
    19c8:	2000      	movs	r0, #0
    19ca:	bd10      	pop	{r4, pc}
    19cc:	00001985 	.word	0x00001985
    19d0:	bdfff800 	.word	0xbdfff800
    19d4:	e000e100 	.word	0xe000e100

000019d8 <_get_i2cm_index>:
{
    19d8:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    19da:	4b0d      	ldr	r3, [pc, #52]	; (1a10 <_get_i2cm_index+0x38>)
    19dc:	469c      	mov	ip, r3
    19de:	4460      	add	r0, ip
    19e0:	0a80      	lsrs	r0, r0, #10
    19e2:	b2c0      	uxtb	r0, r0
		if (_i2cms[i].number == sercom_offset) {
    19e4:	2801      	cmp	r0, #1
    19e6:	d00f      	beq.n	1a08 <_get_i2cm_index+0x30>
    19e8:	2802      	cmp	r0, #2
    19ea:	d00b      	beq.n	1a04 <_get_i2cm_index+0x2c>
    19ec:	2803      	cmp	r0, #3
    19ee:	d007      	beq.n	1a00 <_get_i2cm_index+0x28>
	ASSERT(false);
    19f0:	4a08      	ldr	r2, [pc, #32]	; (1a14 <_get_i2cm_index+0x3c>)
    19f2:	4909      	ldr	r1, [pc, #36]	; (1a18 <_get_i2cm_index+0x40>)
    19f4:	2000      	movs	r0, #0
    19f6:	4b09      	ldr	r3, [pc, #36]	; (1a1c <_get_i2cm_index+0x44>)
    19f8:	4798      	blx	r3
	return -1;
    19fa:	2001      	movs	r0, #1
    19fc:	4240      	negs	r0, r0
}
    19fe:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1a00:	3801      	subs	r0, #1
    1a02:	e002      	b.n	1a0a <_get_i2cm_index+0x32>
    1a04:	2001      	movs	r0, #1
    1a06:	e000      	b.n	1a0a <_get_i2cm_index+0x32>
    1a08:	2000      	movs	r0, #0
			return i;
    1a0a:	b240      	sxtb	r0, r0
    1a0c:	e7f7      	b.n	19fe <_get_i2cm_index+0x26>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	bdfff800 	.word	0xbdfff800
    1a14:	0000039e 	.word	0x0000039e
    1a18:	00007abc 	.word	0x00007abc
    1a1c:	000014c1 	.word	0x000014c1

00001a20 <_i2c_m_sync_init_impl>:
{
    1a20:	b570      	push	{r4, r5, r6, lr}
    1a22:	0005      	movs	r5, r0
    1a24:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1a26:	0008      	movs	r0, r1
    1a28:	4b31      	ldr	r3, [pc, #196]	; (1af0 <_i2c_m_sync_init_impl+0xd0>)
    1a2a:	4798      	blx	r3
    1a2c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1a2e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1a30:	07db      	lsls	r3, r3, #31
    1a32:	d421      	bmi.n	1a78 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1a34:	0043      	lsls	r3, r0, #1
    1a36:	181b      	adds	r3, r3, r0
    1a38:	00db      	lsls	r3, r3, #3
    1a3a:	4a2e      	ldr	r2, [pc, #184]	; (1af4 <_i2c_m_sync_init_impl+0xd4>)
    1a3c:	18d3      	adds	r3, r2, r3
    1a3e:	6859      	ldr	r1, [r3, #4]
    1a40:	231c      	movs	r3, #28
    1a42:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a44:	2203      	movs	r2, #3
    1a46:	69e3      	ldr	r3, [r4, #28]
    1a48:	421a      	tst	r2, r3
    1a4a:	d1fc      	bne.n	1a46 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1a4c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1a4e:	079b      	lsls	r3, r3, #30
    1a50:	d50b      	bpl.n	1a6a <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1a52:	6823      	ldr	r3, [r4, #0]
    1a54:	2202      	movs	r2, #2
    1a56:	4393      	bics	r3, r2
    1a58:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a5a:	3201      	adds	r2, #1
    1a5c:	69e3      	ldr	r3, [r4, #28]
    1a5e:	421a      	tst	r2, r3
    1a60:	d1fc      	bne.n	1a5c <_i2c_m_sync_init_impl+0x3c>
    1a62:	2202      	movs	r2, #2
    1a64:	69e3      	ldr	r3, [r4, #28]
    1a66:	421a      	tst	r2, r3
    1a68:	d1fc      	bne.n	1a64 <_i2c_m_sync_init_impl+0x44>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1a6a:	2301      	movs	r3, #1
    1a6c:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a6e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a70:	2203      	movs	r2, #3
    1a72:	69e3      	ldr	r3, [r4, #28]
    1a74:	421a      	tst	r2, r3
    1a76:	d1fc      	bne.n	1a72 <_i2c_m_sync_init_impl+0x52>
    1a78:	2201      	movs	r2, #1
    1a7a:	69e3      	ldr	r3, [r4, #28]
    1a7c:	421a      	tst	r2, r3
    1a7e:	d1fc      	bne.n	1a7a <_i2c_m_sync_init_impl+0x5a>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1a80:	0043      	lsls	r3, r0, #1
    1a82:	181b      	adds	r3, r3, r0
    1a84:	00db      	lsls	r3, r3, #3
    1a86:	4a1b      	ldr	r2, [pc, #108]	; (1af4 <_i2c_m_sync_init_impl+0xd4>)
    1a88:	18d3      	adds	r3, r2, r3
    1a8a:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a8c:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a8e:	2203      	movs	r2, #3
    1a90:	69e3      	ldr	r3, [r4, #28]
    1a92:	421a      	tst	r2, r3
    1a94:	d1fc      	bne.n	1a90 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1a96:	0043      	lsls	r3, r0, #1
    1a98:	181b      	adds	r3, r3, r0
    1a9a:	00db      	lsls	r3, r3, #3
    1a9c:	4a15      	ldr	r2, [pc, #84]	; (1af4 <_i2c_m_sync_init_impl+0xd4>)
    1a9e:	18d3      	adds	r3, r2, r3
    1aa0:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1aa2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1aa4:	2204      	movs	r2, #4
    1aa6:	69e3      	ldr	r3, [r4, #28]
    1aa8:	421a      	tst	r2, r3
    1aaa:	d1fc      	bne.n	1aa6 <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1aac:	0043      	lsls	r3, r0, #1
    1aae:	181b      	adds	r3, r3, r0
    1ab0:	00db      	lsls	r3, r3, #3
    1ab2:	4a10      	ldr	r2, [pc, #64]	; (1af4 <_i2c_m_sync_init_impl+0xd4>)
    1ab4:	18d3      	adds	r3, r2, r3
    1ab6:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1ab8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1aba:	0189      	lsls	r1, r1, #6
    1abc:	0f89      	lsrs	r1, r1, #30
    1abe:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1ac2:	4e0d      	ldr	r6, [pc, #52]	; (1af8 <_i2c_m_sync_init_impl+0xd8>)
    1ac4:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1ac6:	2301      	movs	r3, #1
    1ac8:	428b      	cmp	r3, r1
    1aca:	419b      	sbcs	r3, r3
    1acc:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1ace:	039b      	lsls	r3, r3, #14
    1ad0:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1ad2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ad4:	2204      	movs	r2, #4
    1ad6:	69e3      	ldr	r3, [r4, #28]
    1ad8:	421a      	tst	r2, r3
    1ada:	d1fc      	bne.n	1ad6 <_i2c_m_sync_init_impl+0xb6>
	service->trise = _i2cms[i].trise;
    1adc:	0043      	lsls	r3, r0, #1
    1ade:	1818      	adds	r0, r3, r0
    1ae0:	00c0      	lsls	r0, r0, #3
    1ae2:	4b04      	ldr	r3, [pc, #16]	; (1af4 <_i2c_m_sync_init_impl+0xd4>)
    1ae4:	1818      	adds	r0, r3, r0
    1ae6:	8a43      	ldrh	r3, [r0, #18]
    1ae8:	81eb      	strh	r3, [r5, #14]
}
    1aea:	2000      	movs	r0, #0
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	000019d9 	.word	0x000019d9
    1af4:	00007a74 	.word	0x00007a74
    1af8:	ffffbfff 	.word	0xffffbfff

00001afc <_usart_init>:
{
    1afc:	b510      	push	{r4, lr}
    1afe:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1b00:	4b20      	ldr	r3, [pc, #128]	; (1b84 <_usart_init+0x88>)
    1b02:	18c3      	adds	r3, r0, r3
    1b04:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1b06:	b2db      	uxtb	r3, r3
    1b08:	2b05      	cmp	r3, #5
    1b0a:	d005      	beq.n	1b18 <_usart_init+0x1c>
	ASSERT(false);
    1b0c:	228f      	movs	r2, #143	; 0x8f
    1b0e:	0092      	lsls	r2, r2, #2
    1b10:	491d      	ldr	r1, [pc, #116]	; (1b88 <_usart_init+0x8c>)
    1b12:	2000      	movs	r0, #0
    1b14:	4b1d      	ldr	r3, [pc, #116]	; (1b8c <_usart_init+0x90>)
    1b16:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1b18:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1b1a:	07db      	lsls	r3, r3, #31
    1b1c:	d418      	bmi.n	1b50 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b1e:	2203      	movs	r2, #3
    1b20:	69e3      	ldr	r3, [r4, #28]
    1b22:	421a      	tst	r2, r3
    1b24:	d1fc      	bne.n	1b20 <_usart_init+0x24>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1b26:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1b28:	079b      	lsls	r3, r3, #30
    1b2a:	d50b      	bpl.n	1b44 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1b2c:	6823      	ldr	r3, [r4, #0]
    1b2e:	2202      	movs	r2, #2
    1b30:	4393      	bics	r3, r2
    1b32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b34:	3201      	adds	r2, #1
    1b36:	69e3      	ldr	r3, [r4, #28]
    1b38:	421a      	tst	r2, r3
    1b3a:	d1fc      	bne.n	1b36 <_usart_init+0x3a>
    1b3c:	2202      	movs	r2, #2
    1b3e:	69e3      	ldr	r3, [r4, #28]
    1b40:	421a      	tst	r2, r3
    1b42:	d1fc      	bne.n	1b3e <_usart_init+0x42>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1b44:	2305      	movs	r3, #5
    1b46:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b48:	2203      	movs	r2, #3
    1b4a:	69e3      	ldr	r3, [r4, #28]
    1b4c:	421a      	tst	r2, r3
    1b4e:	d1fc      	bne.n	1b4a <_usart_init+0x4e>
    1b50:	2201      	movs	r2, #1
    1b52:	69e3      	ldr	r3, [r4, #28]
    1b54:	421a      	tst	r2, r3
    1b56:	d1fc      	bne.n	1b52 <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <_usart_init+0x94>)
    1b5a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b5c:	2203      	movs	r2, #3
    1b5e:	69e3      	ldr	r3, [r4, #28]
    1b60:	421a      	tst	r2, r3
    1b62:	d1fc      	bne.n	1b5e <_usart_init+0x62>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1b64:	23c0      	movs	r3, #192	; 0xc0
    1b66:	029b      	lsls	r3, r3, #10
    1b68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b6a:	2207      	movs	r2, #7
    1b6c:	69e3      	ldr	r3, [r4, #28]
    1b6e:	421a      	tst	r2, r3
    1b70:	d1fc      	bne.n	1b6c <_usart_init+0x70>
	((Sercom *)hw)->USART.BAUD.reg = data;
    1b72:	4b08      	ldr	r3, [pc, #32]	; (1b94 <_usart_init+0x98>)
    1b74:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1b76:	2300      	movs	r3, #0
    1b78:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1b7a:	2230      	movs	r2, #48	; 0x30
    1b7c:	54a3      	strb	r3, [r4, r2]
}
    1b7e:	2000      	movs	r0, #0
    1b80:	bd10      	pop	{r4, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	bdfff800 	.word	0xbdfff800
    1b88:	00007abc 	.word	0x00007abc
    1b8c:	000014c1 	.word	0x000014c1
    1b90:	40310004 	.word	0x40310004
    1b94:	ffffd8ad 	.word	0xffffd8ad

00001b98 <_usart_sync_init>:
{
    1b98:	b570      	push	{r4, r5, r6, lr}
    1b9a:	0005      	movs	r5, r0
    1b9c:	000c      	movs	r4, r1
	ASSERT(device);
    1b9e:	1e43      	subs	r3, r0, #1
    1ba0:	4198      	sbcs	r0, r3
    1ba2:	b2c0      	uxtb	r0, r0
    1ba4:	22b6      	movs	r2, #182	; 0xb6
    1ba6:	4904      	ldr	r1, [pc, #16]	; (1bb8 <_usart_sync_init+0x20>)
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <_usart_sync_init+0x24>)
    1baa:	4798      	blx	r3
	device->hw = hw;
    1bac:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1bae:	0020      	movs	r0, r4
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <_usart_sync_init+0x28>)
    1bb2:	4798      	blx	r3
}
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	00007abc 	.word	0x00007abc
    1bbc:	000014c1 	.word	0x000014c1
    1bc0:	00001afd 	.word	0x00001afd

00001bc4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1bc4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1bc6:	6813      	ldr	r3, [r2, #0]
    1bc8:	2102      	movs	r1, #2
    1bca:	430b      	orrs	r3, r1
    1bcc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1bce:	3101      	adds	r1, #1
    1bd0:	69d3      	ldr	r3, [r2, #28]
    1bd2:	4219      	tst	r1, r3
    1bd4:	d1fc      	bne.n	1bd0 <_usart_sync_enable+0xc>
}
    1bd6:	4770      	bx	lr

00001bd8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1bd8:	6803      	ldr	r3, [r0, #0]
    1bda:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1bdc:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1bde:	4770      	bx	lr

00001be0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1be0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1be2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1be4:	b2c0      	uxtb	r0, r0
}
    1be6:	4770      	bx	lr

00001be8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1be8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1bea:	7e18      	ldrb	r0, [r3, #24]
    1bec:	2301      	movs	r3, #1
    1bee:	4018      	ands	r0, r3
}
    1bf0:	4770      	bx	lr

00001bf2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1bf2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1bf4:	7e18      	ldrb	r0, [r3, #24]
    1bf6:	0780      	lsls	r0, r0, #30
    1bf8:	0fc0      	lsrs	r0, r0, #31
}
    1bfa:	4770      	bx	lr

00001bfc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1bfc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1bfe:	7e18      	ldrb	r0, [r3, #24]
    1c00:	0740      	lsls	r0, r0, #29
    1c02:	0fc0      	lsrs	r0, r0, #31
}
    1c04:	4770      	bx	lr
	...

00001c08 <_i2c_m_sync_init>:
{
    1c08:	b570      	push	{r4, r5, r6, lr}
    1c0a:	0004      	movs	r4, r0
    1c0c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    1c0e:	1e43      	subs	r3, r0, #1
    1c10:	4198      	sbcs	r0, r3
    1c12:	b2c0      	uxtb	r0, r0
    1c14:	4a04      	ldr	r2, [pc, #16]	; (1c28 <_i2c_m_sync_init+0x20>)
    1c16:	4905      	ldr	r1, [pc, #20]	; (1c2c <_i2c_m_sync_init+0x24>)
    1c18:	4b05      	ldr	r3, [pc, #20]	; (1c30 <_i2c_m_sync_init+0x28>)
    1c1a:	4798      	blx	r3
	i2c_dev->hw = hw;
    1c1c:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1c1e:	0029      	movs	r1, r5
    1c20:	0020      	movs	r0, r4
    1c22:	4b04      	ldr	r3, [pc, #16]	; (1c34 <_i2c_m_sync_init+0x2c>)
    1c24:	4798      	blx	r3
}
    1c26:	bd70      	pop	{r4, r5, r6, pc}
    1c28:	0000050d 	.word	0x0000050d
    1c2c:	00007abc 	.word	0x00007abc
    1c30:	000014c1 	.word	0x000014c1
    1c34:	00001a21 	.word	0x00001a21

00001c38 <_i2c_m_sync_transfer>:
{
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	46de      	mov	lr, fp
    1c3c:	4657      	mov	r7, sl
    1c3e:	464e      	mov	r6, r9
    1c40:	4645      	mov	r5, r8
    1c42:	b5e0      	push	{r5, r6, r7, lr}
    1c44:	b083      	sub	sp, #12
    1c46:	0005      	movs	r5, r0
    1c48:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    1c4a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1c4c:	0006      	movs	r6, r0
    1c4e:	1e73      	subs	r3, r6, #1
    1c50:	419e      	sbcs	r6, r3
    1c52:	b2f3      	uxtb	r3, r6
    1c54:	9301      	str	r3, [sp, #4]
    1c56:	4fb3      	ldr	r7, [pc, #716]	; (1f24 <_i2c_m_sync_transfer+0x2ec>)
    1c58:	4ab3      	ldr	r2, [pc, #716]	; (1f28 <_i2c_m_sync_transfer+0x2f0>)
    1c5a:	0039      	movs	r1, r7
    1c5c:	0018      	movs	r0, r3
    1c5e:	4eb3      	ldr	r6, [pc, #716]	; (1f2c <_i2c_m_sync_transfer+0x2f4>)
    1c60:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1c62:	6928      	ldr	r0, [r5, #16]
    1c64:	1e43      	subs	r3, r0, #1
    1c66:	4198      	sbcs	r0, r3
    1c68:	b2c0      	uxtb	r0, r0
    1c6a:	4ab1      	ldr	r2, [pc, #708]	; (1f30 <_i2c_m_sync_transfer+0x2f8>)
    1c6c:	0039      	movs	r1, r7
    1c6e:	47b0      	blx	r6
	ASSERT(msg);
    1c70:	4640      	mov	r0, r8
    1c72:	1e43      	subs	r3, r0, #1
    1c74:	4198      	sbcs	r0, r3
    1c76:	b2c0      	uxtb	r0, r0
    1c78:	4aae      	ldr	r2, [pc, #696]	; (1f34 <_i2c_m_sync_transfer+0x2fc>)
    1c7a:	0039      	movs	r1, r7
    1c7c:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1c7e:	886b      	ldrh	r3, [r5, #2]
    1c80:	05db      	lsls	r3, r3, #23
    1c82:	d500      	bpl.n	1c86 <_i2c_m_sync_transfer+0x4e>
    1c84:	e225      	b.n	20d2 <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
    1c86:	4643      	mov	r3, r8
    1c88:	885a      	ldrh	r2, [r3, #2]
    1c8a:	2380      	movs	r3, #128	; 0x80
    1c8c:	005b      	lsls	r3, r3, #1
    1c8e:	431a      	orrs	r2, r3
    1c90:	4641      	mov	r1, r8
    1c92:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
    1c94:	002a      	movs	r2, r5
    1c96:	c9c1      	ldmia	r1!, {r0, r6, r7}
    1c98:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1c9a:	6862      	ldr	r2, [r4, #4]
    1c9c:	4313      	orrs	r3, r2
    1c9e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ca0:	2204      	movs	r2, #4
    1ca2:	69e3      	ldr	r3, [r4, #28]
    1ca4:	421a      	tst	r2, r3
    1ca6:	d1fc      	bne.n	1ca2 <_i2c_m_sync_transfer+0x6a>
	void *             hw    = i2c_dev->hw;
    1ca8:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1caa:	683b      	ldr	r3, [r7, #0]
    1cac:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    1cae:	4aa2      	ldr	r2, [pc, #648]	; (1f38 <_i2c_m_sync_transfer+0x300>)
    1cb0:	499c      	ldr	r1, [pc, #624]	; (1f24 <_i2c_m_sync_transfer+0x2ec>)
    1cb2:	9801      	ldr	r0, [sp, #4]
    1cb4:	4b9d      	ldr	r3, [pc, #628]	; (1f2c <_i2c_m_sync_transfer+0x2f4>)
    1cb6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1cb8:	686b      	ldr	r3, [r5, #4]
    1cba:	2b01      	cmp	r3, #1
    1cbc:	d05a      	beq.n	1d74 <_i2c_m_sync_transfer+0x13c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	4a9e      	ldr	r2, [pc, #632]	; (1f3c <_i2c_m_sync_transfer+0x304>)
    1cc2:	4013      	ands	r3, r2
    1cc4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1cc6:	2204      	movs	r2, #4
    1cc8:	69fb      	ldr	r3, [r7, #28]
    1cca:	421a      	tst	r2, r3
    1ccc:	d1fc      	bne.n	1cc8 <_i2c_m_sync_transfer+0x90>
	if (msg->addr & I2C_M_TEN) {
    1cce:	882b      	ldrh	r3, [r5, #0]
    1cd0:	055a      	lsls	r2, r3, #21
    1cd2:	d55c      	bpl.n	1d8e <_i2c_m_sync_transfer+0x156>
		if (msg->flags & I2C_M_RD) {
    1cd4:	886a      	ldrh	r2, [r5, #2]
    1cd6:	07d2      	lsls	r2, r2, #31
    1cd8:	d504      	bpl.n	1ce4 <_i2c_m_sync_transfer+0xac>
			msg->flags |= I2C_M_TEN;
    1cda:	886a      	ldrh	r2, [r5, #2]
    1cdc:	2180      	movs	r1, #128	; 0x80
    1cde:	00c9      	lsls	r1, r1, #3
    1ce0:	430a      	orrs	r2, r1
    1ce2:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    1ce4:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1ce6:	4996      	ldr	r1, [pc, #600]	; (1f40 <_i2c_m_sync_transfer+0x308>)
    1ce8:	4019      	ands	r1, r3
    1cea:	2204      	movs	r2, #4
    1cec:	69fb      	ldr	r3, [r7, #28]
    1cee:	421a      	tst	r2, r3
    1cf0:	d1fc      	bne.n	1cec <_i2c_m_sync_transfer+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cf4:	2280      	movs	r2, #128	; 0x80
    1cf6:	01d2      	lsls	r2, r2, #7
    1cf8:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    1cfa:	2380      	movs	r3, #128	; 0x80
    1cfc:	021b      	lsls	r3, r3, #8
    1cfe:	4313      	orrs	r3, r2
    1d00:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1d02:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d04:	2204      	movs	r2, #4
    1d06:	69fb      	ldr	r3, [r7, #28]
    1d08:	421a      	tst	r2, r3
    1d0a:	d1fc      	bne.n	1d06 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    1d0c:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1d0e:	7e0b      	ldrb	r3, [r1, #24]
    1d10:	b2db      	uxtb	r3, r3
    1d12:	4a8c      	ldr	r2, [pc, #560]	; (1f44 <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1d14:	2003      	movs	r0, #3
    1d16:	4218      	tst	r0, r3
    1d18:	d104      	bne.n	1d24 <_i2c_m_sync_transfer+0xec>
    1d1a:	7e0b      	ldrb	r3, [r1, #24]
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    1d20:	2a00      	cmp	r2, #0
    1d22:	d1f8      	bne.n	1d16 <_i2c_m_sync_transfer+0xde>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1d24:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d26:	2104      	movs	r1, #4
    1d28:	69fa      	ldr	r2, [r7, #28]
    1d2a:	4211      	tst	r1, r2
    1d2c:	d1fc      	bne.n	1d28 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1d2e:	8b7a      	ldrh	r2, [r7, #26]
    1d30:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1d32:	07d9      	lsls	r1, r3, #31
    1d34:	d400      	bmi.n	1d38 <_i2c_m_sync_transfer+0x100>
    1d36:	e0a0      	b.n	1e7a <_i2c_m_sync_transfer+0x242>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1d38:	0793      	lsls	r3, r2, #30
    1d3a:	d53e      	bpl.n	1dba <_i2c_m_sync_transfer+0x182>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1d3c:	2301      	movs	r3, #1
    1d3e:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1d40:	886b      	ldrh	r3, [r5, #2]
    1d42:	2180      	movs	r1, #128	; 0x80
    1d44:	0149      	lsls	r1, r1, #5
    1d46:	430b      	orrs	r3, r1
    1d48:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1d4a:	886b      	ldrh	r3, [r5, #2]
    1d4c:	497e      	ldr	r1, [pc, #504]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1d4e:	400b      	ands	r3, r1
    1d50:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1d52:	2001      	movs	r0, #1
    1d54:	0003      	movs	r3, r0
    1d56:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    1d58:	4258      	negs	r0, r3
    1d5a:	4158      	adcs	r0, r3
    1d5c:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1d5e:	886b      	ldrh	r3, [r5, #2]
    1d60:	4a79      	ldr	r2, [pc, #484]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1d62:	4013      	ands	r3, r2
    1d64:	806b      	strh	r3, [r5, #2]
}
    1d66:	b003      	add	sp, #12
    1d68:	bc3c      	pop	{r2, r3, r4, r5}
    1d6a:	4690      	mov	r8, r2
    1d6c:	4699      	mov	r9, r3
    1d6e:	46a2      	mov	sl, r4
    1d70:	46ab      	mov	fp, r5
    1d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    1d74:	464b      	mov	r3, r9
    1d76:	011b      	lsls	r3, r3, #4
    1d78:	d5a1      	bpl.n	1cbe <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1d7a:	687a      	ldr	r2, [r7, #4]
    1d7c:	2380      	movs	r3, #128	; 0x80
    1d7e:	02db      	lsls	r3, r3, #11
    1d80:	4313      	orrs	r3, r2
    1d82:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d84:	2204      	movs	r2, #4
    1d86:	69fb      	ldr	r3, [r7, #28]
    1d88:	421a      	tst	r2, r3
    1d8a:	d1fc      	bne.n	1d86 <_i2c_m_sync_transfer+0x14e>
    1d8c:	e79f      	b.n	1cce <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1d8e:	886a      	ldrh	r2, [r5, #2]
    1d90:	005b      	lsls	r3, r3, #1
    1d92:	21ff      	movs	r1, #255	; 0xff
    1d94:	400b      	ands	r3, r1
    1d96:	39fe      	subs	r1, #254	; 0xfe
    1d98:	4011      	ands	r1, r2
    1d9a:	4319      	orrs	r1, r3
    1d9c:	2204      	movs	r2, #4
    1d9e:	69fb      	ldr	r3, [r7, #28]
    1da0:	421a      	tst	r2, r3
    1da2:	d1fc      	bne.n	1d9e <_i2c_m_sync_transfer+0x166>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1da6:	2280      	movs	r2, #128	; 0x80
    1da8:	01d2      	lsls	r2, r2, #7
    1daa:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1dac:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1dae:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1db0:	2204      	movs	r2, #4
    1db2:	69fb      	ldr	r3, [r7, #28]
    1db4:	421a      	tst	r2, r3
    1db6:	d1fc      	bne.n	1db2 <_i2c_m_sync_transfer+0x17a>
    1db8:	e7a8      	b.n	1d0c <_i2c_m_sync_transfer+0xd4>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1dba:	0753      	lsls	r3, r2, #29
    1dbc:	d41b      	bmi.n	1df6 <_i2c_m_sync_transfer+0x1be>
			if (msg->flags & I2C_M_TEN) {
    1dbe:	886b      	ldrh	r3, [r5, #2]
    1dc0:	055b      	lsls	r3, r3, #21
    1dc2:	d535      	bpl.n	1e30 <_i2c_m_sync_transfer+0x1f8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1dc4:	882b      	ldrh	r3, [r5, #0]
    1dc6:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1dc8:	2106      	movs	r1, #6
    1dca:	4019      	ands	r1, r3
    1dcc:	2204      	movs	r2, #4
    1dce:	69fb      	ldr	r3, [r7, #28]
    1dd0:	421a      	tst	r2, r3
    1dd2:	d1fc      	bne.n	1dce <_i2c_m_sync_transfer+0x196>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dd6:	2280      	movs	r2, #128	; 0x80
    1dd8:	01d2      	lsls	r2, r2, #7
    1dda:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1ddc:	22f1      	movs	r2, #241	; 0xf1
    1dde:	4313      	orrs	r3, r2
    1de0:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1de2:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1de4:	3aed      	subs	r2, #237	; 0xed
    1de6:	69fb      	ldr	r3, [r7, #28]
    1de8:	421a      	tst	r2, r3
    1dea:	d1fc      	bne.n	1de6 <_i2c_m_sync_transfer+0x1ae>
				msg->flags &= ~I2C_M_TEN;
    1dec:	886b      	ldrh	r3, [r5, #2]
    1dee:	4a57      	ldr	r2, [pc, #348]	; (1f4c <_i2c_m_sync_transfer+0x314>)
    1df0:	4013      	ands	r3, r2
    1df2:	806b      	strh	r3, [r5, #2]
    1df4:	e066      	b.n	1ec4 <_i2c_m_sync_transfer+0x28c>
				if (msg->len > 0) {
    1df6:	686b      	ldr	r3, [r5, #4]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	dd04      	ble.n	1e06 <_i2c_m_sync_transfer+0x1ce>
					msg->flags |= I2C_M_FAIL;
    1dfc:	886b      	ldrh	r3, [r5, #2]
    1dfe:	2280      	movs	r2, #128	; 0x80
    1e00:	0152      	lsls	r2, r2, #5
    1e02:	4313      	orrs	r3, r2
    1e04:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1e06:	886b      	ldrh	r3, [r5, #2]
    1e08:	b21b      	sxth	r3, r3
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	db06      	blt.n	1e1c <_i2c_m_sync_transfer+0x1e4>
				msg->flags &= ~I2C_M_BUSY;
    1e0e:	886b      	ldrh	r3, [r5, #2]
    1e10:	4a4d      	ldr	r2, [pc, #308]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1e12:	4013      	ands	r3, r2
    1e14:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1e16:	2002      	movs	r0, #2
    1e18:	4240      	negs	r0, r0
    1e1a:	e7a0      	b.n	1d5e <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e1c:	687a      	ldr	r2, [r7, #4]
    1e1e:	23c0      	movs	r3, #192	; 0xc0
    1e20:	029b      	lsls	r3, r3, #10
    1e22:	4313      	orrs	r3, r2
    1e24:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e26:	2304      	movs	r3, #4
    1e28:	69fa      	ldr	r2, [r7, #28]
    1e2a:	4213      	tst	r3, r2
    1e2c:	d1fc      	bne.n	1e28 <_i2c_m_sync_transfer+0x1f0>
    1e2e:	e7ee      	b.n	1e0e <_i2c_m_sync_transfer+0x1d6>
			if (msg->len == 0) {
    1e30:	686b      	ldr	r3, [r5, #4]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d112      	bne.n	1e5c <_i2c_m_sync_transfer+0x224>
				if (msg->flags & I2C_M_STOP) {
    1e36:	886b      	ldrh	r3, [r5, #2]
    1e38:	b21b      	sxth	r3, r3
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	db04      	blt.n	1e48 <_i2c_m_sync_transfer+0x210>
				msg->flags &= ~I2C_M_BUSY;
    1e3e:	886b      	ldrh	r3, [r5, #2]
    1e40:	4a41      	ldr	r2, [pc, #260]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1e42:	4013      	ands	r3, r2
    1e44:	806b      	strh	r3, [r5, #2]
    1e46:	e03d      	b.n	1ec4 <_i2c_m_sync_transfer+0x28c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e48:	687a      	ldr	r2, [r7, #4]
    1e4a:	23c0      	movs	r3, #192	; 0xc0
    1e4c:	029b      	lsls	r3, r3, #10
    1e4e:	4313      	orrs	r3, r2
    1e50:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e52:	2204      	movs	r2, #4
    1e54:	69fb      	ldr	r3, [r7, #28]
    1e56:	421a      	tst	r2, r3
    1e58:	d1fc      	bne.n	1e54 <_i2c_m_sync_transfer+0x21c>
    1e5a:	e7f0      	b.n	1e3e <_i2c_m_sync_transfer+0x206>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1e5c:	68ab      	ldr	r3, [r5, #8]
    1e5e:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1e60:	2328      	movs	r3, #40	; 0x28
    1e62:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e64:	2204      	movs	r2, #4
    1e66:	69fb      	ldr	r3, [r7, #28]
    1e68:	421a      	tst	r2, r3
    1e6a:	d1fc      	bne.n	1e66 <_i2c_m_sync_transfer+0x22e>
				msg->buffer++;
    1e6c:	68ab      	ldr	r3, [r5, #8]
    1e6e:	3301      	adds	r3, #1
    1e70:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1e72:	686b      	ldr	r3, [r5, #4]
    1e74:	3b01      	subs	r3, #1
    1e76:	606b      	str	r3, [r5, #4]
    1e78:	e024      	b.n	1ec4 <_i2c_m_sync_transfer+0x28c>
	} else if (flags & SB_FLAG) {
    1e7a:	079b      	lsls	r3, r3, #30
    1e7c:	d522      	bpl.n	1ec4 <_i2c_m_sync_transfer+0x28c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1e7e:	686b      	ldr	r3, [r5, #4]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d040      	beq.n	1f06 <_i2c_m_sync_transfer+0x2ce>
    1e84:	0752      	lsls	r2, r2, #29
    1e86:	d43e      	bmi.n	1f06 <_i2c_m_sync_transfer+0x2ce>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1e88:	0136      	lsls	r6, r6, #4
    1e8a:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    1e8c:	3b01      	subs	r3, #1
    1e8e:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1e90:	2b00      	cmp	r3, #0
    1e92:	d000      	beq.n	1e96 <_i2c_m_sync_transfer+0x25e>
    1e94:	e120      	b.n	20d8 <_i2c_m_sync_transfer+0x4a0>
    1e96:	2e00      	cmp	r6, #0
    1e98:	d100      	bne.n	1e9c <_i2c_m_sync_transfer+0x264>
    1e9a:	e123      	b.n	20e4 <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
    1e9c:	886b      	ldrh	r3, [r5, #2]
    1e9e:	b21b      	sxth	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	db1d      	blt.n	1ee0 <_i2c_m_sync_transfer+0x2a8>
				msg->flags &= ~I2C_M_BUSY;
    1ea4:	886b      	ldrh	r3, [r5, #2]
    1ea6:	4a28      	ldr	r2, [pc, #160]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1ea8:	4013      	ands	r3, r2
    1eaa:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1eac:	68a9      	ldr	r1, [r5, #8]
    1eae:	1c4b      	adds	r3, r1, #1
    1eb0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1eb2:	2204      	movs	r2, #4
    1eb4:	69fb      	ldr	r3, [r7, #28]
    1eb6:	421a      	tst	r2, r3
    1eb8:	d1fc      	bne.n	1eb4 <_i2c_m_sync_transfer+0x27c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1eba:	2328      	movs	r3, #40	; 0x28
    1ebc:	5cfb      	ldrb	r3, [r7, r3]
    1ebe:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1ec0:	2302      	movs	r3, #2
    1ec2:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1ec4:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1ec6:	2380      	movs	r3, #128	; 0x80
    1ec8:	005b      	lsls	r3, r3, #1
    1eca:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1ecc:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ece:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    1ed0:	3bff      	subs	r3, #255	; 0xff
    1ed2:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
    1ed4:	3301      	adds	r3, #1
    1ed6:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1ed8:	3326      	adds	r3, #38	; 0x26
    1eda:	469b      	mov	fp, r3
    1edc:	9601      	str	r6, [sp, #4]
    1ede:	e0c3      	b.n	2068 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1ee0:	687b      	ldr	r3, [r7, #4]
    1ee2:	4a19      	ldr	r2, [pc, #100]	; (1f48 <_i2c_m_sync_transfer+0x310>)
    1ee4:	4013      	ands	r3, r2
    1ee6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ee8:	3206      	adds	r2, #6
    1eea:	32ff      	adds	r2, #255	; 0xff
    1eec:	69fb      	ldr	r3, [r7, #28]
    1eee:	421a      	tst	r2, r3
    1ef0:	d1fc      	bne.n	1eec <_i2c_m_sync_transfer+0x2b4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ef2:	687a      	ldr	r2, [r7, #4]
    1ef4:	23c0      	movs	r3, #192	; 0xc0
    1ef6:	029b      	lsls	r3, r3, #10
    1ef8:	4313      	orrs	r3, r2
    1efa:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1efc:	2204      	movs	r2, #4
    1efe:	69fb      	ldr	r3, [r7, #28]
    1f00:	421a      	tst	r2, r3
    1f02:	d1fc      	bne.n	1efe <_i2c_m_sync_transfer+0x2c6>
    1f04:	e7ce      	b.n	1ea4 <_i2c_m_sync_transfer+0x26c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f06:	2302      	movs	r3, #2
    1f08:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1f0a:	2002      	movs	r0, #2
    1f0c:	4240      	negs	r0, r0
    1f0e:	e726      	b.n	1d5e <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f10:	6862      	ldr	r2, [r4, #4]
    1f12:	23c0      	movs	r3, #192	; 0xc0
    1f14:	029b      	lsls	r3, r3, #10
    1f16:	4313      	orrs	r3, r2
    1f18:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f1a:	2204      	movs	r2, #4
    1f1c:	69e3      	ldr	r3, [r4, #28]
    1f1e:	421a      	tst	r2, r3
    1f20:	d1fc      	bne.n	1f1c <_i2c_m_sync_transfer+0x2e4>
    1f22:	e0b6      	b.n	2092 <_i2c_m_sync_transfer+0x45a>
    1f24:	00007abc 	.word	0x00007abc
    1f28:	000005c5 	.word	0x000005c5
    1f2c:	000014c1 	.word	0x000014c1
    1f30:	000005c6 	.word	0x000005c6
    1f34:	000005c7 	.word	0x000005c7
    1f38:	0000059a 	.word	0x0000059a
    1f3c:	fffbffff 	.word	0xfffbffff
    1f40:	000007fe 	.word	0x000007fe
    1f44:	0000ffff 	.word	0x0000ffff
    1f48:	fffffeff 	.word	0xfffffeff
    1f4c:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1f50:	4202      	tst	r2, r0
    1f52:	d11b      	bne.n	1f8c <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
    1f54:	886b      	ldrh	r3, [r5, #2]
    1f56:	055b      	lsls	r3, r3, #21
    1f58:	d535      	bpl.n	1fc6 <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1f5a:	882b      	ldrh	r3, [r5, #0]
    1f5c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1f5e:	2006      	movs	r0, #6
    1f60:	4018      	ands	r0, r3
    1f62:	69e3      	ldr	r3, [r4, #28]
    1f64:	421a      	tst	r2, r3
    1f66:	d1fc      	bne.n	1f62 <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f6a:	2680      	movs	r6, #128	; 0x80
    1f6c:	01f6      	lsls	r6, r6, #7
    1f6e:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    1f70:	26f1      	movs	r6, #241	; 0xf1
    1f72:	4333      	orrs	r3, r6
    1f74:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1f76:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f78:	69e3      	ldr	r3, [r4, #28]
    1f7a:	421a      	tst	r2, r3
    1f7c:	d1fc      	bne.n	1f78 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
    1f7e:	886b      	ldrh	r3, [r5, #2]
    1f80:	4878      	ldr	r0, [pc, #480]	; (2164 <_i2c_m_sync_transfer+0x52c>)
    1f82:	4003      	ands	r3, r0
    1f84:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1f86:	2300      	movs	r3, #0
    1f88:	9301      	str	r3, [sp, #4]
    1f8a:	e06d      	b.n	2068 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
    1f8c:	686b      	ldr	r3, [r5, #4]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	dd04      	ble.n	1f9c <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
    1f92:	886b      	ldrh	r3, [r5, #2]
    1f94:	2080      	movs	r0, #128	; 0x80
    1f96:	0140      	lsls	r0, r0, #5
    1f98:	4303      	orrs	r3, r0
    1f9a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1f9c:	886b      	ldrh	r3, [r5, #2]
    1f9e:	b21b      	sxth	r3, r3
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	db07      	blt.n	1fb4 <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
    1fa4:	886b      	ldrh	r3, [r5, #2]
    1fa6:	4870      	ldr	r0, [pc, #448]	; (2168 <_i2c_m_sync_transfer+0x530>)
    1fa8:	4003      	ands	r3, r0
    1faa:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1fac:	2302      	movs	r3, #2
    1fae:	425b      	negs	r3, r3
    1fb0:	9301      	str	r3, [sp, #4]
    1fb2:	e059      	b.n	2068 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1fb4:	6860      	ldr	r0, [r4, #4]
    1fb6:	23c0      	movs	r3, #192	; 0xc0
    1fb8:	029b      	lsls	r3, r3, #10
    1fba:	4303      	orrs	r3, r0
    1fbc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fbe:	69e3      	ldr	r3, [r4, #28]
    1fc0:	421a      	tst	r2, r3
    1fc2:	d1fc      	bne.n	1fbe <_i2c_m_sync_transfer+0x386>
    1fc4:	e7ee      	b.n	1fa4 <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
    1fc6:	686b      	ldr	r3, [r5, #4]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d113      	bne.n	1ff4 <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
    1fcc:	886b      	ldrh	r3, [r5, #2]
    1fce:	b21b      	sxth	r3, r3
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	db06      	blt.n	1fe2 <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
    1fd4:	886b      	ldrh	r3, [r5, #2]
    1fd6:	4864      	ldr	r0, [pc, #400]	; (2168 <_i2c_m_sync_transfer+0x530>)
    1fd8:	4003      	ands	r3, r0
    1fda:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    1fdc:	2300      	movs	r3, #0
    1fde:	9301      	str	r3, [sp, #4]
    1fe0:	e042      	b.n	2068 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1fe2:	6860      	ldr	r0, [r4, #4]
    1fe4:	23c0      	movs	r3, #192	; 0xc0
    1fe6:	029b      	lsls	r3, r3, #10
    1fe8:	4303      	orrs	r3, r0
    1fea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fec:	69e3      	ldr	r3, [r4, #28]
    1fee:	421a      	tst	r2, r3
    1ff0:	d1fc      	bne.n	1fec <_i2c_m_sync_transfer+0x3b4>
    1ff2:	e7ef      	b.n	1fd4 <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1ff4:	68ab      	ldr	r3, [r5, #8]
    1ff6:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1ff8:	4658      	mov	r0, fp
    1ffa:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ffc:	69e3      	ldr	r3, [r4, #28]
    1ffe:	421a      	tst	r2, r3
    2000:	d1fc      	bne.n	1ffc <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
    2002:	68ab      	ldr	r3, [r5, #8]
    2004:	3301      	adds	r3, #1
    2006:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2008:	686b      	ldr	r3, [r5, #4]
    200a:	3b01      	subs	r3, #1
    200c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    200e:	2300      	movs	r3, #0
    2010:	9301      	str	r3, [sp, #4]
    2012:	e029      	b.n	2068 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
    2014:	2600      	movs	r6, #0
    2016:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
    2018:	464e      	mov	r6, r9
    201a:	421e      	tst	r6, r3
    201c:	d024      	beq.n	2068 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    201e:	686b      	ldr	r3, [r5, #4]
    2020:	2b00      	cmp	r3, #0
    2022:	d04d      	beq.n	20c0 <_i2c_m_sync_transfer+0x488>
    2024:	4202      	tst	r2, r0
    2026:	d14b      	bne.n	20c0 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2028:	0eff      	lsrs	r7, r7, #27
    202a:	4660      	mov	r0, ip
    202c:	4007      	ands	r7, r0
			msg->len--;
    202e:	3b01      	subs	r3, #1
    2030:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2032:	2b00      	cmp	r3, #0
    2034:	d000      	beq.n	2038 <_i2c_m_sync_transfer+0x400>
    2036:	e082      	b.n	213e <_i2c_m_sync_transfer+0x506>
    2038:	2f00      	cmp	r7, #0
    203a:	d100      	bne.n	203e <_i2c_m_sync_transfer+0x406>
    203c:	e085      	b.n	214a <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
    203e:	886b      	ldrh	r3, [r5, #2]
    2040:	b21b      	sxth	r3, r3
    2042:	2b00      	cmp	r3, #0
    2044:	db2c      	blt.n	20a0 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
    2046:	886b      	ldrh	r3, [r5, #2]
    2048:	4847      	ldr	r0, [pc, #284]	; (2168 <_i2c_m_sync_transfer+0x530>)
    204a:	4003      	ands	r3, r0
    204c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    204e:	68a8      	ldr	r0, [r5, #8]
    2050:	1c43      	adds	r3, r0, #1
    2052:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2054:	69e3      	ldr	r3, [r4, #28]
    2056:	421a      	tst	r2, r3
    2058:	d1fc      	bne.n	2054 <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    205a:	465b      	mov	r3, fp
    205c:	5ce3      	ldrb	r3, [r4, r3]
    205e:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2060:	464b      	mov	r3, r9
    2062:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    2064:	2300      	movs	r3, #0
    2066:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2068:	886b      	ldrh	r3, [r5, #2]
    206a:	4650      	mov	r0, sl
    206c:	4203      	tst	r3, r0
    206e:	d02d      	beq.n	20cc <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
    2070:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2072:	7e33      	ldrb	r3, [r6, #24]
    2074:	b2db      	uxtb	r3, r3
    2076:	483d      	ldr	r0, [pc, #244]	; (216c <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2078:	4219      	tst	r1, r3
    207a:	d141      	bne.n	2100 <_i2c_m_sync_transfer+0x4c8>
    207c:	7e33      	ldrb	r3, [r6, #24]
    207e:	b2db      	uxtb	r3, r3
    2080:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    2082:	2800      	cmp	r0, #0
    2084:	d1f8      	bne.n	2078 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
    2086:	4643      	mov	r3, r8
    2088:	885b      	ldrh	r3, [r3, #2]
    208a:	b21b      	sxth	r3, r3
    208c:	2b00      	cmp	r3, #0
    208e:	da00      	bge.n	2092 <_i2c_m_sync_transfer+0x45a>
    2090:	e73e      	b.n	1f10 <_i2c_m_sync_transfer+0x2d8>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2092:	886b      	ldrh	r3, [r5, #2]
    2094:	4a34      	ldr	r2, [pc, #208]	; (2168 <_i2c_m_sync_transfer+0x530>)
    2096:	4013      	ands	r3, r2
    2098:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    209a:	2005      	movs	r0, #5
    209c:	4240      	negs	r0, r0
			return ret;
    209e:	e662      	b.n	1d66 <_i2c_m_sync_transfer+0x12e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    20a0:	6863      	ldr	r3, [r4, #4]
    20a2:	4831      	ldr	r0, [pc, #196]	; (2168 <_i2c_m_sync_transfer+0x530>)
    20a4:	4003      	ands	r3, r0
    20a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20a8:	69e3      	ldr	r3, [r4, #28]
    20aa:	421a      	tst	r2, r3
    20ac:	d1fc      	bne.n	20a8 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    20ae:	6860      	ldr	r0, [r4, #4]
    20b0:	23c0      	movs	r3, #192	; 0xc0
    20b2:	029b      	lsls	r3, r3, #10
    20b4:	4303      	orrs	r3, r0
    20b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20b8:	69e3      	ldr	r3, [r4, #28]
    20ba:	421a      	tst	r2, r3
    20bc:	d1fc      	bne.n	20b8 <_i2c_m_sync_transfer+0x480>
    20be:	e7c2      	b.n	2046 <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    20c0:	464b      	mov	r3, r9
    20c2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    20c4:	2302      	movs	r3, #2
    20c6:	425b      	negs	r3, r3
    20c8:	9301      	str	r3, [sp, #4]
    20ca:	e7cd      	b.n	2068 <_i2c_m_sync_transfer+0x430>
    20cc:	9e01      	ldr	r6, [sp, #4]
    20ce:	0030      	movs	r0, r6
    20d0:	e649      	b.n	1d66 <_i2c_m_sync_transfer+0x12e>
		return I2C_ERR_BUSY;
    20d2:	2006      	movs	r0, #6
    20d4:	4240      	negs	r0, r0
    20d6:	e646      	b.n	1d66 <_i2c_m_sync_transfer+0x12e>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    20d8:	2b01      	cmp	r3, #1
    20da:	d000      	beq.n	20de <_i2c_m_sync_transfer+0x4a6>
    20dc:	e6e6      	b.n	1eac <_i2c_m_sync_transfer+0x274>
    20de:	2e00      	cmp	r6, #0
    20e0:	d100      	bne.n	20e4 <_i2c_m_sync_transfer+0x4ac>
    20e2:	e6e3      	b.n	1eac <_i2c_m_sync_transfer+0x274>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    20e4:	687a      	ldr	r2, [r7, #4]
    20e6:	2380      	movs	r3, #128	; 0x80
    20e8:	02db      	lsls	r3, r3, #11
    20ea:	4313      	orrs	r3, r2
    20ec:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20ee:	2204      	movs	r2, #4
    20f0:	69fb      	ldr	r3, [r7, #28]
    20f2:	421a      	tst	r2, r3
    20f4:	d1fc      	bne.n	20f0 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
    20f6:	686b      	ldr	r3, [r5, #4]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d100      	bne.n	20fe <_i2c_m_sync_transfer+0x4c6>
    20fc:	e6ce      	b.n	1e9c <_i2c_m_sync_transfer+0x264>
    20fe:	e6d5      	b.n	1eac <_i2c_m_sync_transfer+0x274>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2100:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2102:	69e0      	ldr	r0, [r4, #28]
    2104:	4202      	tst	r2, r0
    2106:	d1fc      	bne.n	2102 <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2108:	8b60      	ldrh	r0, [r4, #26]
    210a:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    210c:	4666      	mov	r6, ip
    210e:	421e      	tst	r6, r3
    2110:	d100      	bne.n	2114 <_i2c_m_sync_transfer+0x4dc>
    2112:	e77f      	b.n	2014 <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2114:	464b      	mov	r3, r9
    2116:	4203      	tst	r3, r0
    2118:	d100      	bne.n	211c <_i2c_m_sync_transfer+0x4e4>
    211a:	e719      	b.n	1f50 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    211c:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    211e:	886b      	ldrh	r3, [r5, #2]
    2120:	2680      	movs	r6, #128	; 0x80
    2122:	0176      	lsls	r6, r6, #5
    2124:	4333      	orrs	r3, r6
    2126:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2128:	886b      	ldrh	r3, [r5, #2]
    212a:	4e0f      	ldr	r6, [pc, #60]	; (2168 <_i2c_m_sync_transfer+0x530>)
    212c:	4033      	ands	r3, r6
    212e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2130:	4663      	mov	r3, ip
    2132:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    2134:	4246      	negs	r6, r0
    2136:	4146      	adcs	r6, r0
    2138:	1f73      	subs	r3, r6, #5
    213a:	9301      	str	r3, [sp, #4]
    213c:	e794      	b.n	2068 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    213e:	2b01      	cmp	r3, #1
    2140:	d000      	beq.n	2144 <_i2c_m_sync_transfer+0x50c>
    2142:	e784      	b.n	204e <_i2c_m_sync_transfer+0x416>
    2144:	2f00      	cmp	r7, #0
    2146:	d100      	bne.n	214a <_i2c_m_sync_transfer+0x512>
    2148:	e781      	b.n	204e <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    214a:	6860      	ldr	r0, [r4, #4]
    214c:	2380      	movs	r3, #128	; 0x80
    214e:	02db      	lsls	r3, r3, #11
    2150:	4303      	orrs	r3, r0
    2152:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2154:	69e3      	ldr	r3, [r4, #28]
    2156:	421a      	tst	r2, r3
    2158:	d1fc      	bne.n	2154 <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
    215a:	686b      	ldr	r3, [r5, #4]
    215c:	2b00      	cmp	r3, #0
    215e:	d100      	bne.n	2162 <_i2c_m_sync_transfer+0x52a>
    2160:	e76d      	b.n	203e <_i2c_m_sync_transfer+0x406>
    2162:	e774      	b.n	204e <_i2c_m_sync_transfer+0x416>
    2164:	fffffbff 	.word	0xfffffbff
    2168:	fffffeff 	.word	0xfffffeff
    216c:	0000ffff 	.word	0x0000ffff

00002170 <SERCOM4_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM4_Handler(void)
{
    2170:	b510      	push	{r4, lr}
	_spi_handler(_sercom4_dev);
    2172:	4b12      	ldr	r3, [pc, #72]	; (21bc <SERCOM4_Handler+0x4c>)
    2174:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    2176:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2178:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    217a:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    217c:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    217e:	07d9      	lsls	r1, r3, #31
    2180:	d407      	bmi.n	2192 <SERCOM4_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    2182:	0759      	lsls	r1, r3, #29
    2184:	d408      	bmi.n	2198 <SERCOM4_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    2186:	0799      	lsls	r1, r3, #30
    2188:	d409      	bmi.n	219e <SERCOM4_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    218a:	b25b      	sxtb	r3, r3
    218c:	2b00      	cmp	r3, #0
    218e:	db0b      	blt.n	21a8 <SERCOM4_Handler+0x38>
}
    2190:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    2192:	6883      	ldr	r3, [r0, #8]
    2194:	4798      	blx	r3
    2196:	e7fb      	b.n	2190 <SERCOM4_Handler+0x20>
		dev->callbacks.rx(dev);
    2198:	68c3      	ldr	r3, [r0, #12]
    219a:	4798      	blx	r3
    219c:	e7f8      	b.n	2190 <SERCOM4_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    219e:	2302      	movs	r3, #2
    21a0:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    21a2:	6903      	ldr	r3, [r0, #16]
    21a4:	4798      	blx	r3
    21a6:	e7f3      	b.n	2190 <SERCOM4_Handler+0x20>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    21a8:	2304      	movs	r3, #4
    21aa:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    21ac:	337c      	adds	r3, #124	; 0x7c
    21ae:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    21b0:	6943      	ldr	r3, [r0, #20]
    21b2:	2113      	movs	r1, #19
    21b4:	4249      	negs	r1, r1
    21b6:	4798      	blx	r3
}
    21b8:	e7ea      	b.n	2190 <SERCOM4_Handler+0x20>
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	2000022c 	.word	0x2000022c

000021c0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    21c0:	b570      	push	{r4, r5, r6, lr}
    21c2:	0005      	movs	r5, r0
    21c4:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    21c6:	4b38      	ldr	r3, [pc, #224]	; (22a8 <_spi_m_sync_init+0xe8>)
    21c8:	18cb      	adds	r3, r1, r3
    21ca:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    21cc:	b2db      	uxtb	r3, r3
    21ce:	2b04      	cmp	r3, #4
    21d0:	d00c      	beq.n	21ec <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    21d2:	2800      	cmp	r0, #0
    21d4:	d054      	beq.n	2280 <_spi_m_sync_init+0xc0>
    21d6:	1e60      	subs	r0, r4, #1
    21d8:	4184      	sbcs	r4, r0
    21da:	b2e0      	uxtb	r0, r4
    21dc:	2294      	movs	r2, #148	; 0x94
    21de:	0112      	lsls	r2, r2, #4
    21e0:	4932      	ldr	r1, [pc, #200]	; (22ac <_spi_m_sync_init+0xec>)
    21e2:	4b33      	ldr	r3, [pc, #204]	; (22b0 <_spi_m_sync_init+0xf0>)
    21e4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    21e6:	200d      	movs	r0, #13
    21e8:	4240      	negs	r0, r0
    21ea:	e048      	b.n	227e <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    21ec:	2800      	cmp	r0, #0
    21ee:	d150      	bne.n	2292 <_spi_m_sync_init+0xd2>
    21f0:	2294      	movs	r2, #148	; 0x94
    21f2:	0112      	lsls	r2, r2, #4
    21f4:	492d      	ldr	r1, [pc, #180]	; (22ac <_spi_m_sync_init+0xec>)
    21f6:	2000      	movs	r0, #0
    21f8:	4b2d      	ldr	r3, [pc, #180]	; (22b0 <_spi_m_sync_init+0xf0>)
    21fa:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    21fc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    21fe:	07db      	lsls	r3, r3, #31
    2200:	d418      	bmi.n	2234 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2202:	2203      	movs	r2, #3
    2204:	69e3      	ldr	r3, [r4, #28]
    2206:	421a      	tst	r2, r3
    2208:	d1fc      	bne.n	2204 <_spi_m_sync_init+0x44>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    220a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    220c:	079b      	lsls	r3, r3, #30
    220e:	d50b      	bpl.n	2228 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2210:	6823      	ldr	r3, [r4, #0]
    2212:	2202      	movs	r2, #2
    2214:	4393      	bics	r3, r2
    2216:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2218:	3201      	adds	r2, #1
    221a:	69e3      	ldr	r3, [r4, #28]
    221c:	421a      	tst	r2, r3
    221e:	d1fc      	bne.n	221a <_spi_m_sync_init+0x5a>
    2220:	2202      	movs	r2, #2
    2222:	69e3      	ldr	r3, [r4, #28]
    2224:	421a      	tst	r2, r3
    2226:	d1fc      	bne.n	2222 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2228:	2309      	movs	r3, #9
    222a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    222c:	2203      	movs	r2, #3
    222e:	69e3      	ldr	r3, [r4, #28]
    2230:	421a      	tst	r2, r3
    2232:	d1fc      	bne.n	222e <_spi_m_sync_init+0x6e>
    2234:	2201      	movs	r2, #1
    2236:	69e3      	ldr	r3, [r4, #28]
    2238:	421a      	tst	r2, r3
    223a:	d1fc      	bne.n	2236 <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    223c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    223e:	0020      	movs	r0, r4
    2240:	1e43      	subs	r3, r0, #1
    2242:	4198      	sbcs	r0, r3
    2244:	b2c0      	uxtb	r0, r0
    2246:	4a1b      	ldr	r2, [pc, #108]	; (22b4 <_spi_m_sync_init+0xf4>)
    2248:	4918      	ldr	r1, [pc, #96]	; (22ac <_spi_m_sync_init+0xec>)
    224a:	4b19      	ldr	r3, [pc, #100]	; (22b0 <_spi_m_sync_init+0xf0>)
    224c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    224e:	4b1a      	ldr	r3, [pc, #104]	; (22b8 <_spi_m_sync_init+0xf8>)
    2250:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2252:	2203      	movs	r2, #3
    2254:	69e3      	ldr	r3, [r4, #28]
    2256:	421a      	tst	r2, r3
    2258:	d1fc      	bne.n	2254 <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    225a:	4b18      	ldr	r3, [pc, #96]	; (22bc <_spi_m_sync_init+0xfc>)
    225c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    225e:	2207      	movs	r2, #7
    2260:	69e3      	ldr	r3, [r4, #28]
    2262:	421a      	tst	r2, r3
    2264:	d1fc      	bne.n	2260 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2266:	2300      	movs	r3, #0
    2268:	6263      	str	r3, [r4, #36]	; 0x24
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    226a:	2230      	movs	r2, #48	; 0x30
    226c:	54a3      	strb	r3, [r4, r2]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    226e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2270:	2b00      	cmp	r3, #0
    2272:	d1fc      	bne.n	226e <_spi_m_sync_init+0xae>
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2274:	3301      	adds	r3, #1
    2276:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    2278:	2300      	movs	r3, #0
    227a:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    227c:	2000      	movs	r0, #0
}
    227e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2280:	2294      	movs	r2, #148	; 0x94
    2282:	0112      	lsls	r2, r2, #4
    2284:	4909      	ldr	r1, [pc, #36]	; (22ac <_spi_m_sync_init+0xec>)
    2286:	2000      	movs	r0, #0
    2288:	4b09      	ldr	r3, [pc, #36]	; (22b0 <_spi_m_sync_init+0xf0>)
    228a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    228c:	200d      	movs	r0, #13
    228e:	4240      	negs	r0, r0
    2290:	e7f5      	b.n	227e <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    2292:	0008      	movs	r0, r1
    2294:	1e43      	subs	r3, r0, #1
    2296:	4198      	sbcs	r0, r3
    2298:	b2c0      	uxtb	r0, r0
    229a:	2294      	movs	r2, #148	; 0x94
    229c:	0112      	lsls	r2, r2, #4
    229e:	4903      	ldr	r1, [pc, #12]	; (22ac <_spi_m_sync_init+0xec>)
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <_spi_m_sync_init+0xf0>)
    22a2:	4798      	blx	r3
    22a4:	e7aa      	b.n	21fc <_spi_m_sync_init+0x3c>
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	bdfff800 	.word	0xbdfff800
    22ac:	00007abc 	.word	0x00007abc
    22b0:	000014c1 	.word	0x000014c1
    22b4:	000008ff 	.word	0x000008ff
    22b8:	00230008 	.word	0x00230008
    22bc:	00020240 	.word	0x00020240

000022c0 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    22c0:	b570      	push	{r4, r5, r6, lr}
    22c2:	0005      	movs	r5, r0
    22c4:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    22c6:	4b16      	ldr	r3, [pc, #88]	; (2320 <_spi_m_async_init+0x60>)
    22c8:	4798      	blx	r3

	if (rc < 0) {
    22ca:	2800      	cmp	r0, #0
    22cc:	db1d      	blt.n	230a <_spi_m_async_init+0x4a>
	if (hw == SERCOM4) {
    22ce:	4b15      	ldr	r3, [pc, #84]	; (2324 <_spi_m_async_init+0x64>)
    22d0:	429c      	cmp	r4, r3
    22d2:	d01b      	beq.n	230c <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    22d4:	2300      	movs	r3, #0
    22d6:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    22d8:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    22da:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    22dc:	4b12      	ldr	r3, [pc, #72]	; (2328 <_spi_m_async_init+0x68>)
    22de:	469c      	mov	ip, r3
    22e0:	4464      	add	r4, ip
    22e2:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    22e4:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    22e6:	b2e3      	uxtb	r3, r4
    22e8:	0622      	lsls	r2, r4, #24
    22ea:	d417      	bmi.n	231c <_spi_m_async_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22ec:	221f      	movs	r2, #31
    22ee:	401a      	ands	r2, r3
    22f0:	2301      	movs	r3, #1
    22f2:	4093      	lsls	r3, r2
    22f4:	4a0d      	ldr	r2, [pc, #52]	; (232c <_spi_m_async_init+0x6c>)
    22f6:	2180      	movs	r1, #128	; 0x80
    22f8:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    22fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22fe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2302:	3101      	adds	r1, #1
    2304:	31ff      	adds	r1, #255	; 0xff
    2306:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    2308:	2000      	movs	r0, #0
}
    230a:	bd70      	pop	{r4, r5, r6, pc}
		_sercom4_dev = (struct _spi_async_dev *)dev;
    230c:	4b08      	ldr	r3, [pc, #32]	; (2330 <_spi_m_async_init+0x70>)
    230e:	601d      	str	r5, [r3, #0]
	spid->callbacks.complete = NULL;
    2310:	2300      	movs	r3, #0
    2312:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    2314:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    2316:	60ab      	str	r3, [r5, #8]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2318:	330d      	adds	r3, #13
    231a:	e7e7      	b.n	22ec <_spi_m_async_init+0x2c>
	return ERR_NONE;
    231c:	2000      	movs	r0, #0
    231e:	e7f4      	b.n	230a <_spi_m_async_init+0x4a>
    2320:	000021c1 	.word	0x000021c1
    2324:	42001800 	.word	0x42001800
    2328:	bdfff800 	.word	0xbdfff800
    232c:	e000e100 	.word	0xe000e100
    2330:	2000022c 	.word	0x2000022c

00002334 <_spi_s_async_init>:

int32_t _spi_s_async_init(struct _spi_s_async_dev *dev, void *const hw)
{
    2334:	b510      	push	{r4, lr}
	return _spi_m_async_init(dev, hw);
    2336:	4b01      	ldr	r3, [pc, #4]	; (233c <_spi_s_async_init+0x8>)
    2338:	4798      	blx	r3
}
    233a:	bd10      	pop	{r4, pc}
    233c:	000022c1 	.word	0x000022c1

00002340 <_spi_s_async_enable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_s_async_enable(struct _spi_s_async_dev *dev)
{
    2340:	b510      	push	{r4, lr}
    2342:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2344:	d00c      	beq.n	2360 <_spi_s_async_enable+0x20>
    2346:	6800      	ldr	r0, [r0, #0]
    2348:	1e43      	subs	r3, r0, #1
    234a:	4198      	sbcs	r0, r3
    234c:	b2c0      	uxtb	r0, r0
    234e:	229b      	movs	r2, #155	; 0x9b
    2350:	0112      	lsls	r2, r2, #4
    2352:	4904      	ldr	r1, [pc, #16]	; (2364 <_spi_s_async_enable+0x24>)
    2354:	4b04      	ldr	r3, [pc, #16]	; (2368 <_spi_s_async_enable+0x28>)
    2356:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    2358:	6820      	ldr	r0, [r4, #0]
    235a:	4b04      	ldr	r3, [pc, #16]	; (236c <_spi_s_async_enable+0x2c>)
    235c:	4798      	blx	r3
}
    235e:	bd10      	pop	{r4, pc}
    2360:	2000      	movs	r0, #0
    2362:	e7f4      	b.n	234e <_spi_s_async_enable+0xe>
    2364:	00007abc 	.word	0x00007abc
    2368:	000014c1 	.word	0x000014c1
    236c:	000019a5 	.word	0x000019a5

00002370 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    2370:	b570      	push	{r4, r5, r6, lr}
    2372:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    2374:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    2376:	2800      	cmp	r0, #0
    2378:	d00d      	beq.n	2396 <_spi_m_async_enable_tx+0x26>
    237a:	0020      	movs	r0, r4
    237c:	1e43      	subs	r3, r0, #1
    237e:	4198      	sbcs	r0, r3
    2380:	b2c0      	uxtb	r0, r0
    2382:	4a07      	ldr	r2, [pc, #28]	; (23a0 <_spi_m_async_enable_tx+0x30>)
    2384:	4907      	ldr	r1, [pc, #28]	; (23a4 <_spi_m_async_enable_tx+0x34>)
    2386:	4b08      	ldr	r3, [pc, #32]	; (23a8 <_spi_m_async_enable_tx+0x38>)
    2388:	4798      	blx	r3

	if (state) {
    238a:	2d00      	cmp	r5, #0
    238c:	d105      	bne.n	239a <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    238e:	2301      	movs	r3, #1
    2390:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    2392:	2000      	movs	r0, #0
    2394:	bd70      	pop	{r4, r5, r6, pc}
    2396:	2000      	movs	r0, #0
    2398:	e7f3      	b.n	2382 <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    239a:	2301      	movs	r3, #1
    239c:	75a3      	strb	r3, [r4, #22]
    239e:	e7f8      	b.n	2392 <_spi_m_async_enable_tx+0x22>
    23a0:	00000acc 	.word	0x00000acc
    23a4:	00007abc 	.word	0x00007abc
    23a8:	000014c1 	.word	0x000014c1

000023ac <_spi_s_async_enable_tx>:

int32_t _spi_s_async_enable_tx(struct _spi_s_async_dev *dev, bool state)
{
    23ac:	b510      	push	{r4, lr}
	return _spi_m_async_enable_tx(dev, state);
    23ae:	4b01      	ldr	r3, [pc, #4]	; (23b4 <_spi_s_async_enable_tx+0x8>)
    23b0:	4798      	blx	r3
}
    23b2:	bd10      	pop	{r4, pc}
    23b4:	00002371 	.word	0x00002371

000023b8 <_spi_m_async_enable_rx>:

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    23b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ba:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    23bc:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    23be:	4c0c      	ldr	r4, [pc, #48]	; (23f0 <_spi_m_async_enable_rx+0x38>)
    23c0:	1e43      	subs	r3, r0, #1
    23c2:	4198      	sbcs	r0, r3
    23c4:	b2c0      	uxtb	r0, r0
    23c6:	22ae      	movs	r2, #174	; 0xae
    23c8:	0112      	lsls	r2, r2, #4
    23ca:	0021      	movs	r1, r4
    23cc:	4f09      	ldr	r7, [pc, #36]	; (23f4 <_spi_m_async_enable_rx+0x3c>)
    23ce:	47b8      	blx	r7
	ASSERT(hw);
    23d0:	0028      	movs	r0, r5
    23d2:	1e43      	subs	r3, r0, #1
    23d4:	4198      	sbcs	r0, r3
    23d6:	b2c0      	uxtb	r0, r0
    23d8:	4a07      	ldr	r2, [pc, #28]	; (23f8 <_spi_m_async_enable_rx+0x40>)
    23da:	0021      	movs	r1, r4
    23dc:	47b8      	blx	r7

	if (state) {
    23de:	2e00      	cmp	r6, #0
    23e0:	d103      	bne.n	23ea <_spi_m_async_enable_rx+0x32>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    23e2:	2304      	movs	r3, #4
    23e4:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    23e6:	2000      	movs	r0, #0
    23e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    23ea:	2304      	movs	r3, #4
    23ec:	75ab      	strb	r3, [r5, #22]
    23ee:	e7fa      	b.n	23e6 <_spi_m_async_enable_rx+0x2e>
    23f0:	00007abc 	.word	0x00007abc
    23f4:	000014c1 	.word	0x000014c1
    23f8:	00000ae1 	.word	0x00000ae1

000023fc <_spi_s_async_enable_rx>:

int32_t _spi_s_async_enable_rx(struct _spi_s_async_dev *dev, bool state)
{
    23fc:	b510      	push	{r4, lr}
	return _spi_m_async_enable_rx(dev, state);
    23fe:	4b01      	ldr	r3, [pc, #4]	; (2404 <_spi_s_async_enable_rx+0x8>)
    2400:	4798      	blx	r3
}
    2402:	bd10      	pop	{r4, pc}
    2404:	000023b9 	.word	0x000023b9

00002408 <_spi_m_async_enable_tx_complete>:

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    2408:	b570      	push	{r4, r5, r6, lr}
    240a:	0004      	movs	r4, r0
    240c:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    240e:	2800      	cmp	r0, #0
    2410:	d00e      	beq.n	2430 <_spi_m_async_enable_tx_complete+0x28>
    2412:	6800      	ldr	r0, [r0, #0]
    2414:	1e43      	subs	r3, r0, #1
    2416:	4198      	sbcs	r0, r3
    2418:	b2c0      	uxtb	r0, r0
    241a:	4a08      	ldr	r2, [pc, #32]	; (243c <_spi_m_async_enable_tx_complete+0x34>)
    241c:	4908      	ldr	r1, [pc, #32]	; (2440 <_spi_m_async_enable_tx_complete+0x38>)
    241e:	4b09      	ldr	r3, [pc, #36]	; (2444 <_spi_m_async_enable_tx_complete+0x3c>)
    2420:	4798      	blx	r3

	if (state) {
    2422:	2d00      	cmp	r5, #0
    2424:	d106      	bne.n	2434 <_spi_m_async_enable_tx_complete+0x2c>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    2426:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    2428:	2202      	movs	r2, #2
    242a:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    242c:	2000      	movs	r0, #0
    242e:	bd70      	pop	{r4, r5, r6, pc}
    2430:	2000      	movs	r0, #0
    2432:	e7f2      	b.n	241a <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    2434:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    2436:	2202      	movs	r2, #2
    2438:	759a      	strb	r2, [r3, #22]
    243a:	e7f7      	b.n	242c <_spi_m_async_enable_tx_complete+0x24>
    243c:	00000af3 	.word	0x00000af3
    2440:	00007abc 	.word	0x00007abc
    2444:	000014c1 	.word	0x000014c1

00002448 <_spi_s_async_enable_ss_detect>:

int32_t _spi_s_async_enable_ss_detect(struct _spi_s_async_dev *dev, bool state)
{
    2448:	b510      	push	{r4, lr}
	return _spi_m_async_enable_tx_complete(dev, state);
    244a:	4b01      	ldr	r3, [pc, #4]	; (2450 <_spi_s_async_enable_ss_detect+0x8>)
    244c:	4798      	blx	r3
}
    244e:	bd10      	pop	{r4, pc}
    2450:	00002409 	.word	0x00002409

00002454 <_spi_s_async_write_one>:

	return ERR_NONE;
}

int32_t _spi_s_async_write_one(struct _spi_s_async_dev *dev, uint16_t data)
{
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	0004      	movs	r4, r0
    2458:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    245a:	2800      	cmp	r0, #0
    245c:	d00b      	beq.n	2476 <_spi_s_async_write_one+0x22>
    245e:	6800      	ldr	r0, [r0, #0]
    2460:	1e43      	subs	r3, r0, #1
    2462:	4198      	sbcs	r0, r3
    2464:	b2c0      	uxtb	r0, r0
    2466:	4a05      	ldr	r2, [pc, #20]	; (247c <_spi_s_async_write_one+0x28>)
    2468:	4905      	ldr	r1, [pc, #20]	; (2480 <_spi_s_async_write_one+0x2c>)
    246a:	4b06      	ldr	r3, [pc, #24]	; (2484 <_spi_s_async_write_one+0x30>)
    246c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    246e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    2470:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    2472:	2000      	movs	r0, #0
    2474:	bd70      	pop	{r4, r5, r6, pc}
    2476:	2000      	movs	r0, #0
    2478:	e7f5      	b.n	2466 <_spi_s_async_write_one+0x12>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	00000b0e 	.word	0x00000b0e
    2480:	00007abc 	.word	0x00007abc
    2484:	000014c1 	.word	0x000014c1

00002488 <_spi_s_async_read_one>:

	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

uint16_t _spi_s_async_read_one(struct _spi_s_async_dev *dev)
{
    2488:	b510      	push	{r4, lr}
    248a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    248c:	d00b      	beq.n	24a6 <_spi_s_async_read_one+0x1e>
    248e:	6800      	ldr	r0, [r0, #0]
    2490:	1e43      	subs	r3, r0, #1
    2492:	4198      	sbcs	r0, r3
    2494:	b2c0      	uxtb	r0, r0
    2496:	4a05      	ldr	r2, [pc, #20]	; (24ac <_spi_s_async_read_one+0x24>)
    2498:	4905      	ldr	r1, [pc, #20]	; (24b0 <_spi_s_async_read_one+0x28>)
    249a:	4b06      	ldr	r3, [pc, #24]	; (24b4 <_spi_s_async_read_one+0x2c>)
    249c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    249e:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    24a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    24a2:	b280      	uxth	r0, r0
}
    24a4:	bd10      	pop	{r4, pc}
    24a6:	2000      	movs	r0, #0
    24a8:	e7f5      	b.n	2496 <_spi_s_async_read_one+0xe>
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	00000b27 	.word	0x00000b27
    24b0:	00007abc 	.word	0x00007abc
    24b4:	000014c1 	.word	0x000014c1

000024b8 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    24b8:	b570      	push	{r4, r5, r6, lr}
    24ba:	0004      	movs	r4, r0
    24bc:	000d      	movs	r5, r1
    24be:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    24c0:	2800      	cmp	r0, #0
    24c2:	d00f      	beq.n	24e4 <_spi_m_async_register_callback+0x2c>
    24c4:	2000      	movs	r0, #0
    24c6:	2303      	movs	r3, #3
    24c8:	428b      	cmp	r3, r1
    24ca:	4140      	adcs	r0, r0
    24cc:	b2c0      	uxtb	r0, r0
    24ce:	2301      	movs	r3, #1
    24d0:	4018      	ands	r0, r3
    24d2:	4a05      	ldr	r2, [pc, #20]	; (24e8 <_spi_m_async_register_callback+0x30>)
    24d4:	4905      	ldr	r1, [pc, #20]	; (24ec <_spi_m_async_register_callback+0x34>)
    24d6:	4b06      	ldr	r3, [pc, #24]	; (24f0 <_spi_m_async_register_callback+0x38>)
    24d8:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    24da:	00ad      	lsls	r5, r5, #2
    24dc:	1964      	adds	r4, r4, r5
    24de:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    24e0:	2000      	movs	r0, #0
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	2000      	movs	r0, #0
    24e6:	e7f2      	b.n	24ce <_spi_m_async_register_callback+0x16>
    24e8:	00000b39 	.word	0x00000b39
    24ec:	00007abc 	.word	0x00007abc
    24f0:	000014c1 	.word	0x000014c1

000024f4 <_spi_s_async_register_callback>:

int32_t _spi_s_async_register_callback(struct _spi_s_async_dev *dev, const enum _spi_s_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    24f4:	b510      	push	{r4, lr}
	return _spi_m_async_register_callback(dev, cb_type, func);
    24f6:	4b01      	ldr	r3, [pc, #4]	; (24fc <_spi_s_async_register_callback+0x8>)
    24f8:	4798      	blx	r3
}
    24fa:	bd10      	pop	{r4, pc}
    24fc:	000024b9 	.word	0x000024b9

00002500 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    2500:	b570      	push	{r4, r5, r6, lr}
    2502:	0004      	movs	r4, r0
    2504:	000e      	movs	r6, r1
    2506:	0015      	movs	r5, r2
	ASSERT(device);
    2508:	1e43      	subs	r3, r0, #1
    250a:	4198      	sbcs	r0, r3
    250c:	b2c0      	uxtb	r0, r0
    250e:	4a08      	ldr	r2, [pc, #32]	; (2530 <_spi_m_async_set_irq_state+0x30>)
    2510:	4908      	ldr	r1, [pc, #32]	; (2534 <_spi_m_async_set_irq_state+0x34>)
    2512:	4b09      	ldr	r3, [pc, #36]	; (2538 <_spi_m_async_set_irq_state+0x38>)
    2514:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    2516:	2e03      	cmp	r6, #3
    2518:	d000      	beq.n	251c <_spi_m_async_set_irq_state+0x1c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
	}
}
    251a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    251c:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
    251e:	2d00      	cmp	r5, #0
    2520:	d002      	beq.n	2528 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	759a      	strb	r2, [r3, #22]
}
    2526:	e7f8      	b.n	251a <_spi_m_async_set_irq_state+0x1a>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    2528:	2280      	movs	r2, #128	; 0x80
    252a:	751a      	strb	r2, [r3, #20]
    252c:	e7f5      	b.n	251a <_spi_m_async_set_irq_state+0x1a>
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	00000b7a 	.word	0x00000b7a
    2534:	00007abc 	.word	0x00007abc
    2538:	000014c1 	.word	0x000014c1

0000253c <_spi_s_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_s_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    253c:	b510      	push	{r4, lr}
	_spi_m_async_set_irq_state(device, type, state);
    253e:	4b01      	ldr	r3, [pc, #4]	; (2544 <_spi_s_async_set_irq_state+0x8>)
    2540:	4798      	blx	r3
}
    2542:	bd10      	pop	{r4, pc}
    2544:	00002501 	.word	0x00002501

00002548 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2548:	4b0d      	ldr	r3, [pc, #52]	; (2580 <_sysctrl_init_sources+0x38>)
    254a:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    254c:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    254e:	0f92      	lsrs	r2, r2, #30
    2550:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    2552:	490c      	ldr	r1, [pc, #48]	; (2584 <_sysctrl_init_sources+0x3c>)
    2554:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2556:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2558:	699a      	ldr	r2, [r3, #24]
    255a:	2102      	movs	r1, #2
    255c:	430a      	orrs	r2, r1
    255e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2560:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    2562:	311d      	adds	r1, #29
    2564:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2566:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2568:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    256a:	2208      	movs	r2, #8
    256c:	68cb      	ldr	r3, [r1, #12]
    256e:	421a      	tst	r2, r3
    2570:	d0fc      	beq.n	256c <_sysctrl_init_sources+0x24>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    2572:	4a03      	ldr	r2, [pc, #12]	; (2580 <_sysctrl_init_sources+0x38>)
    2574:	6a13      	ldr	r3, [r2, #32]
    2576:	2180      	movs	r1, #128	; 0x80
    2578:	430b      	orrs	r3, r1
    257a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    257c:	4770      	bx	lr
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	40000800 	.word	0x40000800
    2584:	00000302 	.word	0x00000302

00002588 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    2588:	4a02      	ldr	r2, [pc, #8]	; (2594 <_sysctrl_init_referenced_generators+0xc>)
    258a:	6993      	ldr	r3, [r2, #24]
    258c:	2102      	movs	r1, #2
    258e:	438b      	bics	r3, r1
    2590:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2592:	4770      	bx	lr
    2594:	40000800 	.word	0x40000800

00002598 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	0007      	movs	r7, r0
    259c:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    259e:	4b3c      	ldr	r3, [pc, #240]	; (2690 <_timer_init+0xf8>)
    25a0:	18cd      	adds	r5, r1, r3
    25a2:	0aad      	lsrs	r5, r5, #10
    25a4:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    25a6:	2d00      	cmp	r5, #0
    25a8:	d051      	beq.n	264e <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    25aa:	229f      	movs	r2, #159	; 0x9f
    25ac:	0052      	lsls	r2, r2, #1
    25ae:	4939      	ldr	r1, [pc, #228]	; (2694 <_timer_init+0xfc>)
    25b0:	2000      	movs	r0, #0
    25b2:	4b39      	ldr	r3, [pc, #228]	; (2698 <_timer_init+0x100>)
    25b4:	4798      	blx	r3
	return -1;
    25b6:	2601      	movs	r6, #1
    25b8:	4276      	negs	r6, r6
	device->hw = hw;
    25ba:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    25bc:	228b      	movs	r2, #139	; 0x8b
    25be:	4935      	ldr	r1, [pc, #212]	; (2694 <_timer_init+0xfc>)
    25c0:	2001      	movs	r0, #1
    25c2:	4b35      	ldr	r3, [pc, #212]	; (2698 <_timer_init+0x100>)
    25c4:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    25c6:	7be3      	ldrb	r3, [r4, #15]
    25c8:	09db      	lsrs	r3, r3, #7
    25ca:	d1fc      	bne.n	25c6 <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    25cc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    25ce:	079b      	lsls	r3, r3, #30
    25d0:	d504      	bpl.n	25dc <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    25d2:	2300      	movs	r3, #0
    25d4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    25d6:	7be3      	ldrb	r3, [r4, #15]
    25d8:	09db      	lsrs	r3, r3, #7
    25da:	d1fc      	bne.n	25d6 <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    25dc:	2301      	movs	r3, #1
    25de:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    25e0:	7be3      	ldrb	r3, [r4, #15]
    25e2:	09db      	lsrs	r3, r3, #7
    25e4:	d1fc      	bne.n	25e0 <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    25e6:	00b3      	lsls	r3, r6, #2
    25e8:	199b      	adds	r3, r3, r6
    25ea:	009a      	lsls	r2, r3, #2
    25ec:	4b2b      	ldr	r3, [pc, #172]	; (269c <_timer_init+0x104>)
    25ee:	189b      	adds	r3, r3, r2
    25f0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    25f2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    25f4:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    25f6:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    25f8:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    25fa:	8163      	strh	r3, [r4, #10]
    25fc:	230c      	movs	r3, #12
    25fe:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2600:	2b08      	cmp	r3, #8
    2602:	d026      	beq.n	2652 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2604:	2b00      	cmp	r3, #0
    2606:	d12e      	bne.n	2666 <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2608:	00b3      	lsls	r3, r6, #2
    260a:	199b      	adds	r3, r3, r6
    260c:	009b      	lsls	r3, r3, #2
    260e:	4a23      	ldr	r2, [pc, #140]	; (269c <_timer_init+0x104>)
    2610:	18d3      	adds	r3, r2, r3
    2612:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2614:	8323      	strh	r3, [r4, #24]
    2616:	2300      	movs	r3, #0
    2618:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    261a:	2301      	movs	r3, #1
    261c:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    261e:	4b20      	ldr	r3, [pc, #128]	; (26a0 <_timer_init+0x108>)
    2620:	429c      	cmp	r4, r3
    2622:	d031      	beq.n	2688 <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2624:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    2626:	b2eb      	uxtb	r3, r5
    2628:	062a      	lsls	r2, r5, #24
    262a:	d40e      	bmi.n	264a <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    262c:	221f      	movs	r2, #31
    262e:	401a      	ands	r2, r3
    2630:	2301      	movs	r3, #1
    2632:	4093      	lsls	r3, r2
    2634:	4a1b      	ldr	r2, [pc, #108]	; (26a4 <_timer_init+0x10c>)
    2636:	2180      	movs	r1, #128	; 0x80
    2638:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    263a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    263e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2642:	3101      	adds	r1, #1
    2644:	31ff      	adds	r1, #255	; 0xff
    2646:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2648:	6013      	str	r3, [r2, #0]
}
    264a:	2000      	movs	r0, #0
    264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    264e:	2600      	movs	r6, #0
    2650:	e7b3      	b.n	25ba <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2652:	00b3      	lsls	r3, r6, #2
    2654:	199e      	adds	r6, r3, r6
    2656:	00b6      	lsls	r6, r6, #2
    2658:	4b10      	ldr	r3, [pc, #64]	; (269c <_timer_init+0x104>)
    265a:	199e      	adds	r6, r3, r6
    265c:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    265e:	61a3      	str	r3, [r4, #24]
    2660:	2300      	movs	r3, #0
    2662:	61e3      	str	r3, [r4, #28]
    2664:	e7d9      	b.n	261a <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2666:	2b04      	cmp	r3, #4
    2668:	d1d7      	bne.n	261a <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    266a:	480c      	ldr	r0, [pc, #48]	; (269c <_timer_init+0x104>)
    266c:	00b3      	lsls	r3, r6, #2
    266e:	199a      	adds	r2, r3, r6
    2670:	0092      	lsls	r2, r2, #2
    2672:	1882      	adds	r2, r0, r2
    2674:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2676:	7622      	strb	r2, [r4, #24]
    2678:	2200      	movs	r2, #0
    267a:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    267c:	199b      	adds	r3, r3, r6
    267e:	009b      	lsls	r3, r3, #2
    2680:	18c3      	adds	r3, r0, r3
    2682:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2684:	7523      	strb	r3, [r4, #20]
    2686:	e7c8      	b.n	261a <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
    2688:	4b07      	ldr	r3, [pc, #28]	; (26a8 <_timer_init+0x110>)
    268a:	601f      	str	r7, [r3, #0]
    268c:	e7ca      	b.n	2624 <_timer_init+0x8c>
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	bdffd400 	.word	0xbdffd400
    2694:	00007aec 	.word	0x00007aec
    2698:	000014c1 	.word	0x000014c1
    269c:	00007ad8 	.word	0x00007ad8
    26a0:	42002c00 	.word	0x42002c00
    26a4:	e000e100 	.word	0xe000e100
    26a8:	20000230 	.word	0x20000230

000026ac <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    26ac:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    26ae:	8813      	ldrh	r3, [r2, #0]
    26b0:	2102      	movs	r1, #2
    26b2:	430b      	orrs	r3, r1
    26b4:	8013      	strh	r3, [r2, #0]
}
    26b6:	4770      	bx	lr

000026b8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    26b8:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    26ba:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    26bc:	0780      	lsls	r0, r0, #30
    26be:	0fc0      	lsrs	r0, r0, #31
}
    26c0:	4770      	bx	lr

000026c2 <_tc_get_timer>:
}
    26c2:	2000      	movs	r0, #0
    26c4:	4770      	bx	lr
	...

000026c8 <_timer_set_irq>:
{
    26c8:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    26ca:	68c0      	ldr	r0, [r0, #12]
    26cc:	4b04      	ldr	r3, [pc, #16]	; (26e0 <_timer_set_irq+0x18>)
    26ce:	469c      	mov	ip, r3
    26d0:	4460      	add	r0, ip
    26d2:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    26d4:	3012      	adds	r0, #18
    26d6:	b2c0      	uxtb	r0, r0
    26d8:	4b02      	ldr	r3, [pc, #8]	; (26e4 <_timer_set_irq+0x1c>)
    26da:	4798      	blx	r3
}
    26dc:	bd10      	pop	{r4, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	bdffd400 	.word	0xbdffd400
    26e4:	000018d1 	.word	0x000018d1

000026e8 <TC3_Handler>:
{
    26e8:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    26ea:	4b06      	ldr	r3, [pc, #24]	; (2704 <TC3_Handler+0x1c>)
    26ec:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    26ee:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    26f0:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    26f2:	07d2      	lsls	r2, r2, #31
    26f4:	d400      	bmi.n	26f8 <TC3_Handler+0x10>
}
    26f6:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    26f8:	2201      	movs	r2, #1
    26fa:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    26fc:	6803      	ldr	r3, [r0, #0]
    26fe:	4798      	blx	r3
}
    2700:	e7f9      	b.n	26f6 <TC3_Handler+0xe>
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	20000230 	.word	0x20000230

00002708 <main>:
#define DV_info(fmt, ...) DV_log("[info]\t", fmt, ##__VA_ARGS__)
#define DV_warn(fmt, ...) DV_log("[warn]\t", fmt, ##__VA_ARGS__)
#define DV_error(fmt, ...) DV_log("[error]\t", fmt, ##__VA_ARGS__)

int main(void)
{
    2708:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    270a:	4b0a      	ldr	r3, [pc, #40]	; (2734 <main+0x2c>)
    270c:	4798      	blx	r3
    
    /* Initialize timer to blink green status LED every second */
    initTimer();
    270e:	4b0a      	ldr	r3, [pc, #40]	; (2738 <main+0x30>)
    2710:	4798      	blx	r3
    
    /* Initialize SPI */
    initSpi();
    2712:	4b0a      	ldr	r3, [pc, #40]	; (273c <main+0x34>)
    2714:	4798      	blx	r3
    
    /* Initialize ADC */
    initAdc();    
    2716:	4b0a      	ldr	r3, [pc, #40]	; (2740 <main+0x38>)
    2718:	4798      	blx	r3

	while (1) { 
        printf("hi!\r\n");
    271a:	4d0a      	ldr	r5, [pc, #40]	; (2744 <main+0x3c>)
    271c:	4e0a      	ldr	r6, [pc, #40]	; (2748 <main+0x40>)
        printRxTxCount();
    271e:	4c0b      	ldr	r4, [pc, #44]	; (274c <main+0x44>)
        printf("hi!\r\n");
    2720:	0028      	movs	r0, r5
    2722:	47b0      	blx	r6
        printRxTxCount();
    2724:	47a0      	blx	r4
        processData();
    2726:	4b0a      	ldr	r3, [pc, #40]	; (2750 <main+0x48>)
    2728:	4798      	blx	r3
        delay_ms(3000);
    272a:	480a      	ldr	r0, [pc, #40]	; (2754 <main+0x4c>)
    272c:	4b0a      	ldr	r3, [pc, #40]	; (2758 <main+0x50>)
    272e:	4798      	blx	r3
    2730:	e7f6      	b.n	2720 <main+0x18>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00000119 	.word	0x00000119
    2738:	00002f29 	.word	0x00002f29
    273c:	00002ae1 	.word	0x00002ae1
    2740:	00002819 	.word	0x00002819
    2744:	00007b00 	.word	0x00007b00
    2748:	00003a85 	.word	0x00003a85
    274c:	00002abd 	.word	0x00002abd
    2750:	00002bed 	.word	0x00002bed
    2754:	00000bb8 	.word	0x00000bb8
    2758:	00000bc1 	.word	0x00000bc1

0000275c <convert_cb_ADC_0>:

bool getConversionStatus(void) {
    return convComplete;
}

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel) {
    275c:	b570      	push	{r4, r5, r6, lr}

    adc_async_read_channel(&ADC_0, 0, adcRawValue, 2);
    275e:	4c10      	ldr	r4, [pc, #64]	; (27a0 <convert_cb_ADC_0+0x44>)
    2760:	2302      	movs	r3, #2
    2762:	0022      	movs	r2, r4
    2764:	2100      	movs	r1, #0
    2766:	480f      	ldr	r0, [pc, #60]	; (27a4 <convert_cb_ADC_0+0x48>)
    2768:	4d0f      	ldr	r5, [pc, #60]	; (27a8 <convert_cb_ADC_0+0x4c>)
    276a:	47a8      	blx	r5
    rawAdc = (adcRawValue[1] << 8) | adcRawValue[0];
    276c:	7863      	ldrb	r3, [r4, #1]
    276e:	021b      	lsls	r3, r3, #8
    2770:	7821      	ldrb	r1, [r4, #0]
    2772:	4319      	orrs	r1, r3
    2774:	8061      	strh	r1, [r4, #2]
    printf("ADC Raw: 0x%04X\r\n", rawAdc);
    2776:	480d      	ldr	r0, [pc, #52]	; (27ac <convert_cb_ADC_0+0x50>)
    2778:	4d0d      	ldr	r5, [pc, #52]	; (27b0 <convert_cb_ADC_0+0x54>)
    277a:	47a8      	blx	r5
    printf("ADC Converted: %.2f\r\n", (3.3*rawAdc)/4095);    // converted        
    277c:	8860      	ldrh	r0, [r4, #2]
    277e:	4b0d      	ldr	r3, [pc, #52]	; (27b4 <convert_cb_ADC_0+0x58>)
    2780:	4798      	blx	r3
    2782:	4a0d      	ldr	r2, [pc, #52]	; (27b8 <convert_cb_ADC_0+0x5c>)
    2784:	4b0d      	ldr	r3, [pc, #52]	; (27bc <convert_cb_ADC_0+0x60>)
    2786:	4e0e      	ldr	r6, [pc, #56]	; (27c0 <convert_cb_ADC_0+0x64>)
    2788:	47b0      	blx	r6
    278a:	2200      	movs	r2, #0
    278c:	4b0d      	ldr	r3, [pc, #52]	; (27c4 <convert_cb_ADC_0+0x68>)
    278e:	4e0e      	ldr	r6, [pc, #56]	; (27c8 <convert_cb_ADC_0+0x6c>)
    2790:	47b0      	blx	r6
    2792:	0002      	movs	r2, r0
    2794:	000b      	movs	r3, r1
    2796:	480d      	ldr	r0, [pc, #52]	; (27cc <convert_cb_ADC_0+0x70>)
    2798:	47a8      	blx	r5
    convComplete = true;
    279a:	2301      	movs	r3, #1
    279c:	7123      	strb	r3, [r4, #4]
    
}
    279e:	bd70      	pop	{r4, r5, r6, pc}
    27a0:	20000234 	.word	0x20000234
    27a4:	200003cc 	.word	0x200003cc
    27a8:	00000a45 	.word	0x00000a45
    27ac:	00007b08 	.word	0x00007b08
    27b0:	00003991 	.word	0x00003991
    27b4:	0000782d 	.word	0x0000782d
    27b8:	66666666 	.word	0x66666666
    27bc:	400a6666 	.word	0x400a6666
    27c0:	00006c59 	.word	0x00006c59
    27c4:	40affe00 	.word	0x40affe00
    27c8:	000063f1 	.word	0x000063f1
    27cc:	00007b1c 	.word	0x00007b1c

000027d0 <getRawAdcVal>:
    return rawAdc;
    27d0:	4b01      	ldr	r3, [pc, #4]	; (27d8 <getRawAdcVal+0x8>)
    27d2:	8858      	ldrh	r0, [r3, #2]
}
    27d4:	4770      	bx	lr
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	20000234 	.word	0x20000234

000027dc <getConversionStatus>:
    return convComplete;
    27dc:	4b01      	ldr	r3, [pc, #4]	; (27e4 <getConversionStatus+0x8>)
    27de:	7918      	ldrb	r0, [r3, #4]
}
    27e0:	4770      	bx	lr
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	20000234 	.word	0x20000234

000027e8 <adcSetChannel>:

void adcSetChannel(channelReading channel) {
    27e8:	b570      	push	{r4, r5, r6, lr}
    27ea:	0001      	movs	r1, r0
    convComplete = false;
    27ec:	2200      	movs	r2, #0
    27ee:	4b06      	ldr	r3, [pc, #24]	; (2808 <adcSetChannel+0x20>)
    27f0:	711a      	strb	r2, [r3, #4]
    adc_async_set_inputs(&ADC_0, channel, 0x18, 0);
    27f2:	4c06      	ldr	r4, [pc, #24]	; (280c <adcSetChannel+0x24>)
    27f4:	2300      	movs	r3, #0
    27f6:	3218      	adds	r2, #24
    27f8:	0020      	movs	r0, r4
    27fa:	4d05      	ldr	r5, [pc, #20]	; (2810 <adcSetChannel+0x28>)
    27fc:	47a8      	blx	r5
    adc_async_start_conversion(&ADC_0);    
    27fe:	0020      	movs	r0, r4
    2800:	4b04      	ldr	r3, [pc, #16]	; (2814 <adcSetChannel+0x2c>)
    2802:	4798      	blx	r3
}
    2804:	bd70      	pop	{r4, r5, r6, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	20000234 	.word	0x20000234
    280c:	200003cc 	.word	0x200003cc
    2810:	00000b59 	.word	0x00000b59
    2814:	00000b31 	.word	0x00000b31

00002818 <initAdc>:
//
void initAdc(void) {
    2818:	b570      	push	{r4, r5, r6, lr}
    adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    281a:	4c06      	ldr	r4, [pc, #24]	; (2834 <initAdc+0x1c>)
    281c:	4b06      	ldr	r3, [pc, #24]	; (2838 <initAdc+0x20>)
    281e:	2200      	movs	r2, #0
    2820:	2100      	movs	r1, #0
    2822:	0020      	movs	r0, r4
    2824:	4d05      	ldr	r5, [pc, #20]	; (283c <initAdc+0x24>)
    2826:	47a8      	blx	r5
    adc_async_enable_channel(&ADC_0, 0);
    2828:	2100      	movs	r1, #0
    282a:	0020      	movs	r0, r4
    282c:	4b04      	ldr	r3, [pc, #16]	; (2840 <initAdc+0x28>)
    282e:	4798      	blx	r3
    
    /* Note: Channel in this case means the number of ADC modules, not the number of ADC channels, that is why everything is
    referenced to "Channel" 0 and still works */
    2830:	bd70      	pop	{r4, r5, r6, pc}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	200003cc 	.word	0x200003cc
    2838:	0000275d 	.word	0x0000275d
    283c:	000009c9 	.word	0x000009c9
    2840:	00000989 	.word	0x00000989

00002844 <complete_cb_SPI_0>:
static void complete_cb_SPI_0(const struct spi_s_async_descriptor *const desc) {
    /* Process data only when there is at least a minimum amount of bytes */
    //if ((RING_BUFFER_SIZE - rxRingBuffer.m_bytesRemaining) >= (sizeof(commPacket) + 2)) { 
        //processData();
    //}        
}
    2844:	4770      	bx	lr
	...

00002848 <tx_cb_SPI_0>:
        //else {
            //txAllowed = false;
        //}        
    //}
    
    txCounter++;
    2848:	4a02      	ldr	r2, [pc, #8]	; (2854 <tx_cb_SPI_0+0xc>)
    284a:	6813      	ldr	r3, [r2, #0]
    284c:	3301      	adds	r3, #1
    284e:	6013      	str	r3, [r2, #0]
}
    2850:	4770      	bx	lr
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	2000023c 	.word	0x2000023c

00002858 <writeToRingBuffer>:
static int writeToRingBuffer(RingBuffer* ringBuffer, uint8_t* buffer, uint16_t writeSize) {
    2858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    285a:	46ce      	mov	lr, r9
    285c:	4647      	mov	r7, r8
    285e:	b580      	push	{r7, lr}
    2860:	0004      	movs	r4, r0
    2862:	000e      	movs	r6, r1
    if (ringBuffer->m_bytesRemaining == 0) {
    2864:	7901      	ldrb	r1, [r0, #4]
    2866:	7943      	ldrb	r3, [r0, #5]
    2868:	021b      	lsls	r3, r3, #8
    286a:	430b      	orrs	r3, r1
    286c:	d033      	beq.n	28d6 <writeToRingBuffer+0x7e>
    writeSize = ringBuffer->m_bytesRemaining > writeSize ? writeSize : ringBuffer->m_bytesRemaining;
    286e:	1c1d      	adds	r5, r3, #0
    2870:	4293      	cmp	r3, r2
    2872:	d900      	bls.n	2876 <writeToRingBuffer+0x1e>
    2874:	1c15      	adds	r5, r2, #0
    2876:	b2ad      	uxth	r5, r5
    if (writeSize > 0) {
    2878:	2d00      	cmp	r5, #0
    287a:	d01e      	beq.n	28ba <writeToRingBuffer+0x62>
        if (ringBuffer->m_headIndex + writeSize > sizeof(ringBuffer->buffer)) {
    287c:	7823      	ldrb	r3, [r4, #0]
    287e:	7860      	ldrb	r0, [r4, #1]
    2880:	0200      	lsls	r0, r0, #8
    2882:	4318      	orrs	r0, r3
    2884:	1943      	adds	r3, r0, r5
    2886:	2b80      	cmp	r3, #128	; 0x80
    2888:	d92a      	bls.n	28e0 <writeToRingBuffer+0x88>
            numFormerBytes = sizeof(ringBuffer->buffer) - ringBuffer->m_headIndex;
    288a:	2780      	movs	r7, #128	; 0x80
    288c:	1a3f      	subs	r7, r7, r0
            memcpy(ringBuffer->buffer + ringBuffer->m_headIndex, buffer, numFormerBytes);
    288e:	1da3      	adds	r3, r4, #6
    2890:	4698      	mov	r8, r3
    2892:	4440      	add	r0, r8
    2894:	003a      	movs	r2, r7
    2896:	0031      	movs	r1, r6
    2898:	4b15      	ldr	r3, [pc, #84]	; (28f0 <writeToRingBuffer+0x98>)
    289a:	4699      	mov	r9, r3
    289c:	4798      	blx	r3
            numLatterBytes = writeSize - numFormerBytes;
    289e:	1bea      	subs	r2, r5, r7
            memcpy(ringBuffer->buffer, buffer + numFormerBytes, numLatterBytes);
    28a0:	19f1      	adds	r1, r6, r7
    28a2:	4640      	mov	r0, r8
    28a4:	47c8      	blx	r9
        ringBuffer->m_headIndex = (ringBuffer->m_headIndex + writeSize) % sizeof(ringBuffer->buffer);
    28a6:	7822      	ldrb	r2, [r4, #0]
    28a8:	7863      	ldrb	r3, [r4, #1]
    28aa:	021b      	lsls	r3, r3, #8
    28ac:	4313      	orrs	r3, r2
    28ae:	18eb      	adds	r3, r5, r3
    28b0:	227f      	movs	r2, #127	; 0x7f
    28b2:	4013      	ands	r3, r2
    28b4:	7023      	strb	r3, [r4, #0]
    28b6:	2300      	movs	r3, #0
    28b8:	7063      	strb	r3, [r4, #1]
    ringBuffer->m_bytesRemaining -= writeSize;
    28ba:	7922      	ldrb	r2, [r4, #4]
    28bc:	7963      	ldrb	r3, [r4, #5]
    28be:	021b      	lsls	r3, r3, #8
    28c0:	4313      	orrs	r3, r2
    28c2:	1b5b      	subs	r3, r3, r5
    28c4:	b29b      	uxth	r3, r3
    28c6:	7123      	strb	r3, [r4, #4]
    28c8:	0a1b      	lsrs	r3, r3, #8
    28ca:	7163      	strb	r3, [r4, #5]
    return writeSize;
    28cc:	0028      	movs	r0, r5
}
    28ce:	bc0c      	pop	{r2, r3}
    28d0:	4690      	mov	r8, r2
    28d2:	4699      	mov	r9, r3
    28d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printf("Ring buffer full, ignoring writes!\n\r");
    28d6:	4807      	ldr	r0, [pc, #28]	; (28f4 <writeToRingBuffer+0x9c>)
    28d8:	4b07      	ldr	r3, [pc, #28]	; (28f8 <writeToRingBuffer+0xa0>)
    28da:	4798      	blx	r3
        return 0;
    28dc:	2000      	movs	r0, #0
    28de:	e7f6      	b.n	28ce <writeToRingBuffer+0x76>
            memcpy(ringBuffer->buffer + ringBuffer->m_headIndex, buffer, writeSize);
    28e0:	1da3      	adds	r3, r4, #6
    28e2:	1818      	adds	r0, r3, r0
    28e4:	002a      	movs	r2, r5
    28e6:	0031      	movs	r1, r6
    28e8:	4b01      	ldr	r3, [pc, #4]	; (28f0 <writeToRingBuffer+0x98>)
    28ea:	4798      	blx	r3
    28ec:	e7db      	b.n	28a6 <writeToRingBuffer+0x4e>
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	0000308d 	.word	0x0000308d
    28f4:	00007b34 	.word	0x00007b34
    28f8:	00003991 	.word	0x00003991

000028fc <rx_cb_SPI_0>:

/*!
 *  /brief  Callback function for RX notification
 */
static void rx_cb_SPI_0(const struct spi_s_async_descriptor *const desc) {
    28fc:	b510      	push	{r4, lr}
    28fe:	b082      	sub	sp, #8
    uint8_t value;
    io_read(io, &value, 1);
    2900:	4c09      	ldr	r4, [pc, #36]	; (2928 <rx_cb_SPI_0+0x2c>)
    2902:	2201      	movs	r2, #1
    2904:	466b      	mov	r3, sp
    2906:	1dd9      	adds	r1, r3, #7
    2908:	6860      	ldr	r0, [r4, #4]
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <rx_cb_SPI_0+0x30>)
    290c:	4798      	blx	r3
    writeToRingBuffer(&rxRingBuffer, &value, 1);
    290e:	0020      	movs	r0, r4
    2910:	3008      	adds	r0, #8
    2912:	2201      	movs	r2, #1
    2914:	466b      	mov	r3, sp
    2916:	1dd9      	adds	r1, r3, #7
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <rx_cb_SPI_0+0x34>)
    291a:	4798      	blx	r3
    rxCounter++;
    291c:	4a05      	ldr	r2, [pc, #20]	; (2934 <rx_cb_SPI_0+0x38>)
    291e:	6913      	ldr	r3, [r2, #16]
    2920:	3301      	adds	r3, #1
    2922:	6113      	str	r3, [r2, #16]
}
    2924:	b002      	add	sp, #8
    2926:	bd10      	pop	{r4, pc}
    2928:	2000023c 	.word	0x2000023c
    292c:	00000d45 	.word	0x00000d45
    2930:	00002859 	.word	0x00002859
    2934:	200002bc 	.word	0x200002bc

00002938 <readFromRingBuffer>:
static int readFromRingBuffer(RingBuffer* ringBuffer, uint8_t* buffer, uint16_t readSize) {
    2938:	b5f0      	push	{r4, r5, r6, r7, lr}
    293a:	46de      	mov	lr, fp
    293c:	4657      	mov	r7, sl
    293e:	464e      	mov	r6, r9
    2940:	b5c0      	push	{r6, r7, lr}
    2942:	b082      	sub	sp, #8
    2944:	0004      	movs	r4, r0
    2946:	9101      	str	r1, [sp, #4]
    int bytesLeftToRead = RING_BUFFER_SIZE - ringBuffer->m_bytesRemaining;
    2948:	7903      	ldrb	r3, [r0, #4]
    294a:	7945      	ldrb	r5, [r0, #5]
    294c:	022d      	lsls	r5, r5, #8
    294e:	432b      	orrs	r3, r5
    2950:	2580      	movs	r5, #128	; 0x80
    2952:	1aed      	subs	r5, r5, r3
    if (bytesLeftToRead == 0) {
    2954:	d03d      	beq.n	29d2 <readFromRingBuffer+0x9a>
    readSize = readSize > bytesLeftToRead ? bytesLeftToRead : readSize;
    2956:	0016      	movs	r6, r2
    2958:	42aa      	cmp	r2, r5
    295a:	dd00      	ble.n	295e <readFromRingBuffer+0x26>
    295c:	002e      	movs	r6, r5
    295e:	b2b5      	uxth	r5, r6
    if (readSize > 0) {
    2960:	2d00      	cmp	r5, #0
    2962:	d024      	beq.n	29ae <readFromRingBuffer+0x76>
        if (ringBuffer->m_tailIndex + readSize > sizeof(ringBuffer->buffer)) {
    2964:	78a3      	ldrb	r3, [r4, #2]
    2966:	78e1      	ldrb	r1, [r4, #3]
    2968:	0209      	lsls	r1, r1, #8
    296a:	4319      	orrs	r1, r3
    296c:	0437      	lsls	r7, r6, #16
    296e:	0c3f      	lsrs	r7, r7, #16
    2970:	19cb      	adds	r3, r1, r7
    2972:	2b80      	cmp	r3, #128	; 0x80
    2974:	d931      	bls.n	29da <readFromRingBuffer+0xa2>
            numFormerBytes = sizeof(ringBuffer->buffer) - ringBuffer->m_tailIndex;
    2976:	2280      	movs	r2, #128	; 0x80
    2978:	1a53      	subs	r3, r2, r1
    297a:	4699      	mov	r9, r3
            memcpy(buffer, ringBuffer->buffer + ringBuffer->m_tailIndex, numFormerBytes);
    297c:	1da3      	adds	r3, r4, #6
    297e:	469a      	mov	sl, r3
    2980:	4451      	add	r1, sl
    2982:	464a      	mov	r2, r9
    2984:	9801      	ldr	r0, [sp, #4]
    2986:	4b18      	ldr	r3, [pc, #96]	; (29e8 <readFromRingBuffer+0xb0>)
    2988:	469b      	mov	fp, r3
    298a:	4798      	blx	r3
            memcpy(buffer + numFormerBytes, ringBuffer->buffer, numLatterBytes);
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	444b      	add	r3, r9
    2990:	0018      	movs	r0, r3
            numLatterBytes = readSize - numFormerBytes;
    2992:	464b      	mov	r3, r9
    2994:	1afa      	subs	r2, r7, r3
            memcpy(buffer + numFormerBytes, ringBuffer->buffer, numLatterBytes);
    2996:	4651      	mov	r1, sl
    2998:	47d8      	blx	fp
        ringBuffer->m_tailIndex = ((ringBuffer->m_tailIndex + readSize) % sizeof(ringBuffer->buffer));
    299a:	78a2      	ldrb	r2, [r4, #2]
    299c:	78e3      	ldrb	r3, [r4, #3]
    299e:	021b      	lsls	r3, r3, #8
    29a0:	4313      	orrs	r3, r2
    29a2:	18eb      	adds	r3, r5, r3
    29a4:	227f      	movs	r2, #127	; 0x7f
    29a6:	4013      	ands	r3, r2
    29a8:	70a3      	strb	r3, [r4, #2]
    29aa:	2300      	movs	r3, #0
    29ac:	70e3      	strb	r3, [r4, #3]
    ringBuffer->m_bytesRemaining += readSize;
    29ae:	7922      	ldrb	r2, [r4, #4]
    29b0:	7963      	ldrb	r3, [r4, #5]
    29b2:	021b      	lsls	r3, r3, #8
    29b4:	4313      	orrs	r3, r2
    29b6:	18ed      	adds	r5, r5, r3
    29b8:	b2ad      	uxth	r5, r5
    29ba:	7125      	strb	r5, [r4, #4]
    29bc:	0a2d      	lsrs	r5, r5, #8
    29be:	7165      	strb	r5, [r4, #5]
    29c0:	0436      	lsls	r6, r6, #16
    29c2:	0c35      	lsrs	r5, r6, #16
}
    29c4:	0028      	movs	r0, r5
    29c6:	b002      	add	sp, #8
    29c8:	bc1c      	pop	{r2, r3, r4}
    29ca:	4691      	mov	r9, r2
    29cc:	469a      	mov	sl, r3
    29ce:	46a3      	mov	fp, r4
    29d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("Nothing to read...\n\r");
    29d2:	4806      	ldr	r0, [pc, #24]	; (29ec <readFromRingBuffer+0xb4>)
    29d4:	4b06      	ldr	r3, [pc, #24]	; (29f0 <readFromRingBuffer+0xb8>)
    29d6:	4798      	blx	r3
        return 0;
    29d8:	e7f4      	b.n	29c4 <readFromRingBuffer+0x8c>
            memcpy(buffer, ringBuffer->buffer + ringBuffer->m_tailIndex, readSize);
    29da:	1da3      	adds	r3, r4, #6
    29dc:	1859      	adds	r1, r3, r1
    29de:	003a      	movs	r2, r7
    29e0:	9801      	ldr	r0, [sp, #4]
    29e2:	4b01      	ldr	r3, [pc, #4]	; (29e8 <readFromRingBuffer+0xb0>)
    29e4:	4798      	blx	r3
    29e6:	e7d8      	b.n	299a <readFromRingBuffer+0x62>
    29e8:	0000308d 	.word	0x0000308d
    29ec:	00007b5c 	.word	0x00007b5c
    29f0:	00003991 	.word	0x00003991

000029f4 <getPacketFromStream>:
 *  /param  ringBuffer  Ring buffer to process
 *  /param  packet      Pointer to valid packet, if packet is found, it is populated
 *
 *  /retval Returns true if valid packet was found
 */
static bool getPacketFromStream(RingBuffer* ringBuffer, commPacket* validPacket) {   
    29f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29f6:	46c6      	mov	lr, r8
    29f8:	b500      	push	{lr}
    29fa:	b086      	sub	sp, #24
    29fc:	0006      	movs	r6, r0
    29fe:	9101      	str	r1, [sp, #4]
    
    uint8_t workBuffer[sizeof(commPacket)];
    uint8_t tempVar = 0;
    2a00:	2200      	movs	r2, #0
    2a02:	ab02      	add	r3, sp, #8
    2a04:	71da      	strb	r2, [r3, #7]
    
    /* Check if ring buffer is empty */
    if (ringBuffer->m_bytesRemaining == RING_BUFFER_SIZE) {
    2a06:	7902      	ldrb	r2, [r0, #4]
    2a08:	7943      	ldrb	r3, [r0, #5]
    2a0a:	021b      	lsls	r3, r3, #8
    2a0c:	4313      	orrs	r3, r2
    2a0e:	2b80      	cmp	r3, #128	; 0x80
    2a10:	d04d      	beq.n	2aae <getPacketFromStream+0xba>
        return false;
    } 
    else {
        /* Traverse through ring buffer to find SOF */
        do {
            readFromRingBuffer(ringBuffer, &tempVar, 1);
    2a12:	ab02      	add	r3, sp, #8
    2a14:	1ddc      	adds	r4, r3, #7
    2a16:	4f28      	ldr	r7, [pc, #160]	; (2ab8 <getPacketFromStream+0xc4>)
    2a18:	2201      	movs	r2, #1
    2a1a:	0021      	movs	r1, r4
    2a1c:	0030      	movs	r0, r6
    2a1e:	47b8      	blx	r7
            if (tempVar == STROFFRAME) {
    2a20:	7823      	ldrb	r3, [r4, #0]
    2a22:	2b7e      	cmp	r3, #126	; 0x7e
    2a24:	d00a      	beq.n	2a3c <getPacketFromStream+0x48>
                break;
            }
        } while (ringBuffer->m_bytesRemaining != RING_BUFFER_SIZE);
    2a26:	7932      	ldrb	r2, [r6, #4]
    2a28:	7973      	ldrb	r3, [r6, #5]
    2a2a:	021b      	lsls	r3, r3, #8
    2a2c:	4313      	orrs	r3, r2
    2a2e:	2b80      	cmp	r3, #128	; 0x80
    2a30:	d1f2      	bne.n	2a18 <getPacketFromStream+0x24>
    
        /* SOF was the last byte in the ring buffer, exiting */
        if (ringBuffer->m_bytesRemaining == RING_BUFFER_SIZE) {
            return false;
    2a32:	2000      	movs	r0, #0
                    return false;
                }
            }
        }
    }
}
    2a34:	b006      	add	sp, #24
    2a36:	bc04      	pop	{r2}
    2a38:	4690      	mov	r8, r2
    2a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ringBuffer->m_bytesRemaining == RING_BUFFER_SIZE) {
    2a3c:	7932      	ldrb	r2, [r6, #4]
    2a3e:	7973      	ldrb	r3, [r6, #5]
    2a40:	021b      	lsls	r3, r3, #8
    2a42:	4313      	orrs	r3, r2
            return false;
    2a44:	2000      	movs	r0, #0
        if (ringBuffer->m_bytesRemaining == RING_BUFFER_SIZE) {
    2a46:	2b80      	cmp	r3, #128	; 0x80
    2a48:	d0f4      	beq.n	2a34 <getPacketFromStream+0x40>
    2a4a:	2500      	movs	r5, #0
                readFromRingBuffer(ringBuffer, &tempVar, 1);
    2a4c:	ab02      	add	r3, sp, #8
    2a4e:	1ddc      	adds	r4, r3, #7
    2a50:	4b19      	ldr	r3, [pc, #100]	; (2ab8 <getPacketFromStream+0xc4>)
    2a52:	4698      	mov	r8, r3
                workBuffer[i] = tempVar;
    2a54:	af04      	add	r7, sp, #16
                readFromRingBuffer(ringBuffer, &tempVar, 1);
    2a56:	2201      	movs	r2, #1
    2a58:	0021      	movs	r1, r4
    2a5a:	0030      	movs	r0, r6
    2a5c:	47c0      	blx	r8
                workBuffer[i] = tempVar;
    2a5e:	7823      	ldrb	r3, [r4, #0]
    2a60:	55eb      	strb	r3, [r5, r7]
                if (ringBuffer->m_bytesRemaining == RING_BUFFER_SIZE) {
    2a62:	7932      	ldrb	r2, [r6, #4]
    2a64:	7973      	ldrb	r3, [r6, #5]
    2a66:	021b      	lsls	r3, r3, #8
    2a68:	4313      	orrs	r3, r2
    2a6a:	2b80      	cmp	r3, #128	; 0x80
    2a6c:	d021      	beq.n	2ab2 <getPacketFromStream+0xbe>
    2a6e:	3501      	adds	r5, #1
            for (uint8_t i = 0; i < sizeof(workBuffer); i++) {
    2a70:	2d05      	cmp	r5, #5
    2a72:	d1f0      	bne.n	2a56 <getPacketFromStream+0x62>
            readFromRingBuffer(ringBuffer, &tempVar, 1);
    2a74:	ab02      	add	r3, sp, #8
    2a76:	1ddc      	adds	r4, r3, #7
    2a78:	2201      	movs	r2, #1
    2a7a:	0021      	movs	r1, r4
    2a7c:	0030      	movs	r0, r6
    2a7e:	4b0e      	ldr	r3, [pc, #56]	; (2ab8 <getPacketFromStream+0xc4>)
    2a80:	4798      	blx	r3
            if (tempVar == ENDOFFRAME) {
    2a82:	7823      	ldrb	r3, [r4, #0]
    2a84:	2b7d      	cmp	r3, #125	; 0x7d
    2a86:	d004      	beq.n	2a92 <getPacketFromStream+0x9e>
                if (getPacketFromStream(ringBuffer, validPacket)) {
    2a88:	9901      	ldr	r1, [sp, #4]
    2a8a:	0030      	movs	r0, r6
    2a8c:	f7ff ffb2 	bl	29f4 <getPacketFromStream>
    2a90:	e7d0      	b.n	2a34 <getPacketFromStream+0x40>
                validPacket->header     = workBuffer[0];
    2a92:	ab04      	add	r3, sp, #16
    2a94:	781a      	ldrb	r2, [r3, #0]
    2a96:	9901      	ldr	r1, [sp, #4]
    2a98:	700a      	strb	r2, [r1, #0]
                validPacket->devAddr    = workBuffer[1];
    2a9a:	785a      	ldrb	r2, [r3, #1]
    2a9c:	704a      	strb	r2, [r1, #1]
                validPacket->regAddr    = workBuffer[2];
    2a9e:	789a      	ldrb	r2, [r3, #2]
    2aa0:	708a      	strb	r2, [r1, #2]
                validPacket->data[0]    = workBuffer[3];
    2aa2:	78da      	ldrb	r2, [r3, #3]
    2aa4:	70ca      	strb	r2, [r1, #3]
                validPacket->data[1]    = workBuffer[4];
    2aa6:	791b      	ldrb	r3, [r3, #4]
    2aa8:	710b      	strb	r3, [r1, #4]
                return true;
    2aaa:	2001      	movs	r0, #1
    2aac:	e7c2      	b.n	2a34 <getPacketFromStream+0x40>
        return false;
    2aae:	2000      	movs	r0, #0
    2ab0:	e7c0      	b.n	2a34 <getPacketFromStream+0x40>
                    return false;
    2ab2:	2000      	movs	r0, #0
    2ab4:	e7be      	b.n	2a34 <getPacketFromStream+0x40>
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	00002939 	.word	0x00002939

00002abc <printRxTxCount>:
void printRxTxCount(void) {
    2abc:	b510      	push	{r4, lr}
    printf("rxCount: %lu\ttxCount: %lu\r\n", rxCounter, txCounter);    
    2abe:	4b04      	ldr	r3, [pc, #16]	; (2ad0 <printRxTxCount+0x14>)
    2ac0:	681a      	ldr	r2, [r3, #0]
    2ac2:	4b04      	ldr	r3, [pc, #16]	; (2ad4 <printRxTxCount+0x18>)
    2ac4:	6919      	ldr	r1, [r3, #16]
    2ac6:	4804      	ldr	r0, [pc, #16]	; (2ad8 <printRxTxCount+0x1c>)
    2ac8:	4b04      	ldr	r3, [pc, #16]	; (2adc <printRxTxCount+0x20>)
    2aca:	4798      	blx	r3
}
    2acc:	bd10      	pop	{r4, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	2000023c 	.word	0x2000023c
    2ad4:	200002bc 	.word	0x200002bc
    2ad8:	00007b74 	.word	0x00007b74
    2adc:	00003991 	.word	0x00003991

00002ae0 <initSpi>:
void initSpi(void) {
    2ae0:	b570      	push	{r4, r5, r6, lr}
    spi_s_async_get_io_descriptor(&SPI_0, &io);
    2ae2:	4c15      	ldr	r4, [pc, #84]	; (2b38 <initSpi+0x58>)
    2ae4:	1d21      	adds	r1, r4, #4
    2ae6:	4d15      	ldr	r5, [pc, #84]	; (2b3c <initSpi+0x5c>)
    2ae8:	0028      	movs	r0, r5
    2aea:	4b15      	ldr	r3, [pc, #84]	; (2b40 <initSpi+0x60>)
    2aec:	4798      	blx	r3
    spi_s_async_register_callback(&SPI_0, SPI_S_CB_TX, (FUNC_PTR)tx_cb_SPI_0);
    2aee:	4a15      	ldr	r2, [pc, #84]	; (2b44 <initSpi+0x64>)
    2af0:	2100      	movs	r1, #0
    2af2:	0028      	movs	r0, r5
    2af4:	4e14      	ldr	r6, [pc, #80]	; (2b48 <initSpi+0x68>)
    2af6:	47b0      	blx	r6
    spi_s_async_register_callback(&SPI_0, SPI_S_CB_COMPLETE, (FUNC_PTR)complete_cb_SPI_0);
    2af8:	4a14      	ldr	r2, [pc, #80]	; (2b4c <initSpi+0x6c>)
    2afa:	2102      	movs	r1, #2
    2afc:	0028      	movs	r0, r5
    2afe:	47b0      	blx	r6
    spi_s_async_register_callback(&SPI_0, SPI_S_CB_RX, (FUNC_PTR)rx_cb_SPI_0);
    2b00:	4a13      	ldr	r2, [pc, #76]	; (2b50 <initSpi+0x70>)
    2b02:	2101      	movs	r1, #1
    2b04:	0028      	movs	r0, r5
    2b06:	47b0      	blx	r6
    spi_s_async_enable(&SPI_0);
    2b08:	0028      	movs	r0, r5
    2b0a:	4b12      	ldr	r3, [pc, #72]	; (2b54 <initSpi+0x74>)
    2b0c:	4798      	blx	r3
    ringBuffer->m_headIndex = 0;
    2b0e:	2500      	movs	r5, #0
    2b10:	8125      	strh	r5, [r4, #8]
    ringBuffer->m_tailIndex = 0;
    2b12:	8165      	strh	r5, [r4, #10]
    ringBuffer->m_bytesRemaining = RING_BUFFER_SIZE;
    2b14:	2680      	movs	r6, #128	; 0x80
    2b16:	81a6      	strh	r6, [r4, #12]
    memset(ringBuffer->buffer, 0, sizeof(ringBuffer->buffer));
    2b18:	0020      	movs	r0, r4
    2b1a:	300e      	adds	r0, #14
    2b1c:	2280      	movs	r2, #128	; 0x80
    2b1e:	2100      	movs	r1, #0
    2b20:	4c0d      	ldr	r4, [pc, #52]	; (2b58 <initSpi+0x78>)
    2b22:	47a0      	blx	r4
    ringBuffer->m_headIndex = 0;
    2b24:	480d      	ldr	r0, [pc, #52]	; (2b5c <initSpi+0x7c>)
    2b26:	8285      	strh	r5, [r0, #20]
    ringBuffer->m_tailIndex = 0;
    2b28:	82c5      	strh	r5, [r0, #22]
    ringBuffer->m_bytesRemaining = RING_BUFFER_SIZE;
    2b2a:	8306      	strh	r6, [r0, #24]
    memset(ringBuffer->buffer, 0, sizeof(ringBuffer->buffer));
    2b2c:	301a      	adds	r0, #26
    2b2e:	2280      	movs	r2, #128	; 0x80
    2b30:	2100      	movs	r1, #0
    2b32:	47a0      	blx	r4
}
    2b34:	bd70      	pop	{r4, r5, r6, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	2000023c 	.word	0x2000023c
    2b3c:	20000410 	.word	0x20000410
    2b40:	0000110d 	.word	0x0000110d
    2b44:	00002849 	.word	0x00002849
    2b48:	000010a9 	.word	0x000010a9
    2b4c:	00002845 	.word	0x00002845
    2b50:	000028fd 	.word	0x000028fd
    2b54:	0000104d 	.word	0x0000104d
    2b58:	0000309f 	.word	0x0000309f
    2b5c:	200002bc 	.word	0x200002bc

00002b60 <printBuffer>:
void printBuffer(uint8_t length) {
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	46ce      	mov	lr, r9
    2b64:	b500      	push	{lr}
    2b66:	b082      	sub	sp, #8
    2b68:	0007      	movs	r7, r0
    printf("\r\ntxAllowed: %i", txAllowed);
    2b6a:	4b17      	ldr	r3, [pc, #92]	; (2bc8 <printBuffer+0x68>)
    2b6c:	7e99      	ldrb	r1, [r3, #26]
    2b6e:	4817      	ldr	r0, [pc, #92]	; (2bcc <printBuffer+0x6c>)
    2b70:	4c17      	ldr	r4, [pc, #92]	; (2bd0 <printBuffer+0x70>)
    2b72:	47a0      	blx	r4
    printf("\r\nrxheadIndex: %i\t\t\trxheadIndex: %i\r\n", rxRingBuffer.m_headIndex, txRingBuffer.m_headIndex);
    2b74:	4e17      	ldr	r6, [pc, #92]	; (2bd4 <printBuffer+0x74>)
    2b76:	8ab2      	ldrh	r2, [r6, #20]
    2b78:	4d17      	ldr	r5, [pc, #92]	; (2bd8 <printBuffer+0x78>)
    2b7a:	8929      	ldrh	r1, [r5, #8]
    2b7c:	4817      	ldr	r0, [pc, #92]	; (2bdc <printBuffer+0x7c>)
    2b7e:	47a0      	blx	r4
    printf("rxtailIndex: %i\t\t\ttxtailIndex: %i\r\n", rxRingBuffer.m_tailIndex, txRingBuffer.m_tailIndex);
    2b80:	8af2      	ldrh	r2, [r6, #22]
    2b82:	8969      	ldrh	r1, [r5, #10]
    2b84:	4816      	ldr	r0, [pc, #88]	; (2be0 <printBuffer+0x80>)
    2b86:	47a0      	blx	r4
    printf("rxBytesRemaining: %i\t\ttxBytesRemaining %i\r\n", rxRingBuffer.m_bytesRemaining, txRingBuffer.m_bytesRemaining);
    2b88:	8b32      	ldrh	r2, [r6, #24]
    2b8a:	89a9      	ldrh	r1, [r5, #12]
    2b8c:	4815      	ldr	r0, [pc, #84]	; (2be4 <printBuffer+0x84>)
    2b8e:	47a0      	blx	r4
    for (uint8_t i = 0; i < length; i++) {
    2b90:	2f00      	cmp	r7, #0
    2b92:	d015      	beq.n	2bc0 <printBuffer+0x60>
    2b94:	3f01      	subs	r7, #1
    2b96:	b2ff      	uxtb	r7, r7
    2b98:	3707      	adds	r7, #7
    2b9a:	2406      	movs	r4, #6
        printf("rxData[%02i]: 0x%02X\t\ttxData[%02i]: 0x%02X\r\n", i, rxRingBuffer.buffer[i], i, txRingBuffer.buffer[i]);
    2b9c:	4b0e      	ldr	r3, [pc, #56]	; (2bd8 <printBuffer+0x78>)
    2b9e:	2208      	movs	r2, #8
    2ba0:	4691      	mov	r9, r2
    2ba2:	4499      	add	r9, r3
    2ba4:	4e0b      	ldr	r6, [pc, #44]	; (2bd4 <printBuffer+0x74>)
    2ba6:	3614      	adds	r6, #20
    2ba8:	1fa1      	subs	r1, r4, #6
    2baa:	464b      	mov	r3, r9
    2bac:	5ce2      	ldrb	r2, [r4, r3]
    2bae:	5da3      	ldrb	r3, [r4, r6]
    2bb0:	9300      	str	r3, [sp, #0]
    2bb2:	000b      	movs	r3, r1
    2bb4:	480c      	ldr	r0, [pc, #48]	; (2be8 <printBuffer+0x88>)
    2bb6:	4d06      	ldr	r5, [pc, #24]	; (2bd0 <printBuffer+0x70>)
    2bb8:	47a8      	blx	r5
    2bba:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < length; i++) {
    2bbc:	42bc      	cmp	r4, r7
    2bbe:	d1f3      	bne.n	2ba8 <printBuffer+0x48>
}
    2bc0:	b002      	add	sp, #8
    2bc2:	bc04      	pop	{r2}
    2bc4:	4691      	mov	r9, r2
    2bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bc8:	2000033c 	.word	0x2000033c
    2bcc:	00007b90 	.word	0x00007b90
    2bd0:	00003991 	.word	0x00003991
    2bd4:	200002bc 	.word	0x200002bc
    2bd8:	2000023c 	.word	0x2000023c
    2bdc:	00007ba0 	.word	0x00007ba0
    2be0:	00007bc8 	.word	0x00007bc8
    2be4:	00007bec 	.word	0x00007bec
    2be8:	00007c18 	.word	0x00007c18

00002bec <processData>:
 *  /param  packet      Packet to respond to. Contents are taken from this packet to be resent back to
 *                      master to correct data returning
 *  /param  data        Raw data going back to master
 *
 */
bool processData(void) {
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	46c6      	mov	lr, r8
    2bf0:	b500      	push	{lr}
    2bf2:	b086      	sub	sp, #24
    printBuffer(30);
    2bf4:	201e      	movs	r0, #30
    2bf6:	4bb1      	ldr	r3, [pc, #708]	; (2ebc <processData+0x2d0>)
    2bf8:	4798      	blx	r3
    
    commPacket* rxPkt = &rxPacket;
    uint8_t txData[2] = {0};
    2bfa:	2200      	movs	r2, #0
    2bfc:	ab05      	add	r3, sp, #20
    2bfe:	801a      	strh	r2, [r3, #0]
    bool decodeStatus = getPacketFromStream(&rxRingBuffer, rxPkt);
    2c00:	49af      	ldr	r1, [pc, #700]	; (2ec0 <processData+0x2d4>)
    2c02:	311c      	adds	r1, #28
    2c04:	48af      	ldr	r0, [pc, #700]	; (2ec4 <processData+0x2d8>)
    2c06:	3008      	adds	r0, #8
    2c08:	4baf      	ldr	r3, [pc, #700]	; (2ec8 <processData+0x2dc>)
    2c0a:	4798      	blx	r3
    2c0c:	1e07      	subs	r7, r0, #0

    if (decodeStatus == NOPACKET) {
    2c0e:	d100      	bne.n	2c12 <processData+0x26>
    2c10:	e09a      	b.n	2d48 <processData+0x15c>
        /* Do nothing */
        return 0;
    }
    else {
                      
        uint8_t hwInterface = rxPkt->header & MASK_INT;
    2c12:	4bab      	ldr	r3, [pc, #684]	; (2ec0 <processData+0x2d4>)
    2c14:	7f1a      	ldrb	r2, [r3, #28]
    2c16:	2303      	movs	r3, #3
    2c18:	4013      	ands	r3, r2
        uint8_t hwLength = ((rxPkt->header & MASK_BITS) == 0) ? 8 : 16;
    2c1a:	2408      	movs	r4, #8
    2c1c:	0711      	lsls	r1, r2, #28
    2c1e:	d500      	bpl.n	2c22 <processData+0x36>
    2c20:	3408      	adds	r4, #8
        uint16_t rawAdcVal = 0;
        
        /* Handle get command */
        if ((rxPkt->header & MASK_RW) == MASK_RW) {
    2c22:	0752      	lsls	r2, r2, #29
    2c24:	d400      	bmi.n	2c28 <processData+0x3c>
    2c26:	e0bd      	b.n	2da4 <processData+0x1b8>
            if (hwInterface == SPI_COM) {  
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d145      	bne.n	2cb8 <processData+0xcc>
                /* Handle SPI transactions */
                if (rxPkt->regAddr == REG_IR_CTRL) {
    2c2c:	4ba4      	ldr	r3, [pc, #656]	; (2ec0 <processData+0x2d4>)
    2c2e:	7f9b      	ldrb	r3, [r3, #30]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d013      	beq.n	2c5c <processData+0x70>
                    txData[0] = gpio_get_pin_level(IR_CTRL);
                    txData[1] = 0x00;
                }
                else if ((rxPkt->regAddr == REG_IR_VAL) || (rxPkt->regAddr == REG_ANALOG0) || (rxPkt->regAddr == REG_ANALOG1)) {
    2c34:	1e5a      	subs	r2, r3, #1
    2c36:	2a02      	cmp	r2, #2
    2c38:	d835      	bhi.n	2ca6 <processData+0xba>
                    if (rxPkt->regAddr == REG_IR_VAL) {
    2c3a:	2b01      	cmp	r3, #1
    2c3c:	d027      	beq.n	2c8e <processData+0xa2>
                        adcSetChannel(IR);
                    }
                    else if (rxPkt->regAddr == REG_ANALOG0) {
    2c3e:	2b02      	cmp	r3, #2
    2c40:	d029      	beq.n	2c96 <processData+0xaa>
                        adcSetChannel(ANALOG0);
                    }
                    else if (rxPkt->regAddr == REG_ANALOG1) {
    2c42:	2b03      	cmp	r3, #3
    2c44:	d02b      	beq.n	2c9e <processData+0xb2>
                        adcSetChannel(ANALOG1);
                    }
                    while(!getConversionStatus());
    2c46:	4ca1      	ldr	r4, [pc, #644]	; (2ecc <processData+0x2e0>)
    2c48:	47a0      	blx	r4
    2c4a:	2800      	cmp	r0, #0
    2c4c:	d0fc      	beq.n	2c48 <processData+0x5c>
                    rawAdcVal = getRawAdcVal();     
    2c4e:	4ba0      	ldr	r3, [pc, #640]	; (2ed0 <processData+0x2e4>)
    2c50:	4798      	blx	r3
                    txData[0] = (rawAdcVal & 0xFF00) >> 8;
    2c52:	ab05      	add	r3, sp, #20
    2c54:	0a02      	lsrs	r2, r0, #8
    2c56:	701a      	strb	r2, [r3, #0]
                    txData[1] = rawAdcVal & 0xFF;
    2c58:	7058      	strb	r0, [r3, #1]
    2c5a:	e03f      	b.n	2cdc <processData+0xf0>
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2c5c:	a802      	add	r0, sp, #8
    2c5e:	4b9d      	ldr	r3, [pc, #628]	; (2ed4 <processData+0x2e8>)
    2c60:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c62:	23c0      	movs	r3, #192	; 0xc0
    2c64:	05db      	lsls	r3, r3, #23
    2c66:	2280      	movs	r2, #128	; 0x80
    2c68:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c6a:	3220      	adds	r2, #32
    2c6c:	499a      	ldr	r1, [pc, #616]	; (2ed8 <processData+0x2ec>)
    2c6e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c70:	2190      	movs	r1, #144	; 0x90
    2c72:	585b      	ldr	r3, [r3, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c74:	4053      	eors	r3, r2
    2c76:	401c      	ands	r4, r3
    2c78:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2c7a:	a802      	add	r0, sp, #8
    2c7c:	4b97      	ldr	r3, [pc, #604]	; (2edc <processData+0x2f0>)
    2c7e:	4798      	blx	r3
                    txData[0] = gpio_get_pin_level(IR_CTRL);
    2c80:	ab05      	add	r3, sp, #20
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2c82:	06e4      	lsls	r4, r4, #27
    2c84:	0fe4      	lsrs	r4, r4, #31
    2c86:	701c      	strb	r4, [r3, #0]
                    txData[1] = 0x00;
    2c88:	2200      	movs	r2, #0
    2c8a:	705a      	strb	r2, [r3, #1]
    2c8c:	e026      	b.n	2cdc <processData+0xf0>
                        adcSetChannel(IR);
    2c8e:	2000      	movs	r0, #0
    2c90:	4b93      	ldr	r3, [pc, #588]	; (2ee0 <processData+0x2f4>)
    2c92:	4798      	blx	r3
    2c94:	e7d7      	b.n	2c46 <processData+0x5a>
                        adcSetChannel(ANALOG0);
    2c96:	2001      	movs	r0, #1
    2c98:	4b91      	ldr	r3, [pc, #580]	; (2ee0 <processData+0x2f4>)
    2c9a:	4798      	blx	r3
    2c9c:	e7d3      	b.n	2c46 <processData+0x5a>
                        adcSetChannel(ANALOG1);
    2c9e:	2006      	movs	r0, #6
    2ca0:	4b8f      	ldr	r3, [pc, #572]	; (2ee0 <processData+0x2f4>)
    2ca2:	4798      	blx	r3
    2ca4:	e7cf      	b.n	2c46 <processData+0x5a>
                }
                else {
                    printf("Z-Board register invalid\r\n");
    2ca6:	488f      	ldr	r0, [pc, #572]	; (2ee4 <processData+0x2f8>)
    2ca8:	4b8f      	ldr	r3, [pc, #572]	; (2ee8 <processData+0x2fc>)
    2caa:	4798      	blx	r3
                    txData[0] = REG_INVALID;
    2cac:	ab05      	add	r3, sp, #20
    2cae:	22dd      	movs	r2, #221	; 0xdd
    2cb0:	701a      	strb	r2, [r3, #0]
                    txData[1] = 0x00;
    2cb2:	2200      	movs	r2, #0
    2cb4:	705a      	strb	r2, [r3, #1]
    2cb6:	e011      	b.n	2cdc <processData+0xf0>
                }                
            }
            else if ((hwInterface == I2C0_COM) || (hwInterface == I2C1_COM) || (hwInterface == I2C2_COM)) {
    2cb8:	1e5a      	subs	r2, r3, #1
    2cba:	2a02      	cmp	r2, #2
    2cbc:	d869      	bhi.n	2d92 <processData+0x1a6>
                /* Determine I2C interface to pull from */
                if (hwInterface == I2C0_COM) {
    2cbe:	2b01      	cmp	r3, #1
    2cc0:	d047      	beq.n	2d52 <processData+0x166>
                    /* Handle I2C0 transactions */
                    i2c_m_sync_set_slaveaddr(&I2C_0, rxPkt->devAddr, I2C_M_SEVEN);
                }
                else if (hwInterface == I2C1_COM) {
    2cc2:	2b02      	cmp	r3, #2
    2cc4:	d04d      	beq.n	2d62 <processData+0x176>
                    /* Handle I2C1 transactions */
                    i2c_m_sync_set_slaveaddr(&I2C_1, rxPkt->devAddr, I2C_M_SEVEN);
                }
                else if (hwInterface == I2C2_COM) {
    2cc6:	2b03      	cmp	r3, #3
    2cc8:	d053      	beq.n	2d72 <processData+0x186>
                    /* Handle I2C2 transactions */
                    i2c_m_sync_set_slaveaddr(&I2C_2, rxPkt->devAddr, I2C_M_SEVEN);
                }
            
                /* Return I2C read-back data back on SPI */
                if (hwLength == 8) {
    2cca:	2c08      	cmp	r4, #8
    2ccc:	d059      	beq.n	2d82 <processData+0x196>
                    i2c_m_sync_cmd_read(&I2C_0, rxPkt->regAddr, txData, 1);
                }
                else {
                    i2c_m_sync_cmd_read(&I2C_0, rxPkt->regAddr, txData, 2);
    2cce:	4b7c      	ldr	r3, [pc, #496]	; (2ec0 <processData+0x2d4>)
    2cd0:	7f99      	ldrb	r1, [r3, #30]
    2cd2:	2302      	movs	r3, #2
    2cd4:	aa05      	add	r2, sp, #20
    2cd6:	4885      	ldr	r0, [pc, #532]	; (2eec <processData+0x300>)
    2cd8:	4c85      	ldr	r4, [pc, #532]	; (2ef0 <processData+0x304>)
    2cda:	47a0      	blx	r4
    uint8_t byteValue = STROFFRAME;
    2cdc:	466b      	mov	r3, sp
    2cde:	1dde      	adds	r6, r3, #7
    2ce0:	237e      	movs	r3, #126	; 0x7e
    2ce2:	7033      	strb	r3, [r6, #0]
    writeToRingBuffer(&txRingBuffer, &byteValue, 1);
    2ce4:	4c83      	ldr	r4, [pc, #524]	; (2ef4 <processData+0x308>)
    2ce6:	3414      	adds	r4, #20
    2ce8:	2201      	movs	r2, #1
    2cea:	0031      	movs	r1, r6
    2cec:	0020      	movs	r0, r4
    2cee:	4d82      	ldr	r5, [pc, #520]	; (2ef8 <processData+0x30c>)
    2cf0:	47a8      	blx	r5
    writeToRingBuffer(&txRingBuffer, &(packet->header), 1);
    2cf2:	4b73      	ldr	r3, [pc, #460]	; (2ec0 <processData+0x2d4>)
    2cf4:	4698      	mov	r8, r3
    2cf6:	0019      	movs	r1, r3
    2cf8:	311c      	adds	r1, #28
    2cfa:	2201      	movs	r2, #1
    2cfc:	0020      	movs	r0, r4
    2cfe:	47a8      	blx	r5
    writeToRingBuffer(&txRingBuffer, &(packet->devAddr), 1);
    2d00:	4641      	mov	r1, r8
    2d02:	311d      	adds	r1, #29
    2d04:	2201      	movs	r2, #1
    2d06:	0020      	movs	r0, r4
    2d08:	47a8      	blx	r5
    writeToRingBuffer(&txRingBuffer, &(packet->regAddr), 1);
    2d0a:	4641      	mov	r1, r8
    2d0c:	311e      	adds	r1, #30
    2d0e:	2201      	movs	r2, #1
    2d10:	0020      	movs	r0, r4
    2d12:	47a8      	blx	r5
    writeToRingBuffer(&txRingBuffer, data, 1);
    2d14:	2201      	movs	r2, #1
    2d16:	a905      	add	r1, sp, #20
    2d18:	0020      	movs	r0, r4
    2d1a:	47a8      	blx	r5
    writeToRingBuffer(&txRingBuffer, data + 1, 1);
    2d1c:	2201      	movs	r2, #1
    2d1e:	2115      	movs	r1, #21
    2d20:	4469      	add	r1, sp
    2d22:	0020      	movs	r0, r4
    2d24:	47a8      	blx	r5
    byteValue = ENDOFFRAME;
    2d26:	237d      	movs	r3, #125	; 0x7d
    2d28:	7033      	strb	r3, [r6, #0]
    writeToRingBuffer(&txRingBuffer, &byteValue, 1);
    2d2a:	2201      	movs	r2, #1
    2d2c:	0031      	movs	r1, r6
    2d2e:	0020      	movs	r0, r4
    2d30:	47a8      	blx	r5
    if (readFromRingBuffer(&txRingBuffer, arrayValue, 7) != 0) {
    2d32:	2207      	movs	r2, #7
    2d34:	a903      	add	r1, sp, #12
    2d36:	0020      	movs	r0, r4
    2d38:	4b70      	ldr	r3, [pc, #448]	; (2efc <processData+0x310>)
    2d3a:	4798      	blx	r3
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d000      	beq.n	2d42 <processData+0x156>
    2d40:	e0b5      	b.n	2eae <processData+0x2c2>
    txAllowed = true;
    2d42:	2201      	movs	r2, #1
    2d44:	4b5e      	ldr	r3, [pc, #376]	; (2ec0 <processData+0x2d4>)
    2d46:	769a      	strb	r2, [r3, #26]
            }
        }   
        encodeResults(rxPkt, txData);             
    }
    return 1;
    2d48:	0038      	movs	r0, r7
    2d4a:	b006      	add	sp, #24
    2d4c:	bc04      	pop	{r2}
    2d4e:	4690      	mov	r8, r2
    2d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    i2c_m_sync_set_slaveaddr(&I2C_0, rxPkt->devAddr, I2C_M_SEVEN);
    2d52:	4b5b      	ldr	r3, [pc, #364]	; (2ec0 <processData+0x2d4>)
    2d54:	7f59      	ldrb	r1, [r3, #29]
    2d56:	2280      	movs	r2, #128	; 0x80
    2d58:	0112      	lsls	r2, r2, #4
    2d5a:	4864      	ldr	r0, [pc, #400]	; (2eec <processData+0x300>)
    2d5c:	4b68      	ldr	r3, [pc, #416]	; (2f00 <processData+0x314>)
    2d5e:	4798      	blx	r3
    2d60:	e7b3      	b.n	2cca <processData+0xde>
                    i2c_m_sync_set_slaveaddr(&I2C_1, rxPkt->devAddr, I2C_M_SEVEN);
    2d62:	4b57      	ldr	r3, [pc, #348]	; (2ec0 <processData+0x2d4>)
    2d64:	7f59      	ldrb	r1, [r3, #29]
    2d66:	2280      	movs	r2, #128	; 0x80
    2d68:	0112      	lsls	r2, r2, #4
    2d6a:	4866      	ldr	r0, [pc, #408]	; (2f04 <processData+0x318>)
    2d6c:	4b64      	ldr	r3, [pc, #400]	; (2f00 <processData+0x314>)
    2d6e:	4798      	blx	r3
    2d70:	e7ab      	b.n	2cca <processData+0xde>
                    i2c_m_sync_set_slaveaddr(&I2C_2, rxPkt->devAddr, I2C_M_SEVEN);
    2d72:	4b53      	ldr	r3, [pc, #332]	; (2ec0 <processData+0x2d4>)
    2d74:	7f59      	ldrb	r1, [r3, #29]
    2d76:	2280      	movs	r2, #128	; 0x80
    2d78:	0112      	lsls	r2, r2, #4
    2d7a:	4863      	ldr	r0, [pc, #396]	; (2f08 <processData+0x31c>)
    2d7c:	4b60      	ldr	r3, [pc, #384]	; (2f00 <processData+0x314>)
    2d7e:	4798      	blx	r3
    2d80:	e7a3      	b.n	2cca <processData+0xde>
                    i2c_m_sync_cmd_read(&I2C_0, rxPkt->regAddr, txData, 1);
    2d82:	4b4f      	ldr	r3, [pc, #316]	; (2ec0 <processData+0x2d4>)
    2d84:	7f99      	ldrb	r1, [r3, #30]
    2d86:	2301      	movs	r3, #1
    2d88:	aa05      	add	r2, sp, #20
    2d8a:	4858      	ldr	r0, [pc, #352]	; (2eec <processData+0x300>)
    2d8c:	4c58      	ldr	r4, [pc, #352]	; (2ef0 <processData+0x304>)
    2d8e:	47a0      	blx	r4
    2d90:	e7a4      	b.n	2cdc <processData+0xf0>
                printf("Hardware interface not valid\r\n");
    2d92:	485e      	ldr	r0, [pc, #376]	; (2f0c <processData+0x320>)
    2d94:	4b54      	ldr	r3, [pc, #336]	; (2ee8 <processData+0x2fc>)
    2d96:	4798      	blx	r3
                txData[0] = INT_INVALID;
    2d98:	ab05      	add	r3, sp, #20
    2d9a:	22cc      	movs	r2, #204	; 0xcc
    2d9c:	701a      	strb	r2, [r3, #0]
                txData[1] = 0x00;                
    2d9e:	2200      	movs	r2, #0
    2da0:	705a      	strb	r2, [r3, #1]
    2da2:	e79b      	b.n	2cdc <processData+0xf0>
            if (hwInterface == SPI_COM) {
    2da4:	2b00      	cmp	r3, #0
    2da6:	d11c      	bne.n	2de2 <processData+0x1f6>
                if (rxPkt->regAddr == REG_IR_CTRL) {
    2da8:	4b45      	ldr	r3, [pc, #276]	; (2ec0 <processData+0x2d4>)
    2daa:	7f9b      	ldrb	r3, [r3, #30]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d10f      	bne.n	2dd0 <processData+0x1e4>
                    if (rxPkt->data[0] == 0x01) {
    2db0:	4b43      	ldr	r3, [pc, #268]	; (2ec0 <processData+0x2d4>)
    2db2:	7fdb      	ldrb	r3, [r3, #31]
    2db4:	2b01      	cmp	r3, #1
    2db6:	d005      	beq.n	2dc4 <processData+0x1d8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2db8:	2110      	movs	r1, #16
    2dba:	2394      	movs	r3, #148	; 0x94
    2dbc:	22c0      	movs	r2, #192	; 0xc0
    2dbe:	05d2      	lsls	r2, r2, #23
    2dc0:	50d1      	str	r1, [r2, r3]
    2dc2:	e78b      	b.n	2cdc <processData+0xf0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2dc4:	2110      	movs	r1, #16
    2dc6:	3397      	adds	r3, #151	; 0x97
    2dc8:	22c0      	movs	r2, #192	; 0xc0
    2dca:	05d2      	lsls	r2, r2, #23
    2dcc:	50d1      	str	r1, [r2, r3]
    2dce:	e785      	b.n	2cdc <processData+0xf0>
                    printf("Z-Board register invalid\r\n");
    2dd0:	4844      	ldr	r0, [pc, #272]	; (2ee4 <processData+0x2f8>)
    2dd2:	4b45      	ldr	r3, [pc, #276]	; (2ee8 <processData+0x2fc>)
    2dd4:	4798      	blx	r3
                    txData[0] = REG_INVALID;
    2dd6:	ab05      	add	r3, sp, #20
    2dd8:	22dd      	movs	r2, #221	; 0xdd
    2dda:	701a      	strb	r2, [r3, #0]
                    txData[1] = 0x00;
    2ddc:	2200      	movs	r2, #0
    2dde:	705a      	strb	r2, [r3, #1]
    2de0:	e77c      	b.n	2cdc <processData+0xf0>
            else if ((hwInterface == I2C0_COM) || (hwInterface == I2C1_COM) || (hwInterface == I2C2_COM)) {
    2de2:	1e5a      	subs	r2, r3, #1
    2de4:	2a02      	cmp	r2, #2
    2de6:	d859      	bhi.n	2e9c <processData+0x2b0>
                if (hwInterface == I2C0_COM) {
    2de8:	2b01      	cmp	r3, #1
    2dea:	d019      	beq.n	2e20 <processData+0x234>
                else if (hwInterface == I2C1_COM) {
    2dec:	2b02      	cmp	r3, #2
    2dee:	d01f      	beq.n	2e30 <processData+0x244>
                else if (hwInterface == I2C2_COM) {
    2df0:	2b03      	cmp	r3, #3
    2df2:	d025      	beq.n	2e40 <processData+0x254>
                uint8_t writeData[3] = {rxPkt->regAddr, rxPkt->data[0], rxPkt->data[1]};
    2df4:	ab03      	add	r3, sp, #12
    2df6:	4a32      	ldr	r2, [pc, #200]	; (2ec0 <processData+0x2d4>)
    2df8:	7f91      	ldrb	r1, [r2, #30]
    2dfa:	7019      	strb	r1, [r3, #0]
    2dfc:	7fd1      	ldrb	r1, [r2, #31]
    2dfe:	7059      	strb	r1, [r3, #1]
    2e00:	2120      	movs	r1, #32
    2e02:	5c52      	ldrb	r2, [r2, r1]
    2e04:	709a      	strb	r2, [r3, #2]
                if (hwLength == 8) {
    2e06:	2c08      	cmp	r4, #8
    2e08:	d022      	beq.n	2e50 <processData+0x264>
                else if (hwLength == 16) {
    2e0a:	2c10      	cmp	r4, #16
    2e0c:	d033      	beq.n	2e76 <processData+0x28a>
                    printf("8/16 bit data length invalid\r\n");                    
    2e0e:	4840      	ldr	r0, [pc, #256]	; (2f10 <processData+0x324>)
    2e10:	4b35      	ldr	r3, [pc, #212]	; (2ee8 <processData+0x2fc>)
    2e12:	4798      	blx	r3
                    txData[0] = LEN_INVALID;
    2e14:	ab05      	add	r3, sp, #20
    2e16:	22ee      	movs	r2, #238	; 0xee
    2e18:	701a      	strb	r2, [r3, #0]
                    txData[1] = 0x00;
    2e1a:	2200      	movs	r2, #0
    2e1c:	705a      	strb	r2, [r3, #1]
    2e1e:	e75d      	b.n	2cdc <processData+0xf0>
                    i2c_m_sync_set_slaveaddr(&I2C_0, rxPkt->devAddr, I2C_M_SEVEN);
    2e20:	4b27      	ldr	r3, [pc, #156]	; (2ec0 <processData+0x2d4>)
    2e22:	7f59      	ldrb	r1, [r3, #29]
    2e24:	2280      	movs	r2, #128	; 0x80
    2e26:	0112      	lsls	r2, r2, #4
    2e28:	4830      	ldr	r0, [pc, #192]	; (2eec <processData+0x300>)
    2e2a:	4b35      	ldr	r3, [pc, #212]	; (2f00 <processData+0x314>)
    2e2c:	4798      	blx	r3
    2e2e:	e7e1      	b.n	2df4 <processData+0x208>
                    i2c_m_sync_set_slaveaddr(&I2C_1, rxPkt->devAddr, I2C_M_SEVEN);
    2e30:	4b23      	ldr	r3, [pc, #140]	; (2ec0 <processData+0x2d4>)
    2e32:	7f59      	ldrb	r1, [r3, #29]
    2e34:	2280      	movs	r2, #128	; 0x80
    2e36:	0112      	lsls	r2, r2, #4
    2e38:	4832      	ldr	r0, [pc, #200]	; (2f04 <processData+0x318>)
    2e3a:	4b31      	ldr	r3, [pc, #196]	; (2f00 <processData+0x314>)
    2e3c:	4798      	blx	r3
    2e3e:	e7d9      	b.n	2df4 <processData+0x208>
                    i2c_m_sync_set_slaveaddr(&I2C_2, rxPkt->devAddr, I2C_M_SEVEN);
    2e40:	4b1f      	ldr	r3, [pc, #124]	; (2ec0 <processData+0x2d4>)
    2e42:	7f59      	ldrb	r1, [r3, #29]
    2e44:	2280      	movs	r2, #128	; 0x80
    2e46:	0112      	lsls	r2, r2, #4
    2e48:	482f      	ldr	r0, [pc, #188]	; (2f08 <processData+0x31c>)
    2e4a:	4b2d      	ldr	r3, [pc, #180]	; (2f00 <processData+0x314>)
    2e4c:	4798      	blx	r3
    2e4e:	e7d1      	b.n	2df4 <processData+0x208>
                    if (i2c_m_sync_cmd_write_m(&I2C_0, writeData, 1) == 0) {
    2e50:	2201      	movs	r2, #1
    2e52:	0019      	movs	r1, r3
    2e54:	4825      	ldr	r0, [pc, #148]	; (2eec <processData+0x300>)
    2e56:	4b2f      	ldr	r3, [pc, #188]	; (2f14 <processData+0x328>)
    2e58:	4798      	blx	r3
    2e5a:	2800      	cmp	r0, #0
    2e5c:	d105      	bne.n	2e6a <processData+0x27e>
                        txData[0] = ACK;
    2e5e:	ab05      	add	r3, sp, #20
    2e60:	22aa      	movs	r2, #170	; 0xaa
    2e62:	701a      	strb	r2, [r3, #0]
                        txData[1] = 0x00;
    2e64:	2200      	movs	r2, #0
    2e66:	705a      	strb	r2, [r3, #1]
    2e68:	e738      	b.n	2cdc <processData+0xf0>
                        txData[0] = NACK;
    2e6a:	ab05      	add	r3, sp, #20
    2e6c:	22bb      	movs	r2, #187	; 0xbb
    2e6e:	701a      	strb	r2, [r3, #0]
                        txData[1] = 0x00;                        
    2e70:	2200      	movs	r2, #0
    2e72:	705a      	strb	r2, [r3, #1]
    2e74:	e732      	b.n	2cdc <processData+0xf0>
                    if (i2c_m_sync_cmd_write_m(&I2C_0, writeData, 2) == 0) {
    2e76:	2202      	movs	r2, #2
    2e78:	a903      	add	r1, sp, #12
    2e7a:	481c      	ldr	r0, [pc, #112]	; (2eec <processData+0x300>)
    2e7c:	4b25      	ldr	r3, [pc, #148]	; (2f14 <processData+0x328>)
    2e7e:	4798      	blx	r3
    2e80:	2800      	cmp	r0, #0
    2e82:	d105      	bne.n	2e90 <processData+0x2a4>
                        txData[0] = ACK;
    2e84:	ab05      	add	r3, sp, #20
    2e86:	22aa      	movs	r2, #170	; 0xaa
    2e88:	701a      	strb	r2, [r3, #0]
                        txData[1] = 0x00;                        
    2e8a:	2200      	movs	r2, #0
    2e8c:	705a      	strb	r2, [r3, #1]
    2e8e:	e725      	b.n	2cdc <processData+0xf0>
                        txData[0] = NACK;
    2e90:	ab05      	add	r3, sp, #20
    2e92:	22bb      	movs	r2, #187	; 0xbb
    2e94:	701a      	strb	r2, [r3, #0]
                        txData[1] = 0x00;                         
    2e96:	2200      	movs	r2, #0
    2e98:	705a      	strb	r2, [r3, #1]
    2e9a:	e71f      	b.n	2cdc <processData+0xf0>
                printf("Hardware interface not valid\r\n");
    2e9c:	481b      	ldr	r0, [pc, #108]	; (2f0c <processData+0x320>)
    2e9e:	4b12      	ldr	r3, [pc, #72]	; (2ee8 <processData+0x2fc>)
    2ea0:	4798      	blx	r3
                txData[0] = INT_INVALID;
    2ea2:	ab05      	add	r3, sp, #20
    2ea4:	22cc      	movs	r2, #204	; 0xcc
    2ea6:	701a      	strb	r2, [r3, #0]
                txData[1] = 0x00;                
    2ea8:	2200      	movs	r2, #0
    2eaa:	705a      	strb	r2, [r3, #1]
    2eac:	e716      	b.n	2cdc <processData+0xf0>
        io_write(io, arrayValue, 7);
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <processData+0x2d8>)
    2eb0:	6858      	ldr	r0, [r3, #4]
    2eb2:	2207      	movs	r2, #7
    2eb4:	a903      	add	r1, sp, #12
    2eb6:	4b18      	ldr	r3, [pc, #96]	; (2f18 <processData+0x32c>)
    2eb8:	4798      	blx	r3
    2eba:	e742      	b.n	2d42 <processData+0x156>
    2ebc:	00002b61 	.word	0x00002b61
    2ec0:	2000033c 	.word	0x2000033c
    2ec4:	2000023c 	.word	0x2000023c
    2ec8:	000029f5 	.word	0x000029f5
    2ecc:	000027dd 	.word	0x000027dd
    2ed0:	000027d1 	.word	0x000027d1
    2ed4:	00000ba5 	.word	0x00000ba5
    2ed8:	41004400 	.word	0x41004400
    2edc:	00000bb3 	.word	0x00000bb3
    2ee0:	000027e9 	.word	0x000027e9
    2ee4:	00007c48 	.word	0x00007c48
    2ee8:	00003a85 	.word	0x00003a85
    2eec:	20000468 	.word	0x20000468
    2ef0:	00000cc9 	.word	0x00000cc9
    2ef4:	200002bc 	.word	0x200002bc
    2ef8:	00002859 	.word	0x00002859
    2efc:	00002939 	.word	0x00002939
    2f00:	00000c81 	.word	0x00000c81
    2f04:	200003ac 	.word	0x200003ac
    2f08:	20000380 	.word	0x20000380
    2f0c:	00007c64 	.word	0x00007c64
    2f10:	00007c84 	.word	0x00007c84
    2f14:	00000c95 	.word	0x00000c95
    2f18:	00000d11 	.word	0x00000d11

00002f1c <TIMER_0_task1_cb>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2f1c:	2104      	movs	r1, #4
    2f1e:	239c      	movs	r3, #156	; 0x9c
    2f20:	22c0      	movs	r2, #192	; 0xc0
    2f22:	05d2      	lsls	r2, r2, #23
    2f24:	50d1      	str	r1, [r2, r3]
#include "dv_timer.h"

static void TIMER_0_task1_cb(const struct timer_task *const timer_task) 
{
    gpio_toggle_pin_level(GLED_B);    
}    
    2f26:	4770      	bx	lr

00002f28 <initTimer>:
static struct timer_task TIMER_0_task1;

/*!
 * /brief   Initialize 1 second timer
 */
void initTimer(void) {
    2f28:	b510      	push	{r4, lr}
    TIMER_0_task1.interval = 1000;
    2f2a:	4908      	ldr	r1, [pc, #32]	; (2f4c <initTimer+0x24>)
    2f2c:	23fa      	movs	r3, #250	; 0xfa
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	608b      	str	r3, [r1, #8]
    TIMER_0_task1.cb       = TIMER_0_task1_cb;
    2f32:	4b07      	ldr	r3, [pc, #28]	; (2f50 <initTimer+0x28>)
    2f34:	60cb      	str	r3, [r1, #12]
    TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    2f36:	2301      	movs	r3, #1
    2f38:	740b      	strb	r3, [r1, #16]

    timer_add_task(&TIMER_0, &TIMER_0_task1);
    2f3a:	4c06      	ldr	r4, [pc, #24]	; (2f54 <initTimer+0x2c>)
    2f3c:	0020      	movs	r0, r4
    2f3e:	4b06      	ldr	r3, [pc, #24]	; (2f58 <initTimer+0x30>)
    2f40:	4798      	blx	r3
    timer_start(&TIMER_0);
    2f42:	0020      	movs	r0, r4
    2f44:	4b05      	ldr	r3, [pc, #20]	; (2f5c <initTimer+0x34>)
    2f46:	4798      	blx	r3
    2f48:	bd10      	pop	{r4, pc}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	20000360 	.word	0x20000360
    2f50:	00002f1d 	.word	0x00002f1d
    2f54:	20000488 	.word	0x20000488
    2f58:	000012b9 	.word	0x000012b9
    2f5c:	0000127d 	.word	0x0000127d

00002f60 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2f60:	b510      	push	{r4, lr}
    2f62:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    2f64:	2800      	cmp	r0, #0
    2f66:	d109      	bne.n	2f7c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2f68:	0011      	movs	r1, r2
    2f6a:	0018      	movs	r0, r3
    2f6c:	4b05      	ldr	r3, [pc, #20]	; (2f84 <_read+0x24>)
    2f6e:	4798      	blx	r3
    2f70:	2800      	cmp	r0, #0
    2f72:	db00      	blt.n	2f76 <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    2f74:	bd10      	pop	{r4, pc}
    2f76:	2001      	movs	r0, #1
    2f78:	4240      	negs	r0, r0
    2f7a:	e7fb      	b.n	2f74 <_read+0x14>
		return -1;
    2f7c:	2001      	movs	r0, #1
    2f7e:	4240      	negs	r0, r0
    2f80:	e7f8      	b.n	2f74 <_read+0x14>
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	00002fdd 	.word	0x00002fdd

00002f88 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    2f88:	b510      	push	{r4, lr}
    2f8a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    2f8c:	3801      	subs	r0, #1
    2f8e:	2802      	cmp	r0, #2
    2f90:	d809      	bhi.n	2fa6 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    2f92:	0011      	movs	r1, r2
    2f94:	0018      	movs	r0, r3
    2f96:	4b05      	ldr	r3, [pc, #20]	; (2fac <_write+0x24>)
    2f98:	4798      	blx	r3
    2f9a:	2800      	cmp	r0, #0
    2f9c:	db00      	blt.n	2fa0 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    2f9e:	bd10      	pop	{r4, pc}
    2fa0:	2001      	movs	r0, #1
    2fa2:	4240      	negs	r0, r0
    2fa4:	e7fb      	b.n	2f9e <_write+0x16>
		return -1;
    2fa6:	2001      	movs	r0, #1
    2fa8:	4240      	negs	r0, r0
    2faa:	e7f8      	b.n	2f9e <_write+0x16>
    2fac:	00003001 	.word	0x00003001

00002fb0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2fb0:	b570      	push	{r4, r5, r6, lr}
    2fb2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    2fb4:	4d06      	ldr	r5, [pc, #24]	; (2fd0 <stdio_io_init+0x20>)
    2fb6:	682b      	ldr	r3, [r5, #0]
    2fb8:	6898      	ldr	r0, [r3, #8]
    2fba:	2100      	movs	r1, #0
    2fbc:	4c05      	ldr	r4, [pc, #20]	; (2fd4 <stdio_io_init+0x24>)
    2fbe:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2fc0:	682b      	ldr	r3, [r5, #0]
    2fc2:	6858      	ldr	r0, [r3, #4]
    2fc4:	2100      	movs	r1, #0
    2fc6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    2fc8:	4b03      	ldr	r3, [pc, #12]	; (2fd8 <stdio_io_init+0x28>)
    2fca:	601e      	str	r6, [r3, #0]
}
    2fcc:	bd70      	pop	{r4, r5, r6, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	20000000 	.word	0x20000000
    2fd4:	00003a99 	.word	0x00003a99
    2fd8:	20000374 	.word	0x20000374

00002fdc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2fdc:	b510      	push	{r4, lr}
    2fde:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2fe0:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <stdio_io_read+0x1c>)
    2fe2:	6818      	ldr	r0, [r3, #0]
    2fe4:	2800      	cmp	r0, #0
    2fe6:	d004      	beq.n	2ff2 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2fe8:	b28a      	uxth	r2, r1
    2fea:	0021      	movs	r1, r4
    2fec:	4b03      	ldr	r3, [pc, #12]	; (2ffc <stdio_io_read+0x20>)
    2fee:	4798      	blx	r3
}
    2ff0:	bd10      	pop	{r4, pc}
		return 0;
    2ff2:	2000      	movs	r0, #0
    2ff4:	e7fc      	b.n	2ff0 <stdio_io_read+0x14>
    2ff6:	46c0      	nop			; (mov r8, r8)
    2ff8:	20000374 	.word	0x20000374
    2ffc:	00000d45 	.word	0x00000d45

00003000 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    3000:	b510      	push	{r4, lr}
    3002:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    3004:	4b05      	ldr	r3, [pc, #20]	; (301c <stdio_io_write+0x1c>)
    3006:	6818      	ldr	r0, [r3, #0]
    3008:	2800      	cmp	r0, #0
    300a:	d004      	beq.n	3016 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    300c:	b28a      	uxth	r2, r1
    300e:	0021      	movs	r1, r4
    3010:	4b03      	ldr	r3, [pc, #12]	; (3020 <stdio_io_write+0x20>)
    3012:	4798      	blx	r3
}
    3014:	bd10      	pop	{r4, pc}
		return 0;
    3016:	2000      	movs	r0, #0
    3018:	e7fc      	b.n	3014 <stdio_io_write+0x14>
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	20000374 	.word	0x20000374
    3020:	00000d11 	.word	0x00000d11

00003024 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    3024:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    3026:	4c04      	ldr	r4, [pc, #16]	; (3038 <stdio_redirect_init+0x14>)
    3028:	0020      	movs	r0, r4
    302a:	4b04      	ldr	r3, [pc, #16]	; (303c <stdio_redirect_init+0x18>)
    302c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    302e:	0020      	movs	r0, r4
    3030:	4b03      	ldr	r3, [pc, #12]	; (3040 <stdio_redirect_init+0x1c>)
    3032:	4798      	blx	r3
}
    3034:	bd10      	pop	{r4, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	200003a0 	.word	0x200003a0
    303c:	00001495 	.word	0x00001495
    3040:	00002fb1 	.word	0x00002fb1

00003044 <__libc_init_array>:
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	2600      	movs	r6, #0
    3048:	4d0c      	ldr	r5, [pc, #48]	; (307c <__libc_init_array+0x38>)
    304a:	4c0d      	ldr	r4, [pc, #52]	; (3080 <__libc_init_array+0x3c>)
    304c:	1b64      	subs	r4, r4, r5
    304e:	10a4      	asrs	r4, r4, #2
    3050:	42a6      	cmp	r6, r4
    3052:	d109      	bne.n	3068 <__libc_init_array+0x24>
    3054:	2600      	movs	r6, #0
    3056:	f004 ffc7 	bl	7fe8 <_init>
    305a:	4d0a      	ldr	r5, [pc, #40]	; (3084 <__libc_init_array+0x40>)
    305c:	4c0a      	ldr	r4, [pc, #40]	; (3088 <__libc_init_array+0x44>)
    305e:	1b64      	subs	r4, r4, r5
    3060:	10a4      	asrs	r4, r4, #2
    3062:	42a6      	cmp	r6, r4
    3064:	d105      	bne.n	3072 <__libc_init_array+0x2e>
    3066:	bd70      	pop	{r4, r5, r6, pc}
    3068:	00b3      	lsls	r3, r6, #2
    306a:	58eb      	ldr	r3, [r5, r3]
    306c:	4798      	blx	r3
    306e:	3601      	adds	r6, #1
    3070:	e7ee      	b.n	3050 <__libc_init_array+0xc>
    3072:	00b3      	lsls	r3, r6, #2
    3074:	58eb      	ldr	r3, [r5, r3]
    3076:	4798      	blx	r3
    3078:	3601      	adds	r6, #1
    307a:	e7f2      	b.n	3062 <__libc_init_array+0x1e>
    307c:	00007ff4 	.word	0x00007ff4
    3080:	00007ff4 	.word	0x00007ff4
    3084:	00007ff4 	.word	0x00007ff4
    3088:	00007ff8 	.word	0x00007ff8

0000308c <memcpy>:
    308c:	2300      	movs	r3, #0
    308e:	b510      	push	{r4, lr}
    3090:	429a      	cmp	r2, r3
    3092:	d100      	bne.n	3096 <memcpy+0xa>
    3094:	bd10      	pop	{r4, pc}
    3096:	5ccc      	ldrb	r4, [r1, r3]
    3098:	54c4      	strb	r4, [r0, r3]
    309a:	3301      	adds	r3, #1
    309c:	e7f8      	b.n	3090 <memcpy+0x4>

0000309e <memset>:
    309e:	0003      	movs	r3, r0
    30a0:	1882      	adds	r2, r0, r2
    30a2:	4293      	cmp	r3, r2
    30a4:	d100      	bne.n	30a8 <memset+0xa>
    30a6:	4770      	bx	lr
    30a8:	7019      	strb	r1, [r3, #0]
    30aa:	3301      	adds	r3, #1
    30ac:	e7f9      	b.n	30a2 <memset+0x4>

000030ae <__cvt>:
    30ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    30b0:	b08b      	sub	sp, #44	; 0x2c
    30b2:	0014      	movs	r4, r2
    30b4:	1e1d      	subs	r5, r3, #0
    30b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    30b8:	da53      	bge.n	3162 <__cvt+0xb4>
    30ba:	2480      	movs	r4, #128	; 0x80
    30bc:	0624      	lsls	r4, r4, #24
    30be:	191b      	adds	r3, r3, r4
    30c0:	001d      	movs	r5, r3
    30c2:	0014      	movs	r4, r2
    30c4:	232d      	movs	r3, #45	; 0x2d
    30c6:	700b      	strb	r3, [r1, #0]
    30c8:	2320      	movs	r3, #32
    30ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
    30cc:	2203      	movs	r2, #3
    30ce:	439e      	bics	r6, r3
    30d0:	2e46      	cmp	r6, #70	; 0x46
    30d2:	d007      	beq.n	30e4 <__cvt+0x36>
    30d4:	0033      	movs	r3, r6
    30d6:	3b45      	subs	r3, #69	; 0x45
    30d8:	4259      	negs	r1, r3
    30da:	414b      	adcs	r3, r1
    30dc:	9910      	ldr	r1, [sp, #64]	; 0x40
    30de:	3a01      	subs	r2, #1
    30e0:	18cb      	adds	r3, r1, r3
    30e2:	9310      	str	r3, [sp, #64]	; 0x40
    30e4:	ab09      	add	r3, sp, #36	; 0x24
    30e6:	9304      	str	r3, [sp, #16]
    30e8:	ab08      	add	r3, sp, #32
    30ea:	9303      	str	r3, [sp, #12]
    30ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    30ee:	9200      	str	r2, [sp, #0]
    30f0:	9302      	str	r3, [sp, #8]
    30f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30f4:	0022      	movs	r2, r4
    30f6:	9301      	str	r3, [sp, #4]
    30f8:	002b      	movs	r3, r5
    30fa:	f000 fedb 	bl	3eb4 <_dtoa_r>
    30fe:	0007      	movs	r7, r0
    3100:	2e47      	cmp	r6, #71	; 0x47
    3102:	d102      	bne.n	310a <__cvt+0x5c>
    3104:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3106:	07db      	lsls	r3, r3, #31
    3108:	d524      	bpl.n	3154 <__cvt+0xa6>
    310a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    310c:	18fb      	adds	r3, r7, r3
    310e:	9307      	str	r3, [sp, #28]
    3110:	2e46      	cmp	r6, #70	; 0x46
    3112:	d114      	bne.n	313e <__cvt+0x90>
    3114:	783b      	ldrb	r3, [r7, #0]
    3116:	2b30      	cmp	r3, #48	; 0x30
    3118:	d10c      	bne.n	3134 <__cvt+0x86>
    311a:	2200      	movs	r2, #0
    311c:	2300      	movs	r3, #0
    311e:	0020      	movs	r0, r4
    3120:	0029      	movs	r1, r5
    3122:	f002 fe27 	bl	5d74 <__aeabi_dcmpeq>
    3126:	2800      	cmp	r0, #0
    3128:	d104      	bne.n	3134 <__cvt+0x86>
    312a:	2301      	movs	r3, #1
    312c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    312e:	1a9b      	subs	r3, r3, r2
    3130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3132:	6013      	str	r3, [r2, #0]
    3134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3136:	9a07      	ldr	r2, [sp, #28]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	18d3      	adds	r3, r2, r3
    313c:	9307      	str	r3, [sp, #28]
    313e:	2200      	movs	r2, #0
    3140:	2300      	movs	r3, #0
    3142:	0020      	movs	r0, r4
    3144:	0029      	movs	r1, r5
    3146:	f002 fe15 	bl	5d74 <__aeabi_dcmpeq>
    314a:	2230      	movs	r2, #48	; 0x30
    314c:	2800      	cmp	r0, #0
    314e:	d00d      	beq.n	316c <__cvt+0xbe>
    3150:	9b07      	ldr	r3, [sp, #28]
    3152:	9309      	str	r3, [sp, #36]	; 0x24
    3154:	0038      	movs	r0, r7
    3156:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3158:	9a15      	ldr	r2, [sp, #84]	; 0x54
    315a:	1bdb      	subs	r3, r3, r7
    315c:	6013      	str	r3, [r2, #0]
    315e:	b00b      	add	sp, #44	; 0x2c
    3160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3162:	2300      	movs	r3, #0
    3164:	e7af      	b.n	30c6 <__cvt+0x18>
    3166:	1c59      	adds	r1, r3, #1
    3168:	9109      	str	r1, [sp, #36]	; 0x24
    316a:	701a      	strb	r2, [r3, #0]
    316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    316e:	9907      	ldr	r1, [sp, #28]
    3170:	4299      	cmp	r1, r3
    3172:	d8f8      	bhi.n	3166 <__cvt+0xb8>
    3174:	e7ee      	b.n	3154 <__cvt+0xa6>

00003176 <__exponent>:
    3176:	b5f0      	push	{r4, r5, r6, r7, lr}
    3178:	232b      	movs	r3, #43	; 0x2b
    317a:	b085      	sub	sp, #20
    317c:	0007      	movs	r7, r0
    317e:	000c      	movs	r4, r1
    3180:	7002      	strb	r2, [r0, #0]
    3182:	1c86      	adds	r6, r0, #2
    3184:	2900      	cmp	r1, #0
    3186:	da01      	bge.n	318c <__exponent+0x16>
    3188:	232d      	movs	r3, #45	; 0x2d
    318a:	424c      	negs	r4, r1
    318c:	707b      	strb	r3, [r7, #1]
    318e:	2c09      	cmp	r4, #9
    3190:	dd23      	ble.n	31da <__exponent+0x64>
    3192:	ab02      	add	r3, sp, #8
    3194:	1ddd      	adds	r5, r3, #7
    3196:	1e6b      	subs	r3, r5, #1
    3198:	0020      	movs	r0, r4
    319a:	210a      	movs	r1, #10
    319c:	9301      	str	r3, [sp, #4]
    319e:	f002 fdd3 	bl	5d48 <__aeabi_idivmod>
    31a2:	1e6b      	subs	r3, r5, #1
    31a4:	3130      	adds	r1, #48	; 0x30
    31a6:	7019      	strb	r1, [r3, #0]
    31a8:	0020      	movs	r0, r4
    31aa:	210a      	movs	r1, #10
    31ac:	f002 fce6 	bl	5b7c <__divsi3>
    31b0:	0004      	movs	r4, r0
    31b2:	2809      	cmp	r0, #9
    31b4:	dc0a      	bgt.n	31cc <__exponent+0x56>
    31b6:	3d02      	subs	r5, #2
    31b8:	3430      	adds	r4, #48	; 0x30
    31ba:	702c      	strb	r4, [r5, #0]
    31bc:	ab02      	add	r3, sp, #8
    31be:	3307      	adds	r3, #7
    31c0:	0030      	movs	r0, r6
    31c2:	42ab      	cmp	r3, r5
    31c4:	d804      	bhi.n	31d0 <__exponent+0x5a>
    31c6:	1bc0      	subs	r0, r0, r7
    31c8:	b005      	add	sp, #20
    31ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31cc:	9d01      	ldr	r5, [sp, #4]
    31ce:	e7e2      	b.n	3196 <__exponent+0x20>
    31d0:	782b      	ldrb	r3, [r5, #0]
    31d2:	3501      	adds	r5, #1
    31d4:	7033      	strb	r3, [r6, #0]
    31d6:	3601      	adds	r6, #1
    31d8:	e7f0      	b.n	31bc <__exponent+0x46>
    31da:	2330      	movs	r3, #48	; 0x30
    31dc:	18e4      	adds	r4, r4, r3
    31de:	7033      	strb	r3, [r6, #0]
    31e0:	1cb0      	adds	r0, r6, #2
    31e2:	7074      	strb	r4, [r6, #1]
    31e4:	e7ef      	b.n	31c6 <__exponent+0x50>
	...

000031e8 <_printf_float>:
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ea:	b095      	sub	sp, #84	; 0x54
    31ec:	000c      	movs	r4, r1
    31ee:	920a      	str	r2, [sp, #40]	; 0x28
    31f0:	930b      	str	r3, [sp, #44]	; 0x2c
    31f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    31f4:	9009      	str	r0, [sp, #36]	; 0x24
    31f6:	f001 fdd3 	bl	4da0 <_localeconv_r>
    31fa:	6803      	ldr	r3, [r0, #0]
    31fc:	0018      	movs	r0, r3
    31fe:	930d      	str	r3, [sp, #52]	; 0x34
    3200:	f000 fd00 	bl	3c04 <strlen>
    3204:	2300      	movs	r3, #0
    3206:	9312      	str	r3, [sp, #72]	; 0x48
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	900e      	str	r0, [sp, #56]	; 0x38
    320c:	930c      	str	r3, [sp, #48]	; 0x30
    320e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3210:	7e27      	ldrb	r7, [r4, #24]
    3212:	682b      	ldr	r3, [r5, #0]
    3214:	2207      	movs	r2, #7
    3216:	05c9      	lsls	r1, r1, #23
    3218:	d547      	bpl.n	32aa <_printf_float+0xc2>
    321a:	189b      	adds	r3, r3, r2
    321c:	4393      	bics	r3, r2
    321e:	001a      	movs	r2, r3
    3220:	3208      	adds	r2, #8
    3222:	602a      	str	r2, [r5, #0]
    3224:	681a      	ldr	r2, [r3, #0]
    3226:	685b      	ldr	r3, [r3, #4]
    3228:	64a2      	str	r2, [r4, #72]	; 0x48
    322a:	64e3      	str	r3, [r4, #76]	; 0x4c
    322c:	2201      	movs	r2, #1
    322e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    3230:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3232:	006b      	lsls	r3, r5, #1
    3234:	085b      	lsrs	r3, r3, #1
    3236:	930f      	str	r3, [sp, #60]	; 0x3c
    3238:	4252      	negs	r2, r2
    323a:	4ba7      	ldr	r3, [pc, #668]	; (34d8 <_printf_float+0x2f0>)
    323c:	0030      	movs	r0, r6
    323e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3240:	f004 faa0 	bl	7784 <__aeabi_dcmpun>
    3244:	2800      	cmp	r0, #0
    3246:	d000      	beq.n	324a <_printf_float+0x62>
    3248:	e206      	b.n	3658 <_printf_float+0x470>
    324a:	2201      	movs	r2, #1
    324c:	4ba2      	ldr	r3, [pc, #648]	; (34d8 <_printf_float+0x2f0>)
    324e:	4252      	negs	r2, r2
    3250:	0030      	movs	r0, r6
    3252:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3254:	f002 fd9e 	bl	5d94 <__aeabi_dcmple>
    3258:	2800      	cmp	r0, #0
    325a:	d000      	beq.n	325e <_printf_float+0x76>
    325c:	e1fc      	b.n	3658 <_printf_float+0x470>
    325e:	2200      	movs	r2, #0
    3260:	2300      	movs	r3, #0
    3262:	0030      	movs	r0, r6
    3264:	0029      	movs	r1, r5
    3266:	f002 fd8b 	bl	5d80 <__aeabi_dcmplt>
    326a:	2800      	cmp	r0, #0
    326c:	d003      	beq.n	3276 <_printf_float+0x8e>
    326e:	0023      	movs	r3, r4
    3270:	222d      	movs	r2, #45	; 0x2d
    3272:	3343      	adds	r3, #67	; 0x43
    3274:	701a      	strb	r2, [r3, #0]
    3276:	4d99      	ldr	r5, [pc, #612]	; (34dc <_printf_float+0x2f4>)
    3278:	2f47      	cmp	r7, #71	; 0x47
    327a:	d800      	bhi.n	327e <_printf_float+0x96>
    327c:	4d98      	ldr	r5, [pc, #608]	; (34e0 <_printf_float+0x2f8>)
    327e:	2303      	movs	r3, #3
    3280:	2600      	movs	r6, #0
    3282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3284:	6123      	str	r3, [r4, #16]
    3286:	3301      	adds	r3, #1
    3288:	439a      	bics	r2, r3
    328a:	6022      	str	r2, [r4, #0]
    328c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    328e:	aa13      	add	r2, sp, #76	; 0x4c
    3290:	9300      	str	r3, [sp, #0]
    3292:	0021      	movs	r1, r4
    3294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3296:	9809      	ldr	r0, [sp, #36]	; 0x24
    3298:	f000 f9f2 	bl	3680 <_printf_common>
    329c:	1c43      	adds	r3, r0, #1
    329e:	d000      	beq.n	32a2 <_printf_float+0xba>
    32a0:	e09c      	b.n	33dc <_printf_float+0x1f4>
    32a2:	2001      	movs	r0, #1
    32a4:	4240      	negs	r0, r0
    32a6:	b015      	add	sp, #84	; 0x54
    32a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32aa:	3307      	adds	r3, #7
    32ac:	e7b6      	b.n	321c <_printf_float+0x34>
    32ae:	2380      	movs	r3, #128	; 0x80
    32b0:	6862      	ldr	r2, [r4, #4]
    32b2:	00db      	lsls	r3, r3, #3
    32b4:	1c51      	adds	r1, r2, #1
    32b6:	d145      	bne.n	3344 <_printf_float+0x15c>
    32b8:	3207      	adds	r2, #7
    32ba:	6062      	str	r2, [r4, #4]
    32bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    32be:	2100      	movs	r1, #0
    32c0:	4313      	orrs	r3, r2
    32c2:	aa12      	add	r2, sp, #72	; 0x48
    32c4:	9205      	str	r2, [sp, #20]
    32c6:	aa11      	add	r2, sp, #68	; 0x44
    32c8:	9203      	str	r2, [sp, #12]
    32ca:	2223      	movs	r2, #35	; 0x23
    32cc:	6023      	str	r3, [r4, #0]
    32ce:	9106      	str	r1, [sp, #24]
    32d0:	9301      	str	r3, [sp, #4]
    32d2:	a908      	add	r1, sp, #32
    32d4:	6863      	ldr	r3, [r4, #4]
    32d6:	1852      	adds	r2, r2, r1
    32d8:	9202      	str	r2, [sp, #8]
    32da:	9300      	str	r3, [sp, #0]
    32dc:	0032      	movs	r2, r6
    32de:	002b      	movs	r3, r5
    32e0:	9704      	str	r7, [sp, #16]
    32e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    32e4:	f7ff fee3 	bl	30ae <__cvt>
    32e8:	2320      	movs	r3, #32
    32ea:	003a      	movs	r2, r7
    32ec:	0005      	movs	r5, r0
    32ee:	439a      	bics	r2, r3
    32f0:	2a47      	cmp	r2, #71	; 0x47
    32f2:	d107      	bne.n	3304 <_printf_float+0x11c>
    32f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    32f6:	1cda      	adds	r2, r3, #3
    32f8:	db02      	blt.n	3300 <_printf_float+0x118>
    32fa:	6862      	ldr	r2, [r4, #4]
    32fc:	4293      	cmp	r3, r2
    32fe:	dd5b      	ble.n	33b8 <_printf_float+0x1d0>
    3300:	3f02      	subs	r7, #2
    3302:	b2ff      	uxtb	r7, r7
    3304:	9911      	ldr	r1, [sp, #68]	; 0x44
    3306:	2f65      	cmp	r7, #101	; 0x65
    3308:	d83b      	bhi.n	3382 <_printf_float+0x19a>
    330a:	0020      	movs	r0, r4
    330c:	3901      	subs	r1, #1
    330e:	003a      	movs	r2, r7
    3310:	3050      	adds	r0, #80	; 0x50
    3312:	9111      	str	r1, [sp, #68]	; 0x44
    3314:	f7ff ff2f 	bl	3176 <__exponent>
    3318:	9a12      	ldr	r2, [sp, #72]	; 0x48
    331a:	0006      	movs	r6, r0
    331c:	1883      	adds	r3, r0, r2
    331e:	6123      	str	r3, [r4, #16]
    3320:	2a01      	cmp	r2, #1
    3322:	dc02      	bgt.n	332a <_printf_float+0x142>
    3324:	6822      	ldr	r2, [r4, #0]
    3326:	07d2      	lsls	r2, r2, #31
    3328:	d501      	bpl.n	332e <_printf_float+0x146>
    332a:	3301      	adds	r3, #1
    332c:	6123      	str	r3, [r4, #16]
    332e:	2323      	movs	r3, #35	; 0x23
    3330:	aa08      	add	r2, sp, #32
    3332:	189b      	adds	r3, r3, r2
    3334:	781b      	ldrb	r3, [r3, #0]
    3336:	2b00      	cmp	r3, #0
    3338:	d0a8      	beq.n	328c <_printf_float+0xa4>
    333a:	0023      	movs	r3, r4
    333c:	222d      	movs	r2, #45	; 0x2d
    333e:	3343      	adds	r3, #67	; 0x43
    3340:	701a      	strb	r2, [r3, #0]
    3342:	e7a3      	b.n	328c <_printf_float+0xa4>
    3344:	2f67      	cmp	r7, #103	; 0x67
    3346:	d001      	beq.n	334c <_printf_float+0x164>
    3348:	2f47      	cmp	r7, #71	; 0x47
    334a:	d1b7      	bne.n	32bc <_printf_float+0xd4>
    334c:	2a00      	cmp	r2, #0
    334e:	d016      	beq.n	337e <_printf_float+0x196>
    3350:	990c      	ldr	r1, [sp, #48]	; 0x30
    3352:	a808      	add	r0, sp, #32
    3354:	430b      	orrs	r3, r1
    3356:	2100      	movs	r1, #0
    3358:	9106      	str	r1, [sp, #24]
    335a:	a912      	add	r1, sp, #72	; 0x48
    335c:	9105      	str	r1, [sp, #20]
    335e:	a911      	add	r1, sp, #68	; 0x44
    3360:	9103      	str	r1, [sp, #12]
    3362:	2123      	movs	r1, #35	; 0x23
    3364:	1809      	adds	r1, r1, r0
    3366:	6023      	str	r3, [r4, #0]
    3368:	9301      	str	r3, [sp, #4]
    336a:	9200      	str	r2, [sp, #0]
    336c:	002b      	movs	r3, r5
    336e:	9704      	str	r7, [sp, #16]
    3370:	9102      	str	r1, [sp, #8]
    3372:	0032      	movs	r2, r6
    3374:	9809      	ldr	r0, [sp, #36]	; 0x24
    3376:	f7ff fe9a 	bl	30ae <__cvt>
    337a:	0005      	movs	r5, r0
    337c:	e7ba      	b.n	32f4 <_printf_float+0x10c>
    337e:	2201      	movs	r2, #1
    3380:	e79b      	b.n	32ba <_printf_float+0xd2>
    3382:	2f66      	cmp	r7, #102	; 0x66
    3384:	d119      	bne.n	33ba <_printf_float+0x1d2>
    3386:	6863      	ldr	r3, [r4, #4]
    3388:	2900      	cmp	r1, #0
    338a:	dd0c      	ble.n	33a6 <_printf_float+0x1be>
    338c:	6121      	str	r1, [r4, #16]
    338e:	2b00      	cmp	r3, #0
    3390:	d102      	bne.n	3398 <_printf_float+0x1b0>
    3392:	6822      	ldr	r2, [r4, #0]
    3394:	07d2      	lsls	r2, r2, #31
    3396:	d502      	bpl.n	339e <_printf_float+0x1b6>
    3398:	3301      	adds	r3, #1
    339a:	185b      	adds	r3, r3, r1
    339c:	6123      	str	r3, [r4, #16]
    339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    33a0:	2600      	movs	r6, #0
    33a2:	65a3      	str	r3, [r4, #88]	; 0x58
    33a4:	e7c3      	b.n	332e <_printf_float+0x146>
    33a6:	2b00      	cmp	r3, #0
    33a8:	d103      	bne.n	33b2 <_printf_float+0x1ca>
    33aa:	2201      	movs	r2, #1
    33ac:	6821      	ldr	r1, [r4, #0]
    33ae:	4211      	tst	r1, r2
    33b0:	d000      	beq.n	33b4 <_printf_float+0x1cc>
    33b2:	1c9a      	adds	r2, r3, #2
    33b4:	6122      	str	r2, [r4, #16]
    33b6:	e7f2      	b.n	339e <_printf_float+0x1b6>
    33b8:	2767      	movs	r7, #103	; 0x67
    33ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    33bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    33be:	4283      	cmp	r3, r0
    33c0:	db05      	blt.n	33ce <_printf_float+0x1e6>
    33c2:	6822      	ldr	r2, [r4, #0]
    33c4:	6123      	str	r3, [r4, #16]
    33c6:	07d2      	lsls	r2, r2, #31
    33c8:	d5e9      	bpl.n	339e <_printf_float+0x1b6>
    33ca:	3301      	adds	r3, #1
    33cc:	e7e6      	b.n	339c <_printf_float+0x1b4>
    33ce:	2201      	movs	r2, #1
    33d0:	2b00      	cmp	r3, #0
    33d2:	dc01      	bgt.n	33d8 <_printf_float+0x1f0>
    33d4:	1892      	adds	r2, r2, r2
    33d6:	1ad2      	subs	r2, r2, r3
    33d8:	1812      	adds	r2, r2, r0
    33da:	e7eb      	b.n	33b4 <_printf_float+0x1cc>
    33dc:	6822      	ldr	r2, [r4, #0]
    33de:	0553      	lsls	r3, r2, #21
    33e0:	d408      	bmi.n	33f4 <_printf_float+0x20c>
    33e2:	6923      	ldr	r3, [r4, #16]
    33e4:	002a      	movs	r2, r5
    33e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    33e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    33ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    33ec:	47a8      	blx	r5
    33ee:	1c43      	adds	r3, r0, #1
    33f0:	d129      	bne.n	3446 <_printf_float+0x25e>
    33f2:	e756      	b.n	32a2 <_printf_float+0xba>
    33f4:	2f65      	cmp	r7, #101	; 0x65
    33f6:	d800      	bhi.n	33fa <_printf_float+0x212>
    33f8:	e0dc      	b.n	35b4 <_printf_float+0x3cc>
    33fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    33fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    33fe:	2200      	movs	r2, #0
    3400:	2300      	movs	r3, #0
    3402:	f002 fcb7 	bl	5d74 <__aeabi_dcmpeq>
    3406:	2800      	cmp	r0, #0
    3408:	d035      	beq.n	3476 <_printf_float+0x28e>
    340a:	2301      	movs	r3, #1
    340c:	4a35      	ldr	r2, [pc, #212]	; (34e4 <_printf_float+0x2fc>)
    340e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3410:	9809      	ldr	r0, [sp, #36]	; 0x24
    3412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3414:	47a8      	blx	r5
    3416:	1c43      	adds	r3, r0, #1
    3418:	d100      	bne.n	341c <_printf_float+0x234>
    341a:	e742      	b.n	32a2 <_printf_float+0xba>
    341c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    341e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3420:	4293      	cmp	r3, r2
    3422:	db02      	blt.n	342a <_printf_float+0x242>
    3424:	6823      	ldr	r3, [r4, #0]
    3426:	07db      	lsls	r3, r3, #31
    3428:	d50d      	bpl.n	3446 <_printf_float+0x25e>
    342a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    342c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    342e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3430:	990a      	ldr	r1, [sp, #40]	; 0x28
    3432:	9809      	ldr	r0, [sp, #36]	; 0x24
    3434:	47a8      	blx	r5
    3436:	2500      	movs	r5, #0
    3438:	1c43      	adds	r3, r0, #1
    343a:	d100      	bne.n	343e <_printf_float+0x256>
    343c:	e731      	b.n	32a2 <_printf_float+0xba>
    343e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3440:	3b01      	subs	r3, #1
    3442:	429d      	cmp	r5, r3
    3444:	db0b      	blt.n	345e <_printf_float+0x276>
    3446:	6823      	ldr	r3, [r4, #0]
    3448:	2500      	movs	r5, #0
    344a:	079b      	lsls	r3, r3, #30
    344c:	d500      	bpl.n	3450 <_printf_float+0x268>
    344e:	e0fd      	b.n	364c <_printf_float+0x464>
    3450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3452:	68e0      	ldr	r0, [r4, #12]
    3454:	4298      	cmp	r0, r3
    3456:	db00      	blt.n	345a <_printf_float+0x272>
    3458:	e725      	b.n	32a6 <_printf_float+0xbe>
    345a:	0018      	movs	r0, r3
    345c:	e723      	b.n	32a6 <_printf_float+0xbe>
    345e:	0022      	movs	r2, r4
    3460:	2301      	movs	r3, #1
    3462:	321a      	adds	r2, #26
    3464:	990a      	ldr	r1, [sp, #40]	; 0x28
    3466:	9809      	ldr	r0, [sp, #36]	; 0x24
    3468:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    346a:	47b0      	blx	r6
    346c:	1c43      	adds	r3, r0, #1
    346e:	d100      	bne.n	3472 <_printf_float+0x28a>
    3470:	e717      	b.n	32a2 <_printf_float+0xba>
    3472:	3501      	adds	r5, #1
    3474:	e7e3      	b.n	343e <_printf_float+0x256>
    3476:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3478:	2b00      	cmp	r3, #0
    347a:	dc35      	bgt.n	34e8 <_printf_float+0x300>
    347c:	2301      	movs	r3, #1
    347e:	4a19      	ldr	r2, [pc, #100]	; (34e4 <_printf_float+0x2fc>)
    3480:	990a      	ldr	r1, [sp, #40]	; 0x28
    3482:	9809      	ldr	r0, [sp, #36]	; 0x24
    3484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3486:	47b0      	blx	r6
    3488:	1c43      	adds	r3, r0, #1
    348a:	d100      	bne.n	348e <_printf_float+0x2a6>
    348c:	e709      	b.n	32a2 <_printf_float+0xba>
    348e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3490:	2b00      	cmp	r3, #0
    3492:	d105      	bne.n	34a0 <_printf_float+0x2b8>
    3494:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3496:	2b00      	cmp	r3, #0
    3498:	d102      	bne.n	34a0 <_printf_float+0x2b8>
    349a:	6823      	ldr	r3, [r4, #0]
    349c:	07db      	lsls	r3, r3, #31
    349e:	d5d2      	bpl.n	3446 <_printf_float+0x25e>
    34a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    34a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    34a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    34a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    34a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    34aa:	47b0      	blx	r6
    34ac:	2600      	movs	r6, #0
    34ae:	1c43      	adds	r3, r0, #1
    34b0:	d100      	bne.n	34b4 <_printf_float+0x2cc>
    34b2:	e6f6      	b.n	32a2 <_printf_float+0xba>
    34b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    34b6:	425b      	negs	r3, r3
    34b8:	429e      	cmp	r6, r3
    34ba:	db01      	blt.n	34c0 <_printf_float+0x2d8>
    34bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    34be:	e791      	b.n	33e4 <_printf_float+0x1fc>
    34c0:	0022      	movs	r2, r4
    34c2:	2301      	movs	r3, #1
    34c4:	321a      	adds	r2, #26
    34c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    34c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    34ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    34cc:	47b8      	blx	r7
    34ce:	1c43      	adds	r3, r0, #1
    34d0:	d100      	bne.n	34d4 <_printf_float+0x2ec>
    34d2:	e6e6      	b.n	32a2 <_printf_float+0xba>
    34d4:	3601      	adds	r6, #1
    34d6:	e7ed      	b.n	34b4 <_printf_float+0x2cc>
    34d8:	7fefffff 	.word	0x7fefffff
    34dc:	00007cac 	.word	0x00007cac
    34e0:	00007ca8 	.word	0x00007ca8
    34e4:	00007cb8 	.word	0x00007cb8
    34e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    34ea:	9e12      	ldr	r6, [sp, #72]	; 0x48
    34ec:	429e      	cmp	r6, r3
    34ee:	dd00      	ble.n	34f2 <_printf_float+0x30a>
    34f0:	001e      	movs	r6, r3
    34f2:	2e00      	cmp	r6, #0
    34f4:	dc35      	bgt.n	3562 <_printf_float+0x37a>
    34f6:	2300      	movs	r3, #0
    34f8:	930c      	str	r3, [sp, #48]	; 0x30
    34fa:	43f3      	mvns	r3, r6
    34fc:	17db      	asrs	r3, r3, #31
    34fe:	930f      	str	r3, [sp, #60]	; 0x3c
    3500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3502:	6da7      	ldr	r7, [r4, #88]	; 0x58
    3504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3506:	4033      	ands	r3, r6
    3508:	1afb      	subs	r3, r7, r3
    350a:	429a      	cmp	r2, r3
    350c:	db32      	blt.n	3574 <_printf_float+0x38c>
    350e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3510:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3512:	4293      	cmp	r3, r2
    3514:	db3c      	blt.n	3590 <_printf_float+0x3a8>
    3516:	6823      	ldr	r3, [r4, #0]
    3518:	07db      	lsls	r3, r3, #31
    351a:	d439      	bmi.n	3590 <_printf_float+0x3a8>
    351c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    351e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3520:	1bf3      	subs	r3, r6, r7
    3522:	1ab6      	subs	r6, r6, r2
    3524:	429e      	cmp	r6, r3
    3526:	dd00      	ble.n	352a <_printf_float+0x342>
    3528:	001e      	movs	r6, r3
    352a:	2e00      	cmp	r6, #0
    352c:	dc39      	bgt.n	35a2 <_printf_float+0x3ba>
    352e:	43f7      	mvns	r7, r6
    3530:	2500      	movs	r5, #0
    3532:	17fb      	asrs	r3, r7, #31
    3534:	930c      	str	r3, [sp, #48]	; 0x30
    3536:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3538:	9b12      	ldr	r3, [sp, #72]	; 0x48
    353a:	990c      	ldr	r1, [sp, #48]	; 0x30
    353c:	1a9b      	subs	r3, r3, r2
    353e:	0032      	movs	r2, r6
    3540:	400a      	ands	r2, r1
    3542:	1a9b      	subs	r3, r3, r2
    3544:	429d      	cmp	r5, r3
    3546:	db00      	blt.n	354a <_printf_float+0x362>
    3548:	e77d      	b.n	3446 <_printf_float+0x25e>
    354a:	0022      	movs	r2, r4
    354c:	2301      	movs	r3, #1
    354e:	321a      	adds	r2, #26
    3550:	990a      	ldr	r1, [sp, #40]	; 0x28
    3552:	9809      	ldr	r0, [sp, #36]	; 0x24
    3554:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3556:	47b8      	blx	r7
    3558:	1c43      	adds	r3, r0, #1
    355a:	d100      	bne.n	355e <_printf_float+0x376>
    355c:	e6a1      	b.n	32a2 <_printf_float+0xba>
    355e:	3501      	adds	r5, #1
    3560:	e7e9      	b.n	3536 <_printf_float+0x34e>
    3562:	0033      	movs	r3, r6
    3564:	002a      	movs	r2, r5
    3566:	990a      	ldr	r1, [sp, #40]	; 0x28
    3568:	9809      	ldr	r0, [sp, #36]	; 0x24
    356a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    356c:	47b8      	blx	r7
    356e:	1c43      	adds	r3, r0, #1
    3570:	d1c1      	bne.n	34f6 <_printf_float+0x30e>
    3572:	e696      	b.n	32a2 <_printf_float+0xba>
    3574:	0022      	movs	r2, r4
    3576:	2301      	movs	r3, #1
    3578:	321a      	adds	r2, #26
    357a:	990a      	ldr	r1, [sp, #40]	; 0x28
    357c:	9809      	ldr	r0, [sp, #36]	; 0x24
    357e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3580:	47b8      	blx	r7
    3582:	1c43      	adds	r3, r0, #1
    3584:	d100      	bne.n	3588 <_printf_float+0x3a0>
    3586:	e68c      	b.n	32a2 <_printf_float+0xba>
    3588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    358a:	3301      	adds	r3, #1
    358c:	930c      	str	r3, [sp, #48]	; 0x30
    358e:	e7b7      	b.n	3500 <_printf_float+0x318>
    3590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3594:	990a      	ldr	r1, [sp, #40]	; 0x28
    3596:	9809      	ldr	r0, [sp, #36]	; 0x24
    3598:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    359a:	47b0      	blx	r6
    359c:	1c43      	adds	r3, r0, #1
    359e:	d1bd      	bne.n	351c <_printf_float+0x334>
    35a0:	e67f      	b.n	32a2 <_printf_float+0xba>
    35a2:	19ea      	adds	r2, r5, r7
    35a4:	0033      	movs	r3, r6
    35a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    35a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    35aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    35ac:	47a8      	blx	r5
    35ae:	1c43      	adds	r3, r0, #1
    35b0:	d1bd      	bne.n	352e <_printf_float+0x346>
    35b2:	e676      	b.n	32a2 <_printf_float+0xba>
    35b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    35b6:	2b01      	cmp	r3, #1
    35b8:	dc02      	bgt.n	35c0 <_printf_float+0x3d8>
    35ba:	2301      	movs	r3, #1
    35bc:	421a      	tst	r2, r3
    35be:	d038      	beq.n	3632 <_printf_float+0x44a>
    35c0:	2301      	movs	r3, #1
    35c2:	002a      	movs	r2, r5
    35c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    35c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    35c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    35ca:	47b8      	blx	r7
    35cc:	1c43      	adds	r3, r0, #1
    35ce:	d100      	bne.n	35d2 <_printf_float+0x3ea>
    35d0:	e667      	b.n	32a2 <_printf_float+0xba>
    35d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    35d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    35d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    35d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    35da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    35dc:	47b8      	blx	r7
    35de:	1c43      	adds	r3, r0, #1
    35e0:	d100      	bne.n	35e4 <_printf_float+0x3fc>
    35e2:	e65e      	b.n	32a2 <_printf_float+0xba>
    35e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    35e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    35e8:	2200      	movs	r2, #0
    35ea:	2300      	movs	r3, #0
    35ec:	f002 fbc2 	bl	5d74 <__aeabi_dcmpeq>
    35f0:	2800      	cmp	r0, #0
    35f2:	d008      	beq.n	3606 <_printf_float+0x41e>
    35f4:	2500      	movs	r5, #0
    35f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    35f8:	3b01      	subs	r3, #1
    35fa:	429d      	cmp	r5, r3
    35fc:	db0d      	blt.n	361a <_printf_float+0x432>
    35fe:	0022      	movs	r2, r4
    3600:	0033      	movs	r3, r6
    3602:	3250      	adds	r2, #80	; 0x50
    3604:	e6ef      	b.n	33e6 <_printf_float+0x1fe>
    3606:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3608:	1c6a      	adds	r2, r5, #1
    360a:	3b01      	subs	r3, #1
    360c:	990a      	ldr	r1, [sp, #40]	; 0x28
    360e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3610:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3612:	47a8      	blx	r5
    3614:	1c43      	adds	r3, r0, #1
    3616:	d1f2      	bne.n	35fe <_printf_float+0x416>
    3618:	e643      	b.n	32a2 <_printf_float+0xba>
    361a:	0022      	movs	r2, r4
    361c:	2301      	movs	r3, #1
    361e:	321a      	adds	r2, #26
    3620:	990a      	ldr	r1, [sp, #40]	; 0x28
    3622:	9809      	ldr	r0, [sp, #36]	; 0x24
    3624:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3626:	47b8      	blx	r7
    3628:	1c43      	adds	r3, r0, #1
    362a:	d100      	bne.n	362e <_printf_float+0x446>
    362c:	e639      	b.n	32a2 <_printf_float+0xba>
    362e:	3501      	adds	r5, #1
    3630:	e7e1      	b.n	35f6 <_printf_float+0x40e>
    3632:	002a      	movs	r2, r5
    3634:	e7ea      	b.n	360c <_printf_float+0x424>
    3636:	0022      	movs	r2, r4
    3638:	2301      	movs	r3, #1
    363a:	3219      	adds	r2, #25
    363c:	990a      	ldr	r1, [sp, #40]	; 0x28
    363e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3640:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3642:	47b0      	blx	r6
    3644:	1c43      	adds	r3, r0, #1
    3646:	d100      	bne.n	364a <_printf_float+0x462>
    3648:	e62b      	b.n	32a2 <_printf_float+0xba>
    364a:	3501      	adds	r5, #1
    364c:	68e3      	ldr	r3, [r4, #12]
    364e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3650:	1a9b      	subs	r3, r3, r2
    3652:	429d      	cmp	r5, r3
    3654:	dbef      	blt.n	3636 <_printf_float+0x44e>
    3656:	e6fb      	b.n	3450 <_printf_float+0x268>
    3658:	0032      	movs	r2, r6
    365a:	002b      	movs	r3, r5
    365c:	0030      	movs	r0, r6
    365e:	0029      	movs	r1, r5
    3660:	f004 f890 	bl	7784 <__aeabi_dcmpun>
    3664:	2800      	cmp	r0, #0
    3666:	d100      	bne.n	366a <_printf_float+0x482>
    3668:	e621      	b.n	32ae <_printf_float+0xc6>
    366a:	4d03      	ldr	r5, [pc, #12]	; (3678 <_printf_float+0x490>)
    366c:	2f47      	cmp	r7, #71	; 0x47
    366e:	d900      	bls.n	3672 <_printf_float+0x48a>
    3670:	e605      	b.n	327e <_printf_float+0x96>
    3672:	4d02      	ldr	r5, [pc, #8]	; (367c <_printf_float+0x494>)
    3674:	e603      	b.n	327e <_printf_float+0x96>
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	00007cb4 	.word	0x00007cb4
    367c:	00007cb0 	.word	0x00007cb0

00003680 <_printf_common>:
    3680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3682:	0015      	movs	r5, r2
    3684:	9301      	str	r3, [sp, #4]
    3686:	688a      	ldr	r2, [r1, #8]
    3688:	690b      	ldr	r3, [r1, #16]
    368a:	9000      	str	r0, [sp, #0]
    368c:	000c      	movs	r4, r1
    368e:	4293      	cmp	r3, r2
    3690:	da00      	bge.n	3694 <_printf_common+0x14>
    3692:	0013      	movs	r3, r2
    3694:	0022      	movs	r2, r4
    3696:	602b      	str	r3, [r5, #0]
    3698:	3243      	adds	r2, #67	; 0x43
    369a:	7812      	ldrb	r2, [r2, #0]
    369c:	2a00      	cmp	r2, #0
    369e:	d001      	beq.n	36a4 <_printf_common+0x24>
    36a0:	3301      	adds	r3, #1
    36a2:	602b      	str	r3, [r5, #0]
    36a4:	6823      	ldr	r3, [r4, #0]
    36a6:	069b      	lsls	r3, r3, #26
    36a8:	d502      	bpl.n	36b0 <_printf_common+0x30>
    36aa:	682b      	ldr	r3, [r5, #0]
    36ac:	3302      	adds	r3, #2
    36ae:	602b      	str	r3, [r5, #0]
    36b0:	2706      	movs	r7, #6
    36b2:	6823      	ldr	r3, [r4, #0]
    36b4:	401f      	ands	r7, r3
    36b6:	d027      	beq.n	3708 <_printf_common+0x88>
    36b8:	0023      	movs	r3, r4
    36ba:	3343      	adds	r3, #67	; 0x43
    36bc:	781b      	ldrb	r3, [r3, #0]
    36be:	1e5a      	subs	r2, r3, #1
    36c0:	4193      	sbcs	r3, r2
    36c2:	6822      	ldr	r2, [r4, #0]
    36c4:	0692      	lsls	r2, r2, #26
    36c6:	d430      	bmi.n	372a <_printf_common+0xaa>
    36c8:	0022      	movs	r2, r4
    36ca:	9901      	ldr	r1, [sp, #4]
    36cc:	3243      	adds	r2, #67	; 0x43
    36ce:	9800      	ldr	r0, [sp, #0]
    36d0:	9e08      	ldr	r6, [sp, #32]
    36d2:	47b0      	blx	r6
    36d4:	1c43      	adds	r3, r0, #1
    36d6:	d025      	beq.n	3724 <_printf_common+0xa4>
    36d8:	2306      	movs	r3, #6
    36da:	6820      	ldr	r0, [r4, #0]
    36dc:	682a      	ldr	r2, [r5, #0]
    36de:	68e1      	ldr	r1, [r4, #12]
    36e0:	4003      	ands	r3, r0
    36e2:	2500      	movs	r5, #0
    36e4:	2b04      	cmp	r3, #4
    36e6:	d103      	bne.n	36f0 <_printf_common+0x70>
    36e8:	1a8d      	subs	r5, r1, r2
    36ea:	43eb      	mvns	r3, r5
    36ec:	17db      	asrs	r3, r3, #31
    36ee:	401d      	ands	r5, r3
    36f0:	68a3      	ldr	r3, [r4, #8]
    36f2:	6922      	ldr	r2, [r4, #16]
    36f4:	4293      	cmp	r3, r2
    36f6:	dd01      	ble.n	36fc <_printf_common+0x7c>
    36f8:	1a9b      	subs	r3, r3, r2
    36fa:	18ed      	adds	r5, r5, r3
    36fc:	2700      	movs	r7, #0
    36fe:	42bd      	cmp	r5, r7
    3700:	d120      	bne.n	3744 <_printf_common+0xc4>
    3702:	2000      	movs	r0, #0
    3704:	e010      	b.n	3728 <_printf_common+0xa8>
    3706:	3701      	adds	r7, #1
    3708:	68e3      	ldr	r3, [r4, #12]
    370a:	682a      	ldr	r2, [r5, #0]
    370c:	1a9b      	subs	r3, r3, r2
    370e:	429f      	cmp	r7, r3
    3710:	dad2      	bge.n	36b8 <_printf_common+0x38>
    3712:	0022      	movs	r2, r4
    3714:	2301      	movs	r3, #1
    3716:	3219      	adds	r2, #25
    3718:	9901      	ldr	r1, [sp, #4]
    371a:	9800      	ldr	r0, [sp, #0]
    371c:	9e08      	ldr	r6, [sp, #32]
    371e:	47b0      	blx	r6
    3720:	1c43      	adds	r3, r0, #1
    3722:	d1f0      	bne.n	3706 <_printf_common+0x86>
    3724:	2001      	movs	r0, #1
    3726:	4240      	negs	r0, r0
    3728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    372a:	2030      	movs	r0, #48	; 0x30
    372c:	18e1      	adds	r1, r4, r3
    372e:	3143      	adds	r1, #67	; 0x43
    3730:	7008      	strb	r0, [r1, #0]
    3732:	0021      	movs	r1, r4
    3734:	1c5a      	adds	r2, r3, #1
    3736:	3145      	adds	r1, #69	; 0x45
    3738:	7809      	ldrb	r1, [r1, #0]
    373a:	18a2      	adds	r2, r4, r2
    373c:	3243      	adds	r2, #67	; 0x43
    373e:	3302      	adds	r3, #2
    3740:	7011      	strb	r1, [r2, #0]
    3742:	e7c1      	b.n	36c8 <_printf_common+0x48>
    3744:	0022      	movs	r2, r4
    3746:	2301      	movs	r3, #1
    3748:	321a      	adds	r2, #26
    374a:	9901      	ldr	r1, [sp, #4]
    374c:	9800      	ldr	r0, [sp, #0]
    374e:	9e08      	ldr	r6, [sp, #32]
    3750:	47b0      	blx	r6
    3752:	1c43      	adds	r3, r0, #1
    3754:	d0e6      	beq.n	3724 <_printf_common+0xa4>
    3756:	3701      	adds	r7, #1
    3758:	e7d1      	b.n	36fe <_printf_common+0x7e>
	...

0000375c <_printf_i>:
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	b08b      	sub	sp, #44	; 0x2c
    3760:	9206      	str	r2, [sp, #24]
    3762:	000a      	movs	r2, r1
    3764:	3243      	adds	r2, #67	; 0x43
    3766:	9307      	str	r3, [sp, #28]
    3768:	9005      	str	r0, [sp, #20]
    376a:	9204      	str	r2, [sp, #16]
    376c:	7e0a      	ldrb	r2, [r1, #24]
    376e:	000c      	movs	r4, r1
    3770:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3772:	2a6e      	cmp	r2, #110	; 0x6e
    3774:	d100      	bne.n	3778 <_printf_i+0x1c>
    3776:	e08f      	b.n	3898 <_printf_i+0x13c>
    3778:	d817      	bhi.n	37aa <_printf_i+0x4e>
    377a:	2a63      	cmp	r2, #99	; 0x63
    377c:	d02c      	beq.n	37d8 <_printf_i+0x7c>
    377e:	d808      	bhi.n	3792 <_printf_i+0x36>
    3780:	2a00      	cmp	r2, #0
    3782:	d100      	bne.n	3786 <_printf_i+0x2a>
    3784:	e099      	b.n	38ba <_printf_i+0x15e>
    3786:	2a58      	cmp	r2, #88	; 0x58
    3788:	d054      	beq.n	3834 <_printf_i+0xd8>
    378a:	0026      	movs	r6, r4
    378c:	3642      	adds	r6, #66	; 0x42
    378e:	7032      	strb	r2, [r6, #0]
    3790:	e029      	b.n	37e6 <_printf_i+0x8a>
    3792:	2a64      	cmp	r2, #100	; 0x64
    3794:	d001      	beq.n	379a <_printf_i+0x3e>
    3796:	2a69      	cmp	r2, #105	; 0x69
    3798:	d1f7      	bne.n	378a <_printf_i+0x2e>
    379a:	6821      	ldr	r1, [r4, #0]
    379c:	681a      	ldr	r2, [r3, #0]
    379e:	0608      	lsls	r0, r1, #24
    37a0:	d523      	bpl.n	37ea <_printf_i+0x8e>
    37a2:	1d11      	adds	r1, r2, #4
    37a4:	6019      	str	r1, [r3, #0]
    37a6:	6815      	ldr	r5, [r2, #0]
    37a8:	e025      	b.n	37f6 <_printf_i+0x9a>
    37aa:	2a73      	cmp	r2, #115	; 0x73
    37ac:	d100      	bne.n	37b0 <_printf_i+0x54>
    37ae:	e088      	b.n	38c2 <_printf_i+0x166>
    37b0:	d808      	bhi.n	37c4 <_printf_i+0x68>
    37b2:	2a6f      	cmp	r2, #111	; 0x6f
    37b4:	d029      	beq.n	380a <_printf_i+0xae>
    37b6:	2a70      	cmp	r2, #112	; 0x70
    37b8:	d1e7      	bne.n	378a <_printf_i+0x2e>
    37ba:	2220      	movs	r2, #32
    37bc:	6809      	ldr	r1, [r1, #0]
    37be:	430a      	orrs	r2, r1
    37c0:	6022      	str	r2, [r4, #0]
    37c2:	e003      	b.n	37cc <_printf_i+0x70>
    37c4:	2a75      	cmp	r2, #117	; 0x75
    37c6:	d020      	beq.n	380a <_printf_i+0xae>
    37c8:	2a78      	cmp	r2, #120	; 0x78
    37ca:	d1de      	bne.n	378a <_printf_i+0x2e>
    37cc:	0022      	movs	r2, r4
    37ce:	2178      	movs	r1, #120	; 0x78
    37d0:	3245      	adds	r2, #69	; 0x45
    37d2:	7011      	strb	r1, [r2, #0]
    37d4:	4a6c      	ldr	r2, [pc, #432]	; (3988 <_printf_i+0x22c>)
    37d6:	e030      	b.n	383a <_printf_i+0xde>
    37d8:	000e      	movs	r6, r1
    37da:	681a      	ldr	r2, [r3, #0]
    37dc:	3642      	adds	r6, #66	; 0x42
    37de:	1d11      	adds	r1, r2, #4
    37e0:	6019      	str	r1, [r3, #0]
    37e2:	6813      	ldr	r3, [r2, #0]
    37e4:	7033      	strb	r3, [r6, #0]
    37e6:	2301      	movs	r3, #1
    37e8:	e079      	b.n	38de <_printf_i+0x182>
    37ea:	0649      	lsls	r1, r1, #25
    37ec:	d5d9      	bpl.n	37a2 <_printf_i+0x46>
    37ee:	1d11      	adds	r1, r2, #4
    37f0:	6019      	str	r1, [r3, #0]
    37f2:	2300      	movs	r3, #0
    37f4:	5ed5      	ldrsh	r5, [r2, r3]
    37f6:	2d00      	cmp	r5, #0
    37f8:	da03      	bge.n	3802 <_printf_i+0xa6>
    37fa:	232d      	movs	r3, #45	; 0x2d
    37fc:	9a04      	ldr	r2, [sp, #16]
    37fe:	426d      	negs	r5, r5
    3800:	7013      	strb	r3, [r2, #0]
    3802:	4b62      	ldr	r3, [pc, #392]	; (398c <_printf_i+0x230>)
    3804:	270a      	movs	r7, #10
    3806:	9303      	str	r3, [sp, #12]
    3808:	e02f      	b.n	386a <_printf_i+0x10e>
    380a:	6820      	ldr	r0, [r4, #0]
    380c:	6819      	ldr	r1, [r3, #0]
    380e:	0605      	lsls	r5, r0, #24
    3810:	d503      	bpl.n	381a <_printf_i+0xbe>
    3812:	1d08      	adds	r0, r1, #4
    3814:	6018      	str	r0, [r3, #0]
    3816:	680d      	ldr	r5, [r1, #0]
    3818:	e005      	b.n	3826 <_printf_i+0xca>
    381a:	0640      	lsls	r0, r0, #25
    381c:	d5f9      	bpl.n	3812 <_printf_i+0xb6>
    381e:	680d      	ldr	r5, [r1, #0]
    3820:	1d08      	adds	r0, r1, #4
    3822:	6018      	str	r0, [r3, #0]
    3824:	b2ad      	uxth	r5, r5
    3826:	4b59      	ldr	r3, [pc, #356]	; (398c <_printf_i+0x230>)
    3828:	2708      	movs	r7, #8
    382a:	9303      	str	r3, [sp, #12]
    382c:	2a6f      	cmp	r2, #111	; 0x6f
    382e:	d018      	beq.n	3862 <_printf_i+0x106>
    3830:	270a      	movs	r7, #10
    3832:	e016      	b.n	3862 <_printf_i+0x106>
    3834:	3145      	adds	r1, #69	; 0x45
    3836:	700a      	strb	r2, [r1, #0]
    3838:	4a54      	ldr	r2, [pc, #336]	; (398c <_printf_i+0x230>)
    383a:	9203      	str	r2, [sp, #12]
    383c:	681a      	ldr	r2, [r3, #0]
    383e:	6821      	ldr	r1, [r4, #0]
    3840:	1d10      	adds	r0, r2, #4
    3842:	6018      	str	r0, [r3, #0]
    3844:	6815      	ldr	r5, [r2, #0]
    3846:	0608      	lsls	r0, r1, #24
    3848:	d522      	bpl.n	3890 <_printf_i+0x134>
    384a:	07cb      	lsls	r3, r1, #31
    384c:	d502      	bpl.n	3854 <_printf_i+0xf8>
    384e:	2320      	movs	r3, #32
    3850:	4319      	orrs	r1, r3
    3852:	6021      	str	r1, [r4, #0]
    3854:	2710      	movs	r7, #16
    3856:	2d00      	cmp	r5, #0
    3858:	d103      	bne.n	3862 <_printf_i+0x106>
    385a:	2320      	movs	r3, #32
    385c:	6822      	ldr	r2, [r4, #0]
    385e:	439a      	bics	r2, r3
    3860:	6022      	str	r2, [r4, #0]
    3862:	0023      	movs	r3, r4
    3864:	2200      	movs	r2, #0
    3866:	3343      	adds	r3, #67	; 0x43
    3868:	701a      	strb	r2, [r3, #0]
    386a:	6863      	ldr	r3, [r4, #4]
    386c:	60a3      	str	r3, [r4, #8]
    386e:	2b00      	cmp	r3, #0
    3870:	db5c      	blt.n	392c <_printf_i+0x1d0>
    3872:	2204      	movs	r2, #4
    3874:	6821      	ldr	r1, [r4, #0]
    3876:	4391      	bics	r1, r2
    3878:	6021      	str	r1, [r4, #0]
    387a:	2d00      	cmp	r5, #0
    387c:	d158      	bne.n	3930 <_printf_i+0x1d4>
    387e:	9e04      	ldr	r6, [sp, #16]
    3880:	2b00      	cmp	r3, #0
    3882:	d064      	beq.n	394e <_printf_i+0x1f2>
    3884:	0026      	movs	r6, r4
    3886:	9b03      	ldr	r3, [sp, #12]
    3888:	3642      	adds	r6, #66	; 0x42
    388a:	781b      	ldrb	r3, [r3, #0]
    388c:	7033      	strb	r3, [r6, #0]
    388e:	e05e      	b.n	394e <_printf_i+0x1f2>
    3890:	0648      	lsls	r0, r1, #25
    3892:	d5da      	bpl.n	384a <_printf_i+0xee>
    3894:	b2ad      	uxth	r5, r5
    3896:	e7d8      	b.n	384a <_printf_i+0xee>
    3898:	6809      	ldr	r1, [r1, #0]
    389a:	681a      	ldr	r2, [r3, #0]
    389c:	0608      	lsls	r0, r1, #24
    389e:	d505      	bpl.n	38ac <_printf_i+0x150>
    38a0:	1d11      	adds	r1, r2, #4
    38a2:	6019      	str	r1, [r3, #0]
    38a4:	6813      	ldr	r3, [r2, #0]
    38a6:	6962      	ldr	r2, [r4, #20]
    38a8:	601a      	str	r2, [r3, #0]
    38aa:	e006      	b.n	38ba <_printf_i+0x15e>
    38ac:	0649      	lsls	r1, r1, #25
    38ae:	d5f7      	bpl.n	38a0 <_printf_i+0x144>
    38b0:	1d11      	adds	r1, r2, #4
    38b2:	6019      	str	r1, [r3, #0]
    38b4:	6813      	ldr	r3, [r2, #0]
    38b6:	8aa2      	ldrh	r2, [r4, #20]
    38b8:	801a      	strh	r2, [r3, #0]
    38ba:	2300      	movs	r3, #0
    38bc:	9e04      	ldr	r6, [sp, #16]
    38be:	6123      	str	r3, [r4, #16]
    38c0:	e054      	b.n	396c <_printf_i+0x210>
    38c2:	681a      	ldr	r2, [r3, #0]
    38c4:	1d11      	adds	r1, r2, #4
    38c6:	6019      	str	r1, [r3, #0]
    38c8:	6816      	ldr	r6, [r2, #0]
    38ca:	2100      	movs	r1, #0
    38cc:	6862      	ldr	r2, [r4, #4]
    38ce:	0030      	movs	r0, r6
    38d0:	f001 fae8 	bl	4ea4 <memchr>
    38d4:	2800      	cmp	r0, #0
    38d6:	d001      	beq.n	38dc <_printf_i+0x180>
    38d8:	1b80      	subs	r0, r0, r6
    38da:	6060      	str	r0, [r4, #4]
    38dc:	6863      	ldr	r3, [r4, #4]
    38de:	6123      	str	r3, [r4, #16]
    38e0:	2300      	movs	r3, #0
    38e2:	9a04      	ldr	r2, [sp, #16]
    38e4:	7013      	strb	r3, [r2, #0]
    38e6:	e041      	b.n	396c <_printf_i+0x210>
    38e8:	6923      	ldr	r3, [r4, #16]
    38ea:	0032      	movs	r2, r6
    38ec:	9906      	ldr	r1, [sp, #24]
    38ee:	9805      	ldr	r0, [sp, #20]
    38f0:	9d07      	ldr	r5, [sp, #28]
    38f2:	47a8      	blx	r5
    38f4:	1c43      	adds	r3, r0, #1
    38f6:	d043      	beq.n	3980 <_printf_i+0x224>
    38f8:	6823      	ldr	r3, [r4, #0]
    38fa:	2500      	movs	r5, #0
    38fc:	079b      	lsls	r3, r3, #30
    38fe:	d40f      	bmi.n	3920 <_printf_i+0x1c4>
    3900:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3902:	68e0      	ldr	r0, [r4, #12]
    3904:	4298      	cmp	r0, r3
    3906:	da3d      	bge.n	3984 <_printf_i+0x228>
    3908:	0018      	movs	r0, r3
    390a:	e03b      	b.n	3984 <_printf_i+0x228>
    390c:	0022      	movs	r2, r4
    390e:	2301      	movs	r3, #1
    3910:	3219      	adds	r2, #25
    3912:	9906      	ldr	r1, [sp, #24]
    3914:	9805      	ldr	r0, [sp, #20]
    3916:	9e07      	ldr	r6, [sp, #28]
    3918:	47b0      	blx	r6
    391a:	1c43      	adds	r3, r0, #1
    391c:	d030      	beq.n	3980 <_printf_i+0x224>
    391e:	3501      	adds	r5, #1
    3920:	68e3      	ldr	r3, [r4, #12]
    3922:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3924:	1a9b      	subs	r3, r3, r2
    3926:	429d      	cmp	r5, r3
    3928:	dbf0      	blt.n	390c <_printf_i+0x1b0>
    392a:	e7e9      	b.n	3900 <_printf_i+0x1a4>
    392c:	2d00      	cmp	r5, #0
    392e:	d0a9      	beq.n	3884 <_printf_i+0x128>
    3930:	9e04      	ldr	r6, [sp, #16]
    3932:	0028      	movs	r0, r5
    3934:	0039      	movs	r1, r7
    3936:	f002 f91d 	bl	5b74 <__aeabi_uidivmod>
    393a:	9b03      	ldr	r3, [sp, #12]
    393c:	3e01      	subs	r6, #1
    393e:	5c5b      	ldrb	r3, [r3, r1]
    3940:	0028      	movs	r0, r5
    3942:	7033      	strb	r3, [r6, #0]
    3944:	0039      	movs	r1, r7
    3946:	f002 f88f 	bl	5a68 <__udivsi3>
    394a:	1e05      	subs	r5, r0, #0
    394c:	d1f1      	bne.n	3932 <_printf_i+0x1d6>
    394e:	2f08      	cmp	r7, #8
    3950:	d109      	bne.n	3966 <_printf_i+0x20a>
    3952:	6823      	ldr	r3, [r4, #0]
    3954:	07db      	lsls	r3, r3, #31
    3956:	d506      	bpl.n	3966 <_printf_i+0x20a>
    3958:	6863      	ldr	r3, [r4, #4]
    395a:	6922      	ldr	r2, [r4, #16]
    395c:	4293      	cmp	r3, r2
    395e:	dc02      	bgt.n	3966 <_printf_i+0x20a>
    3960:	2330      	movs	r3, #48	; 0x30
    3962:	3e01      	subs	r6, #1
    3964:	7033      	strb	r3, [r6, #0]
    3966:	9b04      	ldr	r3, [sp, #16]
    3968:	1b9b      	subs	r3, r3, r6
    396a:	6123      	str	r3, [r4, #16]
    396c:	9b07      	ldr	r3, [sp, #28]
    396e:	aa09      	add	r2, sp, #36	; 0x24
    3970:	9300      	str	r3, [sp, #0]
    3972:	0021      	movs	r1, r4
    3974:	9b06      	ldr	r3, [sp, #24]
    3976:	9805      	ldr	r0, [sp, #20]
    3978:	f7ff fe82 	bl	3680 <_printf_common>
    397c:	1c43      	adds	r3, r0, #1
    397e:	d1b3      	bne.n	38e8 <_printf_i+0x18c>
    3980:	2001      	movs	r0, #1
    3982:	4240      	negs	r0, r0
    3984:	b00b      	add	sp, #44	; 0x2c
    3986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3988:	00007ccb 	.word	0x00007ccb
    398c:	00007cba 	.word	0x00007cba

00003990 <iprintf>:
    3990:	b40f      	push	{r0, r1, r2, r3}
    3992:	4b0b      	ldr	r3, [pc, #44]	; (39c0 <iprintf+0x30>)
    3994:	b513      	push	{r0, r1, r4, lr}
    3996:	681c      	ldr	r4, [r3, #0]
    3998:	2c00      	cmp	r4, #0
    399a:	d005      	beq.n	39a8 <iprintf+0x18>
    399c:	69a3      	ldr	r3, [r4, #24]
    399e:	2b00      	cmp	r3, #0
    39a0:	d102      	bne.n	39a8 <iprintf+0x18>
    39a2:	0020      	movs	r0, r4
    39a4:	f001 f966 	bl	4c74 <__sinit>
    39a8:	ab05      	add	r3, sp, #20
    39aa:	9a04      	ldr	r2, [sp, #16]
    39ac:	68a1      	ldr	r1, [r4, #8]
    39ae:	0020      	movs	r0, r4
    39b0:	9301      	str	r3, [sp, #4]
    39b2:	f001 fe43 	bl	563c <_vfiprintf_r>
    39b6:	bc16      	pop	{r1, r2, r4}
    39b8:	bc08      	pop	{r3}
    39ba:	b004      	add	sp, #16
    39bc:	4718      	bx	r3
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	20000000 	.word	0x20000000

000039c4 <_puts_r>:
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	0005      	movs	r5, r0
    39c8:	000e      	movs	r6, r1
    39ca:	2800      	cmp	r0, #0
    39cc:	d004      	beq.n	39d8 <_puts_r+0x14>
    39ce:	6983      	ldr	r3, [r0, #24]
    39d0:	2b00      	cmp	r3, #0
    39d2:	d101      	bne.n	39d8 <_puts_r+0x14>
    39d4:	f001 f94e 	bl	4c74 <__sinit>
    39d8:	69ab      	ldr	r3, [r5, #24]
    39da:	68ac      	ldr	r4, [r5, #8]
    39dc:	2b00      	cmp	r3, #0
    39de:	d102      	bne.n	39e6 <_puts_r+0x22>
    39e0:	0028      	movs	r0, r5
    39e2:	f001 f947 	bl	4c74 <__sinit>
    39e6:	4b24      	ldr	r3, [pc, #144]	; (3a78 <_puts_r+0xb4>)
    39e8:	429c      	cmp	r4, r3
    39ea:	d10f      	bne.n	3a0c <_puts_r+0x48>
    39ec:	686c      	ldr	r4, [r5, #4]
    39ee:	89a3      	ldrh	r3, [r4, #12]
    39f0:	071b      	lsls	r3, r3, #28
    39f2:	d502      	bpl.n	39fa <_puts_r+0x36>
    39f4:	6923      	ldr	r3, [r4, #16]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d120      	bne.n	3a3c <_puts_r+0x78>
    39fa:	0021      	movs	r1, r4
    39fc:	0028      	movs	r0, r5
    39fe:	f000 f95f 	bl	3cc0 <__swsetup_r>
    3a02:	2800      	cmp	r0, #0
    3a04:	d01a      	beq.n	3a3c <_puts_r+0x78>
    3a06:	2001      	movs	r0, #1
    3a08:	4240      	negs	r0, r0
    3a0a:	bd70      	pop	{r4, r5, r6, pc}
    3a0c:	4b1b      	ldr	r3, [pc, #108]	; (3a7c <_puts_r+0xb8>)
    3a0e:	429c      	cmp	r4, r3
    3a10:	d101      	bne.n	3a16 <_puts_r+0x52>
    3a12:	68ac      	ldr	r4, [r5, #8]
    3a14:	e7eb      	b.n	39ee <_puts_r+0x2a>
    3a16:	4b1a      	ldr	r3, [pc, #104]	; (3a80 <_puts_r+0xbc>)
    3a18:	429c      	cmp	r4, r3
    3a1a:	d1e8      	bne.n	39ee <_puts_r+0x2a>
    3a1c:	68ec      	ldr	r4, [r5, #12]
    3a1e:	e7e6      	b.n	39ee <_puts_r+0x2a>
    3a20:	3b01      	subs	r3, #1
    3a22:	3601      	adds	r6, #1
    3a24:	60a3      	str	r3, [r4, #8]
    3a26:	2b00      	cmp	r3, #0
    3a28:	da04      	bge.n	3a34 <_puts_r+0x70>
    3a2a:	69a2      	ldr	r2, [r4, #24]
    3a2c:	4293      	cmp	r3, r2
    3a2e:	db16      	blt.n	3a5e <_puts_r+0x9a>
    3a30:	290a      	cmp	r1, #10
    3a32:	d014      	beq.n	3a5e <_puts_r+0x9a>
    3a34:	6823      	ldr	r3, [r4, #0]
    3a36:	1c5a      	adds	r2, r3, #1
    3a38:	6022      	str	r2, [r4, #0]
    3a3a:	7019      	strb	r1, [r3, #0]
    3a3c:	7831      	ldrb	r1, [r6, #0]
    3a3e:	68a3      	ldr	r3, [r4, #8]
    3a40:	2900      	cmp	r1, #0
    3a42:	d1ed      	bne.n	3a20 <_puts_r+0x5c>
    3a44:	3b01      	subs	r3, #1
    3a46:	60a3      	str	r3, [r4, #8]
    3a48:	2b00      	cmp	r3, #0
    3a4a:	da0f      	bge.n	3a6c <_puts_r+0xa8>
    3a4c:	0022      	movs	r2, r4
    3a4e:	310a      	adds	r1, #10
    3a50:	0028      	movs	r0, r5
    3a52:	f000 f8df 	bl	3c14 <__swbuf_r>
    3a56:	1c43      	adds	r3, r0, #1
    3a58:	d0d5      	beq.n	3a06 <_puts_r+0x42>
    3a5a:	200a      	movs	r0, #10
    3a5c:	e7d5      	b.n	3a0a <_puts_r+0x46>
    3a5e:	0022      	movs	r2, r4
    3a60:	0028      	movs	r0, r5
    3a62:	f000 f8d7 	bl	3c14 <__swbuf_r>
    3a66:	1c43      	adds	r3, r0, #1
    3a68:	d1e8      	bne.n	3a3c <_puts_r+0x78>
    3a6a:	e7cc      	b.n	3a06 <_puts_r+0x42>
    3a6c:	200a      	movs	r0, #10
    3a6e:	6823      	ldr	r3, [r4, #0]
    3a70:	1c5a      	adds	r2, r3, #1
    3a72:	6022      	str	r2, [r4, #0]
    3a74:	7018      	strb	r0, [r3, #0]
    3a76:	e7c8      	b.n	3a0a <_puts_r+0x46>
    3a78:	00007d0c 	.word	0x00007d0c
    3a7c:	00007d2c 	.word	0x00007d2c
    3a80:	00007cec 	.word	0x00007cec

00003a84 <puts>:
    3a84:	b510      	push	{r4, lr}
    3a86:	4b03      	ldr	r3, [pc, #12]	; (3a94 <puts+0x10>)
    3a88:	0001      	movs	r1, r0
    3a8a:	6818      	ldr	r0, [r3, #0]
    3a8c:	f7ff ff9a 	bl	39c4 <_puts_r>
    3a90:	bd10      	pop	{r4, pc}
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	20000000 	.word	0x20000000

00003a98 <setbuf>:
    3a98:	424a      	negs	r2, r1
    3a9a:	414a      	adcs	r2, r1
    3a9c:	2380      	movs	r3, #128	; 0x80
    3a9e:	b510      	push	{r4, lr}
    3aa0:	0052      	lsls	r2, r2, #1
    3aa2:	00db      	lsls	r3, r3, #3
    3aa4:	f000 f802 	bl	3aac <setvbuf>
    3aa8:	bd10      	pop	{r4, pc}
	...

00003aac <setvbuf>:
    3aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aae:	001d      	movs	r5, r3
    3ab0:	4b4f      	ldr	r3, [pc, #316]	; (3bf0 <setvbuf+0x144>)
    3ab2:	b085      	sub	sp, #20
    3ab4:	681e      	ldr	r6, [r3, #0]
    3ab6:	0004      	movs	r4, r0
    3ab8:	000f      	movs	r7, r1
    3aba:	9200      	str	r2, [sp, #0]
    3abc:	2e00      	cmp	r6, #0
    3abe:	d005      	beq.n	3acc <setvbuf+0x20>
    3ac0:	69b3      	ldr	r3, [r6, #24]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d102      	bne.n	3acc <setvbuf+0x20>
    3ac6:	0030      	movs	r0, r6
    3ac8:	f001 f8d4 	bl	4c74 <__sinit>
    3acc:	4b49      	ldr	r3, [pc, #292]	; (3bf4 <setvbuf+0x148>)
    3ace:	429c      	cmp	r4, r3
    3ad0:	d150      	bne.n	3b74 <setvbuf+0xc8>
    3ad2:	6874      	ldr	r4, [r6, #4]
    3ad4:	9b00      	ldr	r3, [sp, #0]
    3ad6:	2b02      	cmp	r3, #2
    3ad8:	d005      	beq.n	3ae6 <setvbuf+0x3a>
    3ada:	2b01      	cmp	r3, #1
    3adc:	d900      	bls.n	3ae0 <setvbuf+0x34>
    3ade:	e084      	b.n	3bea <setvbuf+0x13e>
    3ae0:	2d00      	cmp	r5, #0
    3ae2:	da00      	bge.n	3ae6 <setvbuf+0x3a>
    3ae4:	e081      	b.n	3bea <setvbuf+0x13e>
    3ae6:	0021      	movs	r1, r4
    3ae8:	0030      	movs	r0, r6
    3aea:	f001 f855 	bl	4b98 <_fflush_r>
    3aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3af0:	2900      	cmp	r1, #0
    3af2:	d008      	beq.n	3b06 <setvbuf+0x5a>
    3af4:	0023      	movs	r3, r4
    3af6:	3344      	adds	r3, #68	; 0x44
    3af8:	4299      	cmp	r1, r3
    3afa:	d002      	beq.n	3b02 <setvbuf+0x56>
    3afc:	0030      	movs	r0, r6
    3afe:	f001 fccd 	bl	549c <_free_r>
    3b02:	2300      	movs	r3, #0
    3b04:	6363      	str	r3, [r4, #52]	; 0x34
    3b06:	2300      	movs	r3, #0
    3b08:	61a3      	str	r3, [r4, #24]
    3b0a:	6063      	str	r3, [r4, #4]
    3b0c:	89a3      	ldrh	r3, [r4, #12]
    3b0e:	061b      	lsls	r3, r3, #24
    3b10:	d503      	bpl.n	3b1a <setvbuf+0x6e>
    3b12:	6921      	ldr	r1, [r4, #16]
    3b14:	0030      	movs	r0, r6
    3b16:	f001 fcc1 	bl	549c <_free_r>
    3b1a:	89a3      	ldrh	r3, [r4, #12]
    3b1c:	4a36      	ldr	r2, [pc, #216]	; (3bf8 <setvbuf+0x14c>)
    3b1e:	4013      	ands	r3, r2
    3b20:	81a3      	strh	r3, [r4, #12]
    3b22:	9b00      	ldr	r3, [sp, #0]
    3b24:	2b02      	cmp	r3, #2
    3b26:	d05a      	beq.n	3bde <setvbuf+0x132>
    3b28:	ab03      	add	r3, sp, #12
    3b2a:	aa02      	add	r2, sp, #8
    3b2c:	0021      	movs	r1, r4
    3b2e:	0030      	movs	r0, r6
    3b30:	f001 f942 	bl	4db8 <__swhatbuf_r>
    3b34:	89a3      	ldrh	r3, [r4, #12]
    3b36:	4318      	orrs	r0, r3
    3b38:	81a0      	strh	r0, [r4, #12]
    3b3a:	2d00      	cmp	r5, #0
    3b3c:	d124      	bne.n	3b88 <setvbuf+0xdc>
    3b3e:	9d02      	ldr	r5, [sp, #8]
    3b40:	0028      	movs	r0, r5
    3b42:	f001 f9a5 	bl	4e90 <malloc>
    3b46:	9501      	str	r5, [sp, #4]
    3b48:	1e07      	subs	r7, r0, #0
    3b4a:	d142      	bne.n	3bd2 <setvbuf+0x126>
    3b4c:	9b02      	ldr	r3, [sp, #8]
    3b4e:	9301      	str	r3, [sp, #4]
    3b50:	42ab      	cmp	r3, r5
    3b52:	d139      	bne.n	3bc8 <setvbuf+0x11c>
    3b54:	2001      	movs	r0, #1
    3b56:	4240      	negs	r0, r0
    3b58:	2302      	movs	r3, #2
    3b5a:	89a2      	ldrh	r2, [r4, #12]
    3b5c:	4313      	orrs	r3, r2
    3b5e:	81a3      	strh	r3, [r4, #12]
    3b60:	2300      	movs	r3, #0
    3b62:	60a3      	str	r3, [r4, #8]
    3b64:	0023      	movs	r3, r4
    3b66:	3347      	adds	r3, #71	; 0x47
    3b68:	6023      	str	r3, [r4, #0]
    3b6a:	6123      	str	r3, [r4, #16]
    3b6c:	2301      	movs	r3, #1
    3b6e:	6163      	str	r3, [r4, #20]
    3b70:	b005      	add	sp, #20
    3b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b74:	4b21      	ldr	r3, [pc, #132]	; (3bfc <setvbuf+0x150>)
    3b76:	429c      	cmp	r4, r3
    3b78:	d101      	bne.n	3b7e <setvbuf+0xd2>
    3b7a:	68b4      	ldr	r4, [r6, #8]
    3b7c:	e7aa      	b.n	3ad4 <setvbuf+0x28>
    3b7e:	4b20      	ldr	r3, [pc, #128]	; (3c00 <setvbuf+0x154>)
    3b80:	429c      	cmp	r4, r3
    3b82:	d1a7      	bne.n	3ad4 <setvbuf+0x28>
    3b84:	68f4      	ldr	r4, [r6, #12]
    3b86:	e7a5      	b.n	3ad4 <setvbuf+0x28>
    3b88:	2f00      	cmp	r7, #0
    3b8a:	d0d9      	beq.n	3b40 <setvbuf+0x94>
    3b8c:	69b3      	ldr	r3, [r6, #24]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d102      	bne.n	3b98 <setvbuf+0xec>
    3b92:	0030      	movs	r0, r6
    3b94:	f001 f86e 	bl	4c74 <__sinit>
    3b98:	9b00      	ldr	r3, [sp, #0]
    3b9a:	2b01      	cmp	r3, #1
    3b9c:	d103      	bne.n	3ba6 <setvbuf+0xfa>
    3b9e:	89a3      	ldrh	r3, [r4, #12]
    3ba0:	9a00      	ldr	r2, [sp, #0]
    3ba2:	431a      	orrs	r2, r3
    3ba4:	81a2      	strh	r2, [r4, #12]
    3ba6:	2008      	movs	r0, #8
    3ba8:	89a3      	ldrh	r3, [r4, #12]
    3baa:	6027      	str	r7, [r4, #0]
    3bac:	6127      	str	r7, [r4, #16]
    3bae:	6165      	str	r5, [r4, #20]
    3bb0:	4018      	ands	r0, r3
    3bb2:	d018      	beq.n	3be6 <setvbuf+0x13a>
    3bb4:	2001      	movs	r0, #1
    3bb6:	4018      	ands	r0, r3
    3bb8:	2300      	movs	r3, #0
    3bba:	4298      	cmp	r0, r3
    3bbc:	d011      	beq.n	3be2 <setvbuf+0x136>
    3bbe:	426d      	negs	r5, r5
    3bc0:	60a3      	str	r3, [r4, #8]
    3bc2:	61a5      	str	r5, [r4, #24]
    3bc4:	0018      	movs	r0, r3
    3bc6:	e7d3      	b.n	3b70 <setvbuf+0xc4>
    3bc8:	9801      	ldr	r0, [sp, #4]
    3bca:	f001 f961 	bl	4e90 <malloc>
    3bce:	1e07      	subs	r7, r0, #0
    3bd0:	d0c0      	beq.n	3b54 <setvbuf+0xa8>
    3bd2:	2380      	movs	r3, #128	; 0x80
    3bd4:	89a2      	ldrh	r2, [r4, #12]
    3bd6:	9d01      	ldr	r5, [sp, #4]
    3bd8:	4313      	orrs	r3, r2
    3bda:	81a3      	strh	r3, [r4, #12]
    3bdc:	e7d6      	b.n	3b8c <setvbuf+0xe0>
    3bde:	2000      	movs	r0, #0
    3be0:	e7ba      	b.n	3b58 <setvbuf+0xac>
    3be2:	60a5      	str	r5, [r4, #8]
    3be4:	e7c4      	b.n	3b70 <setvbuf+0xc4>
    3be6:	60a0      	str	r0, [r4, #8]
    3be8:	e7c2      	b.n	3b70 <setvbuf+0xc4>
    3bea:	2001      	movs	r0, #1
    3bec:	4240      	negs	r0, r0
    3bee:	e7bf      	b.n	3b70 <setvbuf+0xc4>
    3bf0:	20000000 	.word	0x20000000
    3bf4:	00007d0c 	.word	0x00007d0c
    3bf8:	fffff35c 	.word	0xfffff35c
    3bfc:	00007d2c 	.word	0x00007d2c
    3c00:	00007cec 	.word	0x00007cec

00003c04 <strlen>:
    3c04:	2300      	movs	r3, #0
    3c06:	5cc2      	ldrb	r2, [r0, r3]
    3c08:	3301      	adds	r3, #1
    3c0a:	2a00      	cmp	r2, #0
    3c0c:	d1fb      	bne.n	3c06 <strlen+0x2>
    3c0e:	1e58      	subs	r0, r3, #1
    3c10:	4770      	bx	lr
	...

00003c14 <__swbuf_r>:
    3c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c16:	0005      	movs	r5, r0
    3c18:	000e      	movs	r6, r1
    3c1a:	0014      	movs	r4, r2
    3c1c:	2800      	cmp	r0, #0
    3c1e:	d004      	beq.n	3c2a <__swbuf_r+0x16>
    3c20:	6983      	ldr	r3, [r0, #24]
    3c22:	2b00      	cmp	r3, #0
    3c24:	d101      	bne.n	3c2a <__swbuf_r+0x16>
    3c26:	f001 f825 	bl	4c74 <__sinit>
    3c2a:	4b22      	ldr	r3, [pc, #136]	; (3cb4 <__swbuf_r+0xa0>)
    3c2c:	429c      	cmp	r4, r3
    3c2e:	d12d      	bne.n	3c8c <__swbuf_r+0x78>
    3c30:	686c      	ldr	r4, [r5, #4]
    3c32:	69a3      	ldr	r3, [r4, #24]
    3c34:	60a3      	str	r3, [r4, #8]
    3c36:	89a3      	ldrh	r3, [r4, #12]
    3c38:	071b      	lsls	r3, r3, #28
    3c3a:	d531      	bpl.n	3ca0 <__swbuf_r+0x8c>
    3c3c:	6923      	ldr	r3, [r4, #16]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d02e      	beq.n	3ca0 <__swbuf_r+0x8c>
    3c42:	6823      	ldr	r3, [r4, #0]
    3c44:	6922      	ldr	r2, [r4, #16]
    3c46:	b2f7      	uxtb	r7, r6
    3c48:	1a98      	subs	r0, r3, r2
    3c4a:	6963      	ldr	r3, [r4, #20]
    3c4c:	b2f6      	uxtb	r6, r6
    3c4e:	4298      	cmp	r0, r3
    3c50:	db05      	blt.n	3c5e <__swbuf_r+0x4a>
    3c52:	0021      	movs	r1, r4
    3c54:	0028      	movs	r0, r5
    3c56:	f000 ff9f 	bl	4b98 <_fflush_r>
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d126      	bne.n	3cac <__swbuf_r+0x98>
    3c5e:	68a3      	ldr	r3, [r4, #8]
    3c60:	3001      	adds	r0, #1
    3c62:	3b01      	subs	r3, #1
    3c64:	60a3      	str	r3, [r4, #8]
    3c66:	6823      	ldr	r3, [r4, #0]
    3c68:	1c5a      	adds	r2, r3, #1
    3c6a:	6022      	str	r2, [r4, #0]
    3c6c:	701f      	strb	r7, [r3, #0]
    3c6e:	6963      	ldr	r3, [r4, #20]
    3c70:	4298      	cmp	r0, r3
    3c72:	d004      	beq.n	3c7e <__swbuf_r+0x6a>
    3c74:	89a3      	ldrh	r3, [r4, #12]
    3c76:	07db      	lsls	r3, r3, #31
    3c78:	d51a      	bpl.n	3cb0 <__swbuf_r+0x9c>
    3c7a:	2e0a      	cmp	r6, #10
    3c7c:	d118      	bne.n	3cb0 <__swbuf_r+0x9c>
    3c7e:	0021      	movs	r1, r4
    3c80:	0028      	movs	r0, r5
    3c82:	f000 ff89 	bl	4b98 <_fflush_r>
    3c86:	2800      	cmp	r0, #0
    3c88:	d012      	beq.n	3cb0 <__swbuf_r+0x9c>
    3c8a:	e00f      	b.n	3cac <__swbuf_r+0x98>
    3c8c:	4b0a      	ldr	r3, [pc, #40]	; (3cb8 <__swbuf_r+0xa4>)
    3c8e:	429c      	cmp	r4, r3
    3c90:	d101      	bne.n	3c96 <__swbuf_r+0x82>
    3c92:	68ac      	ldr	r4, [r5, #8]
    3c94:	e7cd      	b.n	3c32 <__swbuf_r+0x1e>
    3c96:	4b09      	ldr	r3, [pc, #36]	; (3cbc <__swbuf_r+0xa8>)
    3c98:	429c      	cmp	r4, r3
    3c9a:	d1ca      	bne.n	3c32 <__swbuf_r+0x1e>
    3c9c:	68ec      	ldr	r4, [r5, #12]
    3c9e:	e7c8      	b.n	3c32 <__swbuf_r+0x1e>
    3ca0:	0021      	movs	r1, r4
    3ca2:	0028      	movs	r0, r5
    3ca4:	f000 f80c 	bl	3cc0 <__swsetup_r>
    3ca8:	2800      	cmp	r0, #0
    3caa:	d0ca      	beq.n	3c42 <__swbuf_r+0x2e>
    3cac:	2601      	movs	r6, #1
    3cae:	4276      	negs	r6, r6
    3cb0:	0030      	movs	r0, r6
    3cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb4:	00007d0c 	.word	0x00007d0c
    3cb8:	00007d2c 	.word	0x00007d2c
    3cbc:	00007cec 	.word	0x00007cec

00003cc0 <__swsetup_r>:
    3cc0:	4b36      	ldr	r3, [pc, #216]	; (3d9c <__swsetup_r+0xdc>)
    3cc2:	b570      	push	{r4, r5, r6, lr}
    3cc4:	681d      	ldr	r5, [r3, #0]
    3cc6:	0006      	movs	r6, r0
    3cc8:	000c      	movs	r4, r1
    3cca:	2d00      	cmp	r5, #0
    3ccc:	d005      	beq.n	3cda <__swsetup_r+0x1a>
    3cce:	69ab      	ldr	r3, [r5, #24]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d102      	bne.n	3cda <__swsetup_r+0x1a>
    3cd4:	0028      	movs	r0, r5
    3cd6:	f000 ffcd 	bl	4c74 <__sinit>
    3cda:	4b31      	ldr	r3, [pc, #196]	; (3da0 <__swsetup_r+0xe0>)
    3cdc:	429c      	cmp	r4, r3
    3cde:	d10f      	bne.n	3d00 <__swsetup_r+0x40>
    3ce0:	686c      	ldr	r4, [r5, #4]
    3ce2:	230c      	movs	r3, #12
    3ce4:	5ee2      	ldrsh	r2, [r4, r3]
    3ce6:	b293      	uxth	r3, r2
    3ce8:	0719      	lsls	r1, r3, #28
    3cea:	d42d      	bmi.n	3d48 <__swsetup_r+0x88>
    3cec:	06d9      	lsls	r1, r3, #27
    3cee:	d411      	bmi.n	3d14 <__swsetup_r+0x54>
    3cf0:	2309      	movs	r3, #9
    3cf2:	2001      	movs	r0, #1
    3cf4:	6033      	str	r3, [r6, #0]
    3cf6:	3337      	adds	r3, #55	; 0x37
    3cf8:	4313      	orrs	r3, r2
    3cfa:	81a3      	strh	r3, [r4, #12]
    3cfc:	4240      	negs	r0, r0
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	4b28      	ldr	r3, [pc, #160]	; (3da4 <__swsetup_r+0xe4>)
    3d02:	429c      	cmp	r4, r3
    3d04:	d101      	bne.n	3d0a <__swsetup_r+0x4a>
    3d06:	68ac      	ldr	r4, [r5, #8]
    3d08:	e7eb      	b.n	3ce2 <__swsetup_r+0x22>
    3d0a:	4b27      	ldr	r3, [pc, #156]	; (3da8 <__swsetup_r+0xe8>)
    3d0c:	429c      	cmp	r4, r3
    3d0e:	d1e8      	bne.n	3ce2 <__swsetup_r+0x22>
    3d10:	68ec      	ldr	r4, [r5, #12]
    3d12:	e7e6      	b.n	3ce2 <__swsetup_r+0x22>
    3d14:	075b      	lsls	r3, r3, #29
    3d16:	d513      	bpl.n	3d40 <__swsetup_r+0x80>
    3d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d1a:	2900      	cmp	r1, #0
    3d1c:	d008      	beq.n	3d30 <__swsetup_r+0x70>
    3d1e:	0023      	movs	r3, r4
    3d20:	3344      	adds	r3, #68	; 0x44
    3d22:	4299      	cmp	r1, r3
    3d24:	d002      	beq.n	3d2c <__swsetup_r+0x6c>
    3d26:	0030      	movs	r0, r6
    3d28:	f001 fbb8 	bl	549c <_free_r>
    3d2c:	2300      	movs	r3, #0
    3d2e:	6363      	str	r3, [r4, #52]	; 0x34
    3d30:	2224      	movs	r2, #36	; 0x24
    3d32:	89a3      	ldrh	r3, [r4, #12]
    3d34:	4393      	bics	r3, r2
    3d36:	81a3      	strh	r3, [r4, #12]
    3d38:	2300      	movs	r3, #0
    3d3a:	6063      	str	r3, [r4, #4]
    3d3c:	6923      	ldr	r3, [r4, #16]
    3d3e:	6023      	str	r3, [r4, #0]
    3d40:	2308      	movs	r3, #8
    3d42:	89a2      	ldrh	r2, [r4, #12]
    3d44:	4313      	orrs	r3, r2
    3d46:	81a3      	strh	r3, [r4, #12]
    3d48:	6923      	ldr	r3, [r4, #16]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d10b      	bne.n	3d66 <__swsetup_r+0xa6>
    3d4e:	21a0      	movs	r1, #160	; 0xa0
    3d50:	2280      	movs	r2, #128	; 0x80
    3d52:	89a3      	ldrh	r3, [r4, #12]
    3d54:	0089      	lsls	r1, r1, #2
    3d56:	0092      	lsls	r2, r2, #2
    3d58:	400b      	ands	r3, r1
    3d5a:	4293      	cmp	r3, r2
    3d5c:	d003      	beq.n	3d66 <__swsetup_r+0xa6>
    3d5e:	0021      	movs	r1, r4
    3d60:	0030      	movs	r0, r6
    3d62:	f001 f851 	bl	4e08 <__smakebuf_r>
    3d66:	2301      	movs	r3, #1
    3d68:	89a2      	ldrh	r2, [r4, #12]
    3d6a:	4013      	ands	r3, r2
    3d6c:	d011      	beq.n	3d92 <__swsetup_r+0xd2>
    3d6e:	2300      	movs	r3, #0
    3d70:	60a3      	str	r3, [r4, #8]
    3d72:	6963      	ldr	r3, [r4, #20]
    3d74:	425b      	negs	r3, r3
    3d76:	61a3      	str	r3, [r4, #24]
    3d78:	2000      	movs	r0, #0
    3d7a:	6923      	ldr	r3, [r4, #16]
    3d7c:	4283      	cmp	r3, r0
    3d7e:	d1be      	bne.n	3cfe <__swsetup_r+0x3e>
    3d80:	230c      	movs	r3, #12
    3d82:	5ee2      	ldrsh	r2, [r4, r3]
    3d84:	0613      	lsls	r3, r2, #24
    3d86:	d5ba      	bpl.n	3cfe <__swsetup_r+0x3e>
    3d88:	2340      	movs	r3, #64	; 0x40
    3d8a:	4313      	orrs	r3, r2
    3d8c:	81a3      	strh	r3, [r4, #12]
    3d8e:	3801      	subs	r0, #1
    3d90:	e7b5      	b.n	3cfe <__swsetup_r+0x3e>
    3d92:	0792      	lsls	r2, r2, #30
    3d94:	d400      	bmi.n	3d98 <__swsetup_r+0xd8>
    3d96:	6963      	ldr	r3, [r4, #20]
    3d98:	60a3      	str	r3, [r4, #8]
    3d9a:	e7ed      	b.n	3d78 <__swsetup_r+0xb8>
    3d9c:	20000000 	.word	0x20000000
    3da0:	00007d0c 	.word	0x00007d0c
    3da4:	00007d2c 	.word	0x00007d2c
    3da8:	00007cec 	.word	0x00007cec

00003dac <quorem>:
    3dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dae:	6903      	ldr	r3, [r0, #16]
    3db0:	690c      	ldr	r4, [r1, #16]
    3db2:	b089      	sub	sp, #36	; 0x24
    3db4:	0007      	movs	r7, r0
    3db6:	9105      	str	r1, [sp, #20]
    3db8:	2600      	movs	r6, #0
    3dba:	429c      	cmp	r4, r3
    3dbc:	dc6d      	bgt.n	3e9a <quorem+0xee>
    3dbe:	000b      	movs	r3, r1
    3dc0:	3c01      	subs	r4, #1
    3dc2:	3314      	adds	r3, #20
    3dc4:	00a5      	lsls	r5, r4, #2
    3dc6:	9303      	str	r3, [sp, #12]
    3dc8:	195b      	adds	r3, r3, r5
    3dca:	9304      	str	r3, [sp, #16]
    3dcc:	0003      	movs	r3, r0
    3dce:	3314      	adds	r3, #20
    3dd0:	9302      	str	r3, [sp, #8]
    3dd2:	195d      	adds	r5, r3, r5
    3dd4:	9b04      	ldr	r3, [sp, #16]
    3dd6:	6828      	ldr	r0, [r5, #0]
    3dd8:	681b      	ldr	r3, [r3, #0]
    3dda:	1c59      	adds	r1, r3, #1
    3ddc:	9301      	str	r3, [sp, #4]
    3dde:	f001 fe43 	bl	5a68 <__udivsi3>
    3de2:	9001      	str	r0, [sp, #4]
    3de4:	42b0      	cmp	r0, r6
    3de6:	d02d      	beq.n	3e44 <quorem+0x98>
    3de8:	9b03      	ldr	r3, [sp, #12]
    3dea:	9802      	ldr	r0, [sp, #8]
    3dec:	469c      	mov	ip, r3
    3dee:	9606      	str	r6, [sp, #24]
    3df0:	4662      	mov	r2, ip
    3df2:	ca08      	ldmia	r2!, {r3}
    3df4:	4694      	mov	ip, r2
    3df6:	9a01      	ldr	r2, [sp, #4]
    3df8:	b299      	uxth	r1, r3
    3dfa:	4351      	muls	r1, r2
    3dfc:	0c1b      	lsrs	r3, r3, #16
    3dfe:	4353      	muls	r3, r2
    3e00:	1989      	adds	r1, r1, r6
    3e02:	0c0a      	lsrs	r2, r1, #16
    3e04:	189b      	adds	r3, r3, r2
    3e06:	9307      	str	r3, [sp, #28]
    3e08:	8802      	ldrh	r2, [r0, #0]
    3e0a:	0c1e      	lsrs	r6, r3, #16
    3e0c:	9b06      	ldr	r3, [sp, #24]
    3e0e:	b289      	uxth	r1, r1
    3e10:	18d2      	adds	r2, r2, r3
    3e12:	6803      	ldr	r3, [r0, #0]
    3e14:	1a52      	subs	r2, r2, r1
    3e16:	0c19      	lsrs	r1, r3, #16
    3e18:	466b      	mov	r3, sp
    3e1a:	8b9b      	ldrh	r3, [r3, #28]
    3e1c:	1acb      	subs	r3, r1, r3
    3e1e:	1411      	asrs	r1, r2, #16
    3e20:	185b      	adds	r3, r3, r1
    3e22:	1419      	asrs	r1, r3, #16
    3e24:	b292      	uxth	r2, r2
    3e26:	041b      	lsls	r3, r3, #16
    3e28:	431a      	orrs	r2, r3
    3e2a:	9b04      	ldr	r3, [sp, #16]
    3e2c:	9106      	str	r1, [sp, #24]
    3e2e:	c004      	stmia	r0!, {r2}
    3e30:	4563      	cmp	r3, ip
    3e32:	d2dd      	bcs.n	3df0 <quorem+0x44>
    3e34:	682b      	ldr	r3, [r5, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d104      	bne.n	3e44 <quorem+0x98>
    3e3a:	9b02      	ldr	r3, [sp, #8]
    3e3c:	3d04      	subs	r5, #4
    3e3e:	42ab      	cmp	r3, r5
    3e40:	d32e      	bcc.n	3ea0 <quorem+0xf4>
    3e42:	613c      	str	r4, [r7, #16]
    3e44:	9905      	ldr	r1, [sp, #20]
    3e46:	0038      	movs	r0, r7
    3e48:	f001 fa49 	bl	52de <__mcmp>
    3e4c:	2800      	cmp	r0, #0
    3e4e:	db23      	blt.n	3e98 <quorem+0xec>
    3e50:	2500      	movs	r5, #0
    3e52:	9b01      	ldr	r3, [sp, #4]
    3e54:	9802      	ldr	r0, [sp, #8]
    3e56:	3301      	adds	r3, #1
    3e58:	9903      	ldr	r1, [sp, #12]
    3e5a:	9301      	str	r3, [sp, #4]
    3e5c:	c908      	ldmia	r1!, {r3}
    3e5e:	8802      	ldrh	r2, [r0, #0]
    3e60:	1955      	adds	r5, r2, r5
    3e62:	b29a      	uxth	r2, r3
    3e64:	1aaa      	subs	r2, r5, r2
    3e66:	6805      	ldr	r5, [r0, #0]
    3e68:	0c1b      	lsrs	r3, r3, #16
    3e6a:	0c2d      	lsrs	r5, r5, #16
    3e6c:	1aeb      	subs	r3, r5, r3
    3e6e:	1415      	asrs	r5, r2, #16
    3e70:	195b      	adds	r3, r3, r5
    3e72:	141d      	asrs	r5, r3, #16
    3e74:	b292      	uxth	r2, r2
    3e76:	041b      	lsls	r3, r3, #16
    3e78:	4313      	orrs	r3, r2
    3e7a:	c008      	stmia	r0!, {r3}
    3e7c:	9b04      	ldr	r3, [sp, #16]
    3e7e:	428b      	cmp	r3, r1
    3e80:	d2ec      	bcs.n	3e5c <quorem+0xb0>
    3e82:	9a02      	ldr	r2, [sp, #8]
    3e84:	00a3      	lsls	r3, r4, #2
    3e86:	18d3      	adds	r3, r2, r3
    3e88:	681a      	ldr	r2, [r3, #0]
    3e8a:	2a00      	cmp	r2, #0
    3e8c:	d104      	bne.n	3e98 <quorem+0xec>
    3e8e:	9a02      	ldr	r2, [sp, #8]
    3e90:	3b04      	subs	r3, #4
    3e92:	429a      	cmp	r2, r3
    3e94:	d309      	bcc.n	3eaa <quorem+0xfe>
    3e96:	613c      	str	r4, [r7, #16]
    3e98:	9e01      	ldr	r6, [sp, #4]
    3e9a:	0030      	movs	r0, r6
    3e9c:	b009      	add	sp, #36	; 0x24
    3e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ea0:	682b      	ldr	r3, [r5, #0]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d1cd      	bne.n	3e42 <quorem+0x96>
    3ea6:	3c01      	subs	r4, #1
    3ea8:	e7c7      	b.n	3e3a <quorem+0x8e>
    3eaa:	681a      	ldr	r2, [r3, #0]
    3eac:	2a00      	cmp	r2, #0
    3eae:	d1f2      	bne.n	3e96 <quorem+0xea>
    3eb0:	3c01      	subs	r4, #1
    3eb2:	e7ec      	b.n	3e8e <quorem+0xe2>

00003eb4 <_dtoa_r>:
    3eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eb6:	0016      	movs	r6, r2
    3eb8:	001f      	movs	r7, r3
    3eba:	6a44      	ldr	r4, [r0, #36]	; 0x24
    3ebc:	b09d      	sub	sp, #116	; 0x74
    3ebe:	9004      	str	r0, [sp, #16]
    3ec0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    3ec2:	9606      	str	r6, [sp, #24]
    3ec4:	9707      	str	r7, [sp, #28]
    3ec6:	2c00      	cmp	r4, #0
    3ec8:	d108      	bne.n	3edc <_dtoa_r+0x28>
    3eca:	2010      	movs	r0, #16
    3ecc:	f000 ffe0 	bl	4e90 <malloc>
    3ed0:	9b04      	ldr	r3, [sp, #16]
    3ed2:	6258      	str	r0, [r3, #36]	; 0x24
    3ed4:	6044      	str	r4, [r0, #4]
    3ed6:	6084      	str	r4, [r0, #8]
    3ed8:	6004      	str	r4, [r0, #0]
    3eda:	60c4      	str	r4, [r0, #12]
    3edc:	9b04      	ldr	r3, [sp, #16]
    3ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ee0:	6819      	ldr	r1, [r3, #0]
    3ee2:	2900      	cmp	r1, #0
    3ee4:	d00b      	beq.n	3efe <_dtoa_r+0x4a>
    3ee6:	685a      	ldr	r2, [r3, #4]
    3ee8:	2301      	movs	r3, #1
    3eea:	4093      	lsls	r3, r2
    3eec:	604a      	str	r2, [r1, #4]
    3eee:	608b      	str	r3, [r1, #8]
    3ef0:	9804      	ldr	r0, [sp, #16]
    3ef2:	f001 f81a 	bl	4f2a <_Bfree>
    3ef6:	2200      	movs	r2, #0
    3ef8:	9b04      	ldr	r3, [sp, #16]
    3efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3efc:	601a      	str	r2, [r3, #0]
    3efe:	9b07      	ldr	r3, [sp, #28]
    3f00:	2b00      	cmp	r3, #0
    3f02:	da1f      	bge.n	3f44 <_dtoa_r+0x90>
    3f04:	2301      	movs	r3, #1
    3f06:	602b      	str	r3, [r5, #0]
    3f08:	007b      	lsls	r3, r7, #1
    3f0a:	085b      	lsrs	r3, r3, #1
    3f0c:	9307      	str	r3, [sp, #28]
    3f0e:	9c07      	ldr	r4, [sp, #28]
    3f10:	4bb7      	ldr	r3, [pc, #732]	; (41f0 <_dtoa_r+0x33c>)
    3f12:	0022      	movs	r2, r4
    3f14:	9319      	str	r3, [sp, #100]	; 0x64
    3f16:	401a      	ands	r2, r3
    3f18:	429a      	cmp	r2, r3
    3f1a:	d116      	bne.n	3f4a <_dtoa_r+0x96>
    3f1c:	4bb5      	ldr	r3, [pc, #724]	; (41f4 <_dtoa_r+0x340>)
    3f1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3f20:	6013      	str	r3, [r2, #0]
    3f22:	9b06      	ldr	r3, [sp, #24]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d103      	bne.n	3f30 <_dtoa_r+0x7c>
    3f28:	0324      	lsls	r4, r4, #12
    3f2a:	d101      	bne.n	3f30 <_dtoa_r+0x7c>
    3f2c:	f000 fd91 	bl	4a52 <_dtoa_r+0xb9e>
    3f30:	4bb1      	ldr	r3, [pc, #708]	; (41f8 <_dtoa_r+0x344>)
    3f32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3f34:	930a      	str	r3, [sp, #40]	; 0x28
    3f36:	4bb1      	ldr	r3, [pc, #708]	; (41fc <_dtoa_r+0x348>)
    3f38:	2a00      	cmp	r2, #0
    3f3a:	d001      	beq.n	3f40 <_dtoa_r+0x8c>
    3f3c:	f000 fd8f 	bl	4a5e <_dtoa_r+0xbaa>
    3f40:	f000 fd8f 	bl	4a62 <_dtoa_r+0xbae>
    3f44:	2300      	movs	r3, #0
    3f46:	602b      	str	r3, [r5, #0]
    3f48:	e7e1      	b.n	3f0e <_dtoa_r+0x5a>
    3f4a:	9e06      	ldr	r6, [sp, #24]
    3f4c:	9f07      	ldr	r7, [sp, #28]
    3f4e:	2200      	movs	r2, #0
    3f50:	2300      	movs	r3, #0
    3f52:	0030      	movs	r0, r6
    3f54:	0039      	movs	r1, r7
    3f56:	f001 ff0d 	bl	5d74 <__aeabi_dcmpeq>
    3f5a:	1e05      	subs	r5, r0, #0
    3f5c:	d00e      	beq.n	3f7c <_dtoa_r+0xc8>
    3f5e:	2301      	movs	r3, #1
    3f60:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3f62:	6013      	str	r3, [r2, #0]
    3f64:	4ba6      	ldr	r3, [pc, #664]	; (4200 <_dtoa_r+0x34c>)
    3f66:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3f68:	930a      	str	r3, [sp, #40]	; 0x28
    3f6a:	2a00      	cmp	r2, #0
    3f6c:	d101      	bne.n	3f72 <_dtoa_r+0xbe>
    3f6e:	f000 fd78 	bl	4a62 <_dtoa_r+0xbae>
    3f72:	4aa4      	ldr	r2, [pc, #656]	; (4204 <_dtoa_r+0x350>)
    3f74:	9926      	ldr	r1, [sp, #152]	; 0x98
    3f76:	600a      	str	r2, [r1, #0]
    3f78:	f000 fd73 	bl	4a62 <_dtoa_r+0xbae>
    3f7c:	ab1a      	add	r3, sp, #104	; 0x68
    3f7e:	9301      	str	r3, [sp, #4]
    3f80:	ab1b      	add	r3, sp, #108	; 0x6c
    3f82:	9300      	str	r3, [sp, #0]
    3f84:	0032      	movs	r2, r6
    3f86:	003b      	movs	r3, r7
    3f88:	9804      	ldr	r0, [sp, #16]
    3f8a:	f001 fa25 	bl	53d8 <__d2b>
    3f8e:	0063      	lsls	r3, r4, #1
    3f90:	9005      	str	r0, [sp, #20]
    3f92:	0d5b      	lsrs	r3, r3, #21
    3f94:	d100      	bne.n	3f98 <_dtoa_r+0xe4>
    3f96:	e07f      	b.n	4098 <_dtoa_r+0x1e4>
    3f98:	033a      	lsls	r2, r7, #12
    3f9a:	4c9b      	ldr	r4, [pc, #620]	; (4208 <_dtoa_r+0x354>)
    3f9c:	0b12      	lsrs	r2, r2, #12
    3f9e:	4314      	orrs	r4, r2
    3fa0:	0021      	movs	r1, r4
    3fa2:	4a9a      	ldr	r2, [pc, #616]	; (420c <_dtoa_r+0x358>)
    3fa4:	0030      	movs	r0, r6
    3fa6:	9518      	str	r5, [sp, #96]	; 0x60
    3fa8:	189e      	adds	r6, r3, r2
    3faa:	2200      	movs	r2, #0
    3fac:	4b98      	ldr	r3, [pc, #608]	; (4210 <_dtoa_r+0x35c>)
    3fae:	f003 f8d3 	bl	7158 <__aeabi_dsub>
    3fb2:	4a98      	ldr	r2, [pc, #608]	; (4214 <_dtoa_r+0x360>)
    3fb4:	4b98      	ldr	r3, [pc, #608]	; (4218 <_dtoa_r+0x364>)
    3fb6:	f002 fe4f 	bl	6c58 <__aeabi_dmul>
    3fba:	4a98      	ldr	r2, [pc, #608]	; (421c <_dtoa_r+0x368>)
    3fbc:	4b98      	ldr	r3, [pc, #608]	; (4220 <_dtoa_r+0x36c>)
    3fbe:	f001 ff07 	bl	5dd0 <__aeabi_dadd>
    3fc2:	0004      	movs	r4, r0
    3fc4:	0030      	movs	r0, r6
    3fc6:	000d      	movs	r5, r1
    3fc8:	f003 fc30 	bl	782c <__aeabi_i2d>
    3fcc:	4a95      	ldr	r2, [pc, #596]	; (4224 <_dtoa_r+0x370>)
    3fce:	4b96      	ldr	r3, [pc, #600]	; (4228 <_dtoa_r+0x374>)
    3fd0:	f002 fe42 	bl	6c58 <__aeabi_dmul>
    3fd4:	0002      	movs	r2, r0
    3fd6:	000b      	movs	r3, r1
    3fd8:	0020      	movs	r0, r4
    3fda:	0029      	movs	r1, r5
    3fdc:	f001 fef8 	bl	5dd0 <__aeabi_dadd>
    3fe0:	0004      	movs	r4, r0
    3fe2:	000d      	movs	r5, r1
    3fe4:	f003 fbee 	bl	77c4 <__aeabi_d2iz>
    3fe8:	2200      	movs	r2, #0
    3fea:	9003      	str	r0, [sp, #12]
    3fec:	2300      	movs	r3, #0
    3fee:	0020      	movs	r0, r4
    3ff0:	0029      	movs	r1, r5
    3ff2:	f001 fec5 	bl	5d80 <__aeabi_dcmplt>
    3ff6:	2800      	cmp	r0, #0
    3ff8:	d00e      	beq.n	4018 <_dtoa_r+0x164>
    3ffa:	9803      	ldr	r0, [sp, #12]
    3ffc:	f003 fc16 	bl	782c <__aeabi_i2d>
    4000:	000b      	movs	r3, r1
    4002:	0002      	movs	r2, r0
    4004:	0029      	movs	r1, r5
    4006:	0020      	movs	r0, r4
    4008:	f001 feb4 	bl	5d74 <__aeabi_dcmpeq>
    400c:	0003      	movs	r3, r0
    400e:	4258      	negs	r0, r3
    4010:	4158      	adcs	r0, r3
    4012:	9b03      	ldr	r3, [sp, #12]
    4014:	1a1b      	subs	r3, r3, r0
    4016:	9303      	str	r3, [sp, #12]
    4018:	2301      	movs	r3, #1
    401a:	9316      	str	r3, [sp, #88]	; 0x58
    401c:	9b03      	ldr	r3, [sp, #12]
    401e:	2b16      	cmp	r3, #22
    4020:	d80f      	bhi.n	4042 <_dtoa_r+0x18e>
    4022:	4982      	ldr	r1, [pc, #520]	; (422c <_dtoa_r+0x378>)
    4024:	00db      	lsls	r3, r3, #3
    4026:	18c9      	adds	r1, r1, r3
    4028:	6808      	ldr	r0, [r1, #0]
    402a:	6849      	ldr	r1, [r1, #4]
    402c:	9a06      	ldr	r2, [sp, #24]
    402e:	9b07      	ldr	r3, [sp, #28]
    4030:	f001 feba 	bl	5da8 <__aeabi_dcmpgt>
    4034:	2800      	cmp	r0, #0
    4036:	d04b      	beq.n	40d0 <_dtoa_r+0x21c>
    4038:	9b03      	ldr	r3, [sp, #12]
    403a:	3b01      	subs	r3, #1
    403c:	9303      	str	r3, [sp, #12]
    403e:	2300      	movs	r3, #0
    4040:	9316      	str	r3, [sp, #88]	; 0x58
    4042:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4044:	1b9e      	subs	r6, r3, r6
    4046:	2300      	movs	r3, #0
    4048:	930b      	str	r3, [sp, #44]	; 0x2c
    404a:	0033      	movs	r3, r6
    404c:	3b01      	subs	r3, #1
    404e:	930c      	str	r3, [sp, #48]	; 0x30
    4050:	d504      	bpl.n	405c <_dtoa_r+0x1a8>
    4052:	2301      	movs	r3, #1
    4054:	1b9b      	subs	r3, r3, r6
    4056:	930b      	str	r3, [sp, #44]	; 0x2c
    4058:	2300      	movs	r3, #0
    405a:	930c      	str	r3, [sp, #48]	; 0x30
    405c:	9b03      	ldr	r3, [sp, #12]
    405e:	2b00      	cmp	r3, #0
    4060:	db38      	blt.n	40d4 <_dtoa_r+0x220>
    4062:	9a03      	ldr	r2, [sp, #12]
    4064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4066:	4694      	mov	ip, r2
    4068:	4463      	add	r3, ip
    406a:	930c      	str	r3, [sp, #48]	; 0x30
    406c:	2300      	movs	r3, #0
    406e:	920f      	str	r2, [sp, #60]	; 0x3c
    4070:	9308      	str	r3, [sp, #32]
    4072:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4074:	2501      	movs	r5, #1
    4076:	2b09      	cmp	r3, #9
    4078:	d900      	bls.n	407c <_dtoa_r+0x1c8>
    407a:	e091      	b.n	41a0 <_dtoa_r+0x2ec>
    407c:	2b05      	cmp	r3, #5
    407e:	dd02      	ble.n	4086 <_dtoa_r+0x1d2>
    4080:	2500      	movs	r5, #0
    4082:	3b04      	subs	r3, #4
    4084:	9322      	str	r3, [sp, #136]	; 0x88
    4086:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4088:	1e98      	subs	r0, r3, #2
    408a:	2803      	cmp	r0, #3
    408c:	d900      	bls.n	4090 <_dtoa_r+0x1dc>
    408e:	e091      	b.n	41b4 <_dtoa_r+0x300>
    4090:	f001 fce0 	bl	5a54 <__gnu_thumb1_case_uqi>
    4094:	76298482 	.word	0x76298482
    4098:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    409a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    409c:	189e      	adds	r6, r3, r2
    409e:	4b64      	ldr	r3, [pc, #400]	; (4230 <_dtoa_r+0x37c>)
    40a0:	18f2      	adds	r2, r6, r3
    40a2:	2a20      	cmp	r2, #32
    40a4:	dd0f      	ble.n	40c6 <_dtoa_r+0x212>
    40a6:	4b63      	ldr	r3, [pc, #396]	; (4234 <_dtoa_r+0x380>)
    40a8:	9806      	ldr	r0, [sp, #24]
    40aa:	18f3      	adds	r3, r6, r3
    40ac:	40d8      	lsrs	r0, r3
    40ae:	2340      	movs	r3, #64	; 0x40
    40b0:	1a9b      	subs	r3, r3, r2
    40b2:	409c      	lsls	r4, r3
    40b4:	4320      	orrs	r0, r4
    40b6:	f003 fbfb 	bl	78b0 <__aeabi_ui2d>
    40ba:	2301      	movs	r3, #1
    40bc:	4c5e      	ldr	r4, [pc, #376]	; (4238 <_dtoa_r+0x384>)
    40be:	3e01      	subs	r6, #1
    40c0:	1909      	adds	r1, r1, r4
    40c2:	9318      	str	r3, [sp, #96]	; 0x60
    40c4:	e771      	b.n	3faa <_dtoa_r+0xf6>
    40c6:	2320      	movs	r3, #32
    40c8:	9806      	ldr	r0, [sp, #24]
    40ca:	1a9b      	subs	r3, r3, r2
    40cc:	4098      	lsls	r0, r3
    40ce:	e7f2      	b.n	40b6 <_dtoa_r+0x202>
    40d0:	9016      	str	r0, [sp, #88]	; 0x58
    40d2:	e7b6      	b.n	4042 <_dtoa_r+0x18e>
    40d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40d6:	9a03      	ldr	r2, [sp, #12]
    40d8:	1a9b      	subs	r3, r3, r2
    40da:	930b      	str	r3, [sp, #44]	; 0x2c
    40dc:	4253      	negs	r3, r2
    40de:	9308      	str	r3, [sp, #32]
    40e0:	2300      	movs	r3, #0
    40e2:	930f      	str	r3, [sp, #60]	; 0x3c
    40e4:	e7c5      	b.n	4072 <_dtoa_r+0x1be>
    40e6:	2301      	movs	r3, #1
    40e8:	930e      	str	r3, [sp, #56]	; 0x38
    40ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    40ec:	2b00      	cmp	r3, #0
    40ee:	dd65      	ble.n	41bc <_dtoa_r+0x308>
    40f0:	001f      	movs	r7, r3
    40f2:	930d      	str	r3, [sp, #52]	; 0x34
    40f4:	9a04      	ldr	r2, [sp, #16]
    40f6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    40f8:	2200      	movs	r2, #0
    40fa:	6062      	str	r2, [r4, #4]
    40fc:	3204      	adds	r2, #4
    40fe:	0011      	movs	r1, r2
    4100:	3114      	adds	r1, #20
    4102:	4299      	cmp	r1, r3
    4104:	d95f      	bls.n	41c6 <_dtoa_r+0x312>
    4106:	6861      	ldr	r1, [r4, #4]
    4108:	9804      	ldr	r0, [sp, #16]
    410a:	f000 fed6 	bl	4eba <_Balloc>
    410e:	9b04      	ldr	r3, [sp, #16]
    4110:	6020      	str	r0, [r4, #0]
    4112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4114:	681b      	ldr	r3, [r3, #0]
    4116:	930a      	str	r3, [sp, #40]	; 0x28
    4118:	2f0e      	cmp	r7, #14
    411a:	d900      	bls.n	411e <_dtoa_r+0x26a>
    411c:	e105      	b.n	432a <_dtoa_r+0x476>
    411e:	2d00      	cmp	r5, #0
    4120:	d100      	bne.n	4124 <_dtoa_r+0x270>
    4122:	e102      	b.n	432a <_dtoa_r+0x476>
    4124:	9b06      	ldr	r3, [sp, #24]
    4126:	9c07      	ldr	r4, [sp, #28]
    4128:	9314      	str	r3, [sp, #80]	; 0x50
    412a:	9415      	str	r4, [sp, #84]	; 0x54
    412c:	9b03      	ldr	r3, [sp, #12]
    412e:	2b00      	cmp	r3, #0
    4130:	dc00      	bgt.n	4134 <_dtoa_r+0x280>
    4132:	e085      	b.n	4240 <_dtoa_r+0x38c>
    4134:	001a      	movs	r2, r3
    4136:	210f      	movs	r1, #15
    4138:	4b3c      	ldr	r3, [pc, #240]	; (422c <_dtoa_r+0x378>)
    413a:	400a      	ands	r2, r1
    413c:	00d2      	lsls	r2, r2, #3
    413e:	189b      	adds	r3, r3, r2
    4140:	685c      	ldr	r4, [r3, #4]
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	9310      	str	r3, [sp, #64]	; 0x40
    4146:	9411      	str	r4, [sp, #68]	; 0x44
    4148:	9b03      	ldr	r3, [sp, #12]
    414a:	2402      	movs	r4, #2
    414c:	111d      	asrs	r5, r3, #4
    414e:	06eb      	lsls	r3, r5, #27
    4150:	d50a      	bpl.n	4168 <_dtoa_r+0x2b4>
    4152:	4b3a      	ldr	r3, [pc, #232]	; (423c <_dtoa_r+0x388>)
    4154:	400d      	ands	r5, r1
    4156:	6a1a      	ldr	r2, [r3, #32]
    4158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    415a:	9814      	ldr	r0, [sp, #80]	; 0x50
    415c:	9915      	ldr	r1, [sp, #84]	; 0x54
    415e:	f002 f947 	bl	63f0 <__aeabi_ddiv>
    4162:	9006      	str	r0, [sp, #24]
    4164:	9107      	str	r1, [sp, #28]
    4166:	3401      	adds	r4, #1
    4168:	4e34      	ldr	r6, [pc, #208]	; (423c <_dtoa_r+0x388>)
    416a:	2d00      	cmp	r5, #0
    416c:	d130      	bne.n	41d0 <_dtoa_r+0x31c>
    416e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4170:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4172:	9806      	ldr	r0, [sp, #24]
    4174:	9907      	ldr	r1, [sp, #28]
    4176:	f002 f93b 	bl	63f0 <__aeabi_ddiv>
    417a:	9006      	str	r0, [sp, #24]
    417c:	9107      	str	r1, [sp, #28]
    417e:	e07a      	b.n	4276 <_dtoa_r+0x3c2>
    4180:	2301      	movs	r3, #1
    4182:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4184:	930e      	str	r3, [sp, #56]	; 0x38
    4186:	4694      	mov	ip, r2
    4188:	9b03      	ldr	r3, [sp, #12]
    418a:	4463      	add	r3, ip
    418c:	1c5f      	adds	r7, r3, #1
    418e:	930d      	str	r3, [sp, #52]	; 0x34
    4190:	1e3b      	subs	r3, r7, #0
    4192:	dcaf      	bgt.n	40f4 <_dtoa_r+0x240>
    4194:	2301      	movs	r3, #1
    4196:	e7ad      	b.n	40f4 <_dtoa_r+0x240>
    4198:	2300      	movs	r3, #0
    419a:	e7a5      	b.n	40e8 <_dtoa_r+0x234>
    419c:	2300      	movs	r3, #0
    419e:	e7f0      	b.n	4182 <_dtoa_r+0x2ce>
    41a0:	2300      	movs	r3, #0
    41a2:	950e      	str	r5, [sp, #56]	; 0x38
    41a4:	9322      	str	r3, [sp, #136]	; 0x88
    41a6:	3b01      	subs	r3, #1
    41a8:	2200      	movs	r2, #0
    41aa:	930d      	str	r3, [sp, #52]	; 0x34
    41ac:	001f      	movs	r7, r3
    41ae:	3313      	adds	r3, #19
    41b0:	9223      	str	r2, [sp, #140]	; 0x8c
    41b2:	e79f      	b.n	40f4 <_dtoa_r+0x240>
    41b4:	2301      	movs	r3, #1
    41b6:	930e      	str	r3, [sp, #56]	; 0x38
    41b8:	3b02      	subs	r3, #2
    41ba:	e7f5      	b.n	41a8 <_dtoa_r+0x2f4>
    41bc:	2301      	movs	r3, #1
    41be:	930d      	str	r3, [sp, #52]	; 0x34
    41c0:	001f      	movs	r7, r3
    41c2:	001a      	movs	r2, r3
    41c4:	e7f4      	b.n	41b0 <_dtoa_r+0x2fc>
    41c6:	6861      	ldr	r1, [r4, #4]
    41c8:	0052      	lsls	r2, r2, #1
    41ca:	3101      	adds	r1, #1
    41cc:	6061      	str	r1, [r4, #4]
    41ce:	e796      	b.n	40fe <_dtoa_r+0x24a>
    41d0:	2301      	movs	r3, #1
    41d2:	421d      	tst	r5, r3
    41d4:	d008      	beq.n	41e8 <_dtoa_r+0x334>
    41d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    41d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    41da:	18e4      	adds	r4, r4, r3
    41dc:	6832      	ldr	r2, [r6, #0]
    41de:	6873      	ldr	r3, [r6, #4]
    41e0:	f002 fd3a 	bl	6c58 <__aeabi_dmul>
    41e4:	9010      	str	r0, [sp, #64]	; 0x40
    41e6:	9111      	str	r1, [sp, #68]	; 0x44
    41e8:	106d      	asrs	r5, r5, #1
    41ea:	3608      	adds	r6, #8
    41ec:	e7bd      	b.n	416a <_dtoa_r+0x2b6>
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	7ff00000 	.word	0x7ff00000
    41f4:	0000270f 	.word	0x0000270f
    41f8:	00007ce5 	.word	0x00007ce5
    41fc:	00007ce8 	.word	0x00007ce8
    4200:	00007cb8 	.word	0x00007cb8
    4204:	00007cb9 	.word	0x00007cb9
    4208:	3ff00000 	.word	0x3ff00000
    420c:	fffffc01 	.word	0xfffffc01
    4210:	3ff80000 	.word	0x3ff80000
    4214:	636f4361 	.word	0x636f4361
    4218:	3fd287a7 	.word	0x3fd287a7
    421c:	8b60c8b3 	.word	0x8b60c8b3
    4220:	3fc68a28 	.word	0x3fc68a28
    4224:	509f79fb 	.word	0x509f79fb
    4228:	3fd34413 	.word	0x3fd34413
    422c:	00007d78 	.word	0x00007d78
    4230:	00000432 	.word	0x00000432
    4234:	00000412 	.word	0x00000412
    4238:	fe100000 	.word	0xfe100000
    423c:	00007d50 	.word	0x00007d50
    4240:	9b03      	ldr	r3, [sp, #12]
    4242:	2402      	movs	r4, #2
    4244:	2b00      	cmp	r3, #0
    4246:	d016      	beq.n	4276 <_dtoa_r+0x3c2>
    4248:	9814      	ldr	r0, [sp, #80]	; 0x50
    424a:	9915      	ldr	r1, [sp, #84]	; 0x54
    424c:	425d      	negs	r5, r3
    424e:	230f      	movs	r3, #15
    4250:	4aca      	ldr	r2, [pc, #808]	; (457c <_dtoa_r+0x6c8>)
    4252:	402b      	ands	r3, r5
    4254:	00db      	lsls	r3, r3, #3
    4256:	18d3      	adds	r3, r2, r3
    4258:	681a      	ldr	r2, [r3, #0]
    425a:	685b      	ldr	r3, [r3, #4]
    425c:	f002 fcfc 	bl	6c58 <__aeabi_dmul>
    4260:	2300      	movs	r3, #0
    4262:	9006      	str	r0, [sp, #24]
    4264:	9107      	str	r1, [sp, #28]
    4266:	4ec6      	ldr	r6, [pc, #792]	; (4580 <_dtoa_r+0x6cc>)
    4268:	112d      	asrs	r5, r5, #4
    426a:	2d00      	cmp	r5, #0
    426c:	d000      	beq.n	4270 <_dtoa_r+0x3bc>
    426e:	e08c      	b.n	438a <_dtoa_r+0x4d6>
    4270:	2b00      	cmp	r3, #0
    4272:	d000      	beq.n	4276 <_dtoa_r+0x3c2>
    4274:	e781      	b.n	417a <_dtoa_r+0x2c6>
    4276:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4278:	2b00      	cmp	r3, #0
    427a:	d100      	bne.n	427e <_dtoa_r+0x3ca>
    427c:	e091      	b.n	43a2 <_dtoa_r+0x4ee>
    427e:	9a06      	ldr	r2, [sp, #24]
    4280:	9b07      	ldr	r3, [sp, #28]
    4282:	9210      	str	r2, [sp, #64]	; 0x40
    4284:	9311      	str	r3, [sp, #68]	; 0x44
    4286:	9810      	ldr	r0, [sp, #64]	; 0x40
    4288:	9911      	ldr	r1, [sp, #68]	; 0x44
    428a:	2200      	movs	r2, #0
    428c:	4bbd      	ldr	r3, [pc, #756]	; (4584 <_dtoa_r+0x6d0>)
    428e:	f001 fd77 	bl	5d80 <__aeabi_dcmplt>
    4292:	2800      	cmp	r0, #0
    4294:	d100      	bne.n	4298 <_dtoa_r+0x3e4>
    4296:	e084      	b.n	43a2 <_dtoa_r+0x4ee>
    4298:	2f00      	cmp	r7, #0
    429a:	d100      	bne.n	429e <_dtoa_r+0x3ea>
    429c:	e081      	b.n	43a2 <_dtoa_r+0x4ee>
    429e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    42a0:	2b00      	cmp	r3, #0
    42a2:	dd3e      	ble.n	4322 <_dtoa_r+0x46e>
    42a4:	9810      	ldr	r0, [sp, #64]	; 0x40
    42a6:	9911      	ldr	r1, [sp, #68]	; 0x44
    42a8:	9b03      	ldr	r3, [sp, #12]
    42aa:	2200      	movs	r2, #0
    42ac:	1e5e      	subs	r6, r3, #1
    42ae:	4bb6      	ldr	r3, [pc, #728]	; (4588 <_dtoa_r+0x6d4>)
    42b0:	f002 fcd2 	bl	6c58 <__aeabi_dmul>
    42b4:	9006      	str	r0, [sp, #24]
    42b6:	9107      	str	r1, [sp, #28]
    42b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    42ba:	3401      	adds	r4, #1
    42bc:	0020      	movs	r0, r4
    42be:	f003 fab5 	bl	782c <__aeabi_i2d>
    42c2:	9a06      	ldr	r2, [sp, #24]
    42c4:	9b07      	ldr	r3, [sp, #28]
    42c6:	f002 fcc7 	bl	6c58 <__aeabi_dmul>
    42ca:	2200      	movs	r2, #0
    42cc:	4baf      	ldr	r3, [pc, #700]	; (458c <_dtoa_r+0x6d8>)
    42ce:	f001 fd7f 	bl	5dd0 <__aeabi_dadd>
    42d2:	9012      	str	r0, [sp, #72]	; 0x48
    42d4:	9113      	str	r1, [sp, #76]	; 0x4c
    42d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    42d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    42da:	4aad      	ldr	r2, [pc, #692]	; (4590 <_dtoa_r+0x6dc>)
    42dc:	9310      	str	r3, [sp, #64]	; 0x40
    42de:	9411      	str	r4, [sp, #68]	; 0x44
    42e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    42e2:	189c      	adds	r4, r3, r2
    42e4:	9411      	str	r4, [sp, #68]	; 0x44
    42e6:	2d00      	cmp	r5, #0
    42e8:	d15e      	bne.n	43a8 <_dtoa_r+0x4f4>
    42ea:	9806      	ldr	r0, [sp, #24]
    42ec:	9907      	ldr	r1, [sp, #28]
    42ee:	2200      	movs	r2, #0
    42f0:	4ba8      	ldr	r3, [pc, #672]	; (4594 <_dtoa_r+0x6e0>)
    42f2:	f002 ff31 	bl	7158 <__aeabi_dsub>
    42f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    42f8:	0023      	movs	r3, r4
    42fa:	9006      	str	r0, [sp, #24]
    42fc:	9107      	str	r1, [sp, #28]
    42fe:	f001 fd53 	bl	5da8 <__aeabi_dcmpgt>
    4302:	2800      	cmp	r0, #0
    4304:	d000      	beq.n	4308 <_dtoa_r+0x454>
    4306:	e301      	b.n	490c <_dtoa_r+0xa58>
    4308:	48a3      	ldr	r0, [pc, #652]	; (4598 <_dtoa_r+0x6e4>)
    430a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    430c:	4684      	mov	ip, r0
    430e:	4461      	add	r1, ip
    4310:	000b      	movs	r3, r1
    4312:	9806      	ldr	r0, [sp, #24]
    4314:	9907      	ldr	r1, [sp, #28]
    4316:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4318:	f001 fd32 	bl	5d80 <__aeabi_dcmplt>
    431c:	2800      	cmp	r0, #0
    431e:	d000      	beq.n	4322 <_dtoa_r+0x46e>
    4320:	e2e8      	b.n	48f4 <_dtoa_r+0xa40>
    4322:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4324:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4326:	9306      	str	r3, [sp, #24]
    4328:	9407      	str	r4, [sp, #28]
    432a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    432c:	2b00      	cmp	r3, #0
    432e:	da00      	bge.n	4332 <_dtoa_r+0x47e>
    4330:	e157      	b.n	45e2 <_dtoa_r+0x72e>
    4332:	9a03      	ldr	r2, [sp, #12]
    4334:	2a0e      	cmp	r2, #14
    4336:	dd00      	ble.n	433a <_dtoa_r+0x486>
    4338:	e153      	b.n	45e2 <_dtoa_r+0x72e>
    433a:	4b90      	ldr	r3, [pc, #576]	; (457c <_dtoa_r+0x6c8>)
    433c:	00d2      	lsls	r2, r2, #3
    433e:	189b      	adds	r3, r3, r2
    4340:	685c      	ldr	r4, [r3, #4]
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	9308      	str	r3, [sp, #32]
    4346:	9409      	str	r4, [sp, #36]	; 0x24
    4348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    434a:	2b00      	cmp	r3, #0
    434c:	db00      	blt.n	4350 <_dtoa_r+0x49c>
    434e:	e0ce      	b.n	44ee <_dtoa_r+0x63a>
    4350:	2f00      	cmp	r7, #0
    4352:	dd00      	ble.n	4356 <_dtoa_r+0x4a2>
    4354:	e0cb      	b.n	44ee <_dtoa_r+0x63a>
    4356:	d000      	beq.n	435a <_dtoa_r+0x4a6>
    4358:	e2cf      	b.n	48fa <_dtoa_r+0xa46>
    435a:	9808      	ldr	r0, [sp, #32]
    435c:	9909      	ldr	r1, [sp, #36]	; 0x24
    435e:	2200      	movs	r2, #0
    4360:	4b8c      	ldr	r3, [pc, #560]	; (4594 <_dtoa_r+0x6e0>)
    4362:	f002 fc79 	bl	6c58 <__aeabi_dmul>
    4366:	9a06      	ldr	r2, [sp, #24]
    4368:	9b07      	ldr	r3, [sp, #28]
    436a:	f001 fd27 	bl	5dbc <__aeabi_dcmpge>
    436e:	003e      	movs	r6, r7
    4370:	9708      	str	r7, [sp, #32]
    4372:	2800      	cmp	r0, #0
    4374:	d000      	beq.n	4378 <_dtoa_r+0x4c4>
    4376:	e2a4      	b.n	48c2 <_dtoa_r+0xa0e>
    4378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    437a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    437c:	1c5d      	adds	r5, r3, #1
    437e:	2331      	movs	r3, #49	; 0x31
    4380:	7013      	strb	r3, [r2, #0]
    4382:	9b03      	ldr	r3, [sp, #12]
    4384:	3301      	adds	r3, #1
    4386:	9303      	str	r3, [sp, #12]
    4388:	e29f      	b.n	48ca <_dtoa_r+0xa16>
    438a:	2201      	movs	r2, #1
    438c:	4215      	tst	r5, r2
    438e:	d005      	beq.n	439c <_dtoa_r+0x4e8>
    4390:	18a4      	adds	r4, r4, r2
    4392:	6832      	ldr	r2, [r6, #0]
    4394:	6873      	ldr	r3, [r6, #4]
    4396:	f002 fc5f 	bl	6c58 <__aeabi_dmul>
    439a:	2301      	movs	r3, #1
    439c:	106d      	asrs	r5, r5, #1
    439e:	3608      	adds	r6, #8
    43a0:	e763      	b.n	426a <_dtoa_r+0x3b6>
    43a2:	9e03      	ldr	r6, [sp, #12]
    43a4:	003d      	movs	r5, r7
    43a6:	e789      	b.n	42bc <_dtoa_r+0x408>
    43a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    43aa:	1e69      	subs	r1, r5, #1
    43ac:	1952      	adds	r2, r2, r5
    43ae:	9217      	str	r2, [sp, #92]	; 0x5c
    43b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    43b2:	4b72      	ldr	r3, [pc, #456]	; (457c <_dtoa_r+0x6c8>)
    43b4:	00c9      	lsls	r1, r1, #3
    43b6:	2a00      	cmp	r2, #0
    43b8:	d04a      	beq.n	4450 <_dtoa_r+0x59c>
    43ba:	185b      	adds	r3, r3, r1
    43bc:	681a      	ldr	r2, [r3, #0]
    43be:	685b      	ldr	r3, [r3, #4]
    43c0:	2000      	movs	r0, #0
    43c2:	4976      	ldr	r1, [pc, #472]	; (459c <_dtoa_r+0x6e8>)
    43c4:	f002 f814 	bl	63f0 <__aeabi_ddiv>
    43c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    43ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    43cc:	f002 fec4 	bl	7158 <__aeabi_dsub>
    43d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    43d2:	9010      	str	r0, [sp, #64]	; 0x40
    43d4:	9111      	str	r1, [sp, #68]	; 0x44
    43d6:	9312      	str	r3, [sp, #72]	; 0x48
    43d8:	9806      	ldr	r0, [sp, #24]
    43da:	9907      	ldr	r1, [sp, #28]
    43dc:	f003 f9f2 	bl	77c4 <__aeabi_d2iz>
    43e0:	0004      	movs	r4, r0
    43e2:	f003 fa23 	bl	782c <__aeabi_i2d>
    43e6:	0002      	movs	r2, r0
    43e8:	000b      	movs	r3, r1
    43ea:	9806      	ldr	r0, [sp, #24]
    43ec:	9907      	ldr	r1, [sp, #28]
    43ee:	f002 feb3 	bl	7158 <__aeabi_dsub>
    43f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    43f4:	3430      	adds	r4, #48	; 0x30
    43f6:	1c5d      	adds	r5, r3, #1
    43f8:	701c      	strb	r4, [r3, #0]
    43fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    43fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    43fe:	9006      	str	r0, [sp, #24]
    4400:	9107      	str	r1, [sp, #28]
    4402:	f001 fcbd 	bl	5d80 <__aeabi_dcmplt>
    4406:	2800      	cmp	r0, #0
    4408:	d165      	bne.n	44d6 <_dtoa_r+0x622>
    440a:	9a06      	ldr	r2, [sp, #24]
    440c:	9b07      	ldr	r3, [sp, #28]
    440e:	2000      	movs	r0, #0
    4410:	495c      	ldr	r1, [pc, #368]	; (4584 <_dtoa_r+0x6d0>)
    4412:	f002 fea1 	bl	7158 <__aeabi_dsub>
    4416:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4418:	9b11      	ldr	r3, [sp, #68]	; 0x44
    441a:	f001 fcb1 	bl	5d80 <__aeabi_dcmplt>
    441e:	2800      	cmp	r0, #0
    4420:	d000      	beq.n	4424 <_dtoa_r+0x570>
    4422:	e0be      	b.n	45a2 <_dtoa_r+0x6ee>
    4424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4426:	429d      	cmp	r5, r3
    4428:	d100      	bne.n	442c <_dtoa_r+0x578>
    442a:	e77a      	b.n	4322 <_dtoa_r+0x46e>
    442c:	9810      	ldr	r0, [sp, #64]	; 0x40
    442e:	9911      	ldr	r1, [sp, #68]	; 0x44
    4430:	2200      	movs	r2, #0
    4432:	4b55      	ldr	r3, [pc, #340]	; (4588 <_dtoa_r+0x6d4>)
    4434:	f002 fc10 	bl	6c58 <__aeabi_dmul>
    4438:	2200      	movs	r2, #0
    443a:	9010      	str	r0, [sp, #64]	; 0x40
    443c:	9111      	str	r1, [sp, #68]	; 0x44
    443e:	9806      	ldr	r0, [sp, #24]
    4440:	9907      	ldr	r1, [sp, #28]
    4442:	4b51      	ldr	r3, [pc, #324]	; (4588 <_dtoa_r+0x6d4>)
    4444:	f002 fc08 	bl	6c58 <__aeabi_dmul>
    4448:	9512      	str	r5, [sp, #72]	; 0x48
    444a:	9006      	str	r0, [sp, #24]
    444c:	9107      	str	r1, [sp, #28]
    444e:	e7c3      	b.n	43d8 <_dtoa_r+0x524>
    4450:	1859      	adds	r1, r3, r1
    4452:	6808      	ldr	r0, [r1, #0]
    4454:	6849      	ldr	r1, [r1, #4]
    4456:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4458:	9b11      	ldr	r3, [sp, #68]	; 0x44
    445a:	f002 fbfd 	bl	6c58 <__aeabi_dmul>
    445e:	9010      	str	r0, [sp, #64]	; 0x40
    4460:	9111      	str	r1, [sp, #68]	; 0x44
    4462:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4464:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4466:	9806      	ldr	r0, [sp, #24]
    4468:	9907      	ldr	r1, [sp, #28]
    446a:	f003 f9ab 	bl	77c4 <__aeabi_d2iz>
    446e:	9012      	str	r0, [sp, #72]	; 0x48
    4470:	f003 f9dc 	bl	782c <__aeabi_i2d>
    4474:	0002      	movs	r2, r0
    4476:	000b      	movs	r3, r1
    4478:	9806      	ldr	r0, [sp, #24]
    447a:	9907      	ldr	r1, [sp, #28]
    447c:	f002 fe6c 	bl	7158 <__aeabi_dsub>
    4480:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4482:	9006      	str	r0, [sp, #24]
    4484:	9107      	str	r1, [sp, #28]
    4486:	3330      	adds	r3, #48	; 0x30
    4488:	7023      	strb	r3, [r4, #0]
    448a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    448c:	3401      	adds	r4, #1
    448e:	2200      	movs	r2, #0
    4490:	42a3      	cmp	r3, r4
    4492:	d124      	bne.n	44de <_dtoa_r+0x62a>
    4494:	4b41      	ldr	r3, [pc, #260]	; (459c <_dtoa_r+0x6e8>)
    4496:	9810      	ldr	r0, [sp, #64]	; 0x40
    4498:	9911      	ldr	r1, [sp, #68]	; 0x44
    449a:	f001 fc99 	bl	5dd0 <__aeabi_dadd>
    449e:	0002      	movs	r2, r0
    44a0:	000b      	movs	r3, r1
    44a2:	9806      	ldr	r0, [sp, #24]
    44a4:	9907      	ldr	r1, [sp, #28]
    44a6:	f001 fc7f 	bl	5da8 <__aeabi_dcmpgt>
    44aa:	2800      	cmp	r0, #0
    44ac:	d000      	beq.n	44b0 <_dtoa_r+0x5fc>
    44ae:	e078      	b.n	45a2 <_dtoa_r+0x6ee>
    44b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    44b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    44b4:	2000      	movs	r0, #0
    44b6:	4939      	ldr	r1, [pc, #228]	; (459c <_dtoa_r+0x6e8>)
    44b8:	f002 fe4e 	bl	7158 <__aeabi_dsub>
    44bc:	0002      	movs	r2, r0
    44be:	000b      	movs	r3, r1
    44c0:	9806      	ldr	r0, [sp, #24]
    44c2:	9907      	ldr	r1, [sp, #28]
    44c4:	f001 fc5c 	bl	5d80 <__aeabi_dcmplt>
    44c8:	2800      	cmp	r0, #0
    44ca:	d100      	bne.n	44ce <_dtoa_r+0x61a>
    44cc:	e729      	b.n	4322 <_dtoa_r+0x46e>
    44ce:	1e6b      	subs	r3, r5, #1
    44d0:	781a      	ldrb	r2, [r3, #0]
    44d2:	2a30      	cmp	r2, #48	; 0x30
    44d4:	d001      	beq.n	44da <_dtoa_r+0x626>
    44d6:	9603      	str	r6, [sp, #12]
    44d8:	e03f      	b.n	455a <_dtoa_r+0x6a6>
    44da:	001d      	movs	r5, r3
    44dc:	e7f7      	b.n	44ce <_dtoa_r+0x61a>
    44de:	9806      	ldr	r0, [sp, #24]
    44e0:	9907      	ldr	r1, [sp, #28]
    44e2:	4b29      	ldr	r3, [pc, #164]	; (4588 <_dtoa_r+0x6d4>)
    44e4:	f002 fbb8 	bl	6c58 <__aeabi_dmul>
    44e8:	9006      	str	r0, [sp, #24]
    44ea:	9107      	str	r1, [sp, #28]
    44ec:	e7bb      	b.n	4466 <_dtoa_r+0x5b2>
    44ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    44f0:	9a08      	ldr	r2, [sp, #32]
    44f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44f4:	9806      	ldr	r0, [sp, #24]
    44f6:	9907      	ldr	r1, [sp, #28]
    44f8:	f001 ff7a 	bl	63f0 <__aeabi_ddiv>
    44fc:	f003 f962 	bl	77c4 <__aeabi_d2iz>
    4500:	0004      	movs	r4, r0
    4502:	f003 f993 	bl	782c <__aeabi_i2d>
    4506:	9a08      	ldr	r2, [sp, #32]
    4508:	9b09      	ldr	r3, [sp, #36]	; 0x24
    450a:	f002 fba5 	bl	6c58 <__aeabi_dmul>
    450e:	000b      	movs	r3, r1
    4510:	0002      	movs	r2, r0
    4512:	9806      	ldr	r0, [sp, #24]
    4514:	9907      	ldr	r1, [sp, #28]
    4516:	f002 fe1f 	bl	7158 <__aeabi_dsub>
    451a:	0023      	movs	r3, r4
    451c:	3330      	adds	r3, #48	; 0x30
    451e:	7033      	strb	r3, [r6, #0]
    4520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4522:	1c75      	adds	r5, r6, #1
    4524:	1aeb      	subs	r3, r5, r3
    4526:	429f      	cmp	r7, r3
    4528:	d14c      	bne.n	45c4 <_dtoa_r+0x710>
    452a:	0002      	movs	r2, r0
    452c:	000b      	movs	r3, r1
    452e:	f001 fc4f 	bl	5dd0 <__aeabi_dadd>
    4532:	0006      	movs	r6, r0
    4534:	000f      	movs	r7, r1
    4536:	0002      	movs	r2, r0
    4538:	000b      	movs	r3, r1
    453a:	9808      	ldr	r0, [sp, #32]
    453c:	9909      	ldr	r1, [sp, #36]	; 0x24
    453e:	f001 fc1f 	bl	5d80 <__aeabi_dcmplt>
    4542:	2800      	cmp	r0, #0
    4544:	d12c      	bne.n	45a0 <_dtoa_r+0x6ec>
    4546:	9808      	ldr	r0, [sp, #32]
    4548:	9909      	ldr	r1, [sp, #36]	; 0x24
    454a:	0032      	movs	r2, r6
    454c:	003b      	movs	r3, r7
    454e:	f001 fc11 	bl	5d74 <__aeabi_dcmpeq>
    4552:	2800      	cmp	r0, #0
    4554:	d001      	beq.n	455a <_dtoa_r+0x6a6>
    4556:	07e3      	lsls	r3, r4, #31
    4558:	d422      	bmi.n	45a0 <_dtoa_r+0x6ec>
    455a:	9905      	ldr	r1, [sp, #20]
    455c:	9804      	ldr	r0, [sp, #16]
    455e:	f000 fce4 	bl	4f2a <_Bfree>
    4562:	2300      	movs	r3, #0
    4564:	702b      	strb	r3, [r5, #0]
    4566:	9b03      	ldr	r3, [sp, #12]
    4568:	9a24      	ldr	r2, [sp, #144]	; 0x90
    456a:	3301      	adds	r3, #1
    456c:	6013      	str	r3, [r2, #0]
    456e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4570:	2b00      	cmp	r3, #0
    4572:	d100      	bne.n	4576 <_dtoa_r+0x6c2>
    4574:	e275      	b.n	4a62 <_dtoa_r+0xbae>
    4576:	601d      	str	r5, [r3, #0]
    4578:	e273      	b.n	4a62 <_dtoa_r+0xbae>
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	00007d78 	.word	0x00007d78
    4580:	00007d50 	.word	0x00007d50
    4584:	3ff00000 	.word	0x3ff00000
    4588:	40240000 	.word	0x40240000
    458c:	401c0000 	.word	0x401c0000
    4590:	fcc00000 	.word	0xfcc00000
    4594:	40140000 	.word	0x40140000
    4598:	7cc00000 	.word	0x7cc00000
    459c:	3fe00000 	.word	0x3fe00000
    45a0:	9e03      	ldr	r6, [sp, #12]
    45a2:	1e6b      	subs	r3, r5, #1
    45a4:	781a      	ldrb	r2, [r3, #0]
    45a6:	2a39      	cmp	r2, #57	; 0x39
    45a8:	d106      	bne.n	45b8 <_dtoa_r+0x704>
    45aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    45ac:	429a      	cmp	r2, r3
    45ae:	d107      	bne.n	45c0 <_dtoa_r+0x70c>
    45b0:	2330      	movs	r3, #48	; 0x30
    45b2:	7013      	strb	r3, [r2, #0]
    45b4:	0013      	movs	r3, r2
    45b6:	3601      	adds	r6, #1
    45b8:	781a      	ldrb	r2, [r3, #0]
    45ba:	3201      	adds	r2, #1
    45bc:	701a      	strb	r2, [r3, #0]
    45be:	e78a      	b.n	44d6 <_dtoa_r+0x622>
    45c0:	001d      	movs	r5, r3
    45c2:	e7ee      	b.n	45a2 <_dtoa_r+0x6ee>
    45c4:	2200      	movs	r2, #0
    45c6:	4bcf      	ldr	r3, [pc, #828]	; (4904 <_dtoa_r+0xa50>)
    45c8:	f002 fb46 	bl	6c58 <__aeabi_dmul>
    45cc:	2200      	movs	r2, #0
    45ce:	2300      	movs	r3, #0
    45d0:	9006      	str	r0, [sp, #24]
    45d2:	9107      	str	r1, [sp, #28]
    45d4:	002e      	movs	r6, r5
    45d6:	f001 fbcd 	bl	5d74 <__aeabi_dcmpeq>
    45da:	2800      	cmp	r0, #0
    45dc:	d100      	bne.n	45e0 <_dtoa_r+0x72c>
    45de:	e787      	b.n	44f0 <_dtoa_r+0x63c>
    45e0:	e7bb      	b.n	455a <_dtoa_r+0x6a6>
    45e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    45e4:	2a00      	cmp	r2, #0
    45e6:	d100      	bne.n	45ea <_dtoa_r+0x736>
    45e8:	e087      	b.n	46fa <_dtoa_r+0x846>
    45ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
    45ec:	2a01      	cmp	r2, #1
    45ee:	dc6e      	bgt.n	46ce <_dtoa_r+0x81a>
    45f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    45f2:	2a00      	cmp	r2, #0
    45f4:	d067      	beq.n	46c6 <_dtoa_r+0x812>
    45f6:	4ac4      	ldr	r2, [pc, #784]	; (4908 <_dtoa_r+0xa54>)
    45f8:	189b      	adds	r3, r3, r2
    45fa:	9d08      	ldr	r5, [sp, #32]
    45fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    45fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4600:	2101      	movs	r1, #1
    4602:	18d2      	adds	r2, r2, r3
    4604:	920b      	str	r2, [sp, #44]	; 0x2c
    4606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4608:	9804      	ldr	r0, [sp, #16]
    460a:	18d3      	adds	r3, r2, r3
    460c:	930c      	str	r3, [sp, #48]	; 0x30
    460e:	f000 fd2a 	bl	5066 <__i2b>
    4612:	0006      	movs	r6, r0
    4614:	2c00      	cmp	r4, #0
    4616:	dd0e      	ble.n	4636 <_dtoa_r+0x782>
    4618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    461a:	2b00      	cmp	r3, #0
    461c:	dd0b      	ble.n	4636 <_dtoa_r+0x782>
    461e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4620:	0023      	movs	r3, r4
    4622:	4294      	cmp	r4, r2
    4624:	dd00      	ble.n	4628 <_dtoa_r+0x774>
    4626:	0013      	movs	r3, r2
    4628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    462a:	1ae4      	subs	r4, r4, r3
    462c:	1ad2      	subs	r2, r2, r3
    462e:	920b      	str	r2, [sp, #44]	; 0x2c
    4630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4632:	1ad3      	subs	r3, r2, r3
    4634:	930c      	str	r3, [sp, #48]	; 0x30
    4636:	9b08      	ldr	r3, [sp, #32]
    4638:	2b00      	cmp	r3, #0
    463a:	d01e      	beq.n	467a <_dtoa_r+0x7c6>
    463c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    463e:	2b00      	cmp	r3, #0
    4640:	d05f      	beq.n	4702 <_dtoa_r+0x84e>
    4642:	2d00      	cmp	r5, #0
    4644:	dd11      	ble.n	466a <_dtoa_r+0x7b6>
    4646:	0031      	movs	r1, r6
    4648:	002a      	movs	r2, r5
    464a:	9804      	ldr	r0, [sp, #16]
    464c:	f000 fda4 	bl	5198 <__pow5mult>
    4650:	9a05      	ldr	r2, [sp, #20]
    4652:	0001      	movs	r1, r0
    4654:	0006      	movs	r6, r0
    4656:	9804      	ldr	r0, [sp, #16]
    4658:	f000 fd0e 	bl	5078 <__multiply>
    465c:	9905      	ldr	r1, [sp, #20]
    465e:	9010      	str	r0, [sp, #64]	; 0x40
    4660:	9804      	ldr	r0, [sp, #16]
    4662:	f000 fc62 	bl	4f2a <_Bfree>
    4666:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4668:	9305      	str	r3, [sp, #20]
    466a:	9b08      	ldr	r3, [sp, #32]
    466c:	1b5a      	subs	r2, r3, r5
    466e:	d004      	beq.n	467a <_dtoa_r+0x7c6>
    4670:	9905      	ldr	r1, [sp, #20]
    4672:	9804      	ldr	r0, [sp, #16]
    4674:	f000 fd90 	bl	5198 <__pow5mult>
    4678:	9005      	str	r0, [sp, #20]
    467a:	2101      	movs	r1, #1
    467c:	9804      	ldr	r0, [sp, #16]
    467e:	f000 fcf2 	bl	5066 <__i2b>
    4682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4684:	9008      	str	r0, [sp, #32]
    4686:	2b00      	cmp	r3, #0
    4688:	dd3d      	ble.n	4706 <_dtoa_r+0x852>
    468a:	001a      	movs	r2, r3
    468c:	0001      	movs	r1, r0
    468e:	9804      	ldr	r0, [sp, #16]
    4690:	f000 fd82 	bl	5198 <__pow5mult>
    4694:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4696:	9008      	str	r0, [sp, #32]
    4698:	2500      	movs	r5, #0
    469a:	2b01      	cmp	r3, #1
    469c:	dc3b      	bgt.n	4716 <_dtoa_r+0x862>
    469e:	2500      	movs	r5, #0
    46a0:	9b06      	ldr	r3, [sp, #24]
    46a2:	42ab      	cmp	r3, r5
    46a4:	d133      	bne.n	470e <_dtoa_r+0x85a>
    46a6:	9b07      	ldr	r3, [sp, #28]
    46a8:	031b      	lsls	r3, r3, #12
    46aa:	42ab      	cmp	r3, r5
    46ac:	d12f      	bne.n	470e <_dtoa_r+0x85a>
    46ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    46b0:	9a07      	ldr	r2, [sp, #28]
    46b2:	4213      	tst	r3, r2
    46b4:	d02b      	beq.n	470e <_dtoa_r+0x85a>
    46b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    46b8:	3501      	adds	r5, #1
    46ba:	3301      	adds	r3, #1
    46bc:	930b      	str	r3, [sp, #44]	; 0x2c
    46be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    46c0:	3301      	adds	r3, #1
    46c2:	930c      	str	r3, [sp, #48]	; 0x30
    46c4:	e023      	b.n	470e <_dtoa_r+0x85a>
    46c6:	2336      	movs	r3, #54	; 0x36
    46c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    46ca:	1a9b      	subs	r3, r3, r2
    46cc:	e795      	b.n	45fa <_dtoa_r+0x746>
    46ce:	9b08      	ldr	r3, [sp, #32]
    46d0:	1e7d      	subs	r5, r7, #1
    46d2:	42ab      	cmp	r3, r5
    46d4:	db06      	blt.n	46e4 <_dtoa_r+0x830>
    46d6:	1b5d      	subs	r5, r3, r5
    46d8:	2f00      	cmp	r7, #0
    46da:	da0b      	bge.n	46f4 <_dtoa_r+0x840>
    46dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    46de:	1bdc      	subs	r4, r3, r7
    46e0:	2300      	movs	r3, #0
    46e2:	e78c      	b.n	45fe <_dtoa_r+0x74a>
    46e4:	9b08      	ldr	r3, [sp, #32]
    46e6:	9508      	str	r5, [sp, #32]
    46e8:	1aea      	subs	r2, r5, r3
    46ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46ec:	2500      	movs	r5, #0
    46ee:	189b      	adds	r3, r3, r2
    46f0:	930f      	str	r3, [sp, #60]	; 0x3c
    46f2:	e7f1      	b.n	46d8 <_dtoa_r+0x824>
    46f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    46f6:	003b      	movs	r3, r7
    46f8:	e781      	b.n	45fe <_dtoa_r+0x74a>
    46fa:	9d08      	ldr	r5, [sp, #32]
    46fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    46fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4700:	e788      	b.n	4614 <_dtoa_r+0x760>
    4702:	9a08      	ldr	r2, [sp, #32]
    4704:	e7b4      	b.n	4670 <_dtoa_r+0x7bc>
    4706:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4708:	2500      	movs	r5, #0
    470a:	2b01      	cmp	r3, #1
    470c:	ddc7      	ble.n	469e <_dtoa_r+0x7ea>
    470e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4710:	2001      	movs	r0, #1
    4712:	2b00      	cmp	r3, #0
    4714:	d00b      	beq.n	472e <_dtoa_r+0x87a>
    4716:	9b08      	ldr	r3, [sp, #32]
    4718:	9a08      	ldr	r2, [sp, #32]
    471a:	691b      	ldr	r3, [r3, #16]
    471c:	930f      	str	r3, [sp, #60]	; 0x3c
    471e:	3303      	adds	r3, #3
    4720:	009b      	lsls	r3, r3, #2
    4722:	18d3      	adds	r3, r2, r3
    4724:	6858      	ldr	r0, [r3, #4]
    4726:	f000 fc55 	bl	4fd4 <__hi0bits>
    472a:	2320      	movs	r3, #32
    472c:	1a18      	subs	r0, r3, r0
    472e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4730:	18c0      	adds	r0, r0, r3
    4732:	231f      	movs	r3, #31
    4734:	4018      	ands	r0, r3
    4736:	d100      	bne.n	473a <_dtoa_r+0x886>
    4738:	e0ab      	b.n	4892 <_dtoa_r+0x9de>
    473a:	3301      	adds	r3, #1
    473c:	1a1b      	subs	r3, r3, r0
    473e:	2b04      	cmp	r3, #4
    4740:	dc00      	bgt.n	4744 <_dtoa_r+0x890>
    4742:	e09b      	b.n	487c <_dtoa_r+0x9c8>
    4744:	231c      	movs	r3, #28
    4746:	1a18      	subs	r0, r3, r0
    4748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    474a:	1824      	adds	r4, r4, r0
    474c:	181b      	adds	r3, r3, r0
    474e:	930b      	str	r3, [sp, #44]	; 0x2c
    4750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4752:	181b      	adds	r3, r3, r0
    4754:	930c      	str	r3, [sp, #48]	; 0x30
    4756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4758:	2b00      	cmp	r3, #0
    475a:	dd05      	ble.n	4768 <_dtoa_r+0x8b4>
    475c:	001a      	movs	r2, r3
    475e:	9905      	ldr	r1, [sp, #20]
    4760:	9804      	ldr	r0, [sp, #16]
    4762:	f000 fd6b 	bl	523c <__lshift>
    4766:	9005      	str	r0, [sp, #20]
    4768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    476a:	2b00      	cmp	r3, #0
    476c:	dd05      	ble.n	477a <_dtoa_r+0x8c6>
    476e:	001a      	movs	r2, r3
    4770:	9908      	ldr	r1, [sp, #32]
    4772:	9804      	ldr	r0, [sp, #16]
    4774:	f000 fd62 	bl	523c <__lshift>
    4778:	9008      	str	r0, [sp, #32]
    477a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    477c:	2b00      	cmp	r3, #0
    477e:	d100      	bne.n	4782 <_dtoa_r+0x8ce>
    4780:	e089      	b.n	4896 <_dtoa_r+0x9e2>
    4782:	9908      	ldr	r1, [sp, #32]
    4784:	9805      	ldr	r0, [sp, #20]
    4786:	f000 fdaa 	bl	52de <__mcmp>
    478a:	2800      	cmp	r0, #0
    478c:	db00      	blt.n	4790 <_dtoa_r+0x8dc>
    478e:	e082      	b.n	4896 <_dtoa_r+0x9e2>
    4790:	9b03      	ldr	r3, [sp, #12]
    4792:	220a      	movs	r2, #10
    4794:	3b01      	subs	r3, #1
    4796:	9303      	str	r3, [sp, #12]
    4798:	9905      	ldr	r1, [sp, #20]
    479a:	2300      	movs	r3, #0
    479c:	9804      	ldr	r0, [sp, #16]
    479e:	f000 fbdd 	bl	4f5c <__multadd>
    47a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    47a4:	9005      	str	r0, [sp, #20]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d100      	bne.n	47ac <_dtoa_r+0x8f8>
    47aa:	e15d      	b.n	4a68 <_dtoa_r+0xbb4>
    47ac:	2300      	movs	r3, #0
    47ae:	0031      	movs	r1, r6
    47b0:	220a      	movs	r2, #10
    47b2:	9804      	ldr	r0, [sp, #16]
    47b4:	f000 fbd2 	bl	4f5c <__multadd>
    47b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    47ba:	0006      	movs	r6, r0
    47bc:	2b00      	cmp	r3, #0
    47be:	dc02      	bgt.n	47c6 <_dtoa_r+0x912>
    47c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    47c2:	2b02      	cmp	r3, #2
    47c4:	dc6d      	bgt.n	48a2 <_dtoa_r+0x9ee>
    47c6:	2c00      	cmp	r4, #0
    47c8:	dd05      	ble.n	47d6 <_dtoa_r+0x922>
    47ca:	0031      	movs	r1, r6
    47cc:	0022      	movs	r2, r4
    47ce:	9804      	ldr	r0, [sp, #16]
    47d0:	f000 fd34 	bl	523c <__lshift>
    47d4:	0006      	movs	r6, r0
    47d6:	0030      	movs	r0, r6
    47d8:	2d00      	cmp	r5, #0
    47da:	d011      	beq.n	4800 <_dtoa_r+0x94c>
    47dc:	6871      	ldr	r1, [r6, #4]
    47de:	9804      	ldr	r0, [sp, #16]
    47e0:	f000 fb6b 	bl	4eba <_Balloc>
    47e4:	0031      	movs	r1, r6
    47e6:	0004      	movs	r4, r0
    47e8:	6933      	ldr	r3, [r6, #16]
    47ea:	310c      	adds	r1, #12
    47ec:	1c9a      	adds	r2, r3, #2
    47ee:	0092      	lsls	r2, r2, #2
    47f0:	300c      	adds	r0, #12
    47f2:	f7fe fc4b 	bl	308c <memcpy>
    47f6:	2201      	movs	r2, #1
    47f8:	0021      	movs	r1, r4
    47fa:	9804      	ldr	r0, [sp, #16]
    47fc:	f000 fd1e 	bl	523c <__lshift>
    4800:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4804:	3f01      	subs	r7, #1
    4806:	930b      	str	r3, [sp, #44]	; 0x2c
    4808:	19db      	adds	r3, r3, r7
    480a:	0037      	movs	r7, r6
    480c:	0006      	movs	r6, r0
    480e:	930f      	str	r3, [sp, #60]	; 0x3c
    4810:	9908      	ldr	r1, [sp, #32]
    4812:	9805      	ldr	r0, [sp, #20]
    4814:	f7ff faca 	bl	3dac <quorem>
    4818:	0039      	movs	r1, r7
    481a:	900d      	str	r0, [sp, #52]	; 0x34
    481c:	0004      	movs	r4, r0
    481e:	9805      	ldr	r0, [sp, #20]
    4820:	f000 fd5d 	bl	52de <__mcmp>
    4824:	0032      	movs	r2, r6
    4826:	900e      	str	r0, [sp, #56]	; 0x38
    4828:	9908      	ldr	r1, [sp, #32]
    482a:	9804      	ldr	r0, [sp, #16]
    482c:	f000 fd70 	bl	5310 <__mdiff>
    4830:	2301      	movs	r3, #1
    4832:	930c      	str	r3, [sp, #48]	; 0x30
    4834:	68c3      	ldr	r3, [r0, #12]
    4836:	3430      	adds	r4, #48	; 0x30
    4838:	0005      	movs	r5, r0
    483a:	2b00      	cmp	r3, #0
    483c:	d104      	bne.n	4848 <_dtoa_r+0x994>
    483e:	0001      	movs	r1, r0
    4840:	9805      	ldr	r0, [sp, #20]
    4842:	f000 fd4c 	bl	52de <__mcmp>
    4846:	900c      	str	r0, [sp, #48]	; 0x30
    4848:	0029      	movs	r1, r5
    484a:	9804      	ldr	r0, [sp, #16]
    484c:	f000 fb6d 	bl	4f2a <_Bfree>
    4850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4852:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4854:	4313      	orrs	r3, r2
    4856:	d000      	beq.n	485a <_dtoa_r+0x9a6>
    4858:	e089      	b.n	496e <_dtoa_r+0xaba>
    485a:	9a06      	ldr	r2, [sp, #24]
    485c:	3301      	adds	r3, #1
    485e:	4213      	tst	r3, r2
    4860:	d000      	beq.n	4864 <_dtoa_r+0x9b0>
    4862:	e084      	b.n	496e <_dtoa_r+0xaba>
    4864:	2c39      	cmp	r4, #57	; 0x39
    4866:	d100      	bne.n	486a <_dtoa_r+0x9b6>
    4868:	e0a3      	b.n	49b2 <_dtoa_r+0xafe>
    486a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    486c:	2b00      	cmp	r3, #0
    486e:	dd01      	ble.n	4874 <_dtoa_r+0x9c0>
    4870:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4872:	3431      	adds	r4, #49	; 0x31
    4874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4876:	1c5d      	adds	r5, r3, #1
    4878:	701c      	strb	r4, [r3, #0]
    487a:	e027      	b.n	48cc <_dtoa_r+0xa18>
    487c:	2b04      	cmp	r3, #4
    487e:	d100      	bne.n	4882 <_dtoa_r+0x9ce>
    4880:	e769      	b.n	4756 <_dtoa_r+0x8a2>
    4882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4884:	331c      	adds	r3, #28
    4886:	18d2      	adds	r2, r2, r3
    4888:	920b      	str	r2, [sp, #44]	; 0x2c
    488a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    488c:	18e4      	adds	r4, r4, r3
    488e:	18d3      	adds	r3, r2, r3
    4890:	e760      	b.n	4754 <_dtoa_r+0x8a0>
    4892:	0003      	movs	r3, r0
    4894:	e7f5      	b.n	4882 <_dtoa_r+0x9ce>
    4896:	2f00      	cmp	r7, #0
    4898:	dc3c      	bgt.n	4914 <_dtoa_r+0xa60>
    489a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    489c:	2b02      	cmp	r3, #2
    489e:	dd39      	ble.n	4914 <_dtoa_r+0xa60>
    48a0:	970d      	str	r7, [sp, #52]	; 0x34
    48a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    48a4:	2b00      	cmp	r3, #0
    48a6:	d10c      	bne.n	48c2 <_dtoa_r+0xa0e>
    48a8:	9908      	ldr	r1, [sp, #32]
    48aa:	2205      	movs	r2, #5
    48ac:	9804      	ldr	r0, [sp, #16]
    48ae:	f000 fb55 	bl	4f5c <__multadd>
    48b2:	9008      	str	r0, [sp, #32]
    48b4:	0001      	movs	r1, r0
    48b6:	9805      	ldr	r0, [sp, #20]
    48b8:	f000 fd11 	bl	52de <__mcmp>
    48bc:	2800      	cmp	r0, #0
    48be:	dd00      	ble.n	48c2 <_dtoa_r+0xa0e>
    48c0:	e55a      	b.n	4378 <_dtoa_r+0x4c4>
    48c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    48c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    48c6:	43db      	mvns	r3, r3
    48c8:	9303      	str	r3, [sp, #12]
    48ca:	2700      	movs	r7, #0
    48cc:	9908      	ldr	r1, [sp, #32]
    48ce:	9804      	ldr	r0, [sp, #16]
    48d0:	f000 fb2b 	bl	4f2a <_Bfree>
    48d4:	2e00      	cmp	r6, #0
    48d6:	d100      	bne.n	48da <_dtoa_r+0xa26>
    48d8:	e63f      	b.n	455a <_dtoa_r+0x6a6>
    48da:	2f00      	cmp	r7, #0
    48dc:	d005      	beq.n	48ea <_dtoa_r+0xa36>
    48de:	42b7      	cmp	r7, r6
    48e0:	d003      	beq.n	48ea <_dtoa_r+0xa36>
    48e2:	0039      	movs	r1, r7
    48e4:	9804      	ldr	r0, [sp, #16]
    48e6:	f000 fb20 	bl	4f2a <_Bfree>
    48ea:	0031      	movs	r1, r6
    48ec:	9804      	ldr	r0, [sp, #16]
    48ee:	f000 fb1c 	bl	4f2a <_Bfree>
    48f2:	e632      	b.n	455a <_dtoa_r+0x6a6>
    48f4:	9508      	str	r5, [sp, #32]
    48f6:	002e      	movs	r6, r5
    48f8:	e7e3      	b.n	48c2 <_dtoa_r+0xa0e>
    48fa:	2300      	movs	r3, #0
    48fc:	9308      	str	r3, [sp, #32]
    48fe:	001e      	movs	r6, r3
    4900:	e7df      	b.n	48c2 <_dtoa_r+0xa0e>
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	40240000 	.word	0x40240000
    4908:	00000433 	.word	0x00000433
    490c:	9603      	str	r6, [sp, #12]
    490e:	9508      	str	r5, [sp, #32]
    4910:	002e      	movs	r6, r5
    4912:	e531      	b.n	4378 <_dtoa_r+0x4c4>
    4914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4916:	970d      	str	r7, [sp, #52]	; 0x34
    4918:	2b00      	cmp	r3, #0
    491a:	d000      	beq.n	491e <_dtoa_r+0xa6a>
    491c:	e753      	b.n	47c6 <_dtoa_r+0x912>
    491e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4920:	9908      	ldr	r1, [sp, #32]
    4922:	9805      	ldr	r0, [sp, #20]
    4924:	f7ff fa42 	bl	3dac <quorem>
    4928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    492a:	3030      	adds	r0, #48	; 0x30
    492c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    492e:	7028      	strb	r0, [r5, #0]
    4930:	3501      	adds	r5, #1
    4932:	0004      	movs	r4, r0
    4934:	1aeb      	subs	r3, r5, r3
    4936:	429a      	cmp	r2, r3
    4938:	dc78      	bgt.n	4a2c <_dtoa_r+0xb78>
    493a:	1e15      	subs	r5, r2, #0
    493c:	dc00      	bgt.n	4940 <_dtoa_r+0xa8c>
    493e:	2501      	movs	r5, #1
    4940:	2700      	movs	r7, #0
    4942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4944:	195d      	adds	r5, r3, r5
    4946:	9905      	ldr	r1, [sp, #20]
    4948:	2201      	movs	r2, #1
    494a:	9804      	ldr	r0, [sp, #16]
    494c:	f000 fc76 	bl	523c <__lshift>
    4950:	9908      	ldr	r1, [sp, #32]
    4952:	9005      	str	r0, [sp, #20]
    4954:	f000 fcc3 	bl	52de <__mcmp>
    4958:	2800      	cmp	r0, #0
    495a:	dc2f      	bgt.n	49bc <_dtoa_r+0xb08>
    495c:	d101      	bne.n	4962 <_dtoa_r+0xaae>
    495e:	07e3      	lsls	r3, r4, #31
    4960:	d42c      	bmi.n	49bc <_dtoa_r+0xb08>
    4962:	1e6b      	subs	r3, r5, #1
    4964:	781a      	ldrb	r2, [r3, #0]
    4966:	2a30      	cmp	r2, #48	; 0x30
    4968:	d1b0      	bne.n	48cc <_dtoa_r+0xa18>
    496a:	001d      	movs	r5, r3
    496c:	e7f9      	b.n	4962 <_dtoa_r+0xaae>
    496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4970:	2b00      	cmp	r3, #0
    4972:	db07      	blt.n	4984 <_dtoa_r+0xad0>
    4974:	001d      	movs	r5, r3
    4976:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4978:	431d      	orrs	r5, r3
    497a:	d126      	bne.n	49ca <_dtoa_r+0xb16>
    497c:	2301      	movs	r3, #1
    497e:	9a06      	ldr	r2, [sp, #24]
    4980:	4213      	tst	r3, r2
    4982:	d122      	bne.n	49ca <_dtoa_r+0xb16>
    4984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4986:	2b00      	cmp	r3, #0
    4988:	dc00      	bgt.n	498c <_dtoa_r+0xad8>
    498a:	e773      	b.n	4874 <_dtoa_r+0x9c0>
    498c:	9905      	ldr	r1, [sp, #20]
    498e:	2201      	movs	r2, #1
    4990:	9804      	ldr	r0, [sp, #16]
    4992:	f000 fc53 	bl	523c <__lshift>
    4996:	9908      	ldr	r1, [sp, #32]
    4998:	9005      	str	r0, [sp, #20]
    499a:	f000 fca0 	bl	52de <__mcmp>
    499e:	2800      	cmp	r0, #0
    49a0:	dc04      	bgt.n	49ac <_dtoa_r+0xaf8>
    49a2:	d000      	beq.n	49a6 <_dtoa_r+0xaf2>
    49a4:	e766      	b.n	4874 <_dtoa_r+0x9c0>
    49a6:	07e3      	lsls	r3, r4, #31
    49a8:	d400      	bmi.n	49ac <_dtoa_r+0xaf8>
    49aa:	e763      	b.n	4874 <_dtoa_r+0x9c0>
    49ac:	2c39      	cmp	r4, #57	; 0x39
    49ae:	d000      	beq.n	49b2 <_dtoa_r+0xafe>
    49b0:	e75e      	b.n	4870 <_dtoa_r+0x9bc>
    49b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    49b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49b6:	1c5d      	adds	r5, r3, #1
    49b8:	2339      	movs	r3, #57	; 0x39
    49ba:	7013      	strb	r3, [r2, #0]
    49bc:	1e6b      	subs	r3, r5, #1
    49be:	781a      	ldrb	r2, [r3, #0]
    49c0:	2a39      	cmp	r2, #57	; 0x39
    49c2:	d03b      	beq.n	4a3c <_dtoa_r+0xb88>
    49c4:	3201      	adds	r2, #1
    49c6:	701a      	strb	r2, [r3, #0]
    49c8:	e780      	b.n	48cc <_dtoa_r+0xa18>
    49ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    49cc:	3301      	adds	r3, #1
    49ce:	930d      	str	r3, [sp, #52]	; 0x34
    49d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49d2:	2b00      	cmp	r3, #0
    49d4:	dd05      	ble.n	49e2 <_dtoa_r+0xb2e>
    49d6:	2c39      	cmp	r4, #57	; 0x39
    49d8:	d0eb      	beq.n	49b2 <_dtoa_r+0xafe>
    49da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    49dc:	3401      	adds	r4, #1
    49de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    49e0:	e74a      	b.n	4878 <_dtoa_r+0x9c4>
    49e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    49e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    49e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    49e8:	701c      	strb	r4, [r3, #0]
    49ea:	4293      	cmp	r3, r2
    49ec:	d0ab      	beq.n	4946 <_dtoa_r+0xa92>
    49ee:	2300      	movs	r3, #0
    49f0:	220a      	movs	r2, #10
    49f2:	9905      	ldr	r1, [sp, #20]
    49f4:	9804      	ldr	r0, [sp, #16]
    49f6:	f000 fab1 	bl	4f5c <__multadd>
    49fa:	2300      	movs	r3, #0
    49fc:	9005      	str	r0, [sp, #20]
    49fe:	220a      	movs	r2, #10
    4a00:	0039      	movs	r1, r7
    4a02:	9804      	ldr	r0, [sp, #16]
    4a04:	42b7      	cmp	r7, r6
    4a06:	d106      	bne.n	4a16 <_dtoa_r+0xb62>
    4a08:	f000 faa8 	bl	4f5c <__multadd>
    4a0c:	0007      	movs	r7, r0
    4a0e:	0006      	movs	r6, r0
    4a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a12:	930b      	str	r3, [sp, #44]	; 0x2c
    4a14:	e6fc      	b.n	4810 <_dtoa_r+0x95c>
    4a16:	f000 faa1 	bl	4f5c <__multadd>
    4a1a:	0031      	movs	r1, r6
    4a1c:	0007      	movs	r7, r0
    4a1e:	2300      	movs	r3, #0
    4a20:	220a      	movs	r2, #10
    4a22:	9804      	ldr	r0, [sp, #16]
    4a24:	f000 fa9a 	bl	4f5c <__multadd>
    4a28:	0006      	movs	r6, r0
    4a2a:	e7f1      	b.n	4a10 <_dtoa_r+0xb5c>
    4a2c:	2300      	movs	r3, #0
    4a2e:	220a      	movs	r2, #10
    4a30:	9905      	ldr	r1, [sp, #20]
    4a32:	9804      	ldr	r0, [sp, #16]
    4a34:	f000 fa92 	bl	4f5c <__multadd>
    4a38:	9005      	str	r0, [sp, #20]
    4a3a:	e771      	b.n	4920 <_dtoa_r+0xa6c>
    4a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a3e:	429a      	cmp	r2, r3
    4a40:	d105      	bne.n	4a4e <_dtoa_r+0xb9a>
    4a42:	9b03      	ldr	r3, [sp, #12]
    4a44:	3301      	adds	r3, #1
    4a46:	9303      	str	r3, [sp, #12]
    4a48:	2331      	movs	r3, #49	; 0x31
    4a4a:	7013      	strb	r3, [r2, #0]
    4a4c:	e73e      	b.n	48cc <_dtoa_r+0xa18>
    4a4e:	001d      	movs	r5, r3
    4a50:	e7b4      	b.n	49bc <_dtoa_r+0xb08>
    4a52:	4b0a      	ldr	r3, [pc, #40]	; (4a7c <_dtoa_r+0xbc8>)
    4a54:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4a56:	930a      	str	r3, [sp, #40]	; 0x28
    4a58:	4b09      	ldr	r3, [pc, #36]	; (4a80 <_dtoa_r+0xbcc>)
    4a5a:	2a00      	cmp	r2, #0
    4a5c:	d001      	beq.n	4a62 <_dtoa_r+0xbae>
    4a5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4a60:	6013      	str	r3, [r2, #0]
    4a62:	980a      	ldr	r0, [sp, #40]	; 0x28
    4a64:	b01d      	add	sp, #116	; 0x74
    4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	dd00      	ble.n	4a70 <_dtoa_r+0xbbc>
    4a6e:	e756      	b.n	491e <_dtoa_r+0xa6a>
    4a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a72:	2b02      	cmp	r3, #2
    4a74:	dc00      	bgt.n	4a78 <_dtoa_r+0xbc4>
    4a76:	e752      	b.n	491e <_dtoa_r+0xa6a>
    4a78:	e713      	b.n	48a2 <_dtoa_r+0x9ee>
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	00007cdc 	.word	0x00007cdc
    4a80:	00007ce4 	.word	0x00007ce4

00004a84 <__sflush_r>:
    4a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a86:	898a      	ldrh	r2, [r1, #12]
    4a88:	0005      	movs	r5, r0
    4a8a:	000c      	movs	r4, r1
    4a8c:	0713      	lsls	r3, r2, #28
    4a8e:	d460      	bmi.n	4b52 <__sflush_r+0xce>
    4a90:	684b      	ldr	r3, [r1, #4]
    4a92:	2b00      	cmp	r3, #0
    4a94:	dc04      	bgt.n	4aa0 <__sflush_r+0x1c>
    4a96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4a98:	2b00      	cmp	r3, #0
    4a9a:	dc01      	bgt.n	4aa0 <__sflush_r+0x1c>
    4a9c:	2000      	movs	r0, #0
    4a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4aa0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4aa2:	2f00      	cmp	r7, #0
    4aa4:	d0fa      	beq.n	4a9c <__sflush_r+0x18>
    4aa6:	2300      	movs	r3, #0
    4aa8:	682e      	ldr	r6, [r5, #0]
    4aaa:	602b      	str	r3, [r5, #0]
    4aac:	2380      	movs	r3, #128	; 0x80
    4aae:	015b      	lsls	r3, r3, #5
    4ab0:	401a      	ands	r2, r3
    4ab2:	d034      	beq.n	4b1e <__sflush_r+0x9a>
    4ab4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4ab6:	89a3      	ldrh	r3, [r4, #12]
    4ab8:	075b      	lsls	r3, r3, #29
    4aba:	d506      	bpl.n	4aca <__sflush_r+0x46>
    4abc:	6863      	ldr	r3, [r4, #4]
    4abe:	1ac0      	subs	r0, r0, r3
    4ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d001      	beq.n	4aca <__sflush_r+0x46>
    4ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4ac8:	1ac0      	subs	r0, r0, r3
    4aca:	0002      	movs	r2, r0
    4acc:	6a21      	ldr	r1, [r4, #32]
    4ace:	2300      	movs	r3, #0
    4ad0:	0028      	movs	r0, r5
    4ad2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ad4:	47b8      	blx	r7
    4ad6:	89a1      	ldrh	r1, [r4, #12]
    4ad8:	1c43      	adds	r3, r0, #1
    4ada:	d106      	bne.n	4aea <__sflush_r+0x66>
    4adc:	682b      	ldr	r3, [r5, #0]
    4ade:	2b1d      	cmp	r3, #29
    4ae0:	d831      	bhi.n	4b46 <__sflush_r+0xc2>
    4ae2:	4a2c      	ldr	r2, [pc, #176]	; (4b94 <__sflush_r+0x110>)
    4ae4:	40da      	lsrs	r2, r3
    4ae6:	07d3      	lsls	r3, r2, #31
    4ae8:	d52d      	bpl.n	4b46 <__sflush_r+0xc2>
    4aea:	2300      	movs	r3, #0
    4aec:	6063      	str	r3, [r4, #4]
    4aee:	6923      	ldr	r3, [r4, #16]
    4af0:	6023      	str	r3, [r4, #0]
    4af2:	04cb      	lsls	r3, r1, #19
    4af4:	d505      	bpl.n	4b02 <__sflush_r+0x7e>
    4af6:	1c43      	adds	r3, r0, #1
    4af8:	d102      	bne.n	4b00 <__sflush_r+0x7c>
    4afa:	682b      	ldr	r3, [r5, #0]
    4afc:	2b00      	cmp	r3, #0
    4afe:	d100      	bne.n	4b02 <__sflush_r+0x7e>
    4b00:	6560      	str	r0, [r4, #84]	; 0x54
    4b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4b04:	602e      	str	r6, [r5, #0]
    4b06:	2900      	cmp	r1, #0
    4b08:	d0c8      	beq.n	4a9c <__sflush_r+0x18>
    4b0a:	0023      	movs	r3, r4
    4b0c:	3344      	adds	r3, #68	; 0x44
    4b0e:	4299      	cmp	r1, r3
    4b10:	d002      	beq.n	4b18 <__sflush_r+0x94>
    4b12:	0028      	movs	r0, r5
    4b14:	f000 fcc2 	bl	549c <_free_r>
    4b18:	2000      	movs	r0, #0
    4b1a:	6360      	str	r0, [r4, #52]	; 0x34
    4b1c:	e7bf      	b.n	4a9e <__sflush_r+0x1a>
    4b1e:	2301      	movs	r3, #1
    4b20:	6a21      	ldr	r1, [r4, #32]
    4b22:	0028      	movs	r0, r5
    4b24:	47b8      	blx	r7
    4b26:	1c43      	adds	r3, r0, #1
    4b28:	d1c5      	bne.n	4ab6 <__sflush_r+0x32>
    4b2a:	682b      	ldr	r3, [r5, #0]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d0c2      	beq.n	4ab6 <__sflush_r+0x32>
    4b30:	2b1d      	cmp	r3, #29
    4b32:	d001      	beq.n	4b38 <__sflush_r+0xb4>
    4b34:	2b16      	cmp	r3, #22
    4b36:	d101      	bne.n	4b3c <__sflush_r+0xb8>
    4b38:	602e      	str	r6, [r5, #0]
    4b3a:	e7af      	b.n	4a9c <__sflush_r+0x18>
    4b3c:	2340      	movs	r3, #64	; 0x40
    4b3e:	89a2      	ldrh	r2, [r4, #12]
    4b40:	4313      	orrs	r3, r2
    4b42:	81a3      	strh	r3, [r4, #12]
    4b44:	e7ab      	b.n	4a9e <__sflush_r+0x1a>
    4b46:	2340      	movs	r3, #64	; 0x40
    4b48:	430b      	orrs	r3, r1
    4b4a:	2001      	movs	r0, #1
    4b4c:	81a3      	strh	r3, [r4, #12]
    4b4e:	4240      	negs	r0, r0
    4b50:	e7a5      	b.n	4a9e <__sflush_r+0x1a>
    4b52:	690f      	ldr	r7, [r1, #16]
    4b54:	2f00      	cmp	r7, #0
    4b56:	d0a1      	beq.n	4a9c <__sflush_r+0x18>
    4b58:	680b      	ldr	r3, [r1, #0]
    4b5a:	600f      	str	r7, [r1, #0]
    4b5c:	1bdb      	subs	r3, r3, r7
    4b5e:	9301      	str	r3, [sp, #4]
    4b60:	2300      	movs	r3, #0
    4b62:	0792      	lsls	r2, r2, #30
    4b64:	d100      	bne.n	4b68 <__sflush_r+0xe4>
    4b66:	694b      	ldr	r3, [r1, #20]
    4b68:	60a3      	str	r3, [r4, #8]
    4b6a:	9b01      	ldr	r3, [sp, #4]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	dc00      	bgt.n	4b72 <__sflush_r+0xee>
    4b70:	e794      	b.n	4a9c <__sflush_r+0x18>
    4b72:	9b01      	ldr	r3, [sp, #4]
    4b74:	003a      	movs	r2, r7
    4b76:	6a21      	ldr	r1, [r4, #32]
    4b78:	0028      	movs	r0, r5
    4b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4b7c:	47b0      	blx	r6
    4b7e:	2800      	cmp	r0, #0
    4b80:	dc03      	bgt.n	4b8a <__sflush_r+0x106>
    4b82:	2340      	movs	r3, #64	; 0x40
    4b84:	89a2      	ldrh	r2, [r4, #12]
    4b86:	4313      	orrs	r3, r2
    4b88:	e7df      	b.n	4b4a <__sflush_r+0xc6>
    4b8a:	9b01      	ldr	r3, [sp, #4]
    4b8c:	183f      	adds	r7, r7, r0
    4b8e:	1a1b      	subs	r3, r3, r0
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	e7ea      	b.n	4b6a <__sflush_r+0xe6>
    4b94:	20400001 	.word	0x20400001

00004b98 <_fflush_r>:
    4b98:	690b      	ldr	r3, [r1, #16]
    4b9a:	b570      	push	{r4, r5, r6, lr}
    4b9c:	0005      	movs	r5, r0
    4b9e:	000c      	movs	r4, r1
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d101      	bne.n	4ba8 <_fflush_r+0x10>
    4ba4:	2000      	movs	r0, #0
    4ba6:	bd70      	pop	{r4, r5, r6, pc}
    4ba8:	2800      	cmp	r0, #0
    4baa:	d004      	beq.n	4bb6 <_fflush_r+0x1e>
    4bac:	6983      	ldr	r3, [r0, #24]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d101      	bne.n	4bb6 <_fflush_r+0x1e>
    4bb2:	f000 f85f 	bl	4c74 <__sinit>
    4bb6:	4b0b      	ldr	r3, [pc, #44]	; (4be4 <_fflush_r+0x4c>)
    4bb8:	429c      	cmp	r4, r3
    4bba:	d109      	bne.n	4bd0 <_fflush_r+0x38>
    4bbc:	686c      	ldr	r4, [r5, #4]
    4bbe:	220c      	movs	r2, #12
    4bc0:	5ea3      	ldrsh	r3, [r4, r2]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d0ee      	beq.n	4ba4 <_fflush_r+0xc>
    4bc6:	0021      	movs	r1, r4
    4bc8:	0028      	movs	r0, r5
    4bca:	f7ff ff5b 	bl	4a84 <__sflush_r>
    4bce:	e7ea      	b.n	4ba6 <_fflush_r+0xe>
    4bd0:	4b05      	ldr	r3, [pc, #20]	; (4be8 <_fflush_r+0x50>)
    4bd2:	429c      	cmp	r4, r3
    4bd4:	d101      	bne.n	4bda <_fflush_r+0x42>
    4bd6:	68ac      	ldr	r4, [r5, #8]
    4bd8:	e7f1      	b.n	4bbe <_fflush_r+0x26>
    4bda:	4b04      	ldr	r3, [pc, #16]	; (4bec <_fflush_r+0x54>)
    4bdc:	429c      	cmp	r4, r3
    4bde:	d1ee      	bne.n	4bbe <_fflush_r+0x26>
    4be0:	68ec      	ldr	r4, [r5, #12]
    4be2:	e7ec      	b.n	4bbe <_fflush_r+0x26>
    4be4:	00007d0c 	.word	0x00007d0c
    4be8:	00007d2c 	.word	0x00007d2c
    4bec:	00007cec 	.word	0x00007cec

00004bf0 <_cleanup_r>:
    4bf0:	b510      	push	{r4, lr}
    4bf2:	4902      	ldr	r1, [pc, #8]	; (4bfc <_cleanup_r+0xc>)
    4bf4:	f000 f8b2 	bl	4d5c <_fwalk_reent>
    4bf8:	bd10      	pop	{r4, pc}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	00004b99 	.word	0x00004b99

00004c00 <std.isra.0>:
    4c00:	2300      	movs	r3, #0
    4c02:	b510      	push	{r4, lr}
    4c04:	0004      	movs	r4, r0
    4c06:	6003      	str	r3, [r0, #0]
    4c08:	6043      	str	r3, [r0, #4]
    4c0a:	6083      	str	r3, [r0, #8]
    4c0c:	8181      	strh	r1, [r0, #12]
    4c0e:	6643      	str	r3, [r0, #100]	; 0x64
    4c10:	81c2      	strh	r2, [r0, #14]
    4c12:	6103      	str	r3, [r0, #16]
    4c14:	6143      	str	r3, [r0, #20]
    4c16:	6183      	str	r3, [r0, #24]
    4c18:	0019      	movs	r1, r3
    4c1a:	2208      	movs	r2, #8
    4c1c:	305c      	adds	r0, #92	; 0x5c
    4c1e:	f7fe fa3e 	bl	309e <memset>
    4c22:	4b05      	ldr	r3, [pc, #20]	; (4c38 <std.isra.0+0x38>)
    4c24:	6224      	str	r4, [r4, #32]
    4c26:	6263      	str	r3, [r4, #36]	; 0x24
    4c28:	4b04      	ldr	r3, [pc, #16]	; (4c3c <std.isra.0+0x3c>)
    4c2a:	62a3      	str	r3, [r4, #40]	; 0x28
    4c2c:	4b04      	ldr	r3, [pc, #16]	; (4c40 <std.isra.0+0x40>)
    4c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4c30:	4b04      	ldr	r3, [pc, #16]	; (4c44 <std.isra.0+0x44>)
    4c32:	6323      	str	r3, [r4, #48]	; 0x30
    4c34:	bd10      	pop	{r4, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	00005899 	.word	0x00005899
    4c3c:	000058c1 	.word	0x000058c1
    4c40:	000058f9 	.word	0x000058f9
    4c44:	00005925 	.word	0x00005925

00004c48 <__sfmoreglue>:
    4c48:	b570      	push	{r4, r5, r6, lr}
    4c4a:	2568      	movs	r5, #104	; 0x68
    4c4c:	1e4a      	subs	r2, r1, #1
    4c4e:	4355      	muls	r5, r2
    4c50:	000e      	movs	r6, r1
    4c52:	0029      	movs	r1, r5
    4c54:	3174      	adds	r1, #116	; 0x74
    4c56:	f000 fc6b 	bl	5530 <_malloc_r>
    4c5a:	1e04      	subs	r4, r0, #0
    4c5c:	d008      	beq.n	4c70 <__sfmoreglue+0x28>
    4c5e:	2100      	movs	r1, #0
    4c60:	002a      	movs	r2, r5
    4c62:	6001      	str	r1, [r0, #0]
    4c64:	6046      	str	r6, [r0, #4]
    4c66:	300c      	adds	r0, #12
    4c68:	60a0      	str	r0, [r4, #8]
    4c6a:	3268      	adds	r2, #104	; 0x68
    4c6c:	f7fe fa17 	bl	309e <memset>
    4c70:	0020      	movs	r0, r4
    4c72:	bd70      	pop	{r4, r5, r6, pc}

00004c74 <__sinit>:
    4c74:	6983      	ldr	r3, [r0, #24]
    4c76:	b513      	push	{r0, r1, r4, lr}
    4c78:	0004      	movs	r4, r0
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d128      	bne.n	4cd0 <__sinit+0x5c>
    4c7e:	6483      	str	r3, [r0, #72]	; 0x48
    4c80:	64c3      	str	r3, [r0, #76]	; 0x4c
    4c82:	6503      	str	r3, [r0, #80]	; 0x50
    4c84:	4b13      	ldr	r3, [pc, #76]	; (4cd4 <__sinit+0x60>)
    4c86:	4a14      	ldr	r2, [pc, #80]	; (4cd8 <__sinit+0x64>)
    4c88:	681b      	ldr	r3, [r3, #0]
    4c8a:	6282      	str	r2, [r0, #40]	; 0x28
    4c8c:	9301      	str	r3, [sp, #4]
    4c8e:	4298      	cmp	r0, r3
    4c90:	d101      	bne.n	4c96 <__sinit+0x22>
    4c92:	2301      	movs	r3, #1
    4c94:	6183      	str	r3, [r0, #24]
    4c96:	0020      	movs	r0, r4
    4c98:	f000 f820 	bl	4cdc <__sfp>
    4c9c:	6060      	str	r0, [r4, #4]
    4c9e:	0020      	movs	r0, r4
    4ca0:	f000 f81c 	bl	4cdc <__sfp>
    4ca4:	60a0      	str	r0, [r4, #8]
    4ca6:	0020      	movs	r0, r4
    4ca8:	f000 f818 	bl	4cdc <__sfp>
    4cac:	2200      	movs	r2, #0
    4cae:	60e0      	str	r0, [r4, #12]
    4cb0:	2104      	movs	r1, #4
    4cb2:	6860      	ldr	r0, [r4, #4]
    4cb4:	f7ff ffa4 	bl	4c00 <std.isra.0>
    4cb8:	2201      	movs	r2, #1
    4cba:	2109      	movs	r1, #9
    4cbc:	68a0      	ldr	r0, [r4, #8]
    4cbe:	f7ff ff9f 	bl	4c00 <std.isra.0>
    4cc2:	2202      	movs	r2, #2
    4cc4:	2112      	movs	r1, #18
    4cc6:	68e0      	ldr	r0, [r4, #12]
    4cc8:	f7ff ff9a 	bl	4c00 <std.isra.0>
    4ccc:	2301      	movs	r3, #1
    4cce:	61a3      	str	r3, [r4, #24]
    4cd0:	bd13      	pop	{r0, r1, r4, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)
    4cd4:	00007ca4 	.word	0x00007ca4
    4cd8:	00004bf1 	.word	0x00004bf1

00004cdc <__sfp>:
    4cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cde:	4b1e      	ldr	r3, [pc, #120]	; (4d58 <__sfp+0x7c>)
    4ce0:	0007      	movs	r7, r0
    4ce2:	681e      	ldr	r6, [r3, #0]
    4ce4:	69b3      	ldr	r3, [r6, #24]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d102      	bne.n	4cf0 <__sfp+0x14>
    4cea:	0030      	movs	r0, r6
    4cec:	f7ff ffc2 	bl	4c74 <__sinit>
    4cf0:	3648      	adds	r6, #72	; 0x48
    4cf2:	68b4      	ldr	r4, [r6, #8]
    4cf4:	6873      	ldr	r3, [r6, #4]
    4cf6:	3b01      	subs	r3, #1
    4cf8:	d504      	bpl.n	4d04 <__sfp+0x28>
    4cfa:	6833      	ldr	r3, [r6, #0]
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d007      	beq.n	4d10 <__sfp+0x34>
    4d00:	6836      	ldr	r6, [r6, #0]
    4d02:	e7f6      	b.n	4cf2 <__sfp+0x16>
    4d04:	220c      	movs	r2, #12
    4d06:	5ea5      	ldrsh	r5, [r4, r2]
    4d08:	2d00      	cmp	r5, #0
    4d0a:	d00d      	beq.n	4d28 <__sfp+0x4c>
    4d0c:	3468      	adds	r4, #104	; 0x68
    4d0e:	e7f2      	b.n	4cf6 <__sfp+0x1a>
    4d10:	2104      	movs	r1, #4
    4d12:	0038      	movs	r0, r7
    4d14:	f7ff ff98 	bl	4c48 <__sfmoreglue>
    4d18:	6030      	str	r0, [r6, #0]
    4d1a:	2800      	cmp	r0, #0
    4d1c:	d1f0      	bne.n	4d00 <__sfp+0x24>
    4d1e:	230c      	movs	r3, #12
    4d20:	0004      	movs	r4, r0
    4d22:	603b      	str	r3, [r7, #0]
    4d24:	0020      	movs	r0, r4
    4d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d28:	2301      	movs	r3, #1
    4d2a:	0020      	movs	r0, r4
    4d2c:	425b      	negs	r3, r3
    4d2e:	81e3      	strh	r3, [r4, #14]
    4d30:	3302      	adds	r3, #2
    4d32:	81a3      	strh	r3, [r4, #12]
    4d34:	6665      	str	r5, [r4, #100]	; 0x64
    4d36:	6025      	str	r5, [r4, #0]
    4d38:	60a5      	str	r5, [r4, #8]
    4d3a:	6065      	str	r5, [r4, #4]
    4d3c:	6125      	str	r5, [r4, #16]
    4d3e:	6165      	str	r5, [r4, #20]
    4d40:	61a5      	str	r5, [r4, #24]
    4d42:	2208      	movs	r2, #8
    4d44:	0029      	movs	r1, r5
    4d46:	305c      	adds	r0, #92	; 0x5c
    4d48:	f7fe f9a9 	bl	309e <memset>
    4d4c:	6365      	str	r5, [r4, #52]	; 0x34
    4d4e:	63a5      	str	r5, [r4, #56]	; 0x38
    4d50:	64a5      	str	r5, [r4, #72]	; 0x48
    4d52:	64e5      	str	r5, [r4, #76]	; 0x4c
    4d54:	e7e6      	b.n	4d24 <__sfp+0x48>
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	00007ca4 	.word	0x00007ca4

00004d5c <_fwalk_reent>:
    4d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d5e:	0004      	movs	r4, r0
    4d60:	0007      	movs	r7, r0
    4d62:	2600      	movs	r6, #0
    4d64:	9101      	str	r1, [sp, #4]
    4d66:	3448      	adds	r4, #72	; 0x48
    4d68:	2c00      	cmp	r4, #0
    4d6a:	d101      	bne.n	4d70 <_fwalk_reent+0x14>
    4d6c:	0030      	movs	r0, r6
    4d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4d70:	6863      	ldr	r3, [r4, #4]
    4d72:	68a5      	ldr	r5, [r4, #8]
    4d74:	9300      	str	r3, [sp, #0]
    4d76:	9b00      	ldr	r3, [sp, #0]
    4d78:	3b01      	subs	r3, #1
    4d7a:	9300      	str	r3, [sp, #0]
    4d7c:	d501      	bpl.n	4d82 <_fwalk_reent+0x26>
    4d7e:	6824      	ldr	r4, [r4, #0]
    4d80:	e7f2      	b.n	4d68 <_fwalk_reent+0xc>
    4d82:	89ab      	ldrh	r3, [r5, #12]
    4d84:	2b01      	cmp	r3, #1
    4d86:	d908      	bls.n	4d9a <_fwalk_reent+0x3e>
    4d88:	220e      	movs	r2, #14
    4d8a:	5eab      	ldrsh	r3, [r5, r2]
    4d8c:	3301      	adds	r3, #1
    4d8e:	d004      	beq.n	4d9a <_fwalk_reent+0x3e>
    4d90:	0029      	movs	r1, r5
    4d92:	0038      	movs	r0, r7
    4d94:	9b01      	ldr	r3, [sp, #4]
    4d96:	4798      	blx	r3
    4d98:	4306      	orrs	r6, r0
    4d9a:	3568      	adds	r5, #104	; 0x68
    4d9c:	e7eb      	b.n	4d76 <_fwalk_reent+0x1a>
	...

00004da0 <_localeconv_r>:
    4da0:	4b03      	ldr	r3, [pc, #12]	; (4db0 <_localeconv_r+0x10>)
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	6a18      	ldr	r0, [r3, #32]
    4da6:	2800      	cmp	r0, #0
    4da8:	d100      	bne.n	4dac <_localeconv_r+0xc>
    4daa:	4802      	ldr	r0, [pc, #8]	; (4db4 <_localeconv_r+0x14>)
    4dac:	30f0      	adds	r0, #240	; 0xf0
    4dae:	4770      	bx	lr
    4db0:	20000000 	.word	0x20000000
    4db4:	20000064 	.word	0x20000064

00004db8 <__swhatbuf_r>:
    4db8:	b570      	push	{r4, r5, r6, lr}
    4dba:	000e      	movs	r6, r1
    4dbc:	001d      	movs	r5, r3
    4dbe:	230e      	movs	r3, #14
    4dc0:	5ec9      	ldrsh	r1, [r1, r3]
    4dc2:	b090      	sub	sp, #64	; 0x40
    4dc4:	0014      	movs	r4, r2
    4dc6:	2900      	cmp	r1, #0
    4dc8:	da07      	bge.n	4dda <__swhatbuf_r+0x22>
    4dca:	2300      	movs	r3, #0
    4dcc:	602b      	str	r3, [r5, #0]
    4dce:	89b3      	ldrh	r3, [r6, #12]
    4dd0:	061b      	lsls	r3, r3, #24
    4dd2:	d411      	bmi.n	4df8 <__swhatbuf_r+0x40>
    4dd4:	2380      	movs	r3, #128	; 0x80
    4dd6:	00db      	lsls	r3, r3, #3
    4dd8:	e00f      	b.n	4dfa <__swhatbuf_r+0x42>
    4dda:	aa01      	add	r2, sp, #4
    4ddc:	f000 fdce 	bl	597c <_fstat_r>
    4de0:	2800      	cmp	r0, #0
    4de2:	dbf2      	blt.n	4dca <__swhatbuf_r+0x12>
    4de4:	22f0      	movs	r2, #240	; 0xf0
    4de6:	9b02      	ldr	r3, [sp, #8]
    4de8:	0212      	lsls	r2, r2, #8
    4dea:	4013      	ands	r3, r2
    4dec:	4a05      	ldr	r2, [pc, #20]	; (4e04 <__swhatbuf_r+0x4c>)
    4dee:	189b      	adds	r3, r3, r2
    4df0:	425a      	negs	r2, r3
    4df2:	4153      	adcs	r3, r2
    4df4:	602b      	str	r3, [r5, #0]
    4df6:	e7ed      	b.n	4dd4 <__swhatbuf_r+0x1c>
    4df8:	2340      	movs	r3, #64	; 0x40
    4dfa:	2000      	movs	r0, #0
    4dfc:	6023      	str	r3, [r4, #0]
    4dfe:	b010      	add	sp, #64	; 0x40
    4e00:	bd70      	pop	{r4, r5, r6, pc}
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	ffffe000 	.word	0xffffe000

00004e08 <__smakebuf_r>:
    4e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e0a:	2602      	movs	r6, #2
    4e0c:	898b      	ldrh	r3, [r1, #12]
    4e0e:	0005      	movs	r5, r0
    4e10:	000c      	movs	r4, r1
    4e12:	4233      	tst	r3, r6
    4e14:	d006      	beq.n	4e24 <__smakebuf_r+0x1c>
    4e16:	0023      	movs	r3, r4
    4e18:	3347      	adds	r3, #71	; 0x47
    4e1a:	6023      	str	r3, [r4, #0]
    4e1c:	6123      	str	r3, [r4, #16]
    4e1e:	2301      	movs	r3, #1
    4e20:	6163      	str	r3, [r4, #20]
    4e22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4e24:	ab01      	add	r3, sp, #4
    4e26:	466a      	mov	r2, sp
    4e28:	f7ff ffc6 	bl	4db8 <__swhatbuf_r>
    4e2c:	9900      	ldr	r1, [sp, #0]
    4e2e:	0007      	movs	r7, r0
    4e30:	0028      	movs	r0, r5
    4e32:	f000 fb7d 	bl	5530 <_malloc_r>
    4e36:	2800      	cmp	r0, #0
    4e38:	d108      	bne.n	4e4c <__smakebuf_r+0x44>
    4e3a:	220c      	movs	r2, #12
    4e3c:	5ea3      	ldrsh	r3, [r4, r2]
    4e3e:	059a      	lsls	r2, r3, #22
    4e40:	d4ef      	bmi.n	4e22 <__smakebuf_r+0x1a>
    4e42:	2203      	movs	r2, #3
    4e44:	4393      	bics	r3, r2
    4e46:	431e      	orrs	r6, r3
    4e48:	81a6      	strh	r6, [r4, #12]
    4e4a:	e7e4      	b.n	4e16 <__smakebuf_r+0xe>
    4e4c:	4b0f      	ldr	r3, [pc, #60]	; (4e8c <__smakebuf_r+0x84>)
    4e4e:	62ab      	str	r3, [r5, #40]	; 0x28
    4e50:	2380      	movs	r3, #128	; 0x80
    4e52:	89a2      	ldrh	r2, [r4, #12]
    4e54:	6020      	str	r0, [r4, #0]
    4e56:	4313      	orrs	r3, r2
    4e58:	81a3      	strh	r3, [r4, #12]
    4e5a:	9b00      	ldr	r3, [sp, #0]
    4e5c:	6120      	str	r0, [r4, #16]
    4e5e:	6163      	str	r3, [r4, #20]
    4e60:	9b01      	ldr	r3, [sp, #4]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d00d      	beq.n	4e82 <__smakebuf_r+0x7a>
    4e66:	230e      	movs	r3, #14
    4e68:	5ee1      	ldrsh	r1, [r4, r3]
    4e6a:	0028      	movs	r0, r5
    4e6c:	f000 fd98 	bl	59a0 <_isatty_r>
    4e70:	2800      	cmp	r0, #0
    4e72:	d006      	beq.n	4e82 <__smakebuf_r+0x7a>
    4e74:	2203      	movs	r2, #3
    4e76:	89a3      	ldrh	r3, [r4, #12]
    4e78:	4393      	bics	r3, r2
    4e7a:	001a      	movs	r2, r3
    4e7c:	2301      	movs	r3, #1
    4e7e:	4313      	orrs	r3, r2
    4e80:	81a3      	strh	r3, [r4, #12]
    4e82:	89a0      	ldrh	r0, [r4, #12]
    4e84:	4338      	orrs	r0, r7
    4e86:	81a0      	strh	r0, [r4, #12]
    4e88:	e7cb      	b.n	4e22 <__smakebuf_r+0x1a>
    4e8a:	46c0      	nop			; (mov r8, r8)
    4e8c:	00004bf1 	.word	0x00004bf1

00004e90 <malloc>:
    4e90:	b510      	push	{r4, lr}
    4e92:	4b03      	ldr	r3, [pc, #12]	; (4ea0 <malloc+0x10>)
    4e94:	0001      	movs	r1, r0
    4e96:	6818      	ldr	r0, [r3, #0]
    4e98:	f000 fb4a 	bl	5530 <_malloc_r>
    4e9c:	bd10      	pop	{r4, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	20000000 	.word	0x20000000

00004ea4 <memchr>:
    4ea4:	b2c9      	uxtb	r1, r1
    4ea6:	1882      	adds	r2, r0, r2
    4ea8:	4290      	cmp	r0, r2
    4eaa:	d101      	bne.n	4eb0 <memchr+0xc>
    4eac:	2000      	movs	r0, #0
    4eae:	4770      	bx	lr
    4eb0:	7803      	ldrb	r3, [r0, #0]
    4eb2:	428b      	cmp	r3, r1
    4eb4:	d0fb      	beq.n	4eae <memchr+0xa>
    4eb6:	3001      	adds	r0, #1
    4eb8:	e7f6      	b.n	4ea8 <memchr+0x4>

00004eba <_Balloc>:
    4eba:	b570      	push	{r4, r5, r6, lr}
    4ebc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    4ebe:	0004      	movs	r4, r0
    4ec0:	000d      	movs	r5, r1
    4ec2:	2e00      	cmp	r6, #0
    4ec4:	d107      	bne.n	4ed6 <_Balloc+0x1c>
    4ec6:	2010      	movs	r0, #16
    4ec8:	f7ff ffe2 	bl	4e90 <malloc>
    4ecc:	6260      	str	r0, [r4, #36]	; 0x24
    4ece:	6046      	str	r6, [r0, #4]
    4ed0:	6086      	str	r6, [r0, #8]
    4ed2:	6006      	str	r6, [r0, #0]
    4ed4:	60c6      	str	r6, [r0, #12]
    4ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4ed8:	68f3      	ldr	r3, [r6, #12]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d013      	beq.n	4f06 <_Balloc+0x4c>
    4ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ee0:	00aa      	lsls	r2, r5, #2
    4ee2:	68db      	ldr	r3, [r3, #12]
    4ee4:	189b      	adds	r3, r3, r2
    4ee6:	6818      	ldr	r0, [r3, #0]
    4ee8:	2800      	cmp	r0, #0
    4eea:	d118      	bne.n	4f1e <_Balloc+0x64>
    4eec:	2101      	movs	r1, #1
    4eee:	000e      	movs	r6, r1
    4ef0:	40ae      	lsls	r6, r5
    4ef2:	1d72      	adds	r2, r6, #5
    4ef4:	0092      	lsls	r2, r2, #2
    4ef6:	0020      	movs	r0, r4
    4ef8:	f000 fac2 	bl	5480 <_calloc_r>
    4efc:	2800      	cmp	r0, #0
    4efe:	d00c      	beq.n	4f1a <_Balloc+0x60>
    4f00:	6045      	str	r5, [r0, #4]
    4f02:	6086      	str	r6, [r0, #8]
    4f04:	e00d      	b.n	4f22 <_Balloc+0x68>
    4f06:	2221      	movs	r2, #33	; 0x21
    4f08:	2104      	movs	r1, #4
    4f0a:	0020      	movs	r0, r4
    4f0c:	f000 fab8 	bl	5480 <_calloc_r>
    4f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f12:	60f0      	str	r0, [r6, #12]
    4f14:	68db      	ldr	r3, [r3, #12]
    4f16:	2b00      	cmp	r3, #0
    4f18:	d1e1      	bne.n	4ede <_Balloc+0x24>
    4f1a:	2000      	movs	r0, #0
    4f1c:	bd70      	pop	{r4, r5, r6, pc}
    4f1e:	6802      	ldr	r2, [r0, #0]
    4f20:	601a      	str	r2, [r3, #0]
    4f22:	2300      	movs	r3, #0
    4f24:	6103      	str	r3, [r0, #16]
    4f26:	60c3      	str	r3, [r0, #12]
    4f28:	e7f8      	b.n	4f1c <_Balloc+0x62>

00004f2a <_Bfree>:
    4f2a:	b570      	push	{r4, r5, r6, lr}
    4f2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4f2e:	0006      	movs	r6, r0
    4f30:	000d      	movs	r5, r1
    4f32:	2c00      	cmp	r4, #0
    4f34:	d107      	bne.n	4f46 <_Bfree+0x1c>
    4f36:	2010      	movs	r0, #16
    4f38:	f7ff ffaa 	bl	4e90 <malloc>
    4f3c:	6270      	str	r0, [r6, #36]	; 0x24
    4f3e:	6044      	str	r4, [r0, #4]
    4f40:	6084      	str	r4, [r0, #8]
    4f42:	6004      	str	r4, [r0, #0]
    4f44:	60c4      	str	r4, [r0, #12]
    4f46:	2d00      	cmp	r5, #0
    4f48:	d007      	beq.n	4f5a <_Bfree+0x30>
    4f4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    4f4c:	686a      	ldr	r2, [r5, #4]
    4f4e:	68db      	ldr	r3, [r3, #12]
    4f50:	0092      	lsls	r2, r2, #2
    4f52:	189b      	adds	r3, r3, r2
    4f54:	681a      	ldr	r2, [r3, #0]
    4f56:	602a      	str	r2, [r5, #0]
    4f58:	601d      	str	r5, [r3, #0]
    4f5a:	bd70      	pop	{r4, r5, r6, pc}

00004f5c <__multadd>:
    4f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f5e:	001e      	movs	r6, r3
    4f60:	2314      	movs	r3, #20
    4f62:	469c      	mov	ip, r3
    4f64:	0007      	movs	r7, r0
    4f66:	000c      	movs	r4, r1
    4f68:	2000      	movs	r0, #0
    4f6a:	690d      	ldr	r5, [r1, #16]
    4f6c:	448c      	add	ip, r1
    4f6e:	4663      	mov	r3, ip
    4f70:	8819      	ldrh	r1, [r3, #0]
    4f72:	681b      	ldr	r3, [r3, #0]
    4f74:	4351      	muls	r1, r2
    4f76:	0c1b      	lsrs	r3, r3, #16
    4f78:	4353      	muls	r3, r2
    4f7a:	1989      	adds	r1, r1, r6
    4f7c:	0c0e      	lsrs	r6, r1, #16
    4f7e:	199b      	adds	r3, r3, r6
    4f80:	b289      	uxth	r1, r1
    4f82:	0c1e      	lsrs	r6, r3, #16
    4f84:	041b      	lsls	r3, r3, #16
    4f86:	185b      	adds	r3, r3, r1
    4f88:	4661      	mov	r1, ip
    4f8a:	3001      	adds	r0, #1
    4f8c:	c108      	stmia	r1!, {r3}
    4f8e:	468c      	mov	ip, r1
    4f90:	4285      	cmp	r5, r0
    4f92:	dcec      	bgt.n	4f6e <__multadd+0x12>
    4f94:	2e00      	cmp	r6, #0
    4f96:	d01b      	beq.n	4fd0 <__multadd+0x74>
    4f98:	68a3      	ldr	r3, [r4, #8]
    4f9a:	429d      	cmp	r5, r3
    4f9c:	db12      	blt.n	4fc4 <__multadd+0x68>
    4f9e:	6863      	ldr	r3, [r4, #4]
    4fa0:	0038      	movs	r0, r7
    4fa2:	1c59      	adds	r1, r3, #1
    4fa4:	f7ff ff89 	bl	4eba <_Balloc>
    4fa8:	0021      	movs	r1, r4
    4faa:	6923      	ldr	r3, [r4, #16]
    4fac:	9001      	str	r0, [sp, #4]
    4fae:	1c9a      	adds	r2, r3, #2
    4fb0:	0092      	lsls	r2, r2, #2
    4fb2:	310c      	adds	r1, #12
    4fb4:	300c      	adds	r0, #12
    4fb6:	f7fe f869 	bl	308c <memcpy>
    4fba:	0021      	movs	r1, r4
    4fbc:	0038      	movs	r0, r7
    4fbe:	f7ff ffb4 	bl	4f2a <_Bfree>
    4fc2:	9c01      	ldr	r4, [sp, #4]
    4fc4:	1d2b      	adds	r3, r5, #4
    4fc6:	009b      	lsls	r3, r3, #2
    4fc8:	18e3      	adds	r3, r4, r3
    4fca:	3501      	adds	r5, #1
    4fcc:	605e      	str	r6, [r3, #4]
    4fce:	6125      	str	r5, [r4, #16]
    4fd0:	0020      	movs	r0, r4
    4fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004fd4 <__hi0bits>:
    4fd4:	0003      	movs	r3, r0
    4fd6:	0c02      	lsrs	r2, r0, #16
    4fd8:	2000      	movs	r0, #0
    4fda:	4282      	cmp	r2, r0
    4fdc:	d101      	bne.n	4fe2 <__hi0bits+0xe>
    4fde:	041b      	lsls	r3, r3, #16
    4fe0:	3010      	adds	r0, #16
    4fe2:	0e1a      	lsrs	r2, r3, #24
    4fe4:	d101      	bne.n	4fea <__hi0bits+0x16>
    4fe6:	3008      	adds	r0, #8
    4fe8:	021b      	lsls	r3, r3, #8
    4fea:	0f1a      	lsrs	r2, r3, #28
    4fec:	d101      	bne.n	4ff2 <__hi0bits+0x1e>
    4fee:	3004      	adds	r0, #4
    4ff0:	011b      	lsls	r3, r3, #4
    4ff2:	0f9a      	lsrs	r2, r3, #30
    4ff4:	d101      	bne.n	4ffa <__hi0bits+0x26>
    4ff6:	3002      	adds	r0, #2
    4ff8:	009b      	lsls	r3, r3, #2
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	db03      	blt.n	5006 <__hi0bits+0x32>
    4ffe:	3001      	adds	r0, #1
    5000:	005b      	lsls	r3, r3, #1
    5002:	d400      	bmi.n	5006 <__hi0bits+0x32>
    5004:	2020      	movs	r0, #32
    5006:	4770      	bx	lr

00005008 <__lo0bits>:
    5008:	2207      	movs	r2, #7
    500a:	6803      	ldr	r3, [r0, #0]
    500c:	b510      	push	{r4, lr}
    500e:	0001      	movs	r1, r0
    5010:	401a      	ands	r2, r3
    5012:	d00d      	beq.n	5030 <__lo0bits+0x28>
    5014:	2401      	movs	r4, #1
    5016:	2000      	movs	r0, #0
    5018:	4223      	tst	r3, r4
    501a:	d105      	bne.n	5028 <__lo0bits+0x20>
    501c:	3002      	adds	r0, #2
    501e:	4203      	tst	r3, r0
    5020:	d003      	beq.n	502a <__lo0bits+0x22>
    5022:	40e3      	lsrs	r3, r4
    5024:	0020      	movs	r0, r4
    5026:	600b      	str	r3, [r1, #0]
    5028:	bd10      	pop	{r4, pc}
    502a:	089b      	lsrs	r3, r3, #2
    502c:	600b      	str	r3, [r1, #0]
    502e:	e7fb      	b.n	5028 <__lo0bits+0x20>
    5030:	b29c      	uxth	r4, r3
    5032:	0010      	movs	r0, r2
    5034:	2c00      	cmp	r4, #0
    5036:	d101      	bne.n	503c <__lo0bits+0x34>
    5038:	2010      	movs	r0, #16
    503a:	0c1b      	lsrs	r3, r3, #16
    503c:	b2da      	uxtb	r2, r3
    503e:	2a00      	cmp	r2, #0
    5040:	d101      	bne.n	5046 <__lo0bits+0x3e>
    5042:	3008      	adds	r0, #8
    5044:	0a1b      	lsrs	r3, r3, #8
    5046:	071a      	lsls	r2, r3, #28
    5048:	d101      	bne.n	504e <__lo0bits+0x46>
    504a:	3004      	adds	r0, #4
    504c:	091b      	lsrs	r3, r3, #4
    504e:	079a      	lsls	r2, r3, #30
    5050:	d101      	bne.n	5056 <__lo0bits+0x4e>
    5052:	3002      	adds	r0, #2
    5054:	089b      	lsrs	r3, r3, #2
    5056:	07da      	lsls	r2, r3, #31
    5058:	d4e8      	bmi.n	502c <__lo0bits+0x24>
    505a:	085b      	lsrs	r3, r3, #1
    505c:	d001      	beq.n	5062 <__lo0bits+0x5a>
    505e:	3001      	adds	r0, #1
    5060:	e7e4      	b.n	502c <__lo0bits+0x24>
    5062:	2020      	movs	r0, #32
    5064:	e7e0      	b.n	5028 <__lo0bits+0x20>

00005066 <__i2b>:
    5066:	b510      	push	{r4, lr}
    5068:	000c      	movs	r4, r1
    506a:	2101      	movs	r1, #1
    506c:	f7ff ff25 	bl	4eba <_Balloc>
    5070:	2301      	movs	r3, #1
    5072:	6144      	str	r4, [r0, #20]
    5074:	6103      	str	r3, [r0, #16]
    5076:	bd10      	pop	{r4, pc}

00005078 <__multiply>:
    5078:	b5f0      	push	{r4, r5, r6, r7, lr}
    507a:	690b      	ldr	r3, [r1, #16]
    507c:	0015      	movs	r5, r2
    507e:	6912      	ldr	r2, [r2, #16]
    5080:	b089      	sub	sp, #36	; 0x24
    5082:	000c      	movs	r4, r1
    5084:	4293      	cmp	r3, r2
    5086:	da01      	bge.n	508c <__multiply+0x14>
    5088:	002c      	movs	r4, r5
    508a:	000d      	movs	r5, r1
    508c:	6927      	ldr	r7, [r4, #16]
    508e:	692e      	ldr	r6, [r5, #16]
    5090:	68a2      	ldr	r2, [r4, #8]
    5092:	19bb      	adds	r3, r7, r6
    5094:	6861      	ldr	r1, [r4, #4]
    5096:	9301      	str	r3, [sp, #4]
    5098:	4293      	cmp	r3, r2
    509a:	dd00      	ble.n	509e <__multiply+0x26>
    509c:	3101      	adds	r1, #1
    509e:	f7ff ff0c 	bl	4eba <_Balloc>
    50a2:	0003      	movs	r3, r0
    50a4:	3314      	adds	r3, #20
    50a6:	9300      	str	r3, [sp, #0]
    50a8:	9a00      	ldr	r2, [sp, #0]
    50aa:	19bb      	adds	r3, r7, r6
    50ac:	4694      	mov	ip, r2
    50ae:	009b      	lsls	r3, r3, #2
    50b0:	449c      	add	ip, r3
    50b2:	0013      	movs	r3, r2
    50b4:	2200      	movs	r2, #0
    50b6:	9004      	str	r0, [sp, #16]
    50b8:	4563      	cmp	r3, ip
    50ba:	d31c      	bcc.n	50f6 <__multiply+0x7e>
    50bc:	002a      	movs	r2, r5
    50be:	3414      	adds	r4, #20
    50c0:	00bf      	lsls	r7, r7, #2
    50c2:	19e3      	adds	r3, r4, r7
    50c4:	3214      	adds	r2, #20
    50c6:	00b6      	lsls	r6, r6, #2
    50c8:	9305      	str	r3, [sp, #20]
    50ca:	1993      	adds	r3, r2, r6
    50cc:	9402      	str	r4, [sp, #8]
    50ce:	9306      	str	r3, [sp, #24]
    50d0:	9b06      	ldr	r3, [sp, #24]
    50d2:	429a      	cmp	r2, r3
    50d4:	d311      	bcc.n	50fa <__multiply+0x82>
    50d6:	9b01      	ldr	r3, [sp, #4]
    50d8:	2b00      	cmp	r3, #0
    50da:	dd06      	ble.n	50ea <__multiply+0x72>
    50dc:	2304      	movs	r3, #4
    50de:	425b      	negs	r3, r3
    50e0:	449c      	add	ip, r3
    50e2:	4663      	mov	r3, ip
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d051      	beq.n	518e <__multiply+0x116>
    50ea:	9b04      	ldr	r3, [sp, #16]
    50ec:	9a01      	ldr	r2, [sp, #4]
    50ee:	0018      	movs	r0, r3
    50f0:	611a      	str	r2, [r3, #16]
    50f2:	b009      	add	sp, #36	; 0x24
    50f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50f6:	c304      	stmia	r3!, {r2}
    50f8:	e7de      	b.n	50b8 <__multiply+0x40>
    50fa:	8814      	ldrh	r4, [r2, #0]
    50fc:	2c00      	cmp	r4, #0
    50fe:	d01e      	beq.n	513e <__multiply+0xc6>
    5100:	2600      	movs	r6, #0
    5102:	9d00      	ldr	r5, [sp, #0]
    5104:	9f02      	ldr	r7, [sp, #8]
    5106:	cf01      	ldmia	r7!, {r0}
    5108:	9507      	str	r5, [sp, #28]
    510a:	cd08      	ldmia	r5!, {r3}
    510c:	9303      	str	r3, [sp, #12]
    510e:	b283      	uxth	r3, r0
    5110:	4363      	muls	r3, r4
    5112:	0019      	movs	r1, r3
    5114:	466b      	mov	r3, sp
    5116:	0c00      	lsrs	r0, r0, #16
    5118:	899b      	ldrh	r3, [r3, #12]
    511a:	4360      	muls	r0, r4
    511c:	18cb      	adds	r3, r1, r3
    511e:	9903      	ldr	r1, [sp, #12]
    5120:	199b      	adds	r3, r3, r6
    5122:	0c09      	lsrs	r1, r1, #16
    5124:	1841      	adds	r1, r0, r1
    5126:	0c18      	lsrs	r0, r3, #16
    5128:	1809      	adds	r1, r1, r0
    512a:	0c0e      	lsrs	r6, r1, #16
    512c:	b29b      	uxth	r3, r3
    512e:	0409      	lsls	r1, r1, #16
    5130:	430b      	orrs	r3, r1
    5132:	9907      	ldr	r1, [sp, #28]
    5134:	600b      	str	r3, [r1, #0]
    5136:	9b05      	ldr	r3, [sp, #20]
    5138:	42bb      	cmp	r3, r7
    513a:	d8e4      	bhi.n	5106 <__multiply+0x8e>
    513c:	602e      	str	r6, [r5, #0]
    513e:	6813      	ldr	r3, [r2, #0]
    5140:	0c1b      	lsrs	r3, r3, #16
    5142:	9303      	str	r3, [sp, #12]
    5144:	d01e      	beq.n	5184 <__multiply+0x10c>
    5146:	2600      	movs	r6, #0
    5148:	9b00      	ldr	r3, [sp, #0]
    514a:	9c02      	ldr	r4, [sp, #8]
    514c:	681b      	ldr	r3, [r3, #0]
    514e:	9800      	ldr	r0, [sp, #0]
    5150:	0007      	movs	r7, r0
    5152:	8821      	ldrh	r1, [r4, #0]
    5154:	9d03      	ldr	r5, [sp, #12]
    5156:	b29b      	uxth	r3, r3
    5158:	4369      	muls	r1, r5
    515a:	c820      	ldmia	r0!, {r5}
    515c:	0c2d      	lsrs	r5, r5, #16
    515e:	1949      	adds	r1, r1, r5
    5160:	198e      	adds	r6, r1, r6
    5162:	0431      	lsls	r1, r6, #16
    5164:	430b      	orrs	r3, r1
    5166:	603b      	str	r3, [r7, #0]
    5168:	cc08      	ldmia	r4!, {r3}
    516a:	9903      	ldr	r1, [sp, #12]
    516c:	0c1b      	lsrs	r3, r3, #16
    516e:	434b      	muls	r3, r1
    5170:	6879      	ldr	r1, [r7, #4]
    5172:	0c36      	lsrs	r6, r6, #16
    5174:	b289      	uxth	r1, r1
    5176:	185b      	adds	r3, r3, r1
    5178:	9905      	ldr	r1, [sp, #20]
    517a:	199b      	adds	r3, r3, r6
    517c:	0c1e      	lsrs	r6, r3, #16
    517e:	42a1      	cmp	r1, r4
    5180:	d8e6      	bhi.n	5150 <__multiply+0xd8>
    5182:	6003      	str	r3, [r0, #0]
    5184:	9b00      	ldr	r3, [sp, #0]
    5186:	3204      	adds	r2, #4
    5188:	3304      	adds	r3, #4
    518a:	9300      	str	r3, [sp, #0]
    518c:	e7a0      	b.n	50d0 <__multiply+0x58>
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	3b01      	subs	r3, #1
    5192:	9301      	str	r3, [sp, #4]
    5194:	e79f      	b.n	50d6 <__multiply+0x5e>
	...

00005198 <__pow5mult>:
    5198:	2303      	movs	r3, #3
    519a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    519c:	4013      	ands	r3, r2
    519e:	0005      	movs	r5, r0
    51a0:	000e      	movs	r6, r1
    51a2:	0014      	movs	r4, r2
    51a4:	2b00      	cmp	r3, #0
    51a6:	d008      	beq.n	51ba <__pow5mult+0x22>
    51a8:	4922      	ldr	r1, [pc, #136]	; (5234 <__pow5mult+0x9c>)
    51aa:	3b01      	subs	r3, #1
    51ac:	009a      	lsls	r2, r3, #2
    51ae:	5852      	ldr	r2, [r2, r1]
    51b0:	2300      	movs	r3, #0
    51b2:	0031      	movs	r1, r6
    51b4:	f7ff fed2 	bl	4f5c <__multadd>
    51b8:	0006      	movs	r6, r0
    51ba:	10a3      	asrs	r3, r4, #2
    51bc:	9301      	str	r3, [sp, #4]
    51be:	d036      	beq.n	522e <__pow5mult+0x96>
    51c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    51c2:	2c00      	cmp	r4, #0
    51c4:	d107      	bne.n	51d6 <__pow5mult+0x3e>
    51c6:	2010      	movs	r0, #16
    51c8:	f7ff fe62 	bl	4e90 <malloc>
    51cc:	6268      	str	r0, [r5, #36]	; 0x24
    51ce:	6044      	str	r4, [r0, #4]
    51d0:	6084      	str	r4, [r0, #8]
    51d2:	6004      	str	r4, [r0, #0]
    51d4:	60c4      	str	r4, [r0, #12]
    51d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    51d8:	68bc      	ldr	r4, [r7, #8]
    51da:	2c00      	cmp	r4, #0
    51dc:	d107      	bne.n	51ee <__pow5mult+0x56>
    51de:	4916      	ldr	r1, [pc, #88]	; (5238 <__pow5mult+0xa0>)
    51e0:	0028      	movs	r0, r5
    51e2:	f7ff ff40 	bl	5066 <__i2b>
    51e6:	2300      	movs	r3, #0
    51e8:	0004      	movs	r4, r0
    51ea:	60b8      	str	r0, [r7, #8]
    51ec:	6003      	str	r3, [r0, #0]
    51ee:	2201      	movs	r2, #1
    51f0:	9b01      	ldr	r3, [sp, #4]
    51f2:	4213      	tst	r3, r2
    51f4:	d00a      	beq.n	520c <__pow5mult+0x74>
    51f6:	0031      	movs	r1, r6
    51f8:	0022      	movs	r2, r4
    51fa:	0028      	movs	r0, r5
    51fc:	f7ff ff3c 	bl	5078 <__multiply>
    5200:	0007      	movs	r7, r0
    5202:	0031      	movs	r1, r6
    5204:	0028      	movs	r0, r5
    5206:	f7ff fe90 	bl	4f2a <_Bfree>
    520a:	003e      	movs	r6, r7
    520c:	9b01      	ldr	r3, [sp, #4]
    520e:	105b      	asrs	r3, r3, #1
    5210:	9301      	str	r3, [sp, #4]
    5212:	d00c      	beq.n	522e <__pow5mult+0x96>
    5214:	6820      	ldr	r0, [r4, #0]
    5216:	2800      	cmp	r0, #0
    5218:	d107      	bne.n	522a <__pow5mult+0x92>
    521a:	0022      	movs	r2, r4
    521c:	0021      	movs	r1, r4
    521e:	0028      	movs	r0, r5
    5220:	f7ff ff2a 	bl	5078 <__multiply>
    5224:	2300      	movs	r3, #0
    5226:	6020      	str	r0, [r4, #0]
    5228:	6003      	str	r3, [r0, #0]
    522a:	0004      	movs	r4, r0
    522c:	e7df      	b.n	51ee <__pow5mult+0x56>
    522e:	0030      	movs	r0, r6
    5230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	00007e40 	.word	0x00007e40
    5238:	00000271 	.word	0x00000271

0000523c <__lshift>:
    523c:	b5f0      	push	{r4, r5, r6, r7, lr}
    523e:	000d      	movs	r5, r1
    5240:	0017      	movs	r7, r2
    5242:	692b      	ldr	r3, [r5, #16]
    5244:	1154      	asrs	r4, r2, #5
    5246:	b085      	sub	sp, #20
    5248:	18e3      	adds	r3, r4, r3
    524a:	9302      	str	r3, [sp, #8]
    524c:	3301      	adds	r3, #1
    524e:	9301      	str	r3, [sp, #4]
    5250:	6849      	ldr	r1, [r1, #4]
    5252:	68ab      	ldr	r3, [r5, #8]
    5254:	9003      	str	r0, [sp, #12]
    5256:	9a01      	ldr	r2, [sp, #4]
    5258:	4293      	cmp	r3, r2
    525a:	db34      	blt.n	52c6 <__lshift+0x8a>
    525c:	9803      	ldr	r0, [sp, #12]
    525e:	f7ff fe2c 	bl	4eba <_Balloc>
    5262:	2300      	movs	r3, #0
    5264:	0002      	movs	r2, r0
    5266:	0006      	movs	r6, r0
    5268:	0019      	movs	r1, r3
    526a:	3214      	adds	r2, #20
    526c:	42a3      	cmp	r3, r4
    526e:	db2d      	blt.n	52cc <__lshift+0x90>
    5270:	43e3      	mvns	r3, r4
    5272:	17db      	asrs	r3, r3, #31
    5274:	401c      	ands	r4, r3
    5276:	002b      	movs	r3, r5
    5278:	211f      	movs	r1, #31
    527a:	00a4      	lsls	r4, r4, #2
    527c:	1914      	adds	r4, r2, r4
    527e:	692a      	ldr	r2, [r5, #16]
    5280:	3314      	adds	r3, #20
    5282:	0092      	lsls	r2, r2, #2
    5284:	189a      	adds	r2, r3, r2
    5286:	400f      	ands	r7, r1
    5288:	d024      	beq.n	52d4 <__lshift+0x98>
    528a:	3101      	adds	r1, #1
    528c:	1bc9      	subs	r1, r1, r7
    528e:	468c      	mov	ip, r1
    5290:	2100      	movs	r1, #0
    5292:	6818      	ldr	r0, [r3, #0]
    5294:	40b8      	lsls	r0, r7
    5296:	4301      	orrs	r1, r0
    5298:	4660      	mov	r0, ip
    529a:	6021      	str	r1, [r4, #0]
    529c:	cb02      	ldmia	r3!, {r1}
    529e:	3404      	adds	r4, #4
    52a0:	40c1      	lsrs	r1, r0
    52a2:	429a      	cmp	r2, r3
    52a4:	d8f5      	bhi.n	5292 <__lshift+0x56>
    52a6:	6021      	str	r1, [r4, #0]
    52a8:	2900      	cmp	r1, #0
    52aa:	d002      	beq.n	52b2 <__lshift+0x76>
    52ac:	9b02      	ldr	r3, [sp, #8]
    52ae:	3302      	adds	r3, #2
    52b0:	9301      	str	r3, [sp, #4]
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	9803      	ldr	r0, [sp, #12]
    52b6:	3b01      	subs	r3, #1
    52b8:	6133      	str	r3, [r6, #16]
    52ba:	0029      	movs	r1, r5
    52bc:	f7ff fe35 	bl	4f2a <_Bfree>
    52c0:	0030      	movs	r0, r6
    52c2:	b005      	add	sp, #20
    52c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52c6:	3101      	adds	r1, #1
    52c8:	005b      	lsls	r3, r3, #1
    52ca:	e7c4      	b.n	5256 <__lshift+0x1a>
    52cc:	0098      	lsls	r0, r3, #2
    52ce:	5011      	str	r1, [r2, r0]
    52d0:	3301      	adds	r3, #1
    52d2:	e7cb      	b.n	526c <__lshift+0x30>
    52d4:	cb02      	ldmia	r3!, {r1}
    52d6:	c402      	stmia	r4!, {r1}
    52d8:	429a      	cmp	r2, r3
    52da:	d8fb      	bhi.n	52d4 <__lshift+0x98>
    52dc:	e7e9      	b.n	52b2 <__lshift+0x76>

000052de <__mcmp>:
    52de:	690a      	ldr	r2, [r1, #16]
    52e0:	6903      	ldr	r3, [r0, #16]
    52e2:	b530      	push	{r4, r5, lr}
    52e4:	1a9b      	subs	r3, r3, r2
    52e6:	d10e      	bne.n	5306 <__mcmp+0x28>
    52e8:	0092      	lsls	r2, r2, #2
    52ea:	3014      	adds	r0, #20
    52ec:	3114      	adds	r1, #20
    52ee:	1884      	adds	r4, r0, r2
    52f0:	1889      	adds	r1, r1, r2
    52f2:	3c04      	subs	r4, #4
    52f4:	3904      	subs	r1, #4
    52f6:	6822      	ldr	r2, [r4, #0]
    52f8:	680d      	ldr	r5, [r1, #0]
    52fa:	42aa      	cmp	r2, r5
    52fc:	d005      	beq.n	530a <__mcmp+0x2c>
    52fe:	42aa      	cmp	r2, r5
    5300:	4192      	sbcs	r2, r2
    5302:	2301      	movs	r3, #1
    5304:	4313      	orrs	r3, r2
    5306:	0018      	movs	r0, r3
    5308:	bd30      	pop	{r4, r5, pc}
    530a:	42a0      	cmp	r0, r4
    530c:	d3f1      	bcc.n	52f2 <__mcmp+0x14>
    530e:	e7fa      	b.n	5306 <__mcmp+0x28>

00005310 <__mdiff>:
    5310:	b5f0      	push	{r4, r5, r6, r7, lr}
    5312:	000d      	movs	r5, r1
    5314:	b085      	sub	sp, #20
    5316:	0007      	movs	r7, r0
    5318:	0011      	movs	r1, r2
    531a:	0028      	movs	r0, r5
    531c:	0014      	movs	r4, r2
    531e:	f7ff ffde 	bl	52de <__mcmp>
    5322:	1e06      	subs	r6, r0, #0
    5324:	d108      	bne.n	5338 <__mdiff+0x28>
    5326:	0001      	movs	r1, r0
    5328:	0038      	movs	r0, r7
    532a:	f7ff fdc6 	bl	4eba <_Balloc>
    532e:	2301      	movs	r3, #1
    5330:	6146      	str	r6, [r0, #20]
    5332:	6103      	str	r3, [r0, #16]
    5334:	b005      	add	sp, #20
    5336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5338:	2301      	movs	r3, #1
    533a:	9301      	str	r3, [sp, #4]
    533c:	2800      	cmp	r0, #0
    533e:	db04      	blt.n	534a <__mdiff+0x3a>
    5340:	0023      	movs	r3, r4
    5342:	002c      	movs	r4, r5
    5344:	001d      	movs	r5, r3
    5346:	2300      	movs	r3, #0
    5348:	9301      	str	r3, [sp, #4]
    534a:	6861      	ldr	r1, [r4, #4]
    534c:	0038      	movs	r0, r7
    534e:	f7ff fdb4 	bl	4eba <_Balloc>
    5352:	002f      	movs	r7, r5
    5354:	2200      	movs	r2, #0
    5356:	9b01      	ldr	r3, [sp, #4]
    5358:	6926      	ldr	r6, [r4, #16]
    535a:	60c3      	str	r3, [r0, #12]
    535c:	3414      	adds	r4, #20
    535e:	00b3      	lsls	r3, r6, #2
    5360:	18e3      	adds	r3, r4, r3
    5362:	9302      	str	r3, [sp, #8]
    5364:	692b      	ldr	r3, [r5, #16]
    5366:	3714      	adds	r7, #20
    5368:	009b      	lsls	r3, r3, #2
    536a:	18fb      	adds	r3, r7, r3
    536c:	9303      	str	r3, [sp, #12]
    536e:	0003      	movs	r3, r0
    5370:	4694      	mov	ip, r2
    5372:	3314      	adds	r3, #20
    5374:	cc20      	ldmia	r4!, {r5}
    5376:	cf04      	ldmia	r7!, {r2}
    5378:	9201      	str	r2, [sp, #4]
    537a:	b2aa      	uxth	r2, r5
    537c:	4494      	add	ip, r2
    537e:	466a      	mov	r2, sp
    5380:	4661      	mov	r1, ip
    5382:	8892      	ldrh	r2, [r2, #4]
    5384:	0c2d      	lsrs	r5, r5, #16
    5386:	1a8a      	subs	r2, r1, r2
    5388:	9901      	ldr	r1, [sp, #4]
    538a:	0c09      	lsrs	r1, r1, #16
    538c:	1a69      	subs	r1, r5, r1
    538e:	1415      	asrs	r5, r2, #16
    5390:	1949      	adds	r1, r1, r5
    5392:	140d      	asrs	r5, r1, #16
    5394:	b292      	uxth	r2, r2
    5396:	0409      	lsls	r1, r1, #16
    5398:	430a      	orrs	r2, r1
    539a:	601a      	str	r2, [r3, #0]
    539c:	9a03      	ldr	r2, [sp, #12]
    539e:	46ac      	mov	ip, r5
    53a0:	3304      	adds	r3, #4
    53a2:	42ba      	cmp	r2, r7
    53a4:	d8e6      	bhi.n	5374 <__mdiff+0x64>
    53a6:	9902      	ldr	r1, [sp, #8]
    53a8:	001a      	movs	r2, r3
    53aa:	428c      	cmp	r4, r1
    53ac:	d305      	bcc.n	53ba <__mdiff+0xaa>
    53ae:	3a04      	subs	r2, #4
    53b0:	6813      	ldr	r3, [r2, #0]
    53b2:	2b00      	cmp	r3, #0
    53b4:	d00e      	beq.n	53d4 <__mdiff+0xc4>
    53b6:	6106      	str	r6, [r0, #16]
    53b8:	e7bc      	b.n	5334 <__mdiff+0x24>
    53ba:	cc04      	ldmia	r4!, {r2}
    53bc:	b291      	uxth	r1, r2
    53be:	4461      	add	r1, ip
    53c0:	140d      	asrs	r5, r1, #16
    53c2:	0c12      	lsrs	r2, r2, #16
    53c4:	1952      	adds	r2, r2, r5
    53c6:	1415      	asrs	r5, r2, #16
    53c8:	b289      	uxth	r1, r1
    53ca:	0412      	lsls	r2, r2, #16
    53cc:	430a      	orrs	r2, r1
    53ce:	46ac      	mov	ip, r5
    53d0:	c304      	stmia	r3!, {r2}
    53d2:	e7e8      	b.n	53a6 <__mdiff+0x96>
    53d4:	3e01      	subs	r6, #1
    53d6:	e7ea      	b.n	53ae <__mdiff+0x9e>

000053d8 <__d2b>:
    53d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    53da:	001d      	movs	r5, r3
    53dc:	2101      	movs	r1, #1
    53de:	9f08      	ldr	r7, [sp, #32]
    53e0:	0014      	movs	r4, r2
    53e2:	f7ff fd6a 	bl	4eba <_Balloc>
    53e6:	032b      	lsls	r3, r5, #12
    53e8:	006d      	lsls	r5, r5, #1
    53ea:	0006      	movs	r6, r0
    53ec:	0b1b      	lsrs	r3, r3, #12
    53ee:	0d6d      	lsrs	r5, r5, #21
    53f0:	d124      	bne.n	543c <__d2b+0x64>
    53f2:	9301      	str	r3, [sp, #4]
    53f4:	2c00      	cmp	r4, #0
    53f6:	d027      	beq.n	5448 <__d2b+0x70>
    53f8:	4668      	mov	r0, sp
    53fa:	9400      	str	r4, [sp, #0]
    53fc:	f7ff fe04 	bl	5008 <__lo0bits>
    5400:	9c00      	ldr	r4, [sp, #0]
    5402:	2800      	cmp	r0, #0
    5404:	d01e      	beq.n	5444 <__d2b+0x6c>
    5406:	9b01      	ldr	r3, [sp, #4]
    5408:	2120      	movs	r1, #32
    540a:	001a      	movs	r2, r3
    540c:	1a09      	subs	r1, r1, r0
    540e:	408a      	lsls	r2, r1
    5410:	40c3      	lsrs	r3, r0
    5412:	4322      	orrs	r2, r4
    5414:	6172      	str	r2, [r6, #20]
    5416:	9301      	str	r3, [sp, #4]
    5418:	9c01      	ldr	r4, [sp, #4]
    541a:	61b4      	str	r4, [r6, #24]
    541c:	1e63      	subs	r3, r4, #1
    541e:	419c      	sbcs	r4, r3
    5420:	3401      	adds	r4, #1
    5422:	6134      	str	r4, [r6, #16]
    5424:	2d00      	cmp	r5, #0
    5426:	d018      	beq.n	545a <__d2b+0x82>
    5428:	4b12      	ldr	r3, [pc, #72]	; (5474 <__d2b+0x9c>)
    542a:	18ed      	adds	r5, r5, r3
    542c:	2335      	movs	r3, #53	; 0x35
    542e:	182d      	adds	r5, r5, r0
    5430:	603d      	str	r5, [r7, #0]
    5432:	1a18      	subs	r0, r3, r0
    5434:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5436:	6018      	str	r0, [r3, #0]
    5438:	0030      	movs	r0, r6
    543a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    543c:	2280      	movs	r2, #128	; 0x80
    543e:	0352      	lsls	r2, r2, #13
    5440:	4313      	orrs	r3, r2
    5442:	e7d6      	b.n	53f2 <__d2b+0x1a>
    5444:	6174      	str	r4, [r6, #20]
    5446:	e7e7      	b.n	5418 <__d2b+0x40>
    5448:	a801      	add	r0, sp, #4
    544a:	f7ff fddd 	bl	5008 <__lo0bits>
    544e:	2401      	movs	r4, #1
    5450:	9b01      	ldr	r3, [sp, #4]
    5452:	6134      	str	r4, [r6, #16]
    5454:	6173      	str	r3, [r6, #20]
    5456:	3020      	adds	r0, #32
    5458:	e7e4      	b.n	5424 <__d2b+0x4c>
    545a:	4b07      	ldr	r3, [pc, #28]	; (5478 <__d2b+0xa0>)
    545c:	18c0      	adds	r0, r0, r3
    545e:	4b07      	ldr	r3, [pc, #28]	; (547c <__d2b+0xa4>)
    5460:	6038      	str	r0, [r7, #0]
    5462:	18e3      	adds	r3, r4, r3
    5464:	009b      	lsls	r3, r3, #2
    5466:	18f3      	adds	r3, r6, r3
    5468:	6958      	ldr	r0, [r3, #20]
    546a:	f7ff fdb3 	bl	4fd4 <__hi0bits>
    546e:	0164      	lsls	r4, r4, #5
    5470:	1a20      	subs	r0, r4, r0
    5472:	e7df      	b.n	5434 <__d2b+0x5c>
    5474:	fffffbcd 	.word	0xfffffbcd
    5478:	fffffbce 	.word	0xfffffbce
    547c:	3fffffff 	.word	0x3fffffff

00005480 <_calloc_r>:
    5480:	434a      	muls	r2, r1
    5482:	b570      	push	{r4, r5, r6, lr}
    5484:	0011      	movs	r1, r2
    5486:	0014      	movs	r4, r2
    5488:	f000 f852 	bl	5530 <_malloc_r>
    548c:	1e05      	subs	r5, r0, #0
    548e:	d003      	beq.n	5498 <_calloc_r+0x18>
    5490:	0022      	movs	r2, r4
    5492:	2100      	movs	r1, #0
    5494:	f7fd fe03 	bl	309e <memset>
    5498:	0028      	movs	r0, r5
    549a:	bd70      	pop	{r4, r5, r6, pc}

0000549c <_free_r>:
    549c:	b570      	push	{r4, r5, r6, lr}
    549e:	0005      	movs	r5, r0
    54a0:	2900      	cmp	r1, #0
    54a2:	d010      	beq.n	54c6 <_free_r+0x2a>
    54a4:	1f0c      	subs	r4, r1, #4
    54a6:	6823      	ldr	r3, [r4, #0]
    54a8:	2b00      	cmp	r3, #0
    54aa:	da00      	bge.n	54ae <_free_r+0x12>
    54ac:	18e4      	adds	r4, r4, r3
    54ae:	0028      	movs	r0, r5
    54b0:	f000 faae 	bl	5a10 <__malloc_lock>
    54b4:	4a1d      	ldr	r2, [pc, #116]	; (552c <_free_r+0x90>)
    54b6:	6813      	ldr	r3, [r2, #0]
    54b8:	2b00      	cmp	r3, #0
    54ba:	d105      	bne.n	54c8 <_free_r+0x2c>
    54bc:	6063      	str	r3, [r4, #4]
    54be:	6014      	str	r4, [r2, #0]
    54c0:	0028      	movs	r0, r5
    54c2:	f000 faa6 	bl	5a12 <__malloc_unlock>
    54c6:	bd70      	pop	{r4, r5, r6, pc}
    54c8:	42a3      	cmp	r3, r4
    54ca:	d909      	bls.n	54e0 <_free_r+0x44>
    54cc:	6821      	ldr	r1, [r4, #0]
    54ce:	1860      	adds	r0, r4, r1
    54d0:	4283      	cmp	r3, r0
    54d2:	d1f3      	bne.n	54bc <_free_r+0x20>
    54d4:	6818      	ldr	r0, [r3, #0]
    54d6:	685b      	ldr	r3, [r3, #4]
    54d8:	1841      	adds	r1, r0, r1
    54da:	6021      	str	r1, [r4, #0]
    54dc:	e7ee      	b.n	54bc <_free_r+0x20>
    54de:	0013      	movs	r3, r2
    54e0:	685a      	ldr	r2, [r3, #4]
    54e2:	2a00      	cmp	r2, #0
    54e4:	d001      	beq.n	54ea <_free_r+0x4e>
    54e6:	42a2      	cmp	r2, r4
    54e8:	d9f9      	bls.n	54de <_free_r+0x42>
    54ea:	6819      	ldr	r1, [r3, #0]
    54ec:	1858      	adds	r0, r3, r1
    54ee:	42a0      	cmp	r0, r4
    54f0:	d10b      	bne.n	550a <_free_r+0x6e>
    54f2:	6820      	ldr	r0, [r4, #0]
    54f4:	1809      	adds	r1, r1, r0
    54f6:	1858      	adds	r0, r3, r1
    54f8:	6019      	str	r1, [r3, #0]
    54fa:	4282      	cmp	r2, r0
    54fc:	d1e0      	bne.n	54c0 <_free_r+0x24>
    54fe:	6810      	ldr	r0, [r2, #0]
    5500:	6852      	ldr	r2, [r2, #4]
    5502:	1841      	adds	r1, r0, r1
    5504:	6019      	str	r1, [r3, #0]
    5506:	605a      	str	r2, [r3, #4]
    5508:	e7da      	b.n	54c0 <_free_r+0x24>
    550a:	42a0      	cmp	r0, r4
    550c:	d902      	bls.n	5514 <_free_r+0x78>
    550e:	230c      	movs	r3, #12
    5510:	602b      	str	r3, [r5, #0]
    5512:	e7d5      	b.n	54c0 <_free_r+0x24>
    5514:	6821      	ldr	r1, [r4, #0]
    5516:	1860      	adds	r0, r4, r1
    5518:	4282      	cmp	r2, r0
    551a:	d103      	bne.n	5524 <_free_r+0x88>
    551c:	6810      	ldr	r0, [r2, #0]
    551e:	6852      	ldr	r2, [r2, #4]
    5520:	1841      	adds	r1, r0, r1
    5522:	6021      	str	r1, [r4, #0]
    5524:	6062      	str	r2, [r4, #4]
    5526:	605c      	str	r4, [r3, #4]
    5528:	e7ca      	b.n	54c0 <_free_r+0x24>
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	20000378 	.word	0x20000378

00005530 <_malloc_r>:
    5530:	2303      	movs	r3, #3
    5532:	b570      	push	{r4, r5, r6, lr}
    5534:	1ccd      	adds	r5, r1, #3
    5536:	439d      	bics	r5, r3
    5538:	3508      	adds	r5, #8
    553a:	0006      	movs	r6, r0
    553c:	2d0c      	cmp	r5, #12
    553e:	d21e      	bcs.n	557e <_malloc_r+0x4e>
    5540:	250c      	movs	r5, #12
    5542:	42a9      	cmp	r1, r5
    5544:	d81d      	bhi.n	5582 <_malloc_r+0x52>
    5546:	0030      	movs	r0, r6
    5548:	f000 fa62 	bl	5a10 <__malloc_lock>
    554c:	4a25      	ldr	r2, [pc, #148]	; (55e4 <_malloc_r+0xb4>)
    554e:	6814      	ldr	r4, [r2, #0]
    5550:	0021      	movs	r1, r4
    5552:	2900      	cmp	r1, #0
    5554:	d119      	bne.n	558a <_malloc_r+0x5a>
    5556:	4c24      	ldr	r4, [pc, #144]	; (55e8 <_malloc_r+0xb8>)
    5558:	6823      	ldr	r3, [r4, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d103      	bne.n	5566 <_malloc_r+0x36>
    555e:	0030      	movs	r0, r6
    5560:	f000 f988 	bl	5874 <_sbrk_r>
    5564:	6020      	str	r0, [r4, #0]
    5566:	0029      	movs	r1, r5
    5568:	0030      	movs	r0, r6
    556a:	f000 f983 	bl	5874 <_sbrk_r>
    556e:	1c43      	adds	r3, r0, #1
    5570:	d12c      	bne.n	55cc <_malloc_r+0x9c>
    5572:	230c      	movs	r3, #12
    5574:	0030      	movs	r0, r6
    5576:	6033      	str	r3, [r6, #0]
    5578:	f000 fa4b 	bl	5a12 <__malloc_unlock>
    557c:	e003      	b.n	5586 <_malloc_r+0x56>
    557e:	2d00      	cmp	r5, #0
    5580:	dadf      	bge.n	5542 <_malloc_r+0x12>
    5582:	230c      	movs	r3, #12
    5584:	6033      	str	r3, [r6, #0]
    5586:	2000      	movs	r0, #0
    5588:	bd70      	pop	{r4, r5, r6, pc}
    558a:	680b      	ldr	r3, [r1, #0]
    558c:	1b5b      	subs	r3, r3, r5
    558e:	d41a      	bmi.n	55c6 <_malloc_r+0x96>
    5590:	2b0b      	cmp	r3, #11
    5592:	d903      	bls.n	559c <_malloc_r+0x6c>
    5594:	600b      	str	r3, [r1, #0]
    5596:	18cc      	adds	r4, r1, r3
    5598:	6025      	str	r5, [r4, #0]
    559a:	e003      	b.n	55a4 <_malloc_r+0x74>
    559c:	428c      	cmp	r4, r1
    559e:	d10e      	bne.n	55be <_malloc_r+0x8e>
    55a0:	6863      	ldr	r3, [r4, #4]
    55a2:	6013      	str	r3, [r2, #0]
    55a4:	0030      	movs	r0, r6
    55a6:	f000 fa34 	bl	5a12 <__malloc_unlock>
    55aa:	0020      	movs	r0, r4
    55ac:	2207      	movs	r2, #7
    55ae:	300b      	adds	r0, #11
    55b0:	1d23      	adds	r3, r4, #4
    55b2:	4390      	bics	r0, r2
    55b4:	1ac3      	subs	r3, r0, r3
    55b6:	d0e7      	beq.n	5588 <_malloc_r+0x58>
    55b8:	425a      	negs	r2, r3
    55ba:	50e2      	str	r2, [r4, r3]
    55bc:	e7e4      	b.n	5588 <_malloc_r+0x58>
    55be:	684b      	ldr	r3, [r1, #4]
    55c0:	6063      	str	r3, [r4, #4]
    55c2:	000c      	movs	r4, r1
    55c4:	e7ee      	b.n	55a4 <_malloc_r+0x74>
    55c6:	000c      	movs	r4, r1
    55c8:	6849      	ldr	r1, [r1, #4]
    55ca:	e7c2      	b.n	5552 <_malloc_r+0x22>
    55cc:	2303      	movs	r3, #3
    55ce:	1cc4      	adds	r4, r0, #3
    55d0:	439c      	bics	r4, r3
    55d2:	42a0      	cmp	r0, r4
    55d4:	d0e0      	beq.n	5598 <_malloc_r+0x68>
    55d6:	1a21      	subs	r1, r4, r0
    55d8:	0030      	movs	r0, r6
    55da:	f000 f94b 	bl	5874 <_sbrk_r>
    55de:	1c43      	adds	r3, r0, #1
    55e0:	d1da      	bne.n	5598 <_malloc_r+0x68>
    55e2:	e7c6      	b.n	5572 <_malloc_r+0x42>
    55e4:	20000378 	.word	0x20000378
    55e8:	2000037c 	.word	0x2000037c

000055ec <__sfputc_r>:
    55ec:	6893      	ldr	r3, [r2, #8]
    55ee:	b510      	push	{r4, lr}
    55f0:	3b01      	subs	r3, #1
    55f2:	6093      	str	r3, [r2, #8]
    55f4:	2b00      	cmp	r3, #0
    55f6:	da05      	bge.n	5604 <__sfputc_r+0x18>
    55f8:	6994      	ldr	r4, [r2, #24]
    55fa:	42a3      	cmp	r3, r4
    55fc:	db08      	blt.n	5610 <__sfputc_r+0x24>
    55fe:	b2cb      	uxtb	r3, r1
    5600:	2b0a      	cmp	r3, #10
    5602:	d005      	beq.n	5610 <__sfputc_r+0x24>
    5604:	6813      	ldr	r3, [r2, #0]
    5606:	1c58      	adds	r0, r3, #1
    5608:	6010      	str	r0, [r2, #0]
    560a:	7019      	strb	r1, [r3, #0]
    560c:	b2c8      	uxtb	r0, r1
    560e:	bd10      	pop	{r4, pc}
    5610:	f7fe fb00 	bl	3c14 <__swbuf_r>
    5614:	e7fb      	b.n	560e <__sfputc_r+0x22>

00005616 <__sfputs_r>:
    5616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5618:	0006      	movs	r6, r0
    561a:	000f      	movs	r7, r1
    561c:	0014      	movs	r4, r2
    561e:	18d5      	adds	r5, r2, r3
    5620:	42ac      	cmp	r4, r5
    5622:	d101      	bne.n	5628 <__sfputs_r+0x12>
    5624:	2000      	movs	r0, #0
    5626:	e007      	b.n	5638 <__sfputs_r+0x22>
    5628:	7821      	ldrb	r1, [r4, #0]
    562a:	003a      	movs	r2, r7
    562c:	0030      	movs	r0, r6
    562e:	f7ff ffdd 	bl	55ec <__sfputc_r>
    5632:	3401      	adds	r4, #1
    5634:	1c43      	adds	r3, r0, #1
    5636:	d1f3      	bne.n	5620 <__sfputs_r+0xa>
    5638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000563c <_vfiprintf_r>:
    563c:	b5f0      	push	{r4, r5, r6, r7, lr}
    563e:	b09f      	sub	sp, #124	; 0x7c
    5640:	0006      	movs	r6, r0
    5642:	000f      	movs	r7, r1
    5644:	0014      	movs	r4, r2
    5646:	9305      	str	r3, [sp, #20]
    5648:	2800      	cmp	r0, #0
    564a:	d004      	beq.n	5656 <_vfiprintf_r+0x1a>
    564c:	6983      	ldr	r3, [r0, #24]
    564e:	2b00      	cmp	r3, #0
    5650:	d101      	bne.n	5656 <_vfiprintf_r+0x1a>
    5652:	f7ff fb0f 	bl	4c74 <__sinit>
    5656:	4b7f      	ldr	r3, [pc, #508]	; (5854 <_vfiprintf_r+0x218>)
    5658:	429f      	cmp	r7, r3
    565a:	d15c      	bne.n	5716 <_vfiprintf_r+0xda>
    565c:	6877      	ldr	r7, [r6, #4]
    565e:	89bb      	ldrh	r3, [r7, #12]
    5660:	071b      	lsls	r3, r3, #28
    5662:	d562      	bpl.n	572a <_vfiprintf_r+0xee>
    5664:	693b      	ldr	r3, [r7, #16]
    5666:	2b00      	cmp	r3, #0
    5668:	d05f      	beq.n	572a <_vfiprintf_r+0xee>
    566a:	2300      	movs	r3, #0
    566c:	ad06      	add	r5, sp, #24
    566e:	616b      	str	r3, [r5, #20]
    5670:	3320      	adds	r3, #32
    5672:	766b      	strb	r3, [r5, #25]
    5674:	3310      	adds	r3, #16
    5676:	76ab      	strb	r3, [r5, #26]
    5678:	9402      	str	r4, [sp, #8]
    567a:	9c02      	ldr	r4, [sp, #8]
    567c:	7823      	ldrb	r3, [r4, #0]
    567e:	2b00      	cmp	r3, #0
    5680:	d15d      	bne.n	573e <_vfiprintf_r+0x102>
    5682:	9b02      	ldr	r3, [sp, #8]
    5684:	1ae3      	subs	r3, r4, r3
    5686:	9304      	str	r3, [sp, #16]
    5688:	d00d      	beq.n	56a6 <_vfiprintf_r+0x6a>
    568a:	9b04      	ldr	r3, [sp, #16]
    568c:	9a02      	ldr	r2, [sp, #8]
    568e:	0039      	movs	r1, r7
    5690:	0030      	movs	r0, r6
    5692:	f7ff ffc0 	bl	5616 <__sfputs_r>
    5696:	1c43      	adds	r3, r0, #1
    5698:	d100      	bne.n	569c <_vfiprintf_r+0x60>
    569a:	e0cc      	b.n	5836 <_vfiprintf_r+0x1fa>
    569c:	696a      	ldr	r2, [r5, #20]
    569e:	9b04      	ldr	r3, [sp, #16]
    56a0:	4694      	mov	ip, r2
    56a2:	4463      	add	r3, ip
    56a4:	616b      	str	r3, [r5, #20]
    56a6:	7823      	ldrb	r3, [r4, #0]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d100      	bne.n	56ae <_vfiprintf_r+0x72>
    56ac:	e0c3      	b.n	5836 <_vfiprintf_r+0x1fa>
    56ae:	2201      	movs	r2, #1
    56b0:	2300      	movs	r3, #0
    56b2:	4252      	negs	r2, r2
    56b4:	606a      	str	r2, [r5, #4]
    56b6:	a902      	add	r1, sp, #8
    56b8:	3254      	adds	r2, #84	; 0x54
    56ba:	1852      	adds	r2, r2, r1
    56bc:	3401      	adds	r4, #1
    56be:	602b      	str	r3, [r5, #0]
    56c0:	60eb      	str	r3, [r5, #12]
    56c2:	60ab      	str	r3, [r5, #8]
    56c4:	7013      	strb	r3, [r2, #0]
    56c6:	65ab      	str	r3, [r5, #88]	; 0x58
    56c8:	7821      	ldrb	r1, [r4, #0]
    56ca:	2205      	movs	r2, #5
    56cc:	4862      	ldr	r0, [pc, #392]	; (5858 <_vfiprintf_r+0x21c>)
    56ce:	f7ff fbe9 	bl	4ea4 <memchr>
    56d2:	1c63      	adds	r3, r4, #1
    56d4:	469c      	mov	ip, r3
    56d6:	2800      	cmp	r0, #0
    56d8:	d135      	bne.n	5746 <_vfiprintf_r+0x10a>
    56da:	6829      	ldr	r1, [r5, #0]
    56dc:	06cb      	lsls	r3, r1, #27
    56de:	d504      	bpl.n	56ea <_vfiprintf_r+0xae>
    56e0:	2353      	movs	r3, #83	; 0x53
    56e2:	aa02      	add	r2, sp, #8
    56e4:	3020      	adds	r0, #32
    56e6:	189b      	adds	r3, r3, r2
    56e8:	7018      	strb	r0, [r3, #0]
    56ea:	070b      	lsls	r3, r1, #28
    56ec:	d504      	bpl.n	56f8 <_vfiprintf_r+0xbc>
    56ee:	2353      	movs	r3, #83	; 0x53
    56f0:	202b      	movs	r0, #43	; 0x2b
    56f2:	aa02      	add	r2, sp, #8
    56f4:	189b      	adds	r3, r3, r2
    56f6:	7018      	strb	r0, [r3, #0]
    56f8:	7823      	ldrb	r3, [r4, #0]
    56fa:	2b2a      	cmp	r3, #42	; 0x2a
    56fc:	d02c      	beq.n	5758 <_vfiprintf_r+0x11c>
    56fe:	2000      	movs	r0, #0
    5700:	210a      	movs	r1, #10
    5702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5704:	7822      	ldrb	r2, [r4, #0]
    5706:	3a30      	subs	r2, #48	; 0x30
    5708:	2a09      	cmp	r2, #9
    570a:	d800      	bhi.n	570e <_vfiprintf_r+0xd2>
    570c:	e06b      	b.n	57e6 <_vfiprintf_r+0x1aa>
    570e:	2800      	cmp	r0, #0
    5710:	d02a      	beq.n	5768 <_vfiprintf_r+0x12c>
    5712:	9309      	str	r3, [sp, #36]	; 0x24
    5714:	e028      	b.n	5768 <_vfiprintf_r+0x12c>
    5716:	4b51      	ldr	r3, [pc, #324]	; (585c <_vfiprintf_r+0x220>)
    5718:	429f      	cmp	r7, r3
    571a:	d101      	bne.n	5720 <_vfiprintf_r+0xe4>
    571c:	68b7      	ldr	r7, [r6, #8]
    571e:	e79e      	b.n	565e <_vfiprintf_r+0x22>
    5720:	4b4f      	ldr	r3, [pc, #316]	; (5860 <_vfiprintf_r+0x224>)
    5722:	429f      	cmp	r7, r3
    5724:	d19b      	bne.n	565e <_vfiprintf_r+0x22>
    5726:	68f7      	ldr	r7, [r6, #12]
    5728:	e799      	b.n	565e <_vfiprintf_r+0x22>
    572a:	0039      	movs	r1, r7
    572c:	0030      	movs	r0, r6
    572e:	f7fe fac7 	bl	3cc0 <__swsetup_r>
    5732:	2800      	cmp	r0, #0
    5734:	d099      	beq.n	566a <_vfiprintf_r+0x2e>
    5736:	2001      	movs	r0, #1
    5738:	4240      	negs	r0, r0
    573a:	b01f      	add	sp, #124	; 0x7c
    573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    573e:	2b25      	cmp	r3, #37	; 0x25
    5740:	d09f      	beq.n	5682 <_vfiprintf_r+0x46>
    5742:	3401      	adds	r4, #1
    5744:	e79a      	b.n	567c <_vfiprintf_r+0x40>
    5746:	4b44      	ldr	r3, [pc, #272]	; (5858 <_vfiprintf_r+0x21c>)
    5748:	6829      	ldr	r1, [r5, #0]
    574a:	1ac0      	subs	r0, r0, r3
    574c:	2301      	movs	r3, #1
    574e:	4083      	lsls	r3, r0
    5750:	430b      	orrs	r3, r1
    5752:	602b      	str	r3, [r5, #0]
    5754:	4664      	mov	r4, ip
    5756:	e7b7      	b.n	56c8 <_vfiprintf_r+0x8c>
    5758:	9b05      	ldr	r3, [sp, #20]
    575a:	1d18      	adds	r0, r3, #4
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	9005      	str	r0, [sp, #20]
    5760:	2b00      	cmp	r3, #0
    5762:	db3a      	blt.n	57da <_vfiprintf_r+0x19e>
    5764:	9309      	str	r3, [sp, #36]	; 0x24
    5766:	4664      	mov	r4, ip
    5768:	7823      	ldrb	r3, [r4, #0]
    576a:	2b2e      	cmp	r3, #46	; 0x2e
    576c:	d10b      	bne.n	5786 <_vfiprintf_r+0x14a>
    576e:	7863      	ldrb	r3, [r4, #1]
    5770:	1c62      	adds	r2, r4, #1
    5772:	2b2a      	cmp	r3, #42	; 0x2a
    5774:	d13f      	bne.n	57f6 <_vfiprintf_r+0x1ba>
    5776:	9b05      	ldr	r3, [sp, #20]
    5778:	3402      	adds	r4, #2
    577a:	1d1a      	adds	r2, r3, #4
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	9205      	str	r2, [sp, #20]
    5780:	2b00      	cmp	r3, #0
    5782:	db35      	blt.n	57f0 <_vfiprintf_r+0x1b4>
    5784:	9307      	str	r3, [sp, #28]
    5786:	7821      	ldrb	r1, [r4, #0]
    5788:	2203      	movs	r2, #3
    578a:	4836      	ldr	r0, [pc, #216]	; (5864 <_vfiprintf_r+0x228>)
    578c:	f7ff fb8a 	bl	4ea4 <memchr>
    5790:	2800      	cmp	r0, #0
    5792:	d007      	beq.n	57a4 <_vfiprintf_r+0x168>
    5794:	4b33      	ldr	r3, [pc, #204]	; (5864 <_vfiprintf_r+0x228>)
    5796:	682a      	ldr	r2, [r5, #0]
    5798:	1ac0      	subs	r0, r0, r3
    579a:	2340      	movs	r3, #64	; 0x40
    579c:	4083      	lsls	r3, r0
    579e:	4313      	orrs	r3, r2
    57a0:	602b      	str	r3, [r5, #0]
    57a2:	3401      	adds	r4, #1
    57a4:	7821      	ldrb	r1, [r4, #0]
    57a6:	1c63      	adds	r3, r4, #1
    57a8:	2206      	movs	r2, #6
    57aa:	482f      	ldr	r0, [pc, #188]	; (5868 <_vfiprintf_r+0x22c>)
    57ac:	9302      	str	r3, [sp, #8]
    57ae:	7629      	strb	r1, [r5, #24]
    57b0:	f7ff fb78 	bl	4ea4 <memchr>
    57b4:	2800      	cmp	r0, #0
    57b6:	d044      	beq.n	5842 <_vfiprintf_r+0x206>
    57b8:	4b2c      	ldr	r3, [pc, #176]	; (586c <_vfiprintf_r+0x230>)
    57ba:	2b00      	cmp	r3, #0
    57bc:	d12f      	bne.n	581e <_vfiprintf_r+0x1e2>
    57be:	6829      	ldr	r1, [r5, #0]
    57c0:	9b05      	ldr	r3, [sp, #20]
    57c2:	2207      	movs	r2, #7
    57c4:	05c9      	lsls	r1, r1, #23
    57c6:	d528      	bpl.n	581a <_vfiprintf_r+0x1de>
    57c8:	189b      	adds	r3, r3, r2
    57ca:	4393      	bics	r3, r2
    57cc:	3308      	adds	r3, #8
    57ce:	9305      	str	r3, [sp, #20]
    57d0:	696b      	ldr	r3, [r5, #20]
    57d2:	9a03      	ldr	r2, [sp, #12]
    57d4:	189b      	adds	r3, r3, r2
    57d6:	616b      	str	r3, [r5, #20]
    57d8:	e74f      	b.n	567a <_vfiprintf_r+0x3e>
    57da:	425b      	negs	r3, r3
    57dc:	60eb      	str	r3, [r5, #12]
    57de:	2302      	movs	r3, #2
    57e0:	430b      	orrs	r3, r1
    57e2:	602b      	str	r3, [r5, #0]
    57e4:	e7bf      	b.n	5766 <_vfiprintf_r+0x12a>
    57e6:	434b      	muls	r3, r1
    57e8:	3401      	adds	r4, #1
    57ea:	189b      	adds	r3, r3, r2
    57ec:	2001      	movs	r0, #1
    57ee:	e789      	b.n	5704 <_vfiprintf_r+0xc8>
    57f0:	2301      	movs	r3, #1
    57f2:	425b      	negs	r3, r3
    57f4:	e7c6      	b.n	5784 <_vfiprintf_r+0x148>
    57f6:	2300      	movs	r3, #0
    57f8:	0014      	movs	r4, r2
    57fa:	200a      	movs	r0, #10
    57fc:	001a      	movs	r2, r3
    57fe:	606b      	str	r3, [r5, #4]
    5800:	7821      	ldrb	r1, [r4, #0]
    5802:	3930      	subs	r1, #48	; 0x30
    5804:	2909      	cmp	r1, #9
    5806:	d903      	bls.n	5810 <_vfiprintf_r+0x1d4>
    5808:	2b00      	cmp	r3, #0
    580a:	d0bc      	beq.n	5786 <_vfiprintf_r+0x14a>
    580c:	9207      	str	r2, [sp, #28]
    580e:	e7ba      	b.n	5786 <_vfiprintf_r+0x14a>
    5810:	4342      	muls	r2, r0
    5812:	3401      	adds	r4, #1
    5814:	1852      	adds	r2, r2, r1
    5816:	2301      	movs	r3, #1
    5818:	e7f2      	b.n	5800 <_vfiprintf_r+0x1c4>
    581a:	3307      	adds	r3, #7
    581c:	e7d5      	b.n	57ca <_vfiprintf_r+0x18e>
    581e:	ab05      	add	r3, sp, #20
    5820:	9300      	str	r3, [sp, #0]
    5822:	003a      	movs	r2, r7
    5824:	4b12      	ldr	r3, [pc, #72]	; (5870 <_vfiprintf_r+0x234>)
    5826:	0029      	movs	r1, r5
    5828:	0030      	movs	r0, r6
    582a:	f7fd fcdd 	bl	31e8 <_printf_float>
    582e:	9003      	str	r0, [sp, #12]
    5830:	9b03      	ldr	r3, [sp, #12]
    5832:	3301      	adds	r3, #1
    5834:	d1cc      	bne.n	57d0 <_vfiprintf_r+0x194>
    5836:	89bb      	ldrh	r3, [r7, #12]
    5838:	065b      	lsls	r3, r3, #25
    583a:	d500      	bpl.n	583e <_vfiprintf_r+0x202>
    583c:	e77b      	b.n	5736 <_vfiprintf_r+0xfa>
    583e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5840:	e77b      	b.n	573a <_vfiprintf_r+0xfe>
    5842:	ab05      	add	r3, sp, #20
    5844:	9300      	str	r3, [sp, #0]
    5846:	003a      	movs	r2, r7
    5848:	4b09      	ldr	r3, [pc, #36]	; (5870 <_vfiprintf_r+0x234>)
    584a:	0029      	movs	r1, r5
    584c:	0030      	movs	r0, r6
    584e:	f7fd ff85 	bl	375c <_printf_i>
    5852:	e7ec      	b.n	582e <_vfiprintf_r+0x1f2>
    5854:	00007d0c 	.word	0x00007d0c
    5858:	00007e4c 	.word	0x00007e4c
    585c:	00007d2c 	.word	0x00007d2c
    5860:	00007cec 	.word	0x00007cec
    5864:	00007e52 	.word	0x00007e52
    5868:	00007e56 	.word	0x00007e56
    586c:	000031e9 	.word	0x000031e9
    5870:	00005617 	.word	0x00005617

00005874 <_sbrk_r>:
    5874:	2300      	movs	r3, #0
    5876:	b570      	push	{r4, r5, r6, lr}
    5878:	4c06      	ldr	r4, [pc, #24]	; (5894 <_sbrk_r+0x20>)
    587a:	0005      	movs	r5, r0
    587c:	0008      	movs	r0, r1
    587e:	6023      	str	r3, [r4, #0]
    5880:	f7fb fed6 	bl	1630 <_sbrk>
    5884:	1c43      	adds	r3, r0, #1
    5886:	d103      	bne.n	5890 <_sbrk_r+0x1c>
    5888:	6823      	ldr	r3, [r4, #0]
    588a:	2b00      	cmp	r3, #0
    588c:	d000      	beq.n	5890 <_sbrk_r+0x1c>
    588e:	602b      	str	r3, [r5, #0]
    5890:	bd70      	pop	{r4, r5, r6, pc}
    5892:	46c0      	nop			; (mov r8, r8)
    5894:	200004a4 	.word	0x200004a4

00005898 <__sread>:
    5898:	b570      	push	{r4, r5, r6, lr}
    589a:	000c      	movs	r4, r1
    589c:	250e      	movs	r5, #14
    589e:	5f49      	ldrsh	r1, [r1, r5]
    58a0:	f000 f8b8 	bl	5a14 <_read_r>
    58a4:	2800      	cmp	r0, #0
    58a6:	db03      	blt.n	58b0 <__sread+0x18>
    58a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    58aa:	181b      	adds	r3, r3, r0
    58ac:	6563      	str	r3, [r4, #84]	; 0x54
    58ae:	bd70      	pop	{r4, r5, r6, pc}
    58b0:	89a3      	ldrh	r3, [r4, #12]
    58b2:	4a02      	ldr	r2, [pc, #8]	; (58bc <__sread+0x24>)
    58b4:	4013      	ands	r3, r2
    58b6:	81a3      	strh	r3, [r4, #12]
    58b8:	e7f9      	b.n	58ae <__sread+0x16>
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	ffffefff 	.word	0xffffefff

000058c0 <__swrite>:
    58c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58c2:	001f      	movs	r7, r3
    58c4:	898b      	ldrh	r3, [r1, #12]
    58c6:	0005      	movs	r5, r0
    58c8:	000c      	movs	r4, r1
    58ca:	0016      	movs	r6, r2
    58cc:	05db      	lsls	r3, r3, #23
    58ce:	d505      	bpl.n	58dc <__swrite+0x1c>
    58d0:	230e      	movs	r3, #14
    58d2:	5ec9      	ldrsh	r1, [r1, r3]
    58d4:	2200      	movs	r2, #0
    58d6:	2302      	movs	r3, #2
    58d8:	f000 f874 	bl	59c4 <_lseek_r>
    58dc:	89a3      	ldrh	r3, [r4, #12]
    58de:	4a05      	ldr	r2, [pc, #20]	; (58f4 <__swrite+0x34>)
    58e0:	0028      	movs	r0, r5
    58e2:	4013      	ands	r3, r2
    58e4:	81a3      	strh	r3, [r4, #12]
    58e6:	0032      	movs	r2, r6
    58e8:	230e      	movs	r3, #14
    58ea:	5ee1      	ldrsh	r1, [r4, r3]
    58ec:	003b      	movs	r3, r7
    58ee:	f000 f81f 	bl	5930 <_write_r>
    58f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58f4:	ffffefff 	.word	0xffffefff

000058f8 <__sseek>:
    58f8:	b570      	push	{r4, r5, r6, lr}
    58fa:	000c      	movs	r4, r1
    58fc:	250e      	movs	r5, #14
    58fe:	5f49      	ldrsh	r1, [r1, r5]
    5900:	f000 f860 	bl	59c4 <_lseek_r>
    5904:	89a3      	ldrh	r3, [r4, #12]
    5906:	1c42      	adds	r2, r0, #1
    5908:	d103      	bne.n	5912 <__sseek+0x1a>
    590a:	4a05      	ldr	r2, [pc, #20]	; (5920 <__sseek+0x28>)
    590c:	4013      	ands	r3, r2
    590e:	81a3      	strh	r3, [r4, #12]
    5910:	bd70      	pop	{r4, r5, r6, pc}
    5912:	2280      	movs	r2, #128	; 0x80
    5914:	0152      	lsls	r2, r2, #5
    5916:	4313      	orrs	r3, r2
    5918:	81a3      	strh	r3, [r4, #12]
    591a:	6560      	str	r0, [r4, #84]	; 0x54
    591c:	e7f8      	b.n	5910 <__sseek+0x18>
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	ffffefff 	.word	0xffffefff

00005924 <__sclose>:
    5924:	b510      	push	{r4, lr}
    5926:	230e      	movs	r3, #14
    5928:	5ec9      	ldrsh	r1, [r1, r3]
    592a:	f000 f815 	bl	5958 <_close_r>
    592e:	bd10      	pop	{r4, pc}

00005930 <_write_r>:
    5930:	b570      	push	{r4, r5, r6, lr}
    5932:	0005      	movs	r5, r0
    5934:	0008      	movs	r0, r1
    5936:	0011      	movs	r1, r2
    5938:	2200      	movs	r2, #0
    593a:	4c06      	ldr	r4, [pc, #24]	; (5954 <_write_r+0x24>)
    593c:	6022      	str	r2, [r4, #0]
    593e:	001a      	movs	r2, r3
    5940:	f7fd fb22 	bl	2f88 <_write>
    5944:	1c43      	adds	r3, r0, #1
    5946:	d103      	bne.n	5950 <_write_r+0x20>
    5948:	6823      	ldr	r3, [r4, #0]
    594a:	2b00      	cmp	r3, #0
    594c:	d000      	beq.n	5950 <_write_r+0x20>
    594e:	602b      	str	r3, [r5, #0]
    5950:	bd70      	pop	{r4, r5, r6, pc}
    5952:	46c0      	nop			; (mov r8, r8)
    5954:	200004a4 	.word	0x200004a4

00005958 <_close_r>:
    5958:	2300      	movs	r3, #0
    595a:	b570      	push	{r4, r5, r6, lr}
    595c:	4c06      	ldr	r4, [pc, #24]	; (5978 <_close_r+0x20>)
    595e:	0005      	movs	r5, r0
    5960:	0008      	movs	r0, r1
    5962:	6023      	str	r3, [r4, #0]
    5964:	f7fb fe76 	bl	1654 <_close>
    5968:	1c43      	adds	r3, r0, #1
    596a:	d103      	bne.n	5974 <_close_r+0x1c>
    596c:	6823      	ldr	r3, [r4, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d000      	beq.n	5974 <_close_r+0x1c>
    5972:	602b      	str	r3, [r5, #0]
    5974:	bd70      	pop	{r4, r5, r6, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	200004a4 	.word	0x200004a4

0000597c <_fstat_r>:
    597c:	2300      	movs	r3, #0
    597e:	b570      	push	{r4, r5, r6, lr}
    5980:	4c06      	ldr	r4, [pc, #24]	; (599c <_fstat_r+0x20>)
    5982:	0005      	movs	r5, r0
    5984:	0008      	movs	r0, r1
    5986:	0011      	movs	r1, r2
    5988:	6023      	str	r3, [r4, #0]
    598a:	f7fb fe66 	bl	165a <_fstat>
    598e:	1c43      	adds	r3, r0, #1
    5990:	d103      	bne.n	599a <_fstat_r+0x1e>
    5992:	6823      	ldr	r3, [r4, #0]
    5994:	2b00      	cmp	r3, #0
    5996:	d000      	beq.n	599a <_fstat_r+0x1e>
    5998:	602b      	str	r3, [r5, #0]
    599a:	bd70      	pop	{r4, r5, r6, pc}
    599c:	200004a4 	.word	0x200004a4

000059a0 <_isatty_r>:
    59a0:	2300      	movs	r3, #0
    59a2:	b570      	push	{r4, r5, r6, lr}
    59a4:	4c06      	ldr	r4, [pc, #24]	; (59c0 <_isatty_r+0x20>)
    59a6:	0005      	movs	r5, r0
    59a8:	0008      	movs	r0, r1
    59aa:	6023      	str	r3, [r4, #0]
    59ac:	f7fb fe5a 	bl	1664 <_isatty>
    59b0:	1c43      	adds	r3, r0, #1
    59b2:	d103      	bne.n	59bc <_isatty_r+0x1c>
    59b4:	6823      	ldr	r3, [r4, #0]
    59b6:	2b00      	cmp	r3, #0
    59b8:	d000      	beq.n	59bc <_isatty_r+0x1c>
    59ba:	602b      	str	r3, [r5, #0]
    59bc:	bd70      	pop	{r4, r5, r6, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	200004a4 	.word	0x200004a4

000059c4 <_lseek_r>:
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	0005      	movs	r5, r0
    59c8:	0008      	movs	r0, r1
    59ca:	0011      	movs	r1, r2
    59cc:	2200      	movs	r2, #0
    59ce:	4c06      	ldr	r4, [pc, #24]	; (59e8 <_lseek_r+0x24>)
    59d0:	6022      	str	r2, [r4, #0]
    59d2:	001a      	movs	r2, r3
    59d4:	f7fb fe48 	bl	1668 <_lseek>
    59d8:	1c43      	adds	r3, r0, #1
    59da:	d103      	bne.n	59e4 <_lseek_r+0x20>
    59dc:	6823      	ldr	r3, [r4, #0]
    59de:	2b00      	cmp	r3, #0
    59e0:	d000      	beq.n	59e4 <_lseek_r+0x20>
    59e2:	602b      	str	r3, [r5, #0]
    59e4:	bd70      	pop	{r4, r5, r6, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	200004a4 	.word	0x200004a4

000059ec <__ascii_mbtowc>:
    59ec:	b082      	sub	sp, #8
    59ee:	2900      	cmp	r1, #0
    59f0:	d100      	bne.n	59f4 <__ascii_mbtowc+0x8>
    59f2:	a901      	add	r1, sp, #4
    59f4:	1e10      	subs	r0, r2, #0
    59f6:	d006      	beq.n	5a06 <__ascii_mbtowc+0x1a>
    59f8:	2b00      	cmp	r3, #0
    59fa:	d006      	beq.n	5a0a <__ascii_mbtowc+0x1e>
    59fc:	7813      	ldrb	r3, [r2, #0]
    59fe:	600b      	str	r3, [r1, #0]
    5a00:	7810      	ldrb	r0, [r2, #0]
    5a02:	1e43      	subs	r3, r0, #1
    5a04:	4198      	sbcs	r0, r3
    5a06:	b002      	add	sp, #8
    5a08:	4770      	bx	lr
    5a0a:	2002      	movs	r0, #2
    5a0c:	4240      	negs	r0, r0
    5a0e:	e7fa      	b.n	5a06 <__ascii_mbtowc+0x1a>

00005a10 <__malloc_lock>:
    5a10:	4770      	bx	lr

00005a12 <__malloc_unlock>:
    5a12:	4770      	bx	lr

00005a14 <_read_r>:
    5a14:	b570      	push	{r4, r5, r6, lr}
    5a16:	0005      	movs	r5, r0
    5a18:	0008      	movs	r0, r1
    5a1a:	0011      	movs	r1, r2
    5a1c:	2200      	movs	r2, #0
    5a1e:	4c06      	ldr	r4, [pc, #24]	; (5a38 <_read_r+0x24>)
    5a20:	6022      	str	r2, [r4, #0]
    5a22:	001a      	movs	r2, r3
    5a24:	f7fd fa9c 	bl	2f60 <_read>
    5a28:	1c43      	adds	r3, r0, #1
    5a2a:	d103      	bne.n	5a34 <_read_r+0x20>
    5a2c:	6823      	ldr	r3, [r4, #0]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d000      	beq.n	5a34 <_read_r+0x20>
    5a32:	602b      	str	r3, [r5, #0]
    5a34:	bd70      	pop	{r4, r5, r6, pc}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	200004a4 	.word	0x200004a4

00005a3c <__ascii_wctomb>:
    5a3c:	1e0b      	subs	r3, r1, #0
    5a3e:	d004      	beq.n	5a4a <__ascii_wctomb+0xe>
    5a40:	2aff      	cmp	r2, #255	; 0xff
    5a42:	d904      	bls.n	5a4e <__ascii_wctomb+0x12>
    5a44:	238a      	movs	r3, #138	; 0x8a
    5a46:	6003      	str	r3, [r0, #0]
    5a48:	3b8b      	subs	r3, #139	; 0x8b
    5a4a:	0018      	movs	r0, r3
    5a4c:	4770      	bx	lr
    5a4e:	700a      	strb	r2, [r1, #0]
    5a50:	2301      	movs	r3, #1
    5a52:	e7fa      	b.n	5a4a <__ascii_wctomb+0xe>

00005a54 <__gnu_thumb1_case_uqi>:
    5a54:	b402      	push	{r1}
    5a56:	4671      	mov	r1, lr
    5a58:	0849      	lsrs	r1, r1, #1
    5a5a:	0049      	lsls	r1, r1, #1
    5a5c:	5c09      	ldrb	r1, [r1, r0]
    5a5e:	0049      	lsls	r1, r1, #1
    5a60:	448e      	add	lr, r1
    5a62:	bc02      	pop	{r1}
    5a64:	4770      	bx	lr
    5a66:	46c0      	nop			; (mov r8, r8)

00005a68 <__udivsi3>:
    5a68:	2200      	movs	r2, #0
    5a6a:	0843      	lsrs	r3, r0, #1
    5a6c:	428b      	cmp	r3, r1
    5a6e:	d374      	bcc.n	5b5a <__udivsi3+0xf2>
    5a70:	0903      	lsrs	r3, r0, #4
    5a72:	428b      	cmp	r3, r1
    5a74:	d35f      	bcc.n	5b36 <__udivsi3+0xce>
    5a76:	0a03      	lsrs	r3, r0, #8
    5a78:	428b      	cmp	r3, r1
    5a7a:	d344      	bcc.n	5b06 <__udivsi3+0x9e>
    5a7c:	0b03      	lsrs	r3, r0, #12
    5a7e:	428b      	cmp	r3, r1
    5a80:	d328      	bcc.n	5ad4 <__udivsi3+0x6c>
    5a82:	0c03      	lsrs	r3, r0, #16
    5a84:	428b      	cmp	r3, r1
    5a86:	d30d      	bcc.n	5aa4 <__udivsi3+0x3c>
    5a88:	22ff      	movs	r2, #255	; 0xff
    5a8a:	0209      	lsls	r1, r1, #8
    5a8c:	ba12      	rev	r2, r2
    5a8e:	0c03      	lsrs	r3, r0, #16
    5a90:	428b      	cmp	r3, r1
    5a92:	d302      	bcc.n	5a9a <__udivsi3+0x32>
    5a94:	1212      	asrs	r2, r2, #8
    5a96:	0209      	lsls	r1, r1, #8
    5a98:	d065      	beq.n	5b66 <__udivsi3+0xfe>
    5a9a:	0b03      	lsrs	r3, r0, #12
    5a9c:	428b      	cmp	r3, r1
    5a9e:	d319      	bcc.n	5ad4 <__udivsi3+0x6c>
    5aa0:	e000      	b.n	5aa4 <__udivsi3+0x3c>
    5aa2:	0a09      	lsrs	r1, r1, #8
    5aa4:	0bc3      	lsrs	r3, r0, #15
    5aa6:	428b      	cmp	r3, r1
    5aa8:	d301      	bcc.n	5aae <__udivsi3+0x46>
    5aaa:	03cb      	lsls	r3, r1, #15
    5aac:	1ac0      	subs	r0, r0, r3
    5aae:	4152      	adcs	r2, r2
    5ab0:	0b83      	lsrs	r3, r0, #14
    5ab2:	428b      	cmp	r3, r1
    5ab4:	d301      	bcc.n	5aba <__udivsi3+0x52>
    5ab6:	038b      	lsls	r3, r1, #14
    5ab8:	1ac0      	subs	r0, r0, r3
    5aba:	4152      	adcs	r2, r2
    5abc:	0b43      	lsrs	r3, r0, #13
    5abe:	428b      	cmp	r3, r1
    5ac0:	d301      	bcc.n	5ac6 <__udivsi3+0x5e>
    5ac2:	034b      	lsls	r3, r1, #13
    5ac4:	1ac0      	subs	r0, r0, r3
    5ac6:	4152      	adcs	r2, r2
    5ac8:	0b03      	lsrs	r3, r0, #12
    5aca:	428b      	cmp	r3, r1
    5acc:	d301      	bcc.n	5ad2 <__udivsi3+0x6a>
    5ace:	030b      	lsls	r3, r1, #12
    5ad0:	1ac0      	subs	r0, r0, r3
    5ad2:	4152      	adcs	r2, r2
    5ad4:	0ac3      	lsrs	r3, r0, #11
    5ad6:	428b      	cmp	r3, r1
    5ad8:	d301      	bcc.n	5ade <__udivsi3+0x76>
    5ada:	02cb      	lsls	r3, r1, #11
    5adc:	1ac0      	subs	r0, r0, r3
    5ade:	4152      	adcs	r2, r2
    5ae0:	0a83      	lsrs	r3, r0, #10
    5ae2:	428b      	cmp	r3, r1
    5ae4:	d301      	bcc.n	5aea <__udivsi3+0x82>
    5ae6:	028b      	lsls	r3, r1, #10
    5ae8:	1ac0      	subs	r0, r0, r3
    5aea:	4152      	adcs	r2, r2
    5aec:	0a43      	lsrs	r3, r0, #9
    5aee:	428b      	cmp	r3, r1
    5af0:	d301      	bcc.n	5af6 <__udivsi3+0x8e>
    5af2:	024b      	lsls	r3, r1, #9
    5af4:	1ac0      	subs	r0, r0, r3
    5af6:	4152      	adcs	r2, r2
    5af8:	0a03      	lsrs	r3, r0, #8
    5afa:	428b      	cmp	r3, r1
    5afc:	d301      	bcc.n	5b02 <__udivsi3+0x9a>
    5afe:	020b      	lsls	r3, r1, #8
    5b00:	1ac0      	subs	r0, r0, r3
    5b02:	4152      	adcs	r2, r2
    5b04:	d2cd      	bcs.n	5aa2 <__udivsi3+0x3a>
    5b06:	09c3      	lsrs	r3, r0, #7
    5b08:	428b      	cmp	r3, r1
    5b0a:	d301      	bcc.n	5b10 <__udivsi3+0xa8>
    5b0c:	01cb      	lsls	r3, r1, #7
    5b0e:	1ac0      	subs	r0, r0, r3
    5b10:	4152      	adcs	r2, r2
    5b12:	0983      	lsrs	r3, r0, #6
    5b14:	428b      	cmp	r3, r1
    5b16:	d301      	bcc.n	5b1c <__udivsi3+0xb4>
    5b18:	018b      	lsls	r3, r1, #6
    5b1a:	1ac0      	subs	r0, r0, r3
    5b1c:	4152      	adcs	r2, r2
    5b1e:	0943      	lsrs	r3, r0, #5
    5b20:	428b      	cmp	r3, r1
    5b22:	d301      	bcc.n	5b28 <__udivsi3+0xc0>
    5b24:	014b      	lsls	r3, r1, #5
    5b26:	1ac0      	subs	r0, r0, r3
    5b28:	4152      	adcs	r2, r2
    5b2a:	0903      	lsrs	r3, r0, #4
    5b2c:	428b      	cmp	r3, r1
    5b2e:	d301      	bcc.n	5b34 <__udivsi3+0xcc>
    5b30:	010b      	lsls	r3, r1, #4
    5b32:	1ac0      	subs	r0, r0, r3
    5b34:	4152      	adcs	r2, r2
    5b36:	08c3      	lsrs	r3, r0, #3
    5b38:	428b      	cmp	r3, r1
    5b3a:	d301      	bcc.n	5b40 <__udivsi3+0xd8>
    5b3c:	00cb      	lsls	r3, r1, #3
    5b3e:	1ac0      	subs	r0, r0, r3
    5b40:	4152      	adcs	r2, r2
    5b42:	0883      	lsrs	r3, r0, #2
    5b44:	428b      	cmp	r3, r1
    5b46:	d301      	bcc.n	5b4c <__udivsi3+0xe4>
    5b48:	008b      	lsls	r3, r1, #2
    5b4a:	1ac0      	subs	r0, r0, r3
    5b4c:	4152      	adcs	r2, r2
    5b4e:	0843      	lsrs	r3, r0, #1
    5b50:	428b      	cmp	r3, r1
    5b52:	d301      	bcc.n	5b58 <__udivsi3+0xf0>
    5b54:	004b      	lsls	r3, r1, #1
    5b56:	1ac0      	subs	r0, r0, r3
    5b58:	4152      	adcs	r2, r2
    5b5a:	1a41      	subs	r1, r0, r1
    5b5c:	d200      	bcs.n	5b60 <__udivsi3+0xf8>
    5b5e:	4601      	mov	r1, r0
    5b60:	4152      	adcs	r2, r2
    5b62:	4610      	mov	r0, r2
    5b64:	4770      	bx	lr
    5b66:	e7ff      	b.n	5b68 <__udivsi3+0x100>
    5b68:	b501      	push	{r0, lr}
    5b6a:	2000      	movs	r0, #0
    5b6c:	f000 f8f0 	bl	5d50 <__aeabi_idiv0>
    5b70:	bd02      	pop	{r1, pc}
    5b72:	46c0      	nop			; (mov r8, r8)

00005b74 <__aeabi_uidivmod>:
    5b74:	2900      	cmp	r1, #0
    5b76:	d0f7      	beq.n	5b68 <__udivsi3+0x100>
    5b78:	e776      	b.n	5a68 <__udivsi3>
    5b7a:	4770      	bx	lr

00005b7c <__divsi3>:
    5b7c:	4603      	mov	r3, r0
    5b7e:	430b      	orrs	r3, r1
    5b80:	d47f      	bmi.n	5c82 <__divsi3+0x106>
    5b82:	2200      	movs	r2, #0
    5b84:	0843      	lsrs	r3, r0, #1
    5b86:	428b      	cmp	r3, r1
    5b88:	d374      	bcc.n	5c74 <__divsi3+0xf8>
    5b8a:	0903      	lsrs	r3, r0, #4
    5b8c:	428b      	cmp	r3, r1
    5b8e:	d35f      	bcc.n	5c50 <__divsi3+0xd4>
    5b90:	0a03      	lsrs	r3, r0, #8
    5b92:	428b      	cmp	r3, r1
    5b94:	d344      	bcc.n	5c20 <__divsi3+0xa4>
    5b96:	0b03      	lsrs	r3, r0, #12
    5b98:	428b      	cmp	r3, r1
    5b9a:	d328      	bcc.n	5bee <__divsi3+0x72>
    5b9c:	0c03      	lsrs	r3, r0, #16
    5b9e:	428b      	cmp	r3, r1
    5ba0:	d30d      	bcc.n	5bbe <__divsi3+0x42>
    5ba2:	22ff      	movs	r2, #255	; 0xff
    5ba4:	0209      	lsls	r1, r1, #8
    5ba6:	ba12      	rev	r2, r2
    5ba8:	0c03      	lsrs	r3, r0, #16
    5baa:	428b      	cmp	r3, r1
    5bac:	d302      	bcc.n	5bb4 <__divsi3+0x38>
    5bae:	1212      	asrs	r2, r2, #8
    5bb0:	0209      	lsls	r1, r1, #8
    5bb2:	d065      	beq.n	5c80 <__divsi3+0x104>
    5bb4:	0b03      	lsrs	r3, r0, #12
    5bb6:	428b      	cmp	r3, r1
    5bb8:	d319      	bcc.n	5bee <__divsi3+0x72>
    5bba:	e000      	b.n	5bbe <__divsi3+0x42>
    5bbc:	0a09      	lsrs	r1, r1, #8
    5bbe:	0bc3      	lsrs	r3, r0, #15
    5bc0:	428b      	cmp	r3, r1
    5bc2:	d301      	bcc.n	5bc8 <__divsi3+0x4c>
    5bc4:	03cb      	lsls	r3, r1, #15
    5bc6:	1ac0      	subs	r0, r0, r3
    5bc8:	4152      	adcs	r2, r2
    5bca:	0b83      	lsrs	r3, r0, #14
    5bcc:	428b      	cmp	r3, r1
    5bce:	d301      	bcc.n	5bd4 <__divsi3+0x58>
    5bd0:	038b      	lsls	r3, r1, #14
    5bd2:	1ac0      	subs	r0, r0, r3
    5bd4:	4152      	adcs	r2, r2
    5bd6:	0b43      	lsrs	r3, r0, #13
    5bd8:	428b      	cmp	r3, r1
    5bda:	d301      	bcc.n	5be0 <__divsi3+0x64>
    5bdc:	034b      	lsls	r3, r1, #13
    5bde:	1ac0      	subs	r0, r0, r3
    5be0:	4152      	adcs	r2, r2
    5be2:	0b03      	lsrs	r3, r0, #12
    5be4:	428b      	cmp	r3, r1
    5be6:	d301      	bcc.n	5bec <__divsi3+0x70>
    5be8:	030b      	lsls	r3, r1, #12
    5bea:	1ac0      	subs	r0, r0, r3
    5bec:	4152      	adcs	r2, r2
    5bee:	0ac3      	lsrs	r3, r0, #11
    5bf0:	428b      	cmp	r3, r1
    5bf2:	d301      	bcc.n	5bf8 <__divsi3+0x7c>
    5bf4:	02cb      	lsls	r3, r1, #11
    5bf6:	1ac0      	subs	r0, r0, r3
    5bf8:	4152      	adcs	r2, r2
    5bfa:	0a83      	lsrs	r3, r0, #10
    5bfc:	428b      	cmp	r3, r1
    5bfe:	d301      	bcc.n	5c04 <__divsi3+0x88>
    5c00:	028b      	lsls	r3, r1, #10
    5c02:	1ac0      	subs	r0, r0, r3
    5c04:	4152      	adcs	r2, r2
    5c06:	0a43      	lsrs	r3, r0, #9
    5c08:	428b      	cmp	r3, r1
    5c0a:	d301      	bcc.n	5c10 <__divsi3+0x94>
    5c0c:	024b      	lsls	r3, r1, #9
    5c0e:	1ac0      	subs	r0, r0, r3
    5c10:	4152      	adcs	r2, r2
    5c12:	0a03      	lsrs	r3, r0, #8
    5c14:	428b      	cmp	r3, r1
    5c16:	d301      	bcc.n	5c1c <__divsi3+0xa0>
    5c18:	020b      	lsls	r3, r1, #8
    5c1a:	1ac0      	subs	r0, r0, r3
    5c1c:	4152      	adcs	r2, r2
    5c1e:	d2cd      	bcs.n	5bbc <__divsi3+0x40>
    5c20:	09c3      	lsrs	r3, r0, #7
    5c22:	428b      	cmp	r3, r1
    5c24:	d301      	bcc.n	5c2a <__divsi3+0xae>
    5c26:	01cb      	lsls	r3, r1, #7
    5c28:	1ac0      	subs	r0, r0, r3
    5c2a:	4152      	adcs	r2, r2
    5c2c:	0983      	lsrs	r3, r0, #6
    5c2e:	428b      	cmp	r3, r1
    5c30:	d301      	bcc.n	5c36 <__divsi3+0xba>
    5c32:	018b      	lsls	r3, r1, #6
    5c34:	1ac0      	subs	r0, r0, r3
    5c36:	4152      	adcs	r2, r2
    5c38:	0943      	lsrs	r3, r0, #5
    5c3a:	428b      	cmp	r3, r1
    5c3c:	d301      	bcc.n	5c42 <__divsi3+0xc6>
    5c3e:	014b      	lsls	r3, r1, #5
    5c40:	1ac0      	subs	r0, r0, r3
    5c42:	4152      	adcs	r2, r2
    5c44:	0903      	lsrs	r3, r0, #4
    5c46:	428b      	cmp	r3, r1
    5c48:	d301      	bcc.n	5c4e <__divsi3+0xd2>
    5c4a:	010b      	lsls	r3, r1, #4
    5c4c:	1ac0      	subs	r0, r0, r3
    5c4e:	4152      	adcs	r2, r2
    5c50:	08c3      	lsrs	r3, r0, #3
    5c52:	428b      	cmp	r3, r1
    5c54:	d301      	bcc.n	5c5a <__divsi3+0xde>
    5c56:	00cb      	lsls	r3, r1, #3
    5c58:	1ac0      	subs	r0, r0, r3
    5c5a:	4152      	adcs	r2, r2
    5c5c:	0883      	lsrs	r3, r0, #2
    5c5e:	428b      	cmp	r3, r1
    5c60:	d301      	bcc.n	5c66 <__divsi3+0xea>
    5c62:	008b      	lsls	r3, r1, #2
    5c64:	1ac0      	subs	r0, r0, r3
    5c66:	4152      	adcs	r2, r2
    5c68:	0843      	lsrs	r3, r0, #1
    5c6a:	428b      	cmp	r3, r1
    5c6c:	d301      	bcc.n	5c72 <__divsi3+0xf6>
    5c6e:	004b      	lsls	r3, r1, #1
    5c70:	1ac0      	subs	r0, r0, r3
    5c72:	4152      	adcs	r2, r2
    5c74:	1a41      	subs	r1, r0, r1
    5c76:	d200      	bcs.n	5c7a <__divsi3+0xfe>
    5c78:	4601      	mov	r1, r0
    5c7a:	4152      	adcs	r2, r2
    5c7c:	4610      	mov	r0, r2
    5c7e:	4770      	bx	lr
    5c80:	e05d      	b.n	5d3e <__divsi3+0x1c2>
    5c82:	0fca      	lsrs	r2, r1, #31
    5c84:	d000      	beq.n	5c88 <__divsi3+0x10c>
    5c86:	4249      	negs	r1, r1
    5c88:	1003      	asrs	r3, r0, #32
    5c8a:	d300      	bcc.n	5c8e <__divsi3+0x112>
    5c8c:	4240      	negs	r0, r0
    5c8e:	4053      	eors	r3, r2
    5c90:	2200      	movs	r2, #0
    5c92:	469c      	mov	ip, r3
    5c94:	0903      	lsrs	r3, r0, #4
    5c96:	428b      	cmp	r3, r1
    5c98:	d32d      	bcc.n	5cf6 <__divsi3+0x17a>
    5c9a:	0a03      	lsrs	r3, r0, #8
    5c9c:	428b      	cmp	r3, r1
    5c9e:	d312      	bcc.n	5cc6 <__divsi3+0x14a>
    5ca0:	22fc      	movs	r2, #252	; 0xfc
    5ca2:	0189      	lsls	r1, r1, #6
    5ca4:	ba12      	rev	r2, r2
    5ca6:	0a03      	lsrs	r3, r0, #8
    5ca8:	428b      	cmp	r3, r1
    5caa:	d30c      	bcc.n	5cc6 <__divsi3+0x14a>
    5cac:	0189      	lsls	r1, r1, #6
    5cae:	1192      	asrs	r2, r2, #6
    5cb0:	428b      	cmp	r3, r1
    5cb2:	d308      	bcc.n	5cc6 <__divsi3+0x14a>
    5cb4:	0189      	lsls	r1, r1, #6
    5cb6:	1192      	asrs	r2, r2, #6
    5cb8:	428b      	cmp	r3, r1
    5cba:	d304      	bcc.n	5cc6 <__divsi3+0x14a>
    5cbc:	0189      	lsls	r1, r1, #6
    5cbe:	d03a      	beq.n	5d36 <__divsi3+0x1ba>
    5cc0:	1192      	asrs	r2, r2, #6
    5cc2:	e000      	b.n	5cc6 <__divsi3+0x14a>
    5cc4:	0989      	lsrs	r1, r1, #6
    5cc6:	09c3      	lsrs	r3, r0, #7
    5cc8:	428b      	cmp	r3, r1
    5cca:	d301      	bcc.n	5cd0 <__divsi3+0x154>
    5ccc:	01cb      	lsls	r3, r1, #7
    5cce:	1ac0      	subs	r0, r0, r3
    5cd0:	4152      	adcs	r2, r2
    5cd2:	0983      	lsrs	r3, r0, #6
    5cd4:	428b      	cmp	r3, r1
    5cd6:	d301      	bcc.n	5cdc <__divsi3+0x160>
    5cd8:	018b      	lsls	r3, r1, #6
    5cda:	1ac0      	subs	r0, r0, r3
    5cdc:	4152      	adcs	r2, r2
    5cde:	0943      	lsrs	r3, r0, #5
    5ce0:	428b      	cmp	r3, r1
    5ce2:	d301      	bcc.n	5ce8 <__divsi3+0x16c>
    5ce4:	014b      	lsls	r3, r1, #5
    5ce6:	1ac0      	subs	r0, r0, r3
    5ce8:	4152      	adcs	r2, r2
    5cea:	0903      	lsrs	r3, r0, #4
    5cec:	428b      	cmp	r3, r1
    5cee:	d301      	bcc.n	5cf4 <__divsi3+0x178>
    5cf0:	010b      	lsls	r3, r1, #4
    5cf2:	1ac0      	subs	r0, r0, r3
    5cf4:	4152      	adcs	r2, r2
    5cf6:	08c3      	lsrs	r3, r0, #3
    5cf8:	428b      	cmp	r3, r1
    5cfa:	d301      	bcc.n	5d00 <__divsi3+0x184>
    5cfc:	00cb      	lsls	r3, r1, #3
    5cfe:	1ac0      	subs	r0, r0, r3
    5d00:	4152      	adcs	r2, r2
    5d02:	0883      	lsrs	r3, r0, #2
    5d04:	428b      	cmp	r3, r1
    5d06:	d301      	bcc.n	5d0c <__divsi3+0x190>
    5d08:	008b      	lsls	r3, r1, #2
    5d0a:	1ac0      	subs	r0, r0, r3
    5d0c:	4152      	adcs	r2, r2
    5d0e:	d2d9      	bcs.n	5cc4 <__divsi3+0x148>
    5d10:	0843      	lsrs	r3, r0, #1
    5d12:	428b      	cmp	r3, r1
    5d14:	d301      	bcc.n	5d1a <__divsi3+0x19e>
    5d16:	004b      	lsls	r3, r1, #1
    5d18:	1ac0      	subs	r0, r0, r3
    5d1a:	4152      	adcs	r2, r2
    5d1c:	1a41      	subs	r1, r0, r1
    5d1e:	d200      	bcs.n	5d22 <__divsi3+0x1a6>
    5d20:	4601      	mov	r1, r0
    5d22:	4663      	mov	r3, ip
    5d24:	4152      	adcs	r2, r2
    5d26:	105b      	asrs	r3, r3, #1
    5d28:	4610      	mov	r0, r2
    5d2a:	d301      	bcc.n	5d30 <__divsi3+0x1b4>
    5d2c:	4240      	negs	r0, r0
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d500      	bpl.n	5d34 <__divsi3+0x1b8>
    5d32:	4249      	negs	r1, r1
    5d34:	4770      	bx	lr
    5d36:	4663      	mov	r3, ip
    5d38:	105b      	asrs	r3, r3, #1
    5d3a:	d300      	bcc.n	5d3e <__divsi3+0x1c2>
    5d3c:	4240      	negs	r0, r0
    5d3e:	b501      	push	{r0, lr}
    5d40:	2000      	movs	r0, #0
    5d42:	f000 f805 	bl	5d50 <__aeabi_idiv0>
    5d46:	bd02      	pop	{r1, pc}

00005d48 <__aeabi_idivmod>:
    5d48:	2900      	cmp	r1, #0
    5d4a:	d0f8      	beq.n	5d3e <__divsi3+0x1c2>
    5d4c:	e716      	b.n	5b7c <__divsi3>
    5d4e:	4770      	bx	lr

00005d50 <__aeabi_idiv0>:
    5d50:	4770      	bx	lr
    5d52:	46c0      	nop			; (mov r8, r8)

00005d54 <__aeabi_cdrcmple>:
    5d54:	4684      	mov	ip, r0
    5d56:	1c10      	adds	r0, r2, #0
    5d58:	4662      	mov	r2, ip
    5d5a:	468c      	mov	ip, r1
    5d5c:	1c19      	adds	r1, r3, #0
    5d5e:	4663      	mov	r3, ip
    5d60:	e000      	b.n	5d64 <__aeabi_cdcmpeq>
    5d62:	46c0      	nop			; (mov r8, r8)

00005d64 <__aeabi_cdcmpeq>:
    5d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5d66:	f000 ff15 	bl	6b94 <__ledf2>
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d401      	bmi.n	5d72 <__aeabi_cdcmpeq+0xe>
    5d6e:	2100      	movs	r1, #0
    5d70:	42c8      	cmn	r0, r1
    5d72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005d74 <__aeabi_dcmpeq>:
    5d74:	b510      	push	{r4, lr}
    5d76:	f000 fe6f 	bl	6a58 <__eqdf2>
    5d7a:	4240      	negs	r0, r0
    5d7c:	3001      	adds	r0, #1
    5d7e:	bd10      	pop	{r4, pc}

00005d80 <__aeabi_dcmplt>:
    5d80:	b510      	push	{r4, lr}
    5d82:	f000 ff07 	bl	6b94 <__ledf2>
    5d86:	2800      	cmp	r0, #0
    5d88:	db01      	blt.n	5d8e <__aeabi_dcmplt+0xe>
    5d8a:	2000      	movs	r0, #0
    5d8c:	bd10      	pop	{r4, pc}
    5d8e:	2001      	movs	r0, #1
    5d90:	bd10      	pop	{r4, pc}
    5d92:	46c0      	nop			; (mov r8, r8)

00005d94 <__aeabi_dcmple>:
    5d94:	b510      	push	{r4, lr}
    5d96:	f000 fefd 	bl	6b94 <__ledf2>
    5d9a:	2800      	cmp	r0, #0
    5d9c:	dd01      	ble.n	5da2 <__aeabi_dcmple+0xe>
    5d9e:	2000      	movs	r0, #0
    5da0:	bd10      	pop	{r4, pc}
    5da2:	2001      	movs	r0, #1
    5da4:	bd10      	pop	{r4, pc}
    5da6:	46c0      	nop			; (mov r8, r8)

00005da8 <__aeabi_dcmpgt>:
    5da8:	b510      	push	{r4, lr}
    5daa:	f000 fe8f 	bl	6acc <__gedf2>
    5dae:	2800      	cmp	r0, #0
    5db0:	dc01      	bgt.n	5db6 <__aeabi_dcmpgt+0xe>
    5db2:	2000      	movs	r0, #0
    5db4:	bd10      	pop	{r4, pc}
    5db6:	2001      	movs	r0, #1
    5db8:	bd10      	pop	{r4, pc}
    5dba:	46c0      	nop			; (mov r8, r8)

00005dbc <__aeabi_dcmpge>:
    5dbc:	b510      	push	{r4, lr}
    5dbe:	f000 fe85 	bl	6acc <__gedf2>
    5dc2:	2800      	cmp	r0, #0
    5dc4:	da01      	bge.n	5dca <__aeabi_dcmpge+0xe>
    5dc6:	2000      	movs	r0, #0
    5dc8:	bd10      	pop	{r4, pc}
    5dca:	2001      	movs	r0, #1
    5dcc:	bd10      	pop	{r4, pc}
    5dce:	46c0      	nop			; (mov r8, r8)

00005dd0 <__aeabi_dadd>:
    5dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dd2:	4645      	mov	r5, r8
    5dd4:	46de      	mov	lr, fp
    5dd6:	4657      	mov	r7, sl
    5dd8:	464e      	mov	r6, r9
    5dda:	030c      	lsls	r4, r1, #12
    5ddc:	b5e0      	push	{r5, r6, r7, lr}
    5dde:	004e      	lsls	r6, r1, #1
    5de0:	0fc9      	lsrs	r1, r1, #31
    5de2:	4688      	mov	r8, r1
    5de4:	000d      	movs	r5, r1
    5de6:	0a61      	lsrs	r1, r4, #9
    5de8:	0f44      	lsrs	r4, r0, #29
    5dea:	430c      	orrs	r4, r1
    5dec:	00c7      	lsls	r7, r0, #3
    5dee:	0319      	lsls	r1, r3, #12
    5df0:	0058      	lsls	r0, r3, #1
    5df2:	0fdb      	lsrs	r3, r3, #31
    5df4:	469b      	mov	fp, r3
    5df6:	0a4b      	lsrs	r3, r1, #9
    5df8:	0f51      	lsrs	r1, r2, #29
    5dfa:	430b      	orrs	r3, r1
    5dfc:	0d76      	lsrs	r6, r6, #21
    5dfe:	0d40      	lsrs	r0, r0, #21
    5e00:	0019      	movs	r1, r3
    5e02:	00d2      	lsls	r2, r2, #3
    5e04:	45d8      	cmp	r8, fp
    5e06:	d100      	bne.n	5e0a <__aeabi_dadd+0x3a>
    5e08:	e0ae      	b.n	5f68 <__aeabi_dadd+0x198>
    5e0a:	1a35      	subs	r5, r6, r0
    5e0c:	2d00      	cmp	r5, #0
    5e0e:	dc00      	bgt.n	5e12 <__aeabi_dadd+0x42>
    5e10:	e0f6      	b.n	6000 <__aeabi_dadd+0x230>
    5e12:	2800      	cmp	r0, #0
    5e14:	d10f      	bne.n	5e36 <__aeabi_dadd+0x66>
    5e16:	4313      	orrs	r3, r2
    5e18:	d100      	bne.n	5e1c <__aeabi_dadd+0x4c>
    5e1a:	e0db      	b.n	5fd4 <__aeabi_dadd+0x204>
    5e1c:	1e6b      	subs	r3, r5, #1
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d000      	beq.n	5e24 <__aeabi_dadd+0x54>
    5e22:	e137      	b.n	6094 <__aeabi_dadd+0x2c4>
    5e24:	1aba      	subs	r2, r7, r2
    5e26:	4297      	cmp	r7, r2
    5e28:	41bf      	sbcs	r7, r7
    5e2a:	1a64      	subs	r4, r4, r1
    5e2c:	427f      	negs	r7, r7
    5e2e:	1be4      	subs	r4, r4, r7
    5e30:	2601      	movs	r6, #1
    5e32:	0017      	movs	r7, r2
    5e34:	e024      	b.n	5e80 <__aeabi_dadd+0xb0>
    5e36:	4bc6      	ldr	r3, [pc, #792]	; (6150 <__aeabi_dadd+0x380>)
    5e38:	429e      	cmp	r6, r3
    5e3a:	d04d      	beq.n	5ed8 <__aeabi_dadd+0x108>
    5e3c:	2380      	movs	r3, #128	; 0x80
    5e3e:	041b      	lsls	r3, r3, #16
    5e40:	4319      	orrs	r1, r3
    5e42:	2d38      	cmp	r5, #56	; 0x38
    5e44:	dd00      	ble.n	5e48 <__aeabi_dadd+0x78>
    5e46:	e107      	b.n	6058 <__aeabi_dadd+0x288>
    5e48:	2d1f      	cmp	r5, #31
    5e4a:	dd00      	ble.n	5e4e <__aeabi_dadd+0x7e>
    5e4c:	e138      	b.n	60c0 <__aeabi_dadd+0x2f0>
    5e4e:	2020      	movs	r0, #32
    5e50:	1b43      	subs	r3, r0, r5
    5e52:	469a      	mov	sl, r3
    5e54:	000b      	movs	r3, r1
    5e56:	4650      	mov	r0, sl
    5e58:	4083      	lsls	r3, r0
    5e5a:	4699      	mov	r9, r3
    5e5c:	0013      	movs	r3, r2
    5e5e:	4648      	mov	r0, r9
    5e60:	40eb      	lsrs	r3, r5
    5e62:	4318      	orrs	r0, r3
    5e64:	0003      	movs	r3, r0
    5e66:	4650      	mov	r0, sl
    5e68:	4082      	lsls	r2, r0
    5e6a:	1e50      	subs	r0, r2, #1
    5e6c:	4182      	sbcs	r2, r0
    5e6e:	40e9      	lsrs	r1, r5
    5e70:	431a      	orrs	r2, r3
    5e72:	1aba      	subs	r2, r7, r2
    5e74:	1a61      	subs	r1, r4, r1
    5e76:	4297      	cmp	r7, r2
    5e78:	41a4      	sbcs	r4, r4
    5e7a:	0017      	movs	r7, r2
    5e7c:	4264      	negs	r4, r4
    5e7e:	1b0c      	subs	r4, r1, r4
    5e80:	0223      	lsls	r3, r4, #8
    5e82:	d562      	bpl.n	5f4a <__aeabi_dadd+0x17a>
    5e84:	0264      	lsls	r4, r4, #9
    5e86:	0a65      	lsrs	r5, r4, #9
    5e88:	2d00      	cmp	r5, #0
    5e8a:	d100      	bne.n	5e8e <__aeabi_dadd+0xbe>
    5e8c:	e0df      	b.n	604e <__aeabi_dadd+0x27e>
    5e8e:	0028      	movs	r0, r5
    5e90:	f001 fd46 	bl	7920 <__clzsi2>
    5e94:	0003      	movs	r3, r0
    5e96:	3b08      	subs	r3, #8
    5e98:	2b1f      	cmp	r3, #31
    5e9a:	dd00      	ble.n	5e9e <__aeabi_dadd+0xce>
    5e9c:	e0d2      	b.n	6044 <__aeabi_dadd+0x274>
    5e9e:	2220      	movs	r2, #32
    5ea0:	003c      	movs	r4, r7
    5ea2:	1ad2      	subs	r2, r2, r3
    5ea4:	409d      	lsls	r5, r3
    5ea6:	40d4      	lsrs	r4, r2
    5ea8:	409f      	lsls	r7, r3
    5eaa:	4325      	orrs	r5, r4
    5eac:	429e      	cmp	r6, r3
    5eae:	dd00      	ble.n	5eb2 <__aeabi_dadd+0xe2>
    5eb0:	e0c4      	b.n	603c <__aeabi_dadd+0x26c>
    5eb2:	1b9e      	subs	r6, r3, r6
    5eb4:	1c73      	adds	r3, r6, #1
    5eb6:	2b1f      	cmp	r3, #31
    5eb8:	dd00      	ble.n	5ebc <__aeabi_dadd+0xec>
    5eba:	e0f1      	b.n	60a0 <__aeabi_dadd+0x2d0>
    5ebc:	2220      	movs	r2, #32
    5ebe:	0038      	movs	r0, r7
    5ec0:	0029      	movs	r1, r5
    5ec2:	1ad2      	subs	r2, r2, r3
    5ec4:	40d8      	lsrs	r0, r3
    5ec6:	4091      	lsls	r1, r2
    5ec8:	4097      	lsls	r7, r2
    5eca:	002c      	movs	r4, r5
    5ecc:	4301      	orrs	r1, r0
    5ece:	1e78      	subs	r0, r7, #1
    5ed0:	4187      	sbcs	r7, r0
    5ed2:	40dc      	lsrs	r4, r3
    5ed4:	2600      	movs	r6, #0
    5ed6:	430f      	orrs	r7, r1
    5ed8:	077b      	lsls	r3, r7, #29
    5eda:	d009      	beq.n	5ef0 <__aeabi_dadd+0x120>
    5edc:	230f      	movs	r3, #15
    5ede:	403b      	ands	r3, r7
    5ee0:	2b04      	cmp	r3, #4
    5ee2:	d005      	beq.n	5ef0 <__aeabi_dadd+0x120>
    5ee4:	1d3b      	adds	r3, r7, #4
    5ee6:	42bb      	cmp	r3, r7
    5ee8:	41bf      	sbcs	r7, r7
    5eea:	427f      	negs	r7, r7
    5eec:	19e4      	adds	r4, r4, r7
    5eee:	001f      	movs	r7, r3
    5ef0:	0223      	lsls	r3, r4, #8
    5ef2:	d52c      	bpl.n	5f4e <__aeabi_dadd+0x17e>
    5ef4:	4b96      	ldr	r3, [pc, #600]	; (6150 <__aeabi_dadd+0x380>)
    5ef6:	3601      	adds	r6, #1
    5ef8:	429e      	cmp	r6, r3
    5efa:	d100      	bne.n	5efe <__aeabi_dadd+0x12e>
    5efc:	e09a      	b.n	6034 <__aeabi_dadd+0x264>
    5efe:	4645      	mov	r5, r8
    5f00:	4b94      	ldr	r3, [pc, #592]	; (6154 <__aeabi_dadd+0x384>)
    5f02:	08ff      	lsrs	r7, r7, #3
    5f04:	401c      	ands	r4, r3
    5f06:	0760      	lsls	r0, r4, #29
    5f08:	0576      	lsls	r6, r6, #21
    5f0a:	0264      	lsls	r4, r4, #9
    5f0c:	4307      	orrs	r7, r0
    5f0e:	0b24      	lsrs	r4, r4, #12
    5f10:	0d76      	lsrs	r6, r6, #21
    5f12:	2100      	movs	r1, #0
    5f14:	0324      	lsls	r4, r4, #12
    5f16:	0b23      	lsrs	r3, r4, #12
    5f18:	0d0c      	lsrs	r4, r1, #20
    5f1a:	4a8f      	ldr	r2, [pc, #572]	; (6158 <__aeabi_dadd+0x388>)
    5f1c:	0524      	lsls	r4, r4, #20
    5f1e:	431c      	orrs	r4, r3
    5f20:	4014      	ands	r4, r2
    5f22:	0533      	lsls	r3, r6, #20
    5f24:	4323      	orrs	r3, r4
    5f26:	005b      	lsls	r3, r3, #1
    5f28:	07ed      	lsls	r5, r5, #31
    5f2a:	085b      	lsrs	r3, r3, #1
    5f2c:	432b      	orrs	r3, r5
    5f2e:	0038      	movs	r0, r7
    5f30:	0019      	movs	r1, r3
    5f32:	bc3c      	pop	{r2, r3, r4, r5}
    5f34:	4690      	mov	r8, r2
    5f36:	4699      	mov	r9, r3
    5f38:	46a2      	mov	sl, r4
    5f3a:	46ab      	mov	fp, r5
    5f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f3e:	4664      	mov	r4, ip
    5f40:	4304      	orrs	r4, r0
    5f42:	d100      	bne.n	5f46 <__aeabi_dadd+0x176>
    5f44:	e211      	b.n	636a <__aeabi_dadd+0x59a>
    5f46:	0004      	movs	r4, r0
    5f48:	4667      	mov	r7, ip
    5f4a:	077b      	lsls	r3, r7, #29
    5f4c:	d1c6      	bne.n	5edc <__aeabi_dadd+0x10c>
    5f4e:	4645      	mov	r5, r8
    5f50:	0760      	lsls	r0, r4, #29
    5f52:	08ff      	lsrs	r7, r7, #3
    5f54:	4307      	orrs	r7, r0
    5f56:	08e4      	lsrs	r4, r4, #3
    5f58:	4b7d      	ldr	r3, [pc, #500]	; (6150 <__aeabi_dadd+0x380>)
    5f5a:	429e      	cmp	r6, r3
    5f5c:	d030      	beq.n	5fc0 <__aeabi_dadd+0x1f0>
    5f5e:	0324      	lsls	r4, r4, #12
    5f60:	0576      	lsls	r6, r6, #21
    5f62:	0b24      	lsrs	r4, r4, #12
    5f64:	0d76      	lsrs	r6, r6, #21
    5f66:	e7d4      	b.n	5f12 <__aeabi_dadd+0x142>
    5f68:	1a33      	subs	r3, r6, r0
    5f6a:	469a      	mov	sl, r3
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	dd78      	ble.n	6062 <__aeabi_dadd+0x292>
    5f70:	2800      	cmp	r0, #0
    5f72:	d031      	beq.n	5fd8 <__aeabi_dadd+0x208>
    5f74:	4876      	ldr	r0, [pc, #472]	; (6150 <__aeabi_dadd+0x380>)
    5f76:	4286      	cmp	r6, r0
    5f78:	d0ae      	beq.n	5ed8 <__aeabi_dadd+0x108>
    5f7a:	2080      	movs	r0, #128	; 0x80
    5f7c:	0400      	lsls	r0, r0, #16
    5f7e:	4301      	orrs	r1, r0
    5f80:	4653      	mov	r3, sl
    5f82:	2b38      	cmp	r3, #56	; 0x38
    5f84:	dc00      	bgt.n	5f88 <__aeabi_dadd+0x1b8>
    5f86:	e0e9      	b.n	615c <__aeabi_dadd+0x38c>
    5f88:	430a      	orrs	r2, r1
    5f8a:	1e51      	subs	r1, r2, #1
    5f8c:	418a      	sbcs	r2, r1
    5f8e:	2100      	movs	r1, #0
    5f90:	19d2      	adds	r2, r2, r7
    5f92:	42ba      	cmp	r2, r7
    5f94:	41bf      	sbcs	r7, r7
    5f96:	1909      	adds	r1, r1, r4
    5f98:	427c      	negs	r4, r7
    5f9a:	0017      	movs	r7, r2
    5f9c:	190c      	adds	r4, r1, r4
    5f9e:	0223      	lsls	r3, r4, #8
    5fa0:	d5d3      	bpl.n	5f4a <__aeabi_dadd+0x17a>
    5fa2:	4b6b      	ldr	r3, [pc, #428]	; (6150 <__aeabi_dadd+0x380>)
    5fa4:	3601      	adds	r6, #1
    5fa6:	429e      	cmp	r6, r3
    5fa8:	d100      	bne.n	5fac <__aeabi_dadd+0x1dc>
    5faa:	e13a      	b.n	6222 <__aeabi_dadd+0x452>
    5fac:	2001      	movs	r0, #1
    5fae:	4b69      	ldr	r3, [pc, #420]	; (6154 <__aeabi_dadd+0x384>)
    5fb0:	401c      	ands	r4, r3
    5fb2:	087b      	lsrs	r3, r7, #1
    5fb4:	4007      	ands	r7, r0
    5fb6:	431f      	orrs	r7, r3
    5fb8:	07e0      	lsls	r0, r4, #31
    5fba:	4307      	orrs	r7, r0
    5fbc:	0864      	lsrs	r4, r4, #1
    5fbe:	e78b      	b.n	5ed8 <__aeabi_dadd+0x108>
    5fc0:	0023      	movs	r3, r4
    5fc2:	433b      	orrs	r3, r7
    5fc4:	d100      	bne.n	5fc8 <__aeabi_dadd+0x1f8>
    5fc6:	e1cb      	b.n	6360 <__aeabi_dadd+0x590>
    5fc8:	2280      	movs	r2, #128	; 0x80
    5fca:	0312      	lsls	r2, r2, #12
    5fcc:	4314      	orrs	r4, r2
    5fce:	0324      	lsls	r4, r4, #12
    5fd0:	0b24      	lsrs	r4, r4, #12
    5fd2:	e79e      	b.n	5f12 <__aeabi_dadd+0x142>
    5fd4:	002e      	movs	r6, r5
    5fd6:	e77f      	b.n	5ed8 <__aeabi_dadd+0x108>
    5fd8:	0008      	movs	r0, r1
    5fda:	4310      	orrs	r0, r2
    5fdc:	d100      	bne.n	5fe0 <__aeabi_dadd+0x210>
    5fde:	e0b4      	b.n	614a <__aeabi_dadd+0x37a>
    5fe0:	1e58      	subs	r0, r3, #1
    5fe2:	2800      	cmp	r0, #0
    5fe4:	d000      	beq.n	5fe8 <__aeabi_dadd+0x218>
    5fe6:	e0de      	b.n	61a6 <__aeabi_dadd+0x3d6>
    5fe8:	18ba      	adds	r2, r7, r2
    5fea:	42ba      	cmp	r2, r7
    5fec:	419b      	sbcs	r3, r3
    5fee:	1864      	adds	r4, r4, r1
    5ff0:	425b      	negs	r3, r3
    5ff2:	18e4      	adds	r4, r4, r3
    5ff4:	0017      	movs	r7, r2
    5ff6:	2601      	movs	r6, #1
    5ff8:	0223      	lsls	r3, r4, #8
    5ffa:	d5a6      	bpl.n	5f4a <__aeabi_dadd+0x17a>
    5ffc:	2602      	movs	r6, #2
    5ffe:	e7d5      	b.n	5fac <__aeabi_dadd+0x1dc>
    6000:	2d00      	cmp	r5, #0
    6002:	d16e      	bne.n	60e2 <__aeabi_dadd+0x312>
    6004:	1c70      	adds	r0, r6, #1
    6006:	0540      	lsls	r0, r0, #21
    6008:	0d40      	lsrs	r0, r0, #21
    600a:	2801      	cmp	r0, #1
    600c:	dc00      	bgt.n	6010 <__aeabi_dadd+0x240>
    600e:	e0f9      	b.n	6204 <__aeabi_dadd+0x434>
    6010:	1ab8      	subs	r0, r7, r2
    6012:	4684      	mov	ip, r0
    6014:	4287      	cmp	r7, r0
    6016:	4180      	sbcs	r0, r0
    6018:	1ae5      	subs	r5, r4, r3
    601a:	4240      	negs	r0, r0
    601c:	1a2d      	subs	r5, r5, r0
    601e:	0228      	lsls	r0, r5, #8
    6020:	d400      	bmi.n	6024 <__aeabi_dadd+0x254>
    6022:	e089      	b.n	6138 <__aeabi_dadd+0x368>
    6024:	1bd7      	subs	r7, r2, r7
    6026:	42ba      	cmp	r2, r7
    6028:	4192      	sbcs	r2, r2
    602a:	1b1c      	subs	r4, r3, r4
    602c:	4252      	negs	r2, r2
    602e:	1aa5      	subs	r5, r4, r2
    6030:	46d8      	mov	r8, fp
    6032:	e729      	b.n	5e88 <__aeabi_dadd+0xb8>
    6034:	4645      	mov	r5, r8
    6036:	2400      	movs	r4, #0
    6038:	2700      	movs	r7, #0
    603a:	e76a      	b.n	5f12 <__aeabi_dadd+0x142>
    603c:	4c45      	ldr	r4, [pc, #276]	; (6154 <__aeabi_dadd+0x384>)
    603e:	1af6      	subs	r6, r6, r3
    6040:	402c      	ands	r4, r5
    6042:	e749      	b.n	5ed8 <__aeabi_dadd+0x108>
    6044:	003d      	movs	r5, r7
    6046:	3828      	subs	r0, #40	; 0x28
    6048:	4085      	lsls	r5, r0
    604a:	2700      	movs	r7, #0
    604c:	e72e      	b.n	5eac <__aeabi_dadd+0xdc>
    604e:	0038      	movs	r0, r7
    6050:	f001 fc66 	bl	7920 <__clzsi2>
    6054:	3020      	adds	r0, #32
    6056:	e71d      	b.n	5e94 <__aeabi_dadd+0xc4>
    6058:	430a      	orrs	r2, r1
    605a:	1e51      	subs	r1, r2, #1
    605c:	418a      	sbcs	r2, r1
    605e:	2100      	movs	r1, #0
    6060:	e707      	b.n	5e72 <__aeabi_dadd+0xa2>
    6062:	2b00      	cmp	r3, #0
    6064:	d000      	beq.n	6068 <__aeabi_dadd+0x298>
    6066:	e0f3      	b.n	6250 <__aeabi_dadd+0x480>
    6068:	1c70      	adds	r0, r6, #1
    606a:	0543      	lsls	r3, r0, #21
    606c:	0d5b      	lsrs	r3, r3, #21
    606e:	2b01      	cmp	r3, #1
    6070:	dc00      	bgt.n	6074 <__aeabi_dadd+0x2a4>
    6072:	e0ad      	b.n	61d0 <__aeabi_dadd+0x400>
    6074:	4b36      	ldr	r3, [pc, #216]	; (6150 <__aeabi_dadd+0x380>)
    6076:	4298      	cmp	r0, r3
    6078:	d100      	bne.n	607c <__aeabi_dadd+0x2ac>
    607a:	e0d1      	b.n	6220 <__aeabi_dadd+0x450>
    607c:	18ba      	adds	r2, r7, r2
    607e:	42ba      	cmp	r2, r7
    6080:	41bf      	sbcs	r7, r7
    6082:	1864      	adds	r4, r4, r1
    6084:	427f      	negs	r7, r7
    6086:	19e4      	adds	r4, r4, r7
    6088:	07e7      	lsls	r7, r4, #31
    608a:	0852      	lsrs	r2, r2, #1
    608c:	4317      	orrs	r7, r2
    608e:	0864      	lsrs	r4, r4, #1
    6090:	0006      	movs	r6, r0
    6092:	e721      	b.n	5ed8 <__aeabi_dadd+0x108>
    6094:	482e      	ldr	r0, [pc, #184]	; (6150 <__aeabi_dadd+0x380>)
    6096:	4285      	cmp	r5, r0
    6098:	d100      	bne.n	609c <__aeabi_dadd+0x2cc>
    609a:	e093      	b.n	61c4 <__aeabi_dadd+0x3f4>
    609c:	001d      	movs	r5, r3
    609e:	e6d0      	b.n	5e42 <__aeabi_dadd+0x72>
    60a0:	0029      	movs	r1, r5
    60a2:	3e1f      	subs	r6, #31
    60a4:	40f1      	lsrs	r1, r6
    60a6:	2b20      	cmp	r3, #32
    60a8:	d100      	bne.n	60ac <__aeabi_dadd+0x2dc>
    60aa:	e08d      	b.n	61c8 <__aeabi_dadd+0x3f8>
    60ac:	2240      	movs	r2, #64	; 0x40
    60ae:	1ad3      	subs	r3, r2, r3
    60b0:	409d      	lsls	r5, r3
    60b2:	432f      	orrs	r7, r5
    60b4:	1e7d      	subs	r5, r7, #1
    60b6:	41af      	sbcs	r7, r5
    60b8:	2400      	movs	r4, #0
    60ba:	430f      	orrs	r7, r1
    60bc:	2600      	movs	r6, #0
    60be:	e744      	b.n	5f4a <__aeabi_dadd+0x17a>
    60c0:	002b      	movs	r3, r5
    60c2:	0008      	movs	r0, r1
    60c4:	3b20      	subs	r3, #32
    60c6:	40d8      	lsrs	r0, r3
    60c8:	0003      	movs	r3, r0
    60ca:	2d20      	cmp	r5, #32
    60cc:	d100      	bne.n	60d0 <__aeabi_dadd+0x300>
    60ce:	e07d      	b.n	61cc <__aeabi_dadd+0x3fc>
    60d0:	2040      	movs	r0, #64	; 0x40
    60d2:	1b45      	subs	r5, r0, r5
    60d4:	40a9      	lsls	r1, r5
    60d6:	430a      	orrs	r2, r1
    60d8:	1e51      	subs	r1, r2, #1
    60da:	418a      	sbcs	r2, r1
    60dc:	2100      	movs	r1, #0
    60de:	431a      	orrs	r2, r3
    60e0:	e6c7      	b.n	5e72 <__aeabi_dadd+0xa2>
    60e2:	2e00      	cmp	r6, #0
    60e4:	d050      	beq.n	6188 <__aeabi_dadd+0x3b8>
    60e6:	4e1a      	ldr	r6, [pc, #104]	; (6150 <__aeabi_dadd+0x380>)
    60e8:	42b0      	cmp	r0, r6
    60ea:	d057      	beq.n	619c <__aeabi_dadd+0x3cc>
    60ec:	2680      	movs	r6, #128	; 0x80
    60ee:	426b      	negs	r3, r5
    60f0:	4699      	mov	r9, r3
    60f2:	0436      	lsls	r6, r6, #16
    60f4:	4334      	orrs	r4, r6
    60f6:	464b      	mov	r3, r9
    60f8:	2b38      	cmp	r3, #56	; 0x38
    60fa:	dd00      	ble.n	60fe <__aeabi_dadd+0x32e>
    60fc:	e0d6      	b.n	62ac <__aeabi_dadd+0x4dc>
    60fe:	2b1f      	cmp	r3, #31
    6100:	dd00      	ble.n	6104 <__aeabi_dadd+0x334>
    6102:	e135      	b.n	6370 <__aeabi_dadd+0x5a0>
    6104:	2620      	movs	r6, #32
    6106:	1af5      	subs	r5, r6, r3
    6108:	0026      	movs	r6, r4
    610a:	40ae      	lsls	r6, r5
    610c:	46b2      	mov	sl, r6
    610e:	003e      	movs	r6, r7
    6110:	40de      	lsrs	r6, r3
    6112:	46ac      	mov	ip, r5
    6114:	0035      	movs	r5, r6
    6116:	4656      	mov	r6, sl
    6118:	432e      	orrs	r6, r5
    611a:	4665      	mov	r5, ip
    611c:	40af      	lsls	r7, r5
    611e:	1e7d      	subs	r5, r7, #1
    6120:	41af      	sbcs	r7, r5
    6122:	40dc      	lsrs	r4, r3
    6124:	4337      	orrs	r7, r6
    6126:	1bd7      	subs	r7, r2, r7
    6128:	42ba      	cmp	r2, r7
    612a:	4192      	sbcs	r2, r2
    612c:	1b0c      	subs	r4, r1, r4
    612e:	4252      	negs	r2, r2
    6130:	1aa4      	subs	r4, r4, r2
    6132:	0006      	movs	r6, r0
    6134:	46d8      	mov	r8, fp
    6136:	e6a3      	b.n	5e80 <__aeabi_dadd+0xb0>
    6138:	4664      	mov	r4, ip
    613a:	4667      	mov	r7, ip
    613c:	432c      	orrs	r4, r5
    613e:	d000      	beq.n	6142 <__aeabi_dadd+0x372>
    6140:	e6a2      	b.n	5e88 <__aeabi_dadd+0xb8>
    6142:	2500      	movs	r5, #0
    6144:	2600      	movs	r6, #0
    6146:	2700      	movs	r7, #0
    6148:	e706      	b.n	5f58 <__aeabi_dadd+0x188>
    614a:	001e      	movs	r6, r3
    614c:	e6c4      	b.n	5ed8 <__aeabi_dadd+0x108>
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	000007ff 	.word	0x000007ff
    6154:	ff7fffff 	.word	0xff7fffff
    6158:	800fffff 	.word	0x800fffff
    615c:	2b1f      	cmp	r3, #31
    615e:	dc63      	bgt.n	6228 <__aeabi_dadd+0x458>
    6160:	2020      	movs	r0, #32
    6162:	1ac3      	subs	r3, r0, r3
    6164:	0008      	movs	r0, r1
    6166:	4098      	lsls	r0, r3
    6168:	469c      	mov	ip, r3
    616a:	4683      	mov	fp, r0
    616c:	4653      	mov	r3, sl
    616e:	0010      	movs	r0, r2
    6170:	40d8      	lsrs	r0, r3
    6172:	0003      	movs	r3, r0
    6174:	4658      	mov	r0, fp
    6176:	4318      	orrs	r0, r3
    6178:	4663      	mov	r3, ip
    617a:	409a      	lsls	r2, r3
    617c:	1e53      	subs	r3, r2, #1
    617e:	419a      	sbcs	r2, r3
    6180:	4653      	mov	r3, sl
    6182:	4302      	orrs	r2, r0
    6184:	40d9      	lsrs	r1, r3
    6186:	e703      	b.n	5f90 <__aeabi_dadd+0x1c0>
    6188:	0026      	movs	r6, r4
    618a:	433e      	orrs	r6, r7
    618c:	d006      	beq.n	619c <__aeabi_dadd+0x3cc>
    618e:	43eb      	mvns	r3, r5
    6190:	4699      	mov	r9, r3
    6192:	2b00      	cmp	r3, #0
    6194:	d0c7      	beq.n	6126 <__aeabi_dadd+0x356>
    6196:	4e94      	ldr	r6, [pc, #592]	; (63e8 <__aeabi_dadd+0x618>)
    6198:	42b0      	cmp	r0, r6
    619a:	d1ac      	bne.n	60f6 <__aeabi_dadd+0x326>
    619c:	000c      	movs	r4, r1
    619e:	0017      	movs	r7, r2
    61a0:	0006      	movs	r6, r0
    61a2:	46d8      	mov	r8, fp
    61a4:	e698      	b.n	5ed8 <__aeabi_dadd+0x108>
    61a6:	4b90      	ldr	r3, [pc, #576]	; (63e8 <__aeabi_dadd+0x618>)
    61a8:	459a      	cmp	sl, r3
    61aa:	d00b      	beq.n	61c4 <__aeabi_dadd+0x3f4>
    61ac:	4682      	mov	sl, r0
    61ae:	e6e7      	b.n	5f80 <__aeabi_dadd+0x1b0>
    61b0:	2800      	cmp	r0, #0
    61b2:	d000      	beq.n	61b6 <__aeabi_dadd+0x3e6>
    61b4:	e09e      	b.n	62f4 <__aeabi_dadd+0x524>
    61b6:	0018      	movs	r0, r3
    61b8:	4310      	orrs	r0, r2
    61ba:	d100      	bne.n	61be <__aeabi_dadd+0x3ee>
    61bc:	e0e9      	b.n	6392 <__aeabi_dadd+0x5c2>
    61be:	001c      	movs	r4, r3
    61c0:	0017      	movs	r7, r2
    61c2:	46d8      	mov	r8, fp
    61c4:	4e88      	ldr	r6, [pc, #544]	; (63e8 <__aeabi_dadd+0x618>)
    61c6:	e687      	b.n	5ed8 <__aeabi_dadd+0x108>
    61c8:	2500      	movs	r5, #0
    61ca:	e772      	b.n	60b2 <__aeabi_dadd+0x2e2>
    61cc:	2100      	movs	r1, #0
    61ce:	e782      	b.n	60d6 <__aeabi_dadd+0x306>
    61d0:	0023      	movs	r3, r4
    61d2:	433b      	orrs	r3, r7
    61d4:	2e00      	cmp	r6, #0
    61d6:	d000      	beq.n	61da <__aeabi_dadd+0x40a>
    61d8:	e0ab      	b.n	6332 <__aeabi_dadd+0x562>
    61da:	2b00      	cmp	r3, #0
    61dc:	d100      	bne.n	61e0 <__aeabi_dadd+0x410>
    61de:	e0e7      	b.n	63b0 <__aeabi_dadd+0x5e0>
    61e0:	000b      	movs	r3, r1
    61e2:	4313      	orrs	r3, r2
    61e4:	d100      	bne.n	61e8 <__aeabi_dadd+0x418>
    61e6:	e677      	b.n	5ed8 <__aeabi_dadd+0x108>
    61e8:	18ba      	adds	r2, r7, r2
    61ea:	42ba      	cmp	r2, r7
    61ec:	41bf      	sbcs	r7, r7
    61ee:	1864      	adds	r4, r4, r1
    61f0:	427f      	negs	r7, r7
    61f2:	19e4      	adds	r4, r4, r7
    61f4:	0223      	lsls	r3, r4, #8
    61f6:	d400      	bmi.n	61fa <__aeabi_dadd+0x42a>
    61f8:	e0f2      	b.n	63e0 <__aeabi_dadd+0x610>
    61fa:	4b7c      	ldr	r3, [pc, #496]	; (63ec <__aeabi_dadd+0x61c>)
    61fc:	0017      	movs	r7, r2
    61fe:	401c      	ands	r4, r3
    6200:	0006      	movs	r6, r0
    6202:	e669      	b.n	5ed8 <__aeabi_dadd+0x108>
    6204:	0020      	movs	r0, r4
    6206:	4338      	orrs	r0, r7
    6208:	2e00      	cmp	r6, #0
    620a:	d1d1      	bne.n	61b0 <__aeabi_dadd+0x3e0>
    620c:	2800      	cmp	r0, #0
    620e:	d15b      	bne.n	62c8 <__aeabi_dadd+0x4f8>
    6210:	001c      	movs	r4, r3
    6212:	4314      	orrs	r4, r2
    6214:	d100      	bne.n	6218 <__aeabi_dadd+0x448>
    6216:	e0a8      	b.n	636a <__aeabi_dadd+0x59a>
    6218:	001c      	movs	r4, r3
    621a:	0017      	movs	r7, r2
    621c:	46d8      	mov	r8, fp
    621e:	e65b      	b.n	5ed8 <__aeabi_dadd+0x108>
    6220:	0006      	movs	r6, r0
    6222:	2400      	movs	r4, #0
    6224:	2700      	movs	r7, #0
    6226:	e697      	b.n	5f58 <__aeabi_dadd+0x188>
    6228:	4650      	mov	r0, sl
    622a:	000b      	movs	r3, r1
    622c:	3820      	subs	r0, #32
    622e:	40c3      	lsrs	r3, r0
    6230:	4699      	mov	r9, r3
    6232:	4653      	mov	r3, sl
    6234:	2b20      	cmp	r3, #32
    6236:	d100      	bne.n	623a <__aeabi_dadd+0x46a>
    6238:	e095      	b.n	6366 <__aeabi_dadd+0x596>
    623a:	2340      	movs	r3, #64	; 0x40
    623c:	4650      	mov	r0, sl
    623e:	1a1b      	subs	r3, r3, r0
    6240:	4099      	lsls	r1, r3
    6242:	430a      	orrs	r2, r1
    6244:	1e51      	subs	r1, r2, #1
    6246:	418a      	sbcs	r2, r1
    6248:	464b      	mov	r3, r9
    624a:	2100      	movs	r1, #0
    624c:	431a      	orrs	r2, r3
    624e:	e69f      	b.n	5f90 <__aeabi_dadd+0x1c0>
    6250:	2e00      	cmp	r6, #0
    6252:	d130      	bne.n	62b6 <__aeabi_dadd+0x4e6>
    6254:	0026      	movs	r6, r4
    6256:	433e      	orrs	r6, r7
    6258:	d067      	beq.n	632a <__aeabi_dadd+0x55a>
    625a:	43db      	mvns	r3, r3
    625c:	469a      	mov	sl, r3
    625e:	2b00      	cmp	r3, #0
    6260:	d01c      	beq.n	629c <__aeabi_dadd+0x4cc>
    6262:	4e61      	ldr	r6, [pc, #388]	; (63e8 <__aeabi_dadd+0x618>)
    6264:	42b0      	cmp	r0, r6
    6266:	d060      	beq.n	632a <__aeabi_dadd+0x55a>
    6268:	4653      	mov	r3, sl
    626a:	2b38      	cmp	r3, #56	; 0x38
    626c:	dd00      	ble.n	6270 <__aeabi_dadd+0x4a0>
    626e:	e096      	b.n	639e <__aeabi_dadd+0x5ce>
    6270:	2b1f      	cmp	r3, #31
    6272:	dd00      	ble.n	6276 <__aeabi_dadd+0x4a6>
    6274:	e09f      	b.n	63b6 <__aeabi_dadd+0x5e6>
    6276:	2620      	movs	r6, #32
    6278:	1af3      	subs	r3, r6, r3
    627a:	0026      	movs	r6, r4
    627c:	409e      	lsls	r6, r3
    627e:	469c      	mov	ip, r3
    6280:	46b3      	mov	fp, r6
    6282:	4653      	mov	r3, sl
    6284:	003e      	movs	r6, r7
    6286:	40de      	lsrs	r6, r3
    6288:	0033      	movs	r3, r6
    628a:	465e      	mov	r6, fp
    628c:	431e      	orrs	r6, r3
    628e:	4663      	mov	r3, ip
    6290:	409f      	lsls	r7, r3
    6292:	1e7b      	subs	r3, r7, #1
    6294:	419f      	sbcs	r7, r3
    6296:	4653      	mov	r3, sl
    6298:	40dc      	lsrs	r4, r3
    629a:	4337      	orrs	r7, r6
    629c:	18bf      	adds	r7, r7, r2
    629e:	4297      	cmp	r7, r2
    62a0:	4192      	sbcs	r2, r2
    62a2:	1864      	adds	r4, r4, r1
    62a4:	4252      	negs	r2, r2
    62a6:	18a4      	adds	r4, r4, r2
    62a8:	0006      	movs	r6, r0
    62aa:	e678      	b.n	5f9e <__aeabi_dadd+0x1ce>
    62ac:	4327      	orrs	r7, r4
    62ae:	1e7c      	subs	r4, r7, #1
    62b0:	41a7      	sbcs	r7, r4
    62b2:	2400      	movs	r4, #0
    62b4:	e737      	b.n	6126 <__aeabi_dadd+0x356>
    62b6:	4e4c      	ldr	r6, [pc, #304]	; (63e8 <__aeabi_dadd+0x618>)
    62b8:	42b0      	cmp	r0, r6
    62ba:	d036      	beq.n	632a <__aeabi_dadd+0x55a>
    62bc:	2680      	movs	r6, #128	; 0x80
    62be:	425b      	negs	r3, r3
    62c0:	0436      	lsls	r6, r6, #16
    62c2:	469a      	mov	sl, r3
    62c4:	4334      	orrs	r4, r6
    62c6:	e7cf      	b.n	6268 <__aeabi_dadd+0x498>
    62c8:	0018      	movs	r0, r3
    62ca:	4310      	orrs	r0, r2
    62cc:	d100      	bne.n	62d0 <__aeabi_dadd+0x500>
    62ce:	e603      	b.n	5ed8 <__aeabi_dadd+0x108>
    62d0:	1ab8      	subs	r0, r7, r2
    62d2:	4684      	mov	ip, r0
    62d4:	4567      	cmp	r7, ip
    62d6:	41ad      	sbcs	r5, r5
    62d8:	1ae0      	subs	r0, r4, r3
    62da:	426d      	negs	r5, r5
    62dc:	1b40      	subs	r0, r0, r5
    62de:	0205      	lsls	r5, r0, #8
    62e0:	d400      	bmi.n	62e4 <__aeabi_dadd+0x514>
    62e2:	e62c      	b.n	5f3e <__aeabi_dadd+0x16e>
    62e4:	1bd7      	subs	r7, r2, r7
    62e6:	42ba      	cmp	r2, r7
    62e8:	4192      	sbcs	r2, r2
    62ea:	1b1c      	subs	r4, r3, r4
    62ec:	4252      	negs	r2, r2
    62ee:	1aa4      	subs	r4, r4, r2
    62f0:	46d8      	mov	r8, fp
    62f2:	e5f1      	b.n	5ed8 <__aeabi_dadd+0x108>
    62f4:	0018      	movs	r0, r3
    62f6:	4310      	orrs	r0, r2
    62f8:	d100      	bne.n	62fc <__aeabi_dadd+0x52c>
    62fa:	e763      	b.n	61c4 <__aeabi_dadd+0x3f4>
    62fc:	08f8      	lsrs	r0, r7, #3
    62fe:	0767      	lsls	r7, r4, #29
    6300:	4307      	orrs	r7, r0
    6302:	2080      	movs	r0, #128	; 0x80
    6304:	08e4      	lsrs	r4, r4, #3
    6306:	0300      	lsls	r0, r0, #12
    6308:	4204      	tst	r4, r0
    630a:	d008      	beq.n	631e <__aeabi_dadd+0x54e>
    630c:	08dd      	lsrs	r5, r3, #3
    630e:	4205      	tst	r5, r0
    6310:	d105      	bne.n	631e <__aeabi_dadd+0x54e>
    6312:	08d2      	lsrs	r2, r2, #3
    6314:	0759      	lsls	r1, r3, #29
    6316:	4311      	orrs	r1, r2
    6318:	000f      	movs	r7, r1
    631a:	002c      	movs	r4, r5
    631c:	46d8      	mov	r8, fp
    631e:	0f7b      	lsrs	r3, r7, #29
    6320:	00e4      	lsls	r4, r4, #3
    6322:	431c      	orrs	r4, r3
    6324:	00ff      	lsls	r7, r7, #3
    6326:	4e30      	ldr	r6, [pc, #192]	; (63e8 <__aeabi_dadd+0x618>)
    6328:	e5d6      	b.n	5ed8 <__aeabi_dadd+0x108>
    632a:	000c      	movs	r4, r1
    632c:	0017      	movs	r7, r2
    632e:	0006      	movs	r6, r0
    6330:	e5d2      	b.n	5ed8 <__aeabi_dadd+0x108>
    6332:	2b00      	cmp	r3, #0
    6334:	d038      	beq.n	63a8 <__aeabi_dadd+0x5d8>
    6336:	000b      	movs	r3, r1
    6338:	4313      	orrs	r3, r2
    633a:	d100      	bne.n	633e <__aeabi_dadd+0x56e>
    633c:	e742      	b.n	61c4 <__aeabi_dadd+0x3f4>
    633e:	08f8      	lsrs	r0, r7, #3
    6340:	0767      	lsls	r7, r4, #29
    6342:	4307      	orrs	r7, r0
    6344:	2080      	movs	r0, #128	; 0x80
    6346:	08e4      	lsrs	r4, r4, #3
    6348:	0300      	lsls	r0, r0, #12
    634a:	4204      	tst	r4, r0
    634c:	d0e7      	beq.n	631e <__aeabi_dadd+0x54e>
    634e:	08cb      	lsrs	r3, r1, #3
    6350:	4203      	tst	r3, r0
    6352:	d1e4      	bne.n	631e <__aeabi_dadd+0x54e>
    6354:	08d2      	lsrs	r2, r2, #3
    6356:	0749      	lsls	r1, r1, #29
    6358:	4311      	orrs	r1, r2
    635a:	000f      	movs	r7, r1
    635c:	001c      	movs	r4, r3
    635e:	e7de      	b.n	631e <__aeabi_dadd+0x54e>
    6360:	2700      	movs	r7, #0
    6362:	2400      	movs	r4, #0
    6364:	e5d5      	b.n	5f12 <__aeabi_dadd+0x142>
    6366:	2100      	movs	r1, #0
    6368:	e76b      	b.n	6242 <__aeabi_dadd+0x472>
    636a:	2500      	movs	r5, #0
    636c:	2700      	movs	r7, #0
    636e:	e5f3      	b.n	5f58 <__aeabi_dadd+0x188>
    6370:	464e      	mov	r6, r9
    6372:	0025      	movs	r5, r4
    6374:	3e20      	subs	r6, #32
    6376:	40f5      	lsrs	r5, r6
    6378:	464b      	mov	r3, r9
    637a:	002e      	movs	r6, r5
    637c:	2b20      	cmp	r3, #32
    637e:	d02d      	beq.n	63dc <__aeabi_dadd+0x60c>
    6380:	2540      	movs	r5, #64	; 0x40
    6382:	1aed      	subs	r5, r5, r3
    6384:	40ac      	lsls	r4, r5
    6386:	4327      	orrs	r7, r4
    6388:	1e7c      	subs	r4, r7, #1
    638a:	41a7      	sbcs	r7, r4
    638c:	2400      	movs	r4, #0
    638e:	4337      	orrs	r7, r6
    6390:	e6c9      	b.n	6126 <__aeabi_dadd+0x356>
    6392:	2480      	movs	r4, #128	; 0x80
    6394:	2500      	movs	r5, #0
    6396:	0324      	lsls	r4, r4, #12
    6398:	4e13      	ldr	r6, [pc, #76]	; (63e8 <__aeabi_dadd+0x618>)
    639a:	2700      	movs	r7, #0
    639c:	e5dc      	b.n	5f58 <__aeabi_dadd+0x188>
    639e:	4327      	orrs	r7, r4
    63a0:	1e7c      	subs	r4, r7, #1
    63a2:	41a7      	sbcs	r7, r4
    63a4:	2400      	movs	r4, #0
    63a6:	e779      	b.n	629c <__aeabi_dadd+0x4cc>
    63a8:	000c      	movs	r4, r1
    63aa:	0017      	movs	r7, r2
    63ac:	4e0e      	ldr	r6, [pc, #56]	; (63e8 <__aeabi_dadd+0x618>)
    63ae:	e593      	b.n	5ed8 <__aeabi_dadd+0x108>
    63b0:	000c      	movs	r4, r1
    63b2:	0017      	movs	r7, r2
    63b4:	e590      	b.n	5ed8 <__aeabi_dadd+0x108>
    63b6:	4656      	mov	r6, sl
    63b8:	0023      	movs	r3, r4
    63ba:	3e20      	subs	r6, #32
    63bc:	40f3      	lsrs	r3, r6
    63be:	4699      	mov	r9, r3
    63c0:	4653      	mov	r3, sl
    63c2:	2b20      	cmp	r3, #32
    63c4:	d00e      	beq.n	63e4 <__aeabi_dadd+0x614>
    63c6:	2340      	movs	r3, #64	; 0x40
    63c8:	4656      	mov	r6, sl
    63ca:	1b9b      	subs	r3, r3, r6
    63cc:	409c      	lsls	r4, r3
    63ce:	4327      	orrs	r7, r4
    63d0:	1e7c      	subs	r4, r7, #1
    63d2:	41a7      	sbcs	r7, r4
    63d4:	464b      	mov	r3, r9
    63d6:	2400      	movs	r4, #0
    63d8:	431f      	orrs	r7, r3
    63da:	e75f      	b.n	629c <__aeabi_dadd+0x4cc>
    63dc:	2400      	movs	r4, #0
    63de:	e7d2      	b.n	6386 <__aeabi_dadd+0x5b6>
    63e0:	0017      	movs	r7, r2
    63e2:	e5b2      	b.n	5f4a <__aeabi_dadd+0x17a>
    63e4:	2400      	movs	r4, #0
    63e6:	e7f2      	b.n	63ce <__aeabi_dadd+0x5fe>
    63e8:	000007ff 	.word	0x000007ff
    63ec:	ff7fffff 	.word	0xff7fffff

000063f0 <__aeabi_ddiv>:
    63f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63f2:	4657      	mov	r7, sl
    63f4:	4645      	mov	r5, r8
    63f6:	46de      	mov	lr, fp
    63f8:	464e      	mov	r6, r9
    63fa:	b5e0      	push	{r5, r6, r7, lr}
    63fc:	004c      	lsls	r4, r1, #1
    63fe:	030e      	lsls	r6, r1, #12
    6400:	b087      	sub	sp, #28
    6402:	4683      	mov	fp, r0
    6404:	4692      	mov	sl, r2
    6406:	001d      	movs	r5, r3
    6408:	4680      	mov	r8, r0
    640a:	0b36      	lsrs	r6, r6, #12
    640c:	0d64      	lsrs	r4, r4, #21
    640e:	0fcf      	lsrs	r7, r1, #31
    6410:	2c00      	cmp	r4, #0
    6412:	d04f      	beq.n	64b4 <__aeabi_ddiv+0xc4>
    6414:	4b6f      	ldr	r3, [pc, #444]	; (65d4 <__aeabi_ddiv+0x1e4>)
    6416:	429c      	cmp	r4, r3
    6418:	d035      	beq.n	6486 <__aeabi_ddiv+0x96>
    641a:	2380      	movs	r3, #128	; 0x80
    641c:	0f42      	lsrs	r2, r0, #29
    641e:	041b      	lsls	r3, r3, #16
    6420:	00f6      	lsls	r6, r6, #3
    6422:	4313      	orrs	r3, r2
    6424:	4333      	orrs	r3, r6
    6426:	4699      	mov	r9, r3
    6428:	00c3      	lsls	r3, r0, #3
    642a:	4698      	mov	r8, r3
    642c:	4b6a      	ldr	r3, [pc, #424]	; (65d8 <__aeabi_ddiv+0x1e8>)
    642e:	2600      	movs	r6, #0
    6430:	469c      	mov	ip, r3
    6432:	2300      	movs	r3, #0
    6434:	4464      	add	r4, ip
    6436:	9303      	str	r3, [sp, #12]
    6438:	032b      	lsls	r3, r5, #12
    643a:	0b1b      	lsrs	r3, r3, #12
    643c:	469b      	mov	fp, r3
    643e:	006b      	lsls	r3, r5, #1
    6440:	0fed      	lsrs	r5, r5, #31
    6442:	4650      	mov	r0, sl
    6444:	0d5b      	lsrs	r3, r3, #21
    6446:	9501      	str	r5, [sp, #4]
    6448:	d05e      	beq.n	6508 <__aeabi_ddiv+0x118>
    644a:	4a62      	ldr	r2, [pc, #392]	; (65d4 <__aeabi_ddiv+0x1e4>)
    644c:	4293      	cmp	r3, r2
    644e:	d053      	beq.n	64f8 <__aeabi_ddiv+0x108>
    6450:	465a      	mov	r2, fp
    6452:	00d1      	lsls	r1, r2, #3
    6454:	2280      	movs	r2, #128	; 0x80
    6456:	0f40      	lsrs	r0, r0, #29
    6458:	0412      	lsls	r2, r2, #16
    645a:	4302      	orrs	r2, r0
    645c:	430a      	orrs	r2, r1
    645e:	4693      	mov	fp, r2
    6460:	4652      	mov	r2, sl
    6462:	00d1      	lsls	r1, r2, #3
    6464:	4a5c      	ldr	r2, [pc, #368]	; (65d8 <__aeabi_ddiv+0x1e8>)
    6466:	4694      	mov	ip, r2
    6468:	2200      	movs	r2, #0
    646a:	4463      	add	r3, ip
    646c:	0038      	movs	r0, r7
    646e:	4068      	eors	r0, r5
    6470:	4684      	mov	ip, r0
    6472:	9002      	str	r0, [sp, #8]
    6474:	1ae4      	subs	r4, r4, r3
    6476:	4316      	orrs	r6, r2
    6478:	2e0f      	cmp	r6, #15
    647a:	d900      	bls.n	647e <__aeabi_ddiv+0x8e>
    647c:	e0b4      	b.n	65e8 <__aeabi_ddiv+0x1f8>
    647e:	4b57      	ldr	r3, [pc, #348]	; (65dc <__aeabi_ddiv+0x1ec>)
    6480:	00b6      	lsls	r6, r6, #2
    6482:	599b      	ldr	r3, [r3, r6]
    6484:	469f      	mov	pc, r3
    6486:	0003      	movs	r3, r0
    6488:	4333      	orrs	r3, r6
    648a:	4699      	mov	r9, r3
    648c:	d16c      	bne.n	6568 <__aeabi_ddiv+0x178>
    648e:	2300      	movs	r3, #0
    6490:	4698      	mov	r8, r3
    6492:	3302      	adds	r3, #2
    6494:	2608      	movs	r6, #8
    6496:	9303      	str	r3, [sp, #12]
    6498:	e7ce      	b.n	6438 <__aeabi_ddiv+0x48>
    649a:	46cb      	mov	fp, r9
    649c:	4641      	mov	r1, r8
    649e:	9a03      	ldr	r2, [sp, #12]
    64a0:	9701      	str	r7, [sp, #4]
    64a2:	2a02      	cmp	r2, #2
    64a4:	d165      	bne.n	6572 <__aeabi_ddiv+0x182>
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	4c4a      	ldr	r4, [pc, #296]	; (65d4 <__aeabi_ddiv+0x1e4>)
    64aa:	469c      	mov	ip, r3
    64ac:	2300      	movs	r3, #0
    64ae:	2200      	movs	r2, #0
    64b0:	4698      	mov	r8, r3
    64b2:	e06b      	b.n	658c <__aeabi_ddiv+0x19c>
    64b4:	0003      	movs	r3, r0
    64b6:	4333      	orrs	r3, r6
    64b8:	4699      	mov	r9, r3
    64ba:	d04e      	beq.n	655a <__aeabi_ddiv+0x16a>
    64bc:	2e00      	cmp	r6, #0
    64be:	d100      	bne.n	64c2 <__aeabi_ddiv+0xd2>
    64c0:	e1bc      	b.n	683c <__aeabi_ddiv+0x44c>
    64c2:	0030      	movs	r0, r6
    64c4:	f001 fa2c 	bl	7920 <__clzsi2>
    64c8:	0003      	movs	r3, r0
    64ca:	3b0b      	subs	r3, #11
    64cc:	2b1c      	cmp	r3, #28
    64ce:	dd00      	ble.n	64d2 <__aeabi_ddiv+0xe2>
    64d0:	e1ac      	b.n	682c <__aeabi_ddiv+0x43c>
    64d2:	221d      	movs	r2, #29
    64d4:	1ad3      	subs	r3, r2, r3
    64d6:	465a      	mov	r2, fp
    64d8:	0001      	movs	r1, r0
    64da:	40da      	lsrs	r2, r3
    64dc:	3908      	subs	r1, #8
    64de:	408e      	lsls	r6, r1
    64e0:	0013      	movs	r3, r2
    64e2:	4333      	orrs	r3, r6
    64e4:	4699      	mov	r9, r3
    64e6:	465b      	mov	r3, fp
    64e8:	408b      	lsls	r3, r1
    64ea:	4698      	mov	r8, r3
    64ec:	2300      	movs	r3, #0
    64ee:	4c3c      	ldr	r4, [pc, #240]	; (65e0 <__aeabi_ddiv+0x1f0>)
    64f0:	2600      	movs	r6, #0
    64f2:	1a24      	subs	r4, r4, r0
    64f4:	9303      	str	r3, [sp, #12]
    64f6:	e79f      	b.n	6438 <__aeabi_ddiv+0x48>
    64f8:	4651      	mov	r1, sl
    64fa:	465a      	mov	r2, fp
    64fc:	4311      	orrs	r1, r2
    64fe:	d129      	bne.n	6554 <__aeabi_ddiv+0x164>
    6500:	2200      	movs	r2, #0
    6502:	4693      	mov	fp, r2
    6504:	3202      	adds	r2, #2
    6506:	e7b1      	b.n	646c <__aeabi_ddiv+0x7c>
    6508:	4659      	mov	r1, fp
    650a:	4301      	orrs	r1, r0
    650c:	d01e      	beq.n	654c <__aeabi_ddiv+0x15c>
    650e:	465b      	mov	r3, fp
    6510:	2b00      	cmp	r3, #0
    6512:	d100      	bne.n	6516 <__aeabi_ddiv+0x126>
    6514:	e19e      	b.n	6854 <__aeabi_ddiv+0x464>
    6516:	4658      	mov	r0, fp
    6518:	f001 fa02 	bl	7920 <__clzsi2>
    651c:	0003      	movs	r3, r0
    651e:	3b0b      	subs	r3, #11
    6520:	2b1c      	cmp	r3, #28
    6522:	dd00      	ble.n	6526 <__aeabi_ddiv+0x136>
    6524:	e18f      	b.n	6846 <__aeabi_ddiv+0x456>
    6526:	0002      	movs	r2, r0
    6528:	4659      	mov	r1, fp
    652a:	3a08      	subs	r2, #8
    652c:	4091      	lsls	r1, r2
    652e:	468b      	mov	fp, r1
    6530:	211d      	movs	r1, #29
    6532:	1acb      	subs	r3, r1, r3
    6534:	4651      	mov	r1, sl
    6536:	40d9      	lsrs	r1, r3
    6538:	000b      	movs	r3, r1
    653a:	4659      	mov	r1, fp
    653c:	430b      	orrs	r3, r1
    653e:	4651      	mov	r1, sl
    6540:	469b      	mov	fp, r3
    6542:	4091      	lsls	r1, r2
    6544:	4b26      	ldr	r3, [pc, #152]	; (65e0 <__aeabi_ddiv+0x1f0>)
    6546:	2200      	movs	r2, #0
    6548:	1a1b      	subs	r3, r3, r0
    654a:	e78f      	b.n	646c <__aeabi_ddiv+0x7c>
    654c:	2300      	movs	r3, #0
    654e:	2201      	movs	r2, #1
    6550:	469b      	mov	fp, r3
    6552:	e78b      	b.n	646c <__aeabi_ddiv+0x7c>
    6554:	4651      	mov	r1, sl
    6556:	2203      	movs	r2, #3
    6558:	e788      	b.n	646c <__aeabi_ddiv+0x7c>
    655a:	2300      	movs	r3, #0
    655c:	4698      	mov	r8, r3
    655e:	3301      	adds	r3, #1
    6560:	2604      	movs	r6, #4
    6562:	2400      	movs	r4, #0
    6564:	9303      	str	r3, [sp, #12]
    6566:	e767      	b.n	6438 <__aeabi_ddiv+0x48>
    6568:	2303      	movs	r3, #3
    656a:	46b1      	mov	r9, r6
    656c:	9303      	str	r3, [sp, #12]
    656e:	260c      	movs	r6, #12
    6570:	e762      	b.n	6438 <__aeabi_ddiv+0x48>
    6572:	2a03      	cmp	r2, #3
    6574:	d100      	bne.n	6578 <__aeabi_ddiv+0x188>
    6576:	e25c      	b.n	6a32 <__aeabi_ddiv+0x642>
    6578:	9b01      	ldr	r3, [sp, #4]
    657a:	2a01      	cmp	r2, #1
    657c:	d000      	beq.n	6580 <__aeabi_ddiv+0x190>
    657e:	e1e4      	b.n	694a <__aeabi_ddiv+0x55a>
    6580:	4013      	ands	r3, r2
    6582:	469c      	mov	ip, r3
    6584:	2300      	movs	r3, #0
    6586:	2400      	movs	r4, #0
    6588:	2200      	movs	r2, #0
    658a:	4698      	mov	r8, r3
    658c:	2100      	movs	r1, #0
    658e:	0312      	lsls	r2, r2, #12
    6590:	0b13      	lsrs	r3, r2, #12
    6592:	0d0a      	lsrs	r2, r1, #20
    6594:	0512      	lsls	r2, r2, #20
    6596:	431a      	orrs	r2, r3
    6598:	0523      	lsls	r3, r4, #20
    659a:	4c12      	ldr	r4, [pc, #72]	; (65e4 <__aeabi_ddiv+0x1f4>)
    659c:	4640      	mov	r0, r8
    659e:	4022      	ands	r2, r4
    65a0:	4313      	orrs	r3, r2
    65a2:	4662      	mov	r2, ip
    65a4:	005b      	lsls	r3, r3, #1
    65a6:	07d2      	lsls	r2, r2, #31
    65a8:	085b      	lsrs	r3, r3, #1
    65aa:	4313      	orrs	r3, r2
    65ac:	0019      	movs	r1, r3
    65ae:	b007      	add	sp, #28
    65b0:	bc3c      	pop	{r2, r3, r4, r5}
    65b2:	4690      	mov	r8, r2
    65b4:	4699      	mov	r9, r3
    65b6:	46a2      	mov	sl, r4
    65b8:	46ab      	mov	fp, r5
    65ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65bc:	2300      	movs	r3, #0
    65be:	2280      	movs	r2, #128	; 0x80
    65c0:	469c      	mov	ip, r3
    65c2:	0312      	lsls	r2, r2, #12
    65c4:	4698      	mov	r8, r3
    65c6:	4c03      	ldr	r4, [pc, #12]	; (65d4 <__aeabi_ddiv+0x1e4>)
    65c8:	e7e0      	b.n	658c <__aeabi_ddiv+0x19c>
    65ca:	2300      	movs	r3, #0
    65cc:	4c01      	ldr	r4, [pc, #4]	; (65d4 <__aeabi_ddiv+0x1e4>)
    65ce:	2200      	movs	r2, #0
    65d0:	4698      	mov	r8, r3
    65d2:	e7db      	b.n	658c <__aeabi_ddiv+0x19c>
    65d4:	000007ff 	.word	0x000007ff
    65d8:	fffffc01 	.word	0xfffffc01
    65dc:	00007f68 	.word	0x00007f68
    65e0:	fffffc0d 	.word	0xfffffc0d
    65e4:	800fffff 	.word	0x800fffff
    65e8:	45d9      	cmp	r9, fp
    65ea:	d900      	bls.n	65ee <__aeabi_ddiv+0x1fe>
    65ec:	e139      	b.n	6862 <__aeabi_ddiv+0x472>
    65ee:	d100      	bne.n	65f2 <__aeabi_ddiv+0x202>
    65f0:	e134      	b.n	685c <__aeabi_ddiv+0x46c>
    65f2:	2300      	movs	r3, #0
    65f4:	4646      	mov	r6, r8
    65f6:	464d      	mov	r5, r9
    65f8:	469a      	mov	sl, r3
    65fa:	3c01      	subs	r4, #1
    65fc:	465b      	mov	r3, fp
    65fe:	0e0a      	lsrs	r2, r1, #24
    6600:	021b      	lsls	r3, r3, #8
    6602:	431a      	orrs	r2, r3
    6604:	020b      	lsls	r3, r1, #8
    6606:	0c17      	lsrs	r7, r2, #16
    6608:	9303      	str	r3, [sp, #12]
    660a:	0413      	lsls	r3, r2, #16
    660c:	0c1b      	lsrs	r3, r3, #16
    660e:	0039      	movs	r1, r7
    6610:	0028      	movs	r0, r5
    6612:	4690      	mov	r8, r2
    6614:	9301      	str	r3, [sp, #4]
    6616:	f7ff fa27 	bl	5a68 <__udivsi3>
    661a:	0002      	movs	r2, r0
    661c:	9b01      	ldr	r3, [sp, #4]
    661e:	4683      	mov	fp, r0
    6620:	435a      	muls	r2, r3
    6622:	0028      	movs	r0, r5
    6624:	0039      	movs	r1, r7
    6626:	4691      	mov	r9, r2
    6628:	f7ff faa4 	bl	5b74 <__aeabi_uidivmod>
    662c:	0c35      	lsrs	r5, r6, #16
    662e:	0409      	lsls	r1, r1, #16
    6630:	430d      	orrs	r5, r1
    6632:	45a9      	cmp	r9, r5
    6634:	d90d      	bls.n	6652 <__aeabi_ddiv+0x262>
    6636:	465b      	mov	r3, fp
    6638:	4445      	add	r5, r8
    663a:	3b01      	subs	r3, #1
    663c:	45a8      	cmp	r8, r5
    663e:	d900      	bls.n	6642 <__aeabi_ddiv+0x252>
    6640:	e13a      	b.n	68b8 <__aeabi_ddiv+0x4c8>
    6642:	45a9      	cmp	r9, r5
    6644:	d800      	bhi.n	6648 <__aeabi_ddiv+0x258>
    6646:	e137      	b.n	68b8 <__aeabi_ddiv+0x4c8>
    6648:	2302      	movs	r3, #2
    664a:	425b      	negs	r3, r3
    664c:	469c      	mov	ip, r3
    664e:	4445      	add	r5, r8
    6650:	44e3      	add	fp, ip
    6652:	464b      	mov	r3, r9
    6654:	1aeb      	subs	r3, r5, r3
    6656:	0039      	movs	r1, r7
    6658:	0018      	movs	r0, r3
    665a:	9304      	str	r3, [sp, #16]
    665c:	f7ff fa04 	bl	5a68 <__udivsi3>
    6660:	9b01      	ldr	r3, [sp, #4]
    6662:	0005      	movs	r5, r0
    6664:	4343      	muls	r3, r0
    6666:	0039      	movs	r1, r7
    6668:	9804      	ldr	r0, [sp, #16]
    666a:	4699      	mov	r9, r3
    666c:	f7ff fa82 	bl	5b74 <__aeabi_uidivmod>
    6670:	0433      	lsls	r3, r6, #16
    6672:	0409      	lsls	r1, r1, #16
    6674:	0c1b      	lsrs	r3, r3, #16
    6676:	430b      	orrs	r3, r1
    6678:	4599      	cmp	r9, r3
    667a:	d909      	bls.n	6690 <__aeabi_ddiv+0x2a0>
    667c:	4443      	add	r3, r8
    667e:	1e6a      	subs	r2, r5, #1
    6680:	4598      	cmp	r8, r3
    6682:	d900      	bls.n	6686 <__aeabi_ddiv+0x296>
    6684:	e11a      	b.n	68bc <__aeabi_ddiv+0x4cc>
    6686:	4599      	cmp	r9, r3
    6688:	d800      	bhi.n	668c <__aeabi_ddiv+0x29c>
    668a:	e117      	b.n	68bc <__aeabi_ddiv+0x4cc>
    668c:	3d02      	subs	r5, #2
    668e:	4443      	add	r3, r8
    6690:	464a      	mov	r2, r9
    6692:	1a9b      	subs	r3, r3, r2
    6694:	465a      	mov	r2, fp
    6696:	0412      	lsls	r2, r2, #16
    6698:	432a      	orrs	r2, r5
    669a:	9903      	ldr	r1, [sp, #12]
    669c:	4693      	mov	fp, r2
    669e:	0c10      	lsrs	r0, r2, #16
    66a0:	0c0a      	lsrs	r2, r1, #16
    66a2:	4691      	mov	r9, r2
    66a4:	0409      	lsls	r1, r1, #16
    66a6:	465a      	mov	r2, fp
    66a8:	0c09      	lsrs	r1, r1, #16
    66aa:	464e      	mov	r6, r9
    66ac:	000d      	movs	r5, r1
    66ae:	0412      	lsls	r2, r2, #16
    66b0:	0c12      	lsrs	r2, r2, #16
    66b2:	4345      	muls	r5, r0
    66b4:	9105      	str	r1, [sp, #20]
    66b6:	4351      	muls	r1, r2
    66b8:	4372      	muls	r2, r6
    66ba:	4370      	muls	r0, r6
    66bc:	1952      	adds	r2, r2, r5
    66be:	0c0e      	lsrs	r6, r1, #16
    66c0:	18b2      	adds	r2, r6, r2
    66c2:	4295      	cmp	r5, r2
    66c4:	d903      	bls.n	66ce <__aeabi_ddiv+0x2de>
    66c6:	2580      	movs	r5, #128	; 0x80
    66c8:	026d      	lsls	r5, r5, #9
    66ca:	46ac      	mov	ip, r5
    66cc:	4460      	add	r0, ip
    66ce:	0c15      	lsrs	r5, r2, #16
    66d0:	0409      	lsls	r1, r1, #16
    66d2:	0412      	lsls	r2, r2, #16
    66d4:	0c09      	lsrs	r1, r1, #16
    66d6:	1828      	adds	r0, r5, r0
    66d8:	1852      	adds	r2, r2, r1
    66da:	4283      	cmp	r3, r0
    66dc:	d200      	bcs.n	66e0 <__aeabi_ddiv+0x2f0>
    66de:	e0ce      	b.n	687e <__aeabi_ddiv+0x48e>
    66e0:	d100      	bne.n	66e4 <__aeabi_ddiv+0x2f4>
    66e2:	e0c8      	b.n	6876 <__aeabi_ddiv+0x486>
    66e4:	1a1d      	subs	r5, r3, r0
    66e6:	4653      	mov	r3, sl
    66e8:	1a9e      	subs	r6, r3, r2
    66ea:	45b2      	cmp	sl, r6
    66ec:	4192      	sbcs	r2, r2
    66ee:	4252      	negs	r2, r2
    66f0:	1aab      	subs	r3, r5, r2
    66f2:	469a      	mov	sl, r3
    66f4:	4598      	cmp	r8, r3
    66f6:	d100      	bne.n	66fa <__aeabi_ddiv+0x30a>
    66f8:	e117      	b.n	692a <__aeabi_ddiv+0x53a>
    66fa:	0039      	movs	r1, r7
    66fc:	0018      	movs	r0, r3
    66fe:	f7ff f9b3 	bl	5a68 <__udivsi3>
    6702:	9b01      	ldr	r3, [sp, #4]
    6704:	0005      	movs	r5, r0
    6706:	4343      	muls	r3, r0
    6708:	0039      	movs	r1, r7
    670a:	4650      	mov	r0, sl
    670c:	9304      	str	r3, [sp, #16]
    670e:	f7ff fa31 	bl	5b74 <__aeabi_uidivmod>
    6712:	9804      	ldr	r0, [sp, #16]
    6714:	040b      	lsls	r3, r1, #16
    6716:	0c31      	lsrs	r1, r6, #16
    6718:	4319      	orrs	r1, r3
    671a:	4288      	cmp	r0, r1
    671c:	d909      	bls.n	6732 <__aeabi_ddiv+0x342>
    671e:	4441      	add	r1, r8
    6720:	1e6b      	subs	r3, r5, #1
    6722:	4588      	cmp	r8, r1
    6724:	d900      	bls.n	6728 <__aeabi_ddiv+0x338>
    6726:	e107      	b.n	6938 <__aeabi_ddiv+0x548>
    6728:	4288      	cmp	r0, r1
    672a:	d800      	bhi.n	672e <__aeabi_ddiv+0x33e>
    672c:	e104      	b.n	6938 <__aeabi_ddiv+0x548>
    672e:	3d02      	subs	r5, #2
    6730:	4441      	add	r1, r8
    6732:	9b04      	ldr	r3, [sp, #16]
    6734:	1acb      	subs	r3, r1, r3
    6736:	0018      	movs	r0, r3
    6738:	0039      	movs	r1, r7
    673a:	9304      	str	r3, [sp, #16]
    673c:	f7ff f994 	bl	5a68 <__udivsi3>
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	4682      	mov	sl, r0
    6744:	4343      	muls	r3, r0
    6746:	0039      	movs	r1, r7
    6748:	9804      	ldr	r0, [sp, #16]
    674a:	9301      	str	r3, [sp, #4]
    674c:	f7ff fa12 	bl	5b74 <__aeabi_uidivmod>
    6750:	9801      	ldr	r0, [sp, #4]
    6752:	040b      	lsls	r3, r1, #16
    6754:	0431      	lsls	r1, r6, #16
    6756:	0c09      	lsrs	r1, r1, #16
    6758:	4319      	orrs	r1, r3
    675a:	4288      	cmp	r0, r1
    675c:	d90d      	bls.n	677a <__aeabi_ddiv+0x38a>
    675e:	4653      	mov	r3, sl
    6760:	4441      	add	r1, r8
    6762:	3b01      	subs	r3, #1
    6764:	4588      	cmp	r8, r1
    6766:	d900      	bls.n	676a <__aeabi_ddiv+0x37a>
    6768:	e0e8      	b.n	693c <__aeabi_ddiv+0x54c>
    676a:	4288      	cmp	r0, r1
    676c:	d800      	bhi.n	6770 <__aeabi_ddiv+0x380>
    676e:	e0e5      	b.n	693c <__aeabi_ddiv+0x54c>
    6770:	2302      	movs	r3, #2
    6772:	425b      	negs	r3, r3
    6774:	469c      	mov	ip, r3
    6776:	4441      	add	r1, r8
    6778:	44e2      	add	sl, ip
    677a:	9b01      	ldr	r3, [sp, #4]
    677c:	042d      	lsls	r5, r5, #16
    677e:	1ace      	subs	r6, r1, r3
    6780:	4651      	mov	r1, sl
    6782:	4329      	orrs	r1, r5
    6784:	9d05      	ldr	r5, [sp, #20]
    6786:	464f      	mov	r7, r9
    6788:	002a      	movs	r2, r5
    678a:	040b      	lsls	r3, r1, #16
    678c:	0c08      	lsrs	r0, r1, #16
    678e:	0c1b      	lsrs	r3, r3, #16
    6790:	435a      	muls	r2, r3
    6792:	4345      	muls	r5, r0
    6794:	437b      	muls	r3, r7
    6796:	4378      	muls	r0, r7
    6798:	195b      	adds	r3, r3, r5
    679a:	0c17      	lsrs	r7, r2, #16
    679c:	18fb      	adds	r3, r7, r3
    679e:	429d      	cmp	r5, r3
    67a0:	d903      	bls.n	67aa <__aeabi_ddiv+0x3ba>
    67a2:	2580      	movs	r5, #128	; 0x80
    67a4:	026d      	lsls	r5, r5, #9
    67a6:	46ac      	mov	ip, r5
    67a8:	4460      	add	r0, ip
    67aa:	0c1d      	lsrs	r5, r3, #16
    67ac:	0412      	lsls	r2, r2, #16
    67ae:	041b      	lsls	r3, r3, #16
    67b0:	0c12      	lsrs	r2, r2, #16
    67b2:	1828      	adds	r0, r5, r0
    67b4:	189b      	adds	r3, r3, r2
    67b6:	4286      	cmp	r6, r0
    67b8:	d200      	bcs.n	67bc <__aeabi_ddiv+0x3cc>
    67ba:	e093      	b.n	68e4 <__aeabi_ddiv+0x4f4>
    67bc:	d100      	bne.n	67c0 <__aeabi_ddiv+0x3d0>
    67be:	e08e      	b.n	68de <__aeabi_ddiv+0x4ee>
    67c0:	2301      	movs	r3, #1
    67c2:	4319      	orrs	r1, r3
    67c4:	4ba0      	ldr	r3, [pc, #640]	; (6a48 <__aeabi_ddiv+0x658>)
    67c6:	18e3      	adds	r3, r4, r3
    67c8:	2b00      	cmp	r3, #0
    67ca:	dc00      	bgt.n	67ce <__aeabi_ddiv+0x3de>
    67cc:	e099      	b.n	6902 <__aeabi_ddiv+0x512>
    67ce:	074a      	lsls	r2, r1, #29
    67d0:	d000      	beq.n	67d4 <__aeabi_ddiv+0x3e4>
    67d2:	e09e      	b.n	6912 <__aeabi_ddiv+0x522>
    67d4:	465a      	mov	r2, fp
    67d6:	01d2      	lsls	r2, r2, #7
    67d8:	d506      	bpl.n	67e8 <__aeabi_ddiv+0x3f8>
    67da:	465a      	mov	r2, fp
    67dc:	4b9b      	ldr	r3, [pc, #620]	; (6a4c <__aeabi_ddiv+0x65c>)
    67de:	401a      	ands	r2, r3
    67e0:	2380      	movs	r3, #128	; 0x80
    67e2:	4693      	mov	fp, r2
    67e4:	00db      	lsls	r3, r3, #3
    67e6:	18e3      	adds	r3, r4, r3
    67e8:	4a99      	ldr	r2, [pc, #612]	; (6a50 <__aeabi_ddiv+0x660>)
    67ea:	4293      	cmp	r3, r2
    67ec:	dd68      	ble.n	68c0 <__aeabi_ddiv+0x4d0>
    67ee:	2301      	movs	r3, #1
    67f0:	9a02      	ldr	r2, [sp, #8]
    67f2:	4c98      	ldr	r4, [pc, #608]	; (6a54 <__aeabi_ddiv+0x664>)
    67f4:	401a      	ands	r2, r3
    67f6:	2300      	movs	r3, #0
    67f8:	4694      	mov	ip, r2
    67fa:	4698      	mov	r8, r3
    67fc:	2200      	movs	r2, #0
    67fe:	e6c5      	b.n	658c <__aeabi_ddiv+0x19c>
    6800:	2280      	movs	r2, #128	; 0x80
    6802:	464b      	mov	r3, r9
    6804:	0312      	lsls	r2, r2, #12
    6806:	4213      	tst	r3, r2
    6808:	d00a      	beq.n	6820 <__aeabi_ddiv+0x430>
    680a:	465b      	mov	r3, fp
    680c:	4213      	tst	r3, r2
    680e:	d106      	bne.n	681e <__aeabi_ddiv+0x42e>
    6810:	431a      	orrs	r2, r3
    6812:	0312      	lsls	r2, r2, #12
    6814:	0b12      	lsrs	r2, r2, #12
    6816:	46ac      	mov	ip, r5
    6818:	4688      	mov	r8, r1
    681a:	4c8e      	ldr	r4, [pc, #568]	; (6a54 <__aeabi_ddiv+0x664>)
    681c:	e6b6      	b.n	658c <__aeabi_ddiv+0x19c>
    681e:	464b      	mov	r3, r9
    6820:	431a      	orrs	r2, r3
    6822:	0312      	lsls	r2, r2, #12
    6824:	0b12      	lsrs	r2, r2, #12
    6826:	46bc      	mov	ip, r7
    6828:	4c8a      	ldr	r4, [pc, #552]	; (6a54 <__aeabi_ddiv+0x664>)
    682a:	e6af      	b.n	658c <__aeabi_ddiv+0x19c>
    682c:	0003      	movs	r3, r0
    682e:	465a      	mov	r2, fp
    6830:	3b28      	subs	r3, #40	; 0x28
    6832:	409a      	lsls	r2, r3
    6834:	2300      	movs	r3, #0
    6836:	4691      	mov	r9, r2
    6838:	4698      	mov	r8, r3
    683a:	e657      	b.n	64ec <__aeabi_ddiv+0xfc>
    683c:	4658      	mov	r0, fp
    683e:	f001 f86f 	bl	7920 <__clzsi2>
    6842:	3020      	adds	r0, #32
    6844:	e640      	b.n	64c8 <__aeabi_ddiv+0xd8>
    6846:	0003      	movs	r3, r0
    6848:	4652      	mov	r2, sl
    684a:	3b28      	subs	r3, #40	; 0x28
    684c:	409a      	lsls	r2, r3
    684e:	2100      	movs	r1, #0
    6850:	4693      	mov	fp, r2
    6852:	e677      	b.n	6544 <__aeabi_ddiv+0x154>
    6854:	f001 f864 	bl	7920 <__clzsi2>
    6858:	3020      	adds	r0, #32
    685a:	e65f      	b.n	651c <__aeabi_ddiv+0x12c>
    685c:	4588      	cmp	r8, r1
    685e:	d200      	bcs.n	6862 <__aeabi_ddiv+0x472>
    6860:	e6c7      	b.n	65f2 <__aeabi_ddiv+0x202>
    6862:	464b      	mov	r3, r9
    6864:	07de      	lsls	r6, r3, #31
    6866:	085d      	lsrs	r5, r3, #1
    6868:	4643      	mov	r3, r8
    686a:	085b      	lsrs	r3, r3, #1
    686c:	431e      	orrs	r6, r3
    686e:	4643      	mov	r3, r8
    6870:	07db      	lsls	r3, r3, #31
    6872:	469a      	mov	sl, r3
    6874:	e6c2      	b.n	65fc <__aeabi_ddiv+0x20c>
    6876:	2500      	movs	r5, #0
    6878:	4592      	cmp	sl, r2
    687a:	d300      	bcc.n	687e <__aeabi_ddiv+0x48e>
    687c:	e733      	b.n	66e6 <__aeabi_ddiv+0x2f6>
    687e:	9e03      	ldr	r6, [sp, #12]
    6880:	4659      	mov	r1, fp
    6882:	46b4      	mov	ip, r6
    6884:	44e2      	add	sl, ip
    6886:	45b2      	cmp	sl, r6
    6888:	41ad      	sbcs	r5, r5
    688a:	426d      	negs	r5, r5
    688c:	4445      	add	r5, r8
    688e:	18eb      	adds	r3, r5, r3
    6890:	3901      	subs	r1, #1
    6892:	4598      	cmp	r8, r3
    6894:	d207      	bcs.n	68a6 <__aeabi_ddiv+0x4b6>
    6896:	4298      	cmp	r0, r3
    6898:	d900      	bls.n	689c <__aeabi_ddiv+0x4ac>
    689a:	e07f      	b.n	699c <__aeabi_ddiv+0x5ac>
    689c:	d100      	bne.n	68a0 <__aeabi_ddiv+0x4b0>
    689e:	e0bc      	b.n	6a1a <__aeabi_ddiv+0x62a>
    68a0:	1a1d      	subs	r5, r3, r0
    68a2:	468b      	mov	fp, r1
    68a4:	e71f      	b.n	66e6 <__aeabi_ddiv+0x2f6>
    68a6:	4598      	cmp	r8, r3
    68a8:	d1fa      	bne.n	68a0 <__aeabi_ddiv+0x4b0>
    68aa:	9d03      	ldr	r5, [sp, #12]
    68ac:	4555      	cmp	r5, sl
    68ae:	d9f2      	bls.n	6896 <__aeabi_ddiv+0x4a6>
    68b0:	4643      	mov	r3, r8
    68b2:	468b      	mov	fp, r1
    68b4:	1a1d      	subs	r5, r3, r0
    68b6:	e716      	b.n	66e6 <__aeabi_ddiv+0x2f6>
    68b8:	469b      	mov	fp, r3
    68ba:	e6ca      	b.n	6652 <__aeabi_ddiv+0x262>
    68bc:	0015      	movs	r5, r2
    68be:	e6e7      	b.n	6690 <__aeabi_ddiv+0x2a0>
    68c0:	465a      	mov	r2, fp
    68c2:	08c9      	lsrs	r1, r1, #3
    68c4:	0752      	lsls	r2, r2, #29
    68c6:	430a      	orrs	r2, r1
    68c8:	055b      	lsls	r3, r3, #21
    68ca:	4690      	mov	r8, r2
    68cc:	0d5c      	lsrs	r4, r3, #21
    68ce:	465a      	mov	r2, fp
    68d0:	2301      	movs	r3, #1
    68d2:	9902      	ldr	r1, [sp, #8]
    68d4:	0252      	lsls	r2, r2, #9
    68d6:	4019      	ands	r1, r3
    68d8:	0b12      	lsrs	r2, r2, #12
    68da:	468c      	mov	ip, r1
    68dc:	e656      	b.n	658c <__aeabi_ddiv+0x19c>
    68de:	2b00      	cmp	r3, #0
    68e0:	d100      	bne.n	68e4 <__aeabi_ddiv+0x4f4>
    68e2:	e76f      	b.n	67c4 <__aeabi_ddiv+0x3d4>
    68e4:	4446      	add	r6, r8
    68e6:	1e4a      	subs	r2, r1, #1
    68e8:	45b0      	cmp	r8, r6
    68ea:	d929      	bls.n	6940 <__aeabi_ddiv+0x550>
    68ec:	0011      	movs	r1, r2
    68ee:	4286      	cmp	r6, r0
    68f0:	d000      	beq.n	68f4 <__aeabi_ddiv+0x504>
    68f2:	e765      	b.n	67c0 <__aeabi_ddiv+0x3d0>
    68f4:	9a03      	ldr	r2, [sp, #12]
    68f6:	4293      	cmp	r3, r2
    68f8:	d000      	beq.n	68fc <__aeabi_ddiv+0x50c>
    68fa:	e761      	b.n	67c0 <__aeabi_ddiv+0x3d0>
    68fc:	e762      	b.n	67c4 <__aeabi_ddiv+0x3d4>
    68fe:	2101      	movs	r1, #1
    6900:	4249      	negs	r1, r1
    6902:	2001      	movs	r0, #1
    6904:	1ac2      	subs	r2, r0, r3
    6906:	2a38      	cmp	r2, #56	; 0x38
    6908:	dd21      	ble.n	694e <__aeabi_ddiv+0x55e>
    690a:	9b02      	ldr	r3, [sp, #8]
    690c:	4003      	ands	r3, r0
    690e:	469c      	mov	ip, r3
    6910:	e638      	b.n	6584 <__aeabi_ddiv+0x194>
    6912:	220f      	movs	r2, #15
    6914:	400a      	ands	r2, r1
    6916:	2a04      	cmp	r2, #4
    6918:	d100      	bne.n	691c <__aeabi_ddiv+0x52c>
    691a:	e75b      	b.n	67d4 <__aeabi_ddiv+0x3e4>
    691c:	000a      	movs	r2, r1
    691e:	1d11      	adds	r1, r2, #4
    6920:	4291      	cmp	r1, r2
    6922:	4192      	sbcs	r2, r2
    6924:	4252      	negs	r2, r2
    6926:	4493      	add	fp, r2
    6928:	e754      	b.n	67d4 <__aeabi_ddiv+0x3e4>
    692a:	4b47      	ldr	r3, [pc, #284]	; (6a48 <__aeabi_ddiv+0x658>)
    692c:	18e3      	adds	r3, r4, r3
    692e:	2b00      	cmp	r3, #0
    6930:	dde5      	ble.n	68fe <__aeabi_ddiv+0x50e>
    6932:	2201      	movs	r2, #1
    6934:	4252      	negs	r2, r2
    6936:	e7f2      	b.n	691e <__aeabi_ddiv+0x52e>
    6938:	001d      	movs	r5, r3
    693a:	e6fa      	b.n	6732 <__aeabi_ddiv+0x342>
    693c:	469a      	mov	sl, r3
    693e:	e71c      	b.n	677a <__aeabi_ddiv+0x38a>
    6940:	42b0      	cmp	r0, r6
    6942:	d839      	bhi.n	69b8 <__aeabi_ddiv+0x5c8>
    6944:	d06e      	beq.n	6a24 <__aeabi_ddiv+0x634>
    6946:	0011      	movs	r1, r2
    6948:	e73a      	b.n	67c0 <__aeabi_ddiv+0x3d0>
    694a:	9302      	str	r3, [sp, #8]
    694c:	e73a      	b.n	67c4 <__aeabi_ddiv+0x3d4>
    694e:	2a1f      	cmp	r2, #31
    6950:	dc3c      	bgt.n	69cc <__aeabi_ddiv+0x5dc>
    6952:	2320      	movs	r3, #32
    6954:	1a9b      	subs	r3, r3, r2
    6956:	000c      	movs	r4, r1
    6958:	4658      	mov	r0, fp
    695a:	4099      	lsls	r1, r3
    695c:	4098      	lsls	r0, r3
    695e:	1e4b      	subs	r3, r1, #1
    6960:	4199      	sbcs	r1, r3
    6962:	465b      	mov	r3, fp
    6964:	40d4      	lsrs	r4, r2
    6966:	40d3      	lsrs	r3, r2
    6968:	4320      	orrs	r0, r4
    696a:	4308      	orrs	r0, r1
    696c:	001a      	movs	r2, r3
    696e:	0743      	lsls	r3, r0, #29
    6970:	d009      	beq.n	6986 <__aeabi_ddiv+0x596>
    6972:	230f      	movs	r3, #15
    6974:	4003      	ands	r3, r0
    6976:	2b04      	cmp	r3, #4
    6978:	d005      	beq.n	6986 <__aeabi_ddiv+0x596>
    697a:	0001      	movs	r1, r0
    697c:	1d08      	adds	r0, r1, #4
    697e:	4288      	cmp	r0, r1
    6980:	419b      	sbcs	r3, r3
    6982:	425b      	negs	r3, r3
    6984:	18d2      	adds	r2, r2, r3
    6986:	0213      	lsls	r3, r2, #8
    6988:	d53a      	bpl.n	6a00 <__aeabi_ddiv+0x610>
    698a:	2301      	movs	r3, #1
    698c:	9a02      	ldr	r2, [sp, #8]
    698e:	2401      	movs	r4, #1
    6990:	401a      	ands	r2, r3
    6992:	2300      	movs	r3, #0
    6994:	4694      	mov	ip, r2
    6996:	4698      	mov	r8, r3
    6998:	2200      	movs	r2, #0
    699a:	e5f7      	b.n	658c <__aeabi_ddiv+0x19c>
    699c:	2102      	movs	r1, #2
    699e:	4249      	negs	r1, r1
    69a0:	468c      	mov	ip, r1
    69a2:	9d03      	ldr	r5, [sp, #12]
    69a4:	44e3      	add	fp, ip
    69a6:	46ac      	mov	ip, r5
    69a8:	44e2      	add	sl, ip
    69aa:	45aa      	cmp	sl, r5
    69ac:	41ad      	sbcs	r5, r5
    69ae:	426d      	negs	r5, r5
    69b0:	4445      	add	r5, r8
    69b2:	18ed      	adds	r5, r5, r3
    69b4:	1a2d      	subs	r5, r5, r0
    69b6:	e696      	b.n	66e6 <__aeabi_ddiv+0x2f6>
    69b8:	1e8a      	subs	r2, r1, #2
    69ba:	9903      	ldr	r1, [sp, #12]
    69bc:	004d      	lsls	r5, r1, #1
    69be:	428d      	cmp	r5, r1
    69c0:	4189      	sbcs	r1, r1
    69c2:	4249      	negs	r1, r1
    69c4:	4441      	add	r1, r8
    69c6:	1876      	adds	r6, r6, r1
    69c8:	9503      	str	r5, [sp, #12]
    69ca:	e78f      	b.n	68ec <__aeabi_ddiv+0x4fc>
    69cc:	201f      	movs	r0, #31
    69ce:	4240      	negs	r0, r0
    69d0:	1ac3      	subs	r3, r0, r3
    69d2:	4658      	mov	r0, fp
    69d4:	40d8      	lsrs	r0, r3
    69d6:	0003      	movs	r3, r0
    69d8:	2a20      	cmp	r2, #32
    69da:	d028      	beq.n	6a2e <__aeabi_ddiv+0x63e>
    69dc:	2040      	movs	r0, #64	; 0x40
    69de:	465d      	mov	r5, fp
    69e0:	1a82      	subs	r2, r0, r2
    69e2:	4095      	lsls	r5, r2
    69e4:	4329      	orrs	r1, r5
    69e6:	1e4a      	subs	r2, r1, #1
    69e8:	4191      	sbcs	r1, r2
    69ea:	4319      	orrs	r1, r3
    69ec:	2307      	movs	r3, #7
    69ee:	2200      	movs	r2, #0
    69f0:	400b      	ands	r3, r1
    69f2:	d009      	beq.n	6a08 <__aeabi_ddiv+0x618>
    69f4:	230f      	movs	r3, #15
    69f6:	2200      	movs	r2, #0
    69f8:	400b      	ands	r3, r1
    69fa:	0008      	movs	r0, r1
    69fc:	2b04      	cmp	r3, #4
    69fe:	d1bd      	bne.n	697c <__aeabi_ddiv+0x58c>
    6a00:	0001      	movs	r1, r0
    6a02:	0753      	lsls	r3, r2, #29
    6a04:	0252      	lsls	r2, r2, #9
    6a06:	0b12      	lsrs	r2, r2, #12
    6a08:	08c9      	lsrs	r1, r1, #3
    6a0a:	4319      	orrs	r1, r3
    6a0c:	2301      	movs	r3, #1
    6a0e:	4688      	mov	r8, r1
    6a10:	9902      	ldr	r1, [sp, #8]
    6a12:	2400      	movs	r4, #0
    6a14:	4019      	ands	r1, r3
    6a16:	468c      	mov	ip, r1
    6a18:	e5b8      	b.n	658c <__aeabi_ddiv+0x19c>
    6a1a:	4552      	cmp	r2, sl
    6a1c:	d8be      	bhi.n	699c <__aeabi_ddiv+0x5ac>
    6a1e:	468b      	mov	fp, r1
    6a20:	2500      	movs	r5, #0
    6a22:	e660      	b.n	66e6 <__aeabi_ddiv+0x2f6>
    6a24:	9d03      	ldr	r5, [sp, #12]
    6a26:	429d      	cmp	r5, r3
    6a28:	d3c6      	bcc.n	69b8 <__aeabi_ddiv+0x5c8>
    6a2a:	0011      	movs	r1, r2
    6a2c:	e762      	b.n	68f4 <__aeabi_ddiv+0x504>
    6a2e:	2500      	movs	r5, #0
    6a30:	e7d8      	b.n	69e4 <__aeabi_ddiv+0x5f4>
    6a32:	2280      	movs	r2, #128	; 0x80
    6a34:	465b      	mov	r3, fp
    6a36:	0312      	lsls	r2, r2, #12
    6a38:	431a      	orrs	r2, r3
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	0312      	lsls	r2, r2, #12
    6a3e:	0b12      	lsrs	r2, r2, #12
    6a40:	469c      	mov	ip, r3
    6a42:	4688      	mov	r8, r1
    6a44:	4c03      	ldr	r4, [pc, #12]	; (6a54 <__aeabi_ddiv+0x664>)
    6a46:	e5a1      	b.n	658c <__aeabi_ddiv+0x19c>
    6a48:	000003ff 	.word	0x000003ff
    6a4c:	feffffff 	.word	0xfeffffff
    6a50:	000007fe 	.word	0x000007fe
    6a54:	000007ff 	.word	0x000007ff

00006a58 <__eqdf2>:
    6a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a5a:	464f      	mov	r7, r9
    6a5c:	4646      	mov	r6, r8
    6a5e:	46d6      	mov	lr, sl
    6a60:	005c      	lsls	r4, r3, #1
    6a62:	b5c0      	push	{r6, r7, lr}
    6a64:	031f      	lsls	r7, r3, #12
    6a66:	0fdb      	lsrs	r3, r3, #31
    6a68:	469a      	mov	sl, r3
    6a6a:	4b17      	ldr	r3, [pc, #92]	; (6ac8 <__eqdf2+0x70>)
    6a6c:	030e      	lsls	r6, r1, #12
    6a6e:	004d      	lsls	r5, r1, #1
    6a70:	4684      	mov	ip, r0
    6a72:	4680      	mov	r8, r0
    6a74:	0b36      	lsrs	r6, r6, #12
    6a76:	0d6d      	lsrs	r5, r5, #21
    6a78:	0fc9      	lsrs	r1, r1, #31
    6a7a:	4691      	mov	r9, r2
    6a7c:	0b3f      	lsrs	r7, r7, #12
    6a7e:	0d64      	lsrs	r4, r4, #21
    6a80:	2001      	movs	r0, #1
    6a82:	429d      	cmp	r5, r3
    6a84:	d008      	beq.n	6a98 <__eqdf2+0x40>
    6a86:	429c      	cmp	r4, r3
    6a88:	d001      	beq.n	6a8e <__eqdf2+0x36>
    6a8a:	42a5      	cmp	r5, r4
    6a8c:	d00b      	beq.n	6aa6 <__eqdf2+0x4e>
    6a8e:	bc1c      	pop	{r2, r3, r4}
    6a90:	4690      	mov	r8, r2
    6a92:	4699      	mov	r9, r3
    6a94:	46a2      	mov	sl, r4
    6a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a98:	4663      	mov	r3, ip
    6a9a:	4333      	orrs	r3, r6
    6a9c:	d1f7      	bne.n	6a8e <__eqdf2+0x36>
    6a9e:	42ac      	cmp	r4, r5
    6aa0:	d1f5      	bne.n	6a8e <__eqdf2+0x36>
    6aa2:	433a      	orrs	r2, r7
    6aa4:	d1f3      	bne.n	6a8e <__eqdf2+0x36>
    6aa6:	2001      	movs	r0, #1
    6aa8:	42be      	cmp	r6, r7
    6aaa:	d1f0      	bne.n	6a8e <__eqdf2+0x36>
    6aac:	45c8      	cmp	r8, r9
    6aae:	d1ee      	bne.n	6a8e <__eqdf2+0x36>
    6ab0:	4551      	cmp	r1, sl
    6ab2:	d007      	beq.n	6ac4 <__eqdf2+0x6c>
    6ab4:	2d00      	cmp	r5, #0
    6ab6:	d1ea      	bne.n	6a8e <__eqdf2+0x36>
    6ab8:	4663      	mov	r3, ip
    6aba:	431e      	orrs	r6, r3
    6abc:	0030      	movs	r0, r6
    6abe:	1e46      	subs	r6, r0, #1
    6ac0:	41b0      	sbcs	r0, r6
    6ac2:	e7e4      	b.n	6a8e <__eqdf2+0x36>
    6ac4:	2000      	movs	r0, #0
    6ac6:	e7e2      	b.n	6a8e <__eqdf2+0x36>
    6ac8:	000007ff 	.word	0x000007ff

00006acc <__gedf2>:
    6acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ace:	4645      	mov	r5, r8
    6ad0:	46de      	mov	lr, fp
    6ad2:	4657      	mov	r7, sl
    6ad4:	464e      	mov	r6, r9
    6ad6:	b5e0      	push	{r5, r6, r7, lr}
    6ad8:	031f      	lsls	r7, r3, #12
    6ada:	0b3d      	lsrs	r5, r7, #12
    6adc:	4f2c      	ldr	r7, [pc, #176]	; (6b90 <__gedf2+0xc4>)
    6ade:	030e      	lsls	r6, r1, #12
    6ae0:	004c      	lsls	r4, r1, #1
    6ae2:	46ab      	mov	fp, r5
    6ae4:	005d      	lsls	r5, r3, #1
    6ae6:	4684      	mov	ip, r0
    6ae8:	0b36      	lsrs	r6, r6, #12
    6aea:	0d64      	lsrs	r4, r4, #21
    6aec:	0fc9      	lsrs	r1, r1, #31
    6aee:	4690      	mov	r8, r2
    6af0:	0d6d      	lsrs	r5, r5, #21
    6af2:	0fdb      	lsrs	r3, r3, #31
    6af4:	42bc      	cmp	r4, r7
    6af6:	d02a      	beq.n	6b4e <__gedf2+0x82>
    6af8:	4f25      	ldr	r7, [pc, #148]	; (6b90 <__gedf2+0xc4>)
    6afa:	42bd      	cmp	r5, r7
    6afc:	d02d      	beq.n	6b5a <__gedf2+0x8e>
    6afe:	2c00      	cmp	r4, #0
    6b00:	d10f      	bne.n	6b22 <__gedf2+0x56>
    6b02:	4330      	orrs	r0, r6
    6b04:	0007      	movs	r7, r0
    6b06:	4681      	mov	r9, r0
    6b08:	4278      	negs	r0, r7
    6b0a:	4178      	adcs	r0, r7
    6b0c:	b2c0      	uxtb	r0, r0
    6b0e:	2d00      	cmp	r5, #0
    6b10:	d117      	bne.n	6b42 <__gedf2+0x76>
    6b12:	465f      	mov	r7, fp
    6b14:	433a      	orrs	r2, r7
    6b16:	d114      	bne.n	6b42 <__gedf2+0x76>
    6b18:	464b      	mov	r3, r9
    6b1a:	2000      	movs	r0, #0
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d00a      	beq.n	6b36 <__gedf2+0x6a>
    6b20:	e006      	b.n	6b30 <__gedf2+0x64>
    6b22:	2d00      	cmp	r5, #0
    6b24:	d102      	bne.n	6b2c <__gedf2+0x60>
    6b26:	4658      	mov	r0, fp
    6b28:	4302      	orrs	r2, r0
    6b2a:	d001      	beq.n	6b30 <__gedf2+0x64>
    6b2c:	4299      	cmp	r1, r3
    6b2e:	d018      	beq.n	6b62 <__gedf2+0x96>
    6b30:	4248      	negs	r0, r1
    6b32:	2101      	movs	r1, #1
    6b34:	4308      	orrs	r0, r1
    6b36:	bc3c      	pop	{r2, r3, r4, r5}
    6b38:	4690      	mov	r8, r2
    6b3a:	4699      	mov	r9, r3
    6b3c:	46a2      	mov	sl, r4
    6b3e:	46ab      	mov	fp, r5
    6b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b42:	2800      	cmp	r0, #0
    6b44:	d0f2      	beq.n	6b2c <__gedf2+0x60>
    6b46:	2001      	movs	r0, #1
    6b48:	3b01      	subs	r3, #1
    6b4a:	4318      	orrs	r0, r3
    6b4c:	e7f3      	b.n	6b36 <__gedf2+0x6a>
    6b4e:	0037      	movs	r7, r6
    6b50:	4307      	orrs	r7, r0
    6b52:	d0d1      	beq.n	6af8 <__gedf2+0x2c>
    6b54:	2002      	movs	r0, #2
    6b56:	4240      	negs	r0, r0
    6b58:	e7ed      	b.n	6b36 <__gedf2+0x6a>
    6b5a:	465f      	mov	r7, fp
    6b5c:	4317      	orrs	r7, r2
    6b5e:	d0ce      	beq.n	6afe <__gedf2+0x32>
    6b60:	e7f8      	b.n	6b54 <__gedf2+0x88>
    6b62:	42ac      	cmp	r4, r5
    6b64:	dce4      	bgt.n	6b30 <__gedf2+0x64>
    6b66:	da03      	bge.n	6b70 <__gedf2+0xa4>
    6b68:	1e48      	subs	r0, r1, #1
    6b6a:	2101      	movs	r1, #1
    6b6c:	4308      	orrs	r0, r1
    6b6e:	e7e2      	b.n	6b36 <__gedf2+0x6a>
    6b70:	455e      	cmp	r6, fp
    6b72:	d8dd      	bhi.n	6b30 <__gedf2+0x64>
    6b74:	d006      	beq.n	6b84 <__gedf2+0xb8>
    6b76:	2000      	movs	r0, #0
    6b78:	455e      	cmp	r6, fp
    6b7a:	d2dc      	bcs.n	6b36 <__gedf2+0x6a>
    6b7c:	2301      	movs	r3, #1
    6b7e:	1e48      	subs	r0, r1, #1
    6b80:	4318      	orrs	r0, r3
    6b82:	e7d8      	b.n	6b36 <__gedf2+0x6a>
    6b84:	45c4      	cmp	ip, r8
    6b86:	d8d3      	bhi.n	6b30 <__gedf2+0x64>
    6b88:	2000      	movs	r0, #0
    6b8a:	45c4      	cmp	ip, r8
    6b8c:	d3f6      	bcc.n	6b7c <__gedf2+0xb0>
    6b8e:	e7d2      	b.n	6b36 <__gedf2+0x6a>
    6b90:	000007ff 	.word	0x000007ff

00006b94 <__ledf2>:
    6b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b96:	464e      	mov	r6, r9
    6b98:	4645      	mov	r5, r8
    6b9a:	46de      	mov	lr, fp
    6b9c:	4657      	mov	r7, sl
    6b9e:	005c      	lsls	r4, r3, #1
    6ba0:	b5e0      	push	{r5, r6, r7, lr}
    6ba2:	031f      	lsls	r7, r3, #12
    6ba4:	0fdb      	lsrs	r3, r3, #31
    6ba6:	4699      	mov	r9, r3
    6ba8:	4b2a      	ldr	r3, [pc, #168]	; (6c54 <__ledf2+0xc0>)
    6baa:	030e      	lsls	r6, r1, #12
    6bac:	004d      	lsls	r5, r1, #1
    6bae:	0fc9      	lsrs	r1, r1, #31
    6bb0:	4684      	mov	ip, r0
    6bb2:	0b36      	lsrs	r6, r6, #12
    6bb4:	0d6d      	lsrs	r5, r5, #21
    6bb6:	468b      	mov	fp, r1
    6bb8:	4690      	mov	r8, r2
    6bba:	0b3f      	lsrs	r7, r7, #12
    6bbc:	0d64      	lsrs	r4, r4, #21
    6bbe:	429d      	cmp	r5, r3
    6bc0:	d020      	beq.n	6c04 <__ledf2+0x70>
    6bc2:	4b24      	ldr	r3, [pc, #144]	; (6c54 <__ledf2+0xc0>)
    6bc4:	429c      	cmp	r4, r3
    6bc6:	d022      	beq.n	6c0e <__ledf2+0x7a>
    6bc8:	2d00      	cmp	r5, #0
    6bca:	d112      	bne.n	6bf2 <__ledf2+0x5e>
    6bcc:	4330      	orrs	r0, r6
    6bce:	4243      	negs	r3, r0
    6bd0:	4143      	adcs	r3, r0
    6bd2:	b2db      	uxtb	r3, r3
    6bd4:	2c00      	cmp	r4, #0
    6bd6:	d01f      	beq.n	6c18 <__ledf2+0x84>
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d00c      	beq.n	6bf6 <__ledf2+0x62>
    6bdc:	464b      	mov	r3, r9
    6bde:	2001      	movs	r0, #1
    6be0:	3b01      	subs	r3, #1
    6be2:	4303      	orrs	r3, r0
    6be4:	0018      	movs	r0, r3
    6be6:	bc3c      	pop	{r2, r3, r4, r5}
    6be8:	4690      	mov	r8, r2
    6bea:	4699      	mov	r9, r3
    6bec:	46a2      	mov	sl, r4
    6bee:	46ab      	mov	fp, r5
    6bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bf2:	2c00      	cmp	r4, #0
    6bf4:	d016      	beq.n	6c24 <__ledf2+0x90>
    6bf6:	45cb      	cmp	fp, r9
    6bf8:	d017      	beq.n	6c2a <__ledf2+0x96>
    6bfa:	465b      	mov	r3, fp
    6bfc:	4259      	negs	r1, r3
    6bfe:	2301      	movs	r3, #1
    6c00:	430b      	orrs	r3, r1
    6c02:	e7ef      	b.n	6be4 <__ledf2+0x50>
    6c04:	0031      	movs	r1, r6
    6c06:	2302      	movs	r3, #2
    6c08:	4301      	orrs	r1, r0
    6c0a:	d1eb      	bne.n	6be4 <__ledf2+0x50>
    6c0c:	e7d9      	b.n	6bc2 <__ledf2+0x2e>
    6c0e:	0039      	movs	r1, r7
    6c10:	2302      	movs	r3, #2
    6c12:	4311      	orrs	r1, r2
    6c14:	d1e6      	bne.n	6be4 <__ledf2+0x50>
    6c16:	e7d7      	b.n	6bc8 <__ledf2+0x34>
    6c18:	433a      	orrs	r2, r7
    6c1a:	d1dd      	bne.n	6bd8 <__ledf2+0x44>
    6c1c:	2300      	movs	r3, #0
    6c1e:	2800      	cmp	r0, #0
    6c20:	d0e0      	beq.n	6be4 <__ledf2+0x50>
    6c22:	e7ea      	b.n	6bfa <__ledf2+0x66>
    6c24:	433a      	orrs	r2, r7
    6c26:	d1e6      	bne.n	6bf6 <__ledf2+0x62>
    6c28:	e7e7      	b.n	6bfa <__ledf2+0x66>
    6c2a:	42a5      	cmp	r5, r4
    6c2c:	dce5      	bgt.n	6bfa <__ledf2+0x66>
    6c2e:	db05      	blt.n	6c3c <__ledf2+0xa8>
    6c30:	42be      	cmp	r6, r7
    6c32:	d8e2      	bhi.n	6bfa <__ledf2+0x66>
    6c34:	d007      	beq.n	6c46 <__ledf2+0xb2>
    6c36:	2300      	movs	r3, #0
    6c38:	42be      	cmp	r6, r7
    6c3a:	d2d3      	bcs.n	6be4 <__ledf2+0x50>
    6c3c:	4659      	mov	r1, fp
    6c3e:	2301      	movs	r3, #1
    6c40:	3901      	subs	r1, #1
    6c42:	430b      	orrs	r3, r1
    6c44:	e7ce      	b.n	6be4 <__ledf2+0x50>
    6c46:	45c4      	cmp	ip, r8
    6c48:	d8d7      	bhi.n	6bfa <__ledf2+0x66>
    6c4a:	2300      	movs	r3, #0
    6c4c:	45c4      	cmp	ip, r8
    6c4e:	d3f5      	bcc.n	6c3c <__ledf2+0xa8>
    6c50:	e7c8      	b.n	6be4 <__ledf2+0x50>
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	000007ff 	.word	0x000007ff

00006c58 <__aeabi_dmul>:
    6c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c5a:	4657      	mov	r7, sl
    6c5c:	4645      	mov	r5, r8
    6c5e:	46de      	mov	lr, fp
    6c60:	464e      	mov	r6, r9
    6c62:	b5e0      	push	{r5, r6, r7, lr}
    6c64:	030c      	lsls	r4, r1, #12
    6c66:	4698      	mov	r8, r3
    6c68:	004e      	lsls	r6, r1, #1
    6c6a:	0b23      	lsrs	r3, r4, #12
    6c6c:	b087      	sub	sp, #28
    6c6e:	0007      	movs	r7, r0
    6c70:	4692      	mov	sl, r2
    6c72:	469b      	mov	fp, r3
    6c74:	0d76      	lsrs	r6, r6, #21
    6c76:	0fcd      	lsrs	r5, r1, #31
    6c78:	2e00      	cmp	r6, #0
    6c7a:	d06b      	beq.n	6d54 <__aeabi_dmul+0xfc>
    6c7c:	4b6d      	ldr	r3, [pc, #436]	; (6e34 <__aeabi_dmul+0x1dc>)
    6c7e:	429e      	cmp	r6, r3
    6c80:	d035      	beq.n	6cee <__aeabi_dmul+0x96>
    6c82:	2480      	movs	r4, #128	; 0x80
    6c84:	465b      	mov	r3, fp
    6c86:	0f42      	lsrs	r2, r0, #29
    6c88:	0424      	lsls	r4, r4, #16
    6c8a:	00db      	lsls	r3, r3, #3
    6c8c:	4314      	orrs	r4, r2
    6c8e:	431c      	orrs	r4, r3
    6c90:	00c3      	lsls	r3, r0, #3
    6c92:	4699      	mov	r9, r3
    6c94:	4b68      	ldr	r3, [pc, #416]	; (6e38 <__aeabi_dmul+0x1e0>)
    6c96:	46a3      	mov	fp, r4
    6c98:	469c      	mov	ip, r3
    6c9a:	2300      	movs	r3, #0
    6c9c:	2700      	movs	r7, #0
    6c9e:	4466      	add	r6, ip
    6ca0:	9302      	str	r3, [sp, #8]
    6ca2:	4643      	mov	r3, r8
    6ca4:	031c      	lsls	r4, r3, #12
    6ca6:	005a      	lsls	r2, r3, #1
    6ca8:	0fdb      	lsrs	r3, r3, #31
    6caa:	4650      	mov	r0, sl
    6cac:	0b24      	lsrs	r4, r4, #12
    6cae:	0d52      	lsrs	r2, r2, #21
    6cb0:	4698      	mov	r8, r3
    6cb2:	d100      	bne.n	6cb6 <__aeabi_dmul+0x5e>
    6cb4:	e076      	b.n	6da4 <__aeabi_dmul+0x14c>
    6cb6:	4b5f      	ldr	r3, [pc, #380]	; (6e34 <__aeabi_dmul+0x1dc>)
    6cb8:	429a      	cmp	r2, r3
    6cba:	d06d      	beq.n	6d98 <__aeabi_dmul+0x140>
    6cbc:	2380      	movs	r3, #128	; 0x80
    6cbe:	0f41      	lsrs	r1, r0, #29
    6cc0:	041b      	lsls	r3, r3, #16
    6cc2:	430b      	orrs	r3, r1
    6cc4:	495c      	ldr	r1, [pc, #368]	; (6e38 <__aeabi_dmul+0x1e0>)
    6cc6:	00e4      	lsls	r4, r4, #3
    6cc8:	468c      	mov	ip, r1
    6cca:	431c      	orrs	r4, r3
    6ccc:	00c3      	lsls	r3, r0, #3
    6cce:	2000      	movs	r0, #0
    6cd0:	4462      	add	r2, ip
    6cd2:	4641      	mov	r1, r8
    6cd4:	18b6      	adds	r6, r6, r2
    6cd6:	4069      	eors	r1, r5
    6cd8:	1c72      	adds	r2, r6, #1
    6cda:	9101      	str	r1, [sp, #4]
    6cdc:	4694      	mov	ip, r2
    6cde:	4307      	orrs	r7, r0
    6ce0:	2f0f      	cmp	r7, #15
    6ce2:	d900      	bls.n	6ce6 <__aeabi_dmul+0x8e>
    6ce4:	e0b0      	b.n	6e48 <__aeabi_dmul+0x1f0>
    6ce6:	4a55      	ldr	r2, [pc, #340]	; (6e3c <__aeabi_dmul+0x1e4>)
    6ce8:	00bf      	lsls	r7, r7, #2
    6cea:	59d2      	ldr	r2, [r2, r7]
    6cec:	4697      	mov	pc, r2
    6cee:	465b      	mov	r3, fp
    6cf0:	4303      	orrs	r3, r0
    6cf2:	4699      	mov	r9, r3
    6cf4:	d000      	beq.n	6cf8 <__aeabi_dmul+0xa0>
    6cf6:	e087      	b.n	6e08 <__aeabi_dmul+0x1b0>
    6cf8:	2300      	movs	r3, #0
    6cfa:	469b      	mov	fp, r3
    6cfc:	3302      	adds	r3, #2
    6cfe:	2708      	movs	r7, #8
    6d00:	9302      	str	r3, [sp, #8]
    6d02:	e7ce      	b.n	6ca2 <__aeabi_dmul+0x4a>
    6d04:	4642      	mov	r2, r8
    6d06:	9201      	str	r2, [sp, #4]
    6d08:	2802      	cmp	r0, #2
    6d0a:	d067      	beq.n	6ddc <__aeabi_dmul+0x184>
    6d0c:	2803      	cmp	r0, #3
    6d0e:	d100      	bne.n	6d12 <__aeabi_dmul+0xba>
    6d10:	e20e      	b.n	7130 <__aeabi_dmul+0x4d8>
    6d12:	2801      	cmp	r0, #1
    6d14:	d000      	beq.n	6d18 <__aeabi_dmul+0xc0>
    6d16:	e162      	b.n	6fde <__aeabi_dmul+0x386>
    6d18:	2300      	movs	r3, #0
    6d1a:	2400      	movs	r4, #0
    6d1c:	2200      	movs	r2, #0
    6d1e:	4699      	mov	r9, r3
    6d20:	9901      	ldr	r1, [sp, #4]
    6d22:	4001      	ands	r1, r0
    6d24:	b2cd      	uxtb	r5, r1
    6d26:	2100      	movs	r1, #0
    6d28:	0312      	lsls	r2, r2, #12
    6d2a:	0d0b      	lsrs	r3, r1, #20
    6d2c:	0b12      	lsrs	r2, r2, #12
    6d2e:	051b      	lsls	r3, r3, #20
    6d30:	4313      	orrs	r3, r2
    6d32:	4a43      	ldr	r2, [pc, #268]	; (6e40 <__aeabi_dmul+0x1e8>)
    6d34:	0524      	lsls	r4, r4, #20
    6d36:	4013      	ands	r3, r2
    6d38:	431c      	orrs	r4, r3
    6d3a:	0064      	lsls	r4, r4, #1
    6d3c:	07ed      	lsls	r5, r5, #31
    6d3e:	0864      	lsrs	r4, r4, #1
    6d40:	432c      	orrs	r4, r5
    6d42:	4648      	mov	r0, r9
    6d44:	0021      	movs	r1, r4
    6d46:	b007      	add	sp, #28
    6d48:	bc3c      	pop	{r2, r3, r4, r5}
    6d4a:	4690      	mov	r8, r2
    6d4c:	4699      	mov	r9, r3
    6d4e:	46a2      	mov	sl, r4
    6d50:	46ab      	mov	fp, r5
    6d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d54:	4303      	orrs	r3, r0
    6d56:	4699      	mov	r9, r3
    6d58:	d04f      	beq.n	6dfa <__aeabi_dmul+0x1a2>
    6d5a:	465b      	mov	r3, fp
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d100      	bne.n	6d62 <__aeabi_dmul+0x10a>
    6d60:	e189      	b.n	7076 <__aeabi_dmul+0x41e>
    6d62:	4658      	mov	r0, fp
    6d64:	f000 fddc 	bl	7920 <__clzsi2>
    6d68:	0003      	movs	r3, r0
    6d6a:	3b0b      	subs	r3, #11
    6d6c:	2b1c      	cmp	r3, #28
    6d6e:	dd00      	ble.n	6d72 <__aeabi_dmul+0x11a>
    6d70:	e17a      	b.n	7068 <__aeabi_dmul+0x410>
    6d72:	221d      	movs	r2, #29
    6d74:	1ad3      	subs	r3, r2, r3
    6d76:	003a      	movs	r2, r7
    6d78:	0001      	movs	r1, r0
    6d7a:	465c      	mov	r4, fp
    6d7c:	40da      	lsrs	r2, r3
    6d7e:	3908      	subs	r1, #8
    6d80:	408c      	lsls	r4, r1
    6d82:	0013      	movs	r3, r2
    6d84:	408f      	lsls	r7, r1
    6d86:	4323      	orrs	r3, r4
    6d88:	469b      	mov	fp, r3
    6d8a:	46b9      	mov	r9, r7
    6d8c:	2300      	movs	r3, #0
    6d8e:	4e2d      	ldr	r6, [pc, #180]	; (6e44 <__aeabi_dmul+0x1ec>)
    6d90:	2700      	movs	r7, #0
    6d92:	1a36      	subs	r6, r6, r0
    6d94:	9302      	str	r3, [sp, #8]
    6d96:	e784      	b.n	6ca2 <__aeabi_dmul+0x4a>
    6d98:	4653      	mov	r3, sl
    6d9a:	4323      	orrs	r3, r4
    6d9c:	d12a      	bne.n	6df4 <__aeabi_dmul+0x19c>
    6d9e:	2400      	movs	r4, #0
    6da0:	2002      	movs	r0, #2
    6da2:	e796      	b.n	6cd2 <__aeabi_dmul+0x7a>
    6da4:	4653      	mov	r3, sl
    6da6:	4323      	orrs	r3, r4
    6da8:	d020      	beq.n	6dec <__aeabi_dmul+0x194>
    6daa:	2c00      	cmp	r4, #0
    6dac:	d100      	bne.n	6db0 <__aeabi_dmul+0x158>
    6dae:	e157      	b.n	7060 <__aeabi_dmul+0x408>
    6db0:	0020      	movs	r0, r4
    6db2:	f000 fdb5 	bl	7920 <__clzsi2>
    6db6:	0003      	movs	r3, r0
    6db8:	3b0b      	subs	r3, #11
    6dba:	2b1c      	cmp	r3, #28
    6dbc:	dd00      	ble.n	6dc0 <__aeabi_dmul+0x168>
    6dbe:	e149      	b.n	7054 <__aeabi_dmul+0x3fc>
    6dc0:	211d      	movs	r1, #29
    6dc2:	1acb      	subs	r3, r1, r3
    6dc4:	4651      	mov	r1, sl
    6dc6:	0002      	movs	r2, r0
    6dc8:	40d9      	lsrs	r1, r3
    6dca:	4653      	mov	r3, sl
    6dcc:	3a08      	subs	r2, #8
    6dce:	4094      	lsls	r4, r2
    6dd0:	4093      	lsls	r3, r2
    6dd2:	430c      	orrs	r4, r1
    6dd4:	4a1b      	ldr	r2, [pc, #108]	; (6e44 <__aeabi_dmul+0x1ec>)
    6dd6:	1a12      	subs	r2, r2, r0
    6dd8:	2000      	movs	r0, #0
    6dda:	e77a      	b.n	6cd2 <__aeabi_dmul+0x7a>
    6ddc:	2501      	movs	r5, #1
    6dde:	9b01      	ldr	r3, [sp, #4]
    6de0:	4c14      	ldr	r4, [pc, #80]	; (6e34 <__aeabi_dmul+0x1dc>)
    6de2:	401d      	ands	r5, r3
    6de4:	2300      	movs	r3, #0
    6de6:	2200      	movs	r2, #0
    6de8:	4699      	mov	r9, r3
    6dea:	e79c      	b.n	6d26 <__aeabi_dmul+0xce>
    6dec:	2400      	movs	r4, #0
    6dee:	2200      	movs	r2, #0
    6df0:	2001      	movs	r0, #1
    6df2:	e76e      	b.n	6cd2 <__aeabi_dmul+0x7a>
    6df4:	4653      	mov	r3, sl
    6df6:	2003      	movs	r0, #3
    6df8:	e76b      	b.n	6cd2 <__aeabi_dmul+0x7a>
    6dfa:	2300      	movs	r3, #0
    6dfc:	469b      	mov	fp, r3
    6dfe:	3301      	adds	r3, #1
    6e00:	2704      	movs	r7, #4
    6e02:	2600      	movs	r6, #0
    6e04:	9302      	str	r3, [sp, #8]
    6e06:	e74c      	b.n	6ca2 <__aeabi_dmul+0x4a>
    6e08:	2303      	movs	r3, #3
    6e0a:	4681      	mov	r9, r0
    6e0c:	270c      	movs	r7, #12
    6e0e:	9302      	str	r3, [sp, #8]
    6e10:	e747      	b.n	6ca2 <__aeabi_dmul+0x4a>
    6e12:	2280      	movs	r2, #128	; 0x80
    6e14:	2300      	movs	r3, #0
    6e16:	2500      	movs	r5, #0
    6e18:	0312      	lsls	r2, r2, #12
    6e1a:	4699      	mov	r9, r3
    6e1c:	4c05      	ldr	r4, [pc, #20]	; (6e34 <__aeabi_dmul+0x1dc>)
    6e1e:	e782      	b.n	6d26 <__aeabi_dmul+0xce>
    6e20:	465c      	mov	r4, fp
    6e22:	464b      	mov	r3, r9
    6e24:	9802      	ldr	r0, [sp, #8]
    6e26:	e76f      	b.n	6d08 <__aeabi_dmul+0xb0>
    6e28:	465c      	mov	r4, fp
    6e2a:	464b      	mov	r3, r9
    6e2c:	9501      	str	r5, [sp, #4]
    6e2e:	9802      	ldr	r0, [sp, #8]
    6e30:	e76a      	b.n	6d08 <__aeabi_dmul+0xb0>
    6e32:	46c0      	nop			; (mov r8, r8)
    6e34:	000007ff 	.word	0x000007ff
    6e38:	fffffc01 	.word	0xfffffc01
    6e3c:	00007fa8 	.word	0x00007fa8
    6e40:	800fffff 	.word	0x800fffff
    6e44:	fffffc0d 	.word	0xfffffc0d
    6e48:	464a      	mov	r2, r9
    6e4a:	4649      	mov	r1, r9
    6e4c:	0c17      	lsrs	r7, r2, #16
    6e4e:	0c1a      	lsrs	r2, r3, #16
    6e50:	041b      	lsls	r3, r3, #16
    6e52:	0c1b      	lsrs	r3, r3, #16
    6e54:	0408      	lsls	r0, r1, #16
    6e56:	0019      	movs	r1, r3
    6e58:	0c00      	lsrs	r0, r0, #16
    6e5a:	4341      	muls	r1, r0
    6e5c:	0015      	movs	r5, r2
    6e5e:	4688      	mov	r8, r1
    6e60:	0019      	movs	r1, r3
    6e62:	437d      	muls	r5, r7
    6e64:	4379      	muls	r1, r7
    6e66:	9503      	str	r5, [sp, #12]
    6e68:	4689      	mov	r9, r1
    6e6a:	0029      	movs	r1, r5
    6e6c:	0015      	movs	r5, r2
    6e6e:	4345      	muls	r5, r0
    6e70:	444d      	add	r5, r9
    6e72:	9502      	str	r5, [sp, #8]
    6e74:	4645      	mov	r5, r8
    6e76:	0c2d      	lsrs	r5, r5, #16
    6e78:	46aa      	mov	sl, r5
    6e7a:	9d02      	ldr	r5, [sp, #8]
    6e7c:	4455      	add	r5, sl
    6e7e:	45a9      	cmp	r9, r5
    6e80:	d906      	bls.n	6e90 <__aeabi_dmul+0x238>
    6e82:	468a      	mov	sl, r1
    6e84:	2180      	movs	r1, #128	; 0x80
    6e86:	0249      	lsls	r1, r1, #9
    6e88:	4689      	mov	r9, r1
    6e8a:	44ca      	add	sl, r9
    6e8c:	4651      	mov	r1, sl
    6e8e:	9103      	str	r1, [sp, #12]
    6e90:	0c29      	lsrs	r1, r5, #16
    6e92:	9104      	str	r1, [sp, #16]
    6e94:	4641      	mov	r1, r8
    6e96:	0409      	lsls	r1, r1, #16
    6e98:	042d      	lsls	r5, r5, #16
    6e9a:	0c09      	lsrs	r1, r1, #16
    6e9c:	4688      	mov	r8, r1
    6e9e:	0029      	movs	r1, r5
    6ea0:	0c25      	lsrs	r5, r4, #16
    6ea2:	0424      	lsls	r4, r4, #16
    6ea4:	4441      	add	r1, r8
    6ea6:	0c24      	lsrs	r4, r4, #16
    6ea8:	9105      	str	r1, [sp, #20]
    6eaa:	0021      	movs	r1, r4
    6eac:	4341      	muls	r1, r0
    6eae:	4688      	mov	r8, r1
    6eb0:	0021      	movs	r1, r4
    6eb2:	4379      	muls	r1, r7
    6eb4:	468a      	mov	sl, r1
    6eb6:	4368      	muls	r0, r5
    6eb8:	4641      	mov	r1, r8
    6eba:	4450      	add	r0, sl
    6ebc:	4681      	mov	r9, r0
    6ebe:	0c08      	lsrs	r0, r1, #16
    6ec0:	4448      	add	r0, r9
    6ec2:	436f      	muls	r7, r5
    6ec4:	4582      	cmp	sl, r0
    6ec6:	d903      	bls.n	6ed0 <__aeabi_dmul+0x278>
    6ec8:	2180      	movs	r1, #128	; 0x80
    6eca:	0249      	lsls	r1, r1, #9
    6ecc:	4689      	mov	r9, r1
    6ece:	444f      	add	r7, r9
    6ed0:	0c01      	lsrs	r1, r0, #16
    6ed2:	4689      	mov	r9, r1
    6ed4:	0039      	movs	r1, r7
    6ed6:	4449      	add	r1, r9
    6ed8:	9102      	str	r1, [sp, #8]
    6eda:	4641      	mov	r1, r8
    6edc:	040f      	lsls	r7, r1, #16
    6ede:	9904      	ldr	r1, [sp, #16]
    6ee0:	0c3f      	lsrs	r7, r7, #16
    6ee2:	4688      	mov	r8, r1
    6ee4:	0400      	lsls	r0, r0, #16
    6ee6:	19c0      	adds	r0, r0, r7
    6ee8:	4480      	add	r8, r0
    6eea:	4641      	mov	r1, r8
    6eec:	9104      	str	r1, [sp, #16]
    6eee:	4659      	mov	r1, fp
    6ef0:	0c0f      	lsrs	r7, r1, #16
    6ef2:	0409      	lsls	r1, r1, #16
    6ef4:	0c09      	lsrs	r1, r1, #16
    6ef6:	4688      	mov	r8, r1
    6ef8:	4359      	muls	r1, r3
    6efa:	468a      	mov	sl, r1
    6efc:	0039      	movs	r1, r7
    6efe:	4351      	muls	r1, r2
    6f00:	4689      	mov	r9, r1
    6f02:	4641      	mov	r1, r8
    6f04:	434a      	muls	r2, r1
    6f06:	4651      	mov	r1, sl
    6f08:	0c09      	lsrs	r1, r1, #16
    6f0a:	468b      	mov	fp, r1
    6f0c:	437b      	muls	r3, r7
    6f0e:	18d2      	adds	r2, r2, r3
    6f10:	445a      	add	r2, fp
    6f12:	4293      	cmp	r3, r2
    6f14:	d903      	bls.n	6f1e <__aeabi_dmul+0x2c6>
    6f16:	2380      	movs	r3, #128	; 0x80
    6f18:	025b      	lsls	r3, r3, #9
    6f1a:	469b      	mov	fp, r3
    6f1c:	44d9      	add	r9, fp
    6f1e:	4651      	mov	r1, sl
    6f20:	0409      	lsls	r1, r1, #16
    6f22:	0c09      	lsrs	r1, r1, #16
    6f24:	468a      	mov	sl, r1
    6f26:	4641      	mov	r1, r8
    6f28:	4361      	muls	r1, r4
    6f2a:	437c      	muls	r4, r7
    6f2c:	0c13      	lsrs	r3, r2, #16
    6f2e:	0412      	lsls	r2, r2, #16
    6f30:	444b      	add	r3, r9
    6f32:	4452      	add	r2, sl
    6f34:	46a1      	mov	r9, r4
    6f36:	468a      	mov	sl, r1
    6f38:	003c      	movs	r4, r7
    6f3a:	4641      	mov	r1, r8
    6f3c:	436c      	muls	r4, r5
    6f3e:	434d      	muls	r5, r1
    6f40:	4651      	mov	r1, sl
    6f42:	444d      	add	r5, r9
    6f44:	0c0f      	lsrs	r7, r1, #16
    6f46:	197d      	adds	r5, r7, r5
    6f48:	45a9      	cmp	r9, r5
    6f4a:	d903      	bls.n	6f54 <__aeabi_dmul+0x2fc>
    6f4c:	2180      	movs	r1, #128	; 0x80
    6f4e:	0249      	lsls	r1, r1, #9
    6f50:	4688      	mov	r8, r1
    6f52:	4444      	add	r4, r8
    6f54:	9f04      	ldr	r7, [sp, #16]
    6f56:	9903      	ldr	r1, [sp, #12]
    6f58:	46b8      	mov	r8, r7
    6f5a:	4441      	add	r1, r8
    6f5c:	468b      	mov	fp, r1
    6f5e:	4583      	cmp	fp, r0
    6f60:	4180      	sbcs	r0, r0
    6f62:	4241      	negs	r1, r0
    6f64:	4688      	mov	r8, r1
    6f66:	4651      	mov	r1, sl
    6f68:	0408      	lsls	r0, r1, #16
    6f6a:	042f      	lsls	r7, r5, #16
    6f6c:	0c00      	lsrs	r0, r0, #16
    6f6e:	183f      	adds	r7, r7, r0
    6f70:	4658      	mov	r0, fp
    6f72:	9902      	ldr	r1, [sp, #8]
    6f74:	1810      	adds	r0, r2, r0
    6f76:	4689      	mov	r9, r1
    6f78:	4290      	cmp	r0, r2
    6f7a:	4192      	sbcs	r2, r2
    6f7c:	444f      	add	r7, r9
    6f7e:	46ba      	mov	sl, r7
    6f80:	4252      	negs	r2, r2
    6f82:	4699      	mov	r9, r3
    6f84:	4693      	mov	fp, r2
    6f86:	44c2      	add	sl, r8
    6f88:	44d1      	add	r9, sl
    6f8a:	44cb      	add	fp, r9
    6f8c:	428f      	cmp	r7, r1
    6f8e:	41bf      	sbcs	r7, r7
    6f90:	45c2      	cmp	sl, r8
    6f92:	4189      	sbcs	r1, r1
    6f94:	4599      	cmp	r9, r3
    6f96:	419b      	sbcs	r3, r3
    6f98:	4593      	cmp	fp, r2
    6f9a:	4192      	sbcs	r2, r2
    6f9c:	427f      	negs	r7, r7
    6f9e:	4249      	negs	r1, r1
    6fa0:	0c2d      	lsrs	r5, r5, #16
    6fa2:	4252      	negs	r2, r2
    6fa4:	430f      	orrs	r7, r1
    6fa6:	425b      	negs	r3, r3
    6fa8:	4313      	orrs	r3, r2
    6faa:	197f      	adds	r7, r7, r5
    6fac:	18ff      	adds	r7, r7, r3
    6fae:	465b      	mov	r3, fp
    6fb0:	193c      	adds	r4, r7, r4
    6fb2:	0ddb      	lsrs	r3, r3, #23
    6fb4:	9a05      	ldr	r2, [sp, #20]
    6fb6:	0264      	lsls	r4, r4, #9
    6fb8:	431c      	orrs	r4, r3
    6fba:	0243      	lsls	r3, r0, #9
    6fbc:	4313      	orrs	r3, r2
    6fbe:	1e5d      	subs	r5, r3, #1
    6fc0:	41ab      	sbcs	r3, r5
    6fc2:	465a      	mov	r2, fp
    6fc4:	0dc0      	lsrs	r0, r0, #23
    6fc6:	4303      	orrs	r3, r0
    6fc8:	0252      	lsls	r2, r2, #9
    6fca:	4313      	orrs	r3, r2
    6fcc:	01e2      	lsls	r2, r4, #7
    6fce:	d556      	bpl.n	707e <__aeabi_dmul+0x426>
    6fd0:	2001      	movs	r0, #1
    6fd2:	085a      	lsrs	r2, r3, #1
    6fd4:	4003      	ands	r3, r0
    6fd6:	4313      	orrs	r3, r2
    6fd8:	07e2      	lsls	r2, r4, #31
    6fda:	4313      	orrs	r3, r2
    6fdc:	0864      	lsrs	r4, r4, #1
    6fde:	485a      	ldr	r0, [pc, #360]	; (7148 <__aeabi_dmul+0x4f0>)
    6fe0:	4460      	add	r0, ip
    6fe2:	2800      	cmp	r0, #0
    6fe4:	dd4d      	ble.n	7082 <__aeabi_dmul+0x42a>
    6fe6:	075a      	lsls	r2, r3, #29
    6fe8:	d009      	beq.n	6ffe <__aeabi_dmul+0x3a6>
    6fea:	220f      	movs	r2, #15
    6fec:	401a      	ands	r2, r3
    6fee:	2a04      	cmp	r2, #4
    6ff0:	d005      	beq.n	6ffe <__aeabi_dmul+0x3a6>
    6ff2:	1d1a      	adds	r2, r3, #4
    6ff4:	429a      	cmp	r2, r3
    6ff6:	419b      	sbcs	r3, r3
    6ff8:	425b      	negs	r3, r3
    6ffa:	18e4      	adds	r4, r4, r3
    6ffc:	0013      	movs	r3, r2
    6ffe:	01e2      	lsls	r2, r4, #7
    7000:	d504      	bpl.n	700c <__aeabi_dmul+0x3b4>
    7002:	2080      	movs	r0, #128	; 0x80
    7004:	4a51      	ldr	r2, [pc, #324]	; (714c <__aeabi_dmul+0x4f4>)
    7006:	00c0      	lsls	r0, r0, #3
    7008:	4014      	ands	r4, r2
    700a:	4460      	add	r0, ip
    700c:	4a50      	ldr	r2, [pc, #320]	; (7150 <__aeabi_dmul+0x4f8>)
    700e:	4290      	cmp	r0, r2
    7010:	dd00      	ble.n	7014 <__aeabi_dmul+0x3bc>
    7012:	e6e3      	b.n	6ddc <__aeabi_dmul+0x184>
    7014:	2501      	movs	r5, #1
    7016:	08db      	lsrs	r3, r3, #3
    7018:	0762      	lsls	r2, r4, #29
    701a:	431a      	orrs	r2, r3
    701c:	0264      	lsls	r4, r4, #9
    701e:	9b01      	ldr	r3, [sp, #4]
    7020:	4691      	mov	r9, r2
    7022:	0b22      	lsrs	r2, r4, #12
    7024:	0544      	lsls	r4, r0, #21
    7026:	0d64      	lsrs	r4, r4, #21
    7028:	401d      	ands	r5, r3
    702a:	e67c      	b.n	6d26 <__aeabi_dmul+0xce>
    702c:	2280      	movs	r2, #128	; 0x80
    702e:	4659      	mov	r1, fp
    7030:	0312      	lsls	r2, r2, #12
    7032:	4211      	tst	r1, r2
    7034:	d008      	beq.n	7048 <__aeabi_dmul+0x3f0>
    7036:	4214      	tst	r4, r2
    7038:	d106      	bne.n	7048 <__aeabi_dmul+0x3f0>
    703a:	4322      	orrs	r2, r4
    703c:	0312      	lsls	r2, r2, #12
    703e:	0b12      	lsrs	r2, r2, #12
    7040:	4645      	mov	r5, r8
    7042:	4699      	mov	r9, r3
    7044:	4c43      	ldr	r4, [pc, #268]	; (7154 <__aeabi_dmul+0x4fc>)
    7046:	e66e      	b.n	6d26 <__aeabi_dmul+0xce>
    7048:	465b      	mov	r3, fp
    704a:	431a      	orrs	r2, r3
    704c:	0312      	lsls	r2, r2, #12
    704e:	0b12      	lsrs	r2, r2, #12
    7050:	4c40      	ldr	r4, [pc, #256]	; (7154 <__aeabi_dmul+0x4fc>)
    7052:	e668      	b.n	6d26 <__aeabi_dmul+0xce>
    7054:	0003      	movs	r3, r0
    7056:	4654      	mov	r4, sl
    7058:	3b28      	subs	r3, #40	; 0x28
    705a:	409c      	lsls	r4, r3
    705c:	2300      	movs	r3, #0
    705e:	e6b9      	b.n	6dd4 <__aeabi_dmul+0x17c>
    7060:	f000 fc5e 	bl	7920 <__clzsi2>
    7064:	3020      	adds	r0, #32
    7066:	e6a6      	b.n	6db6 <__aeabi_dmul+0x15e>
    7068:	0003      	movs	r3, r0
    706a:	3b28      	subs	r3, #40	; 0x28
    706c:	409f      	lsls	r7, r3
    706e:	2300      	movs	r3, #0
    7070:	46bb      	mov	fp, r7
    7072:	4699      	mov	r9, r3
    7074:	e68a      	b.n	6d8c <__aeabi_dmul+0x134>
    7076:	f000 fc53 	bl	7920 <__clzsi2>
    707a:	3020      	adds	r0, #32
    707c:	e674      	b.n	6d68 <__aeabi_dmul+0x110>
    707e:	46b4      	mov	ip, r6
    7080:	e7ad      	b.n	6fde <__aeabi_dmul+0x386>
    7082:	2501      	movs	r5, #1
    7084:	1a2a      	subs	r2, r5, r0
    7086:	2a38      	cmp	r2, #56	; 0x38
    7088:	dd06      	ble.n	7098 <__aeabi_dmul+0x440>
    708a:	9b01      	ldr	r3, [sp, #4]
    708c:	2400      	movs	r4, #0
    708e:	401d      	ands	r5, r3
    7090:	2300      	movs	r3, #0
    7092:	2200      	movs	r2, #0
    7094:	4699      	mov	r9, r3
    7096:	e646      	b.n	6d26 <__aeabi_dmul+0xce>
    7098:	2a1f      	cmp	r2, #31
    709a:	dc21      	bgt.n	70e0 <__aeabi_dmul+0x488>
    709c:	2520      	movs	r5, #32
    709e:	0020      	movs	r0, r4
    70a0:	1aad      	subs	r5, r5, r2
    70a2:	001e      	movs	r6, r3
    70a4:	40ab      	lsls	r3, r5
    70a6:	40a8      	lsls	r0, r5
    70a8:	40d6      	lsrs	r6, r2
    70aa:	1e5d      	subs	r5, r3, #1
    70ac:	41ab      	sbcs	r3, r5
    70ae:	4330      	orrs	r0, r6
    70b0:	4318      	orrs	r0, r3
    70b2:	40d4      	lsrs	r4, r2
    70b4:	0743      	lsls	r3, r0, #29
    70b6:	d009      	beq.n	70cc <__aeabi_dmul+0x474>
    70b8:	230f      	movs	r3, #15
    70ba:	4003      	ands	r3, r0
    70bc:	2b04      	cmp	r3, #4
    70be:	d005      	beq.n	70cc <__aeabi_dmul+0x474>
    70c0:	0003      	movs	r3, r0
    70c2:	1d18      	adds	r0, r3, #4
    70c4:	4298      	cmp	r0, r3
    70c6:	419b      	sbcs	r3, r3
    70c8:	425b      	negs	r3, r3
    70ca:	18e4      	adds	r4, r4, r3
    70cc:	0223      	lsls	r3, r4, #8
    70ce:	d521      	bpl.n	7114 <__aeabi_dmul+0x4bc>
    70d0:	2501      	movs	r5, #1
    70d2:	9b01      	ldr	r3, [sp, #4]
    70d4:	2401      	movs	r4, #1
    70d6:	401d      	ands	r5, r3
    70d8:	2300      	movs	r3, #0
    70da:	2200      	movs	r2, #0
    70dc:	4699      	mov	r9, r3
    70de:	e622      	b.n	6d26 <__aeabi_dmul+0xce>
    70e0:	251f      	movs	r5, #31
    70e2:	0021      	movs	r1, r4
    70e4:	426d      	negs	r5, r5
    70e6:	1a28      	subs	r0, r5, r0
    70e8:	40c1      	lsrs	r1, r0
    70ea:	0008      	movs	r0, r1
    70ec:	2a20      	cmp	r2, #32
    70ee:	d01d      	beq.n	712c <__aeabi_dmul+0x4d4>
    70f0:	355f      	adds	r5, #95	; 0x5f
    70f2:	1aaa      	subs	r2, r5, r2
    70f4:	4094      	lsls	r4, r2
    70f6:	4323      	orrs	r3, r4
    70f8:	1e5c      	subs	r4, r3, #1
    70fa:	41a3      	sbcs	r3, r4
    70fc:	2507      	movs	r5, #7
    70fe:	4303      	orrs	r3, r0
    7100:	401d      	ands	r5, r3
    7102:	2200      	movs	r2, #0
    7104:	2d00      	cmp	r5, #0
    7106:	d009      	beq.n	711c <__aeabi_dmul+0x4c4>
    7108:	220f      	movs	r2, #15
    710a:	2400      	movs	r4, #0
    710c:	401a      	ands	r2, r3
    710e:	0018      	movs	r0, r3
    7110:	2a04      	cmp	r2, #4
    7112:	d1d6      	bne.n	70c2 <__aeabi_dmul+0x46a>
    7114:	0003      	movs	r3, r0
    7116:	0765      	lsls	r5, r4, #29
    7118:	0264      	lsls	r4, r4, #9
    711a:	0b22      	lsrs	r2, r4, #12
    711c:	08db      	lsrs	r3, r3, #3
    711e:	432b      	orrs	r3, r5
    7120:	2501      	movs	r5, #1
    7122:	4699      	mov	r9, r3
    7124:	9b01      	ldr	r3, [sp, #4]
    7126:	2400      	movs	r4, #0
    7128:	401d      	ands	r5, r3
    712a:	e5fc      	b.n	6d26 <__aeabi_dmul+0xce>
    712c:	2400      	movs	r4, #0
    712e:	e7e2      	b.n	70f6 <__aeabi_dmul+0x49e>
    7130:	2280      	movs	r2, #128	; 0x80
    7132:	2501      	movs	r5, #1
    7134:	0312      	lsls	r2, r2, #12
    7136:	4322      	orrs	r2, r4
    7138:	9901      	ldr	r1, [sp, #4]
    713a:	0312      	lsls	r2, r2, #12
    713c:	0b12      	lsrs	r2, r2, #12
    713e:	400d      	ands	r5, r1
    7140:	4699      	mov	r9, r3
    7142:	4c04      	ldr	r4, [pc, #16]	; (7154 <__aeabi_dmul+0x4fc>)
    7144:	e5ef      	b.n	6d26 <__aeabi_dmul+0xce>
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	000003ff 	.word	0x000003ff
    714c:	feffffff 	.word	0xfeffffff
    7150:	000007fe 	.word	0x000007fe
    7154:	000007ff 	.word	0x000007ff

00007158 <__aeabi_dsub>:
    7158:	b5f0      	push	{r4, r5, r6, r7, lr}
    715a:	4646      	mov	r6, r8
    715c:	46d6      	mov	lr, sl
    715e:	464f      	mov	r7, r9
    7160:	030c      	lsls	r4, r1, #12
    7162:	b5c0      	push	{r6, r7, lr}
    7164:	0fcd      	lsrs	r5, r1, #31
    7166:	004e      	lsls	r6, r1, #1
    7168:	0a61      	lsrs	r1, r4, #9
    716a:	0f44      	lsrs	r4, r0, #29
    716c:	430c      	orrs	r4, r1
    716e:	00c1      	lsls	r1, r0, #3
    7170:	0058      	lsls	r0, r3, #1
    7172:	0d40      	lsrs	r0, r0, #21
    7174:	4684      	mov	ip, r0
    7176:	468a      	mov	sl, r1
    7178:	000f      	movs	r7, r1
    717a:	0319      	lsls	r1, r3, #12
    717c:	0f50      	lsrs	r0, r2, #29
    717e:	0a49      	lsrs	r1, r1, #9
    7180:	4301      	orrs	r1, r0
    7182:	48c6      	ldr	r0, [pc, #792]	; (749c <__aeabi_dsub+0x344>)
    7184:	0d76      	lsrs	r6, r6, #21
    7186:	46a8      	mov	r8, r5
    7188:	0fdb      	lsrs	r3, r3, #31
    718a:	00d2      	lsls	r2, r2, #3
    718c:	4584      	cmp	ip, r0
    718e:	d100      	bne.n	7192 <__aeabi_dsub+0x3a>
    7190:	e0d8      	b.n	7344 <__aeabi_dsub+0x1ec>
    7192:	2001      	movs	r0, #1
    7194:	4043      	eors	r3, r0
    7196:	42ab      	cmp	r3, r5
    7198:	d100      	bne.n	719c <__aeabi_dsub+0x44>
    719a:	e0a6      	b.n	72ea <__aeabi_dsub+0x192>
    719c:	4660      	mov	r0, ip
    719e:	1a35      	subs	r5, r6, r0
    71a0:	2d00      	cmp	r5, #0
    71a2:	dc00      	bgt.n	71a6 <__aeabi_dsub+0x4e>
    71a4:	e105      	b.n	73b2 <__aeabi_dsub+0x25a>
    71a6:	2800      	cmp	r0, #0
    71a8:	d110      	bne.n	71cc <__aeabi_dsub+0x74>
    71aa:	000b      	movs	r3, r1
    71ac:	4313      	orrs	r3, r2
    71ae:	d100      	bne.n	71b2 <__aeabi_dsub+0x5a>
    71b0:	e0d7      	b.n	7362 <__aeabi_dsub+0x20a>
    71b2:	1e6b      	subs	r3, r5, #1
    71b4:	2b00      	cmp	r3, #0
    71b6:	d000      	beq.n	71ba <__aeabi_dsub+0x62>
    71b8:	e14b      	b.n	7452 <__aeabi_dsub+0x2fa>
    71ba:	4653      	mov	r3, sl
    71bc:	1a9f      	subs	r7, r3, r2
    71be:	45ba      	cmp	sl, r7
    71c0:	4180      	sbcs	r0, r0
    71c2:	1a64      	subs	r4, r4, r1
    71c4:	4240      	negs	r0, r0
    71c6:	1a24      	subs	r4, r4, r0
    71c8:	2601      	movs	r6, #1
    71ca:	e01e      	b.n	720a <__aeabi_dsub+0xb2>
    71cc:	4bb3      	ldr	r3, [pc, #716]	; (749c <__aeabi_dsub+0x344>)
    71ce:	429e      	cmp	r6, r3
    71d0:	d048      	beq.n	7264 <__aeabi_dsub+0x10c>
    71d2:	2380      	movs	r3, #128	; 0x80
    71d4:	041b      	lsls	r3, r3, #16
    71d6:	4319      	orrs	r1, r3
    71d8:	2d38      	cmp	r5, #56	; 0x38
    71da:	dd00      	ble.n	71de <__aeabi_dsub+0x86>
    71dc:	e119      	b.n	7412 <__aeabi_dsub+0x2ba>
    71de:	2d1f      	cmp	r5, #31
    71e0:	dd00      	ble.n	71e4 <__aeabi_dsub+0x8c>
    71e2:	e14c      	b.n	747e <__aeabi_dsub+0x326>
    71e4:	2320      	movs	r3, #32
    71e6:	000f      	movs	r7, r1
    71e8:	1b5b      	subs	r3, r3, r5
    71ea:	0010      	movs	r0, r2
    71ec:	409a      	lsls	r2, r3
    71ee:	409f      	lsls	r7, r3
    71f0:	40e8      	lsrs	r0, r5
    71f2:	1e53      	subs	r3, r2, #1
    71f4:	419a      	sbcs	r2, r3
    71f6:	40e9      	lsrs	r1, r5
    71f8:	4307      	orrs	r7, r0
    71fa:	4317      	orrs	r7, r2
    71fc:	4653      	mov	r3, sl
    71fe:	1bdf      	subs	r7, r3, r7
    7200:	1a61      	subs	r1, r4, r1
    7202:	45ba      	cmp	sl, r7
    7204:	41a4      	sbcs	r4, r4
    7206:	4264      	negs	r4, r4
    7208:	1b0c      	subs	r4, r1, r4
    720a:	0223      	lsls	r3, r4, #8
    720c:	d400      	bmi.n	7210 <__aeabi_dsub+0xb8>
    720e:	e0c5      	b.n	739c <__aeabi_dsub+0x244>
    7210:	0264      	lsls	r4, r4, #9
    7212:	0a65      	lsrs	r5, r4, #9
    7214:	2d00      	cmp	r5, #0
    7216:	d100      	bne.n	721a <__aeabi_dsub+0xc2>
    7218:	e0f6      	b.n	7408 <__aeabi_dsub+0x2b0>
    721a:	0028      	movs	r0, r5
    721c:	f000 fb80 	bl	7920 <__clzsi2>
    7220:	0003      	movs	r3, r0
    7222:	3b08      	subs	r3, #8
    7224:	2b1f      	cmp	r3, #31
    7226:	dd00      	ble.n	722a <__aeabi_dsub+0xd2>
    7228:	e0e9      	b.n	73fe <__aeabi_dsub+0x2a6>
    722a:	2220      	movs	r2, #32
    722c:	003c      	movs	r4, r7
    722e:	1ad2      	subs	r2, r2, r3
    7230:	409d      	lsls	r5, r3
    7232:	40d4      	lsrs	r4, r2
    7234:	409f      	lsls	r7, r3
    7236:	4325      	orrs	r5, r4
    7238:	429e      	cmp	r6, r3
    723a:	dd00      	ble.n	723e <__aeabi_dsub+0xe6>
    723c:	e0db      	b.n	73f6 <__aeabi_dsub+0x29e>
    723e:	1b9e      	subs	r6, r3, r6
    7240:	1c73      	adds	r3, r6, #1
    7242:	2b1f      	cmp	r3, #31
    7244:	dd00      	ble.n	7248 <__aeabi_dsub+0xf0>
    7246:	e10a      	b.n	745e <__aeabi_dsub+0x306>
    7248:	2220      	movs	r2, #32
    724a:	0038      	movs	r0, r7
    724c:	1ad2      	subs	r2, r2, r3
    724e:	0029      	movs	r1, r5
    7250:	4097      	lsls	r7, r2
    7252:	002c      	movs	r4, r5
    7254:	4091      	lsls	r1, r2
    7256:	40d8      	lsrs	r0, r3
    7258:	1e7a      	subs	r2, r7, #1
    725a:	4197      	sbcs	r7, r2
    725c:	40dc      	lsrs	r4, r3
    725e:	2600      	movs	r6, #0
    7260:	4301      	orrs	r1, r0
    7262:	430f      	orrs	r7, r1
    7264:	077b      	lsls	r3, r7, #29
    7266:	d009      	beq.n	727c <__aeabi_dsub+0x124>
    7268:	230f      	movs	r3, #15
    726a:	403b      	ands	r3, r7
    726c:	2b04      	cmp	r3, #4
    726e:	d005      	beq.n	727c <__aeabi_dsub+0x124>
    7270:	1d3b      	adds	r3, r7, #4
    7272:	42bb      	cmp	r3, r7
    7274:	41bf      	sbcs	r7, r7
    7276:	427f      	negs	r7, r7
    7278:	19e4      	adds	r4, r4, r7
    727a:	001f      	movs	r7, r3
    727c:	0223      	lsls	r3, r4, #8
    727e:	d525      	bpl.n	72cc <__aeabi_dsub+0x174>
    7280:	4b86      	ldr	r3, [pc, #536]	; (749c <__aeabi_dsub+0x344>)
    7282:	3601      	adds	r6, #1
    7284:	429e      	cmp	r6, r3
    7286:	d100      	bne.n	728a <__aeabi_dsub+0x132>
    7288:	e0af      	b.n	73ea <__aeabi_dsub+0x292>
    728a:	4b85      	ldr	r3, [pc, #532]	; (74a0 <__aeabi_dsub+0x348>)
    728c:	2501      	movs	r5, #1
    728e:	401c      	ands	r4, r3
    7290:	4643      	mov	r3, r8
    7292:	0762      	lsls	r2, r4, #29
    7294:	08ff      	lsrs	r7, r7, #3
    7296:	0264      	lsls	r4, r4, #9
    7298:	0576      	lsls	r6, r6, #21
    729a:	4317      	orrs	r7, r2
    729c:	0b24      	lsrs	r4, r4, #12
    729e:	0d76      	lsrs	r6, r6, #21
    72a0:	401d      	ands	r5, r3
    72a2:	2100      	movs	r1, #0
    72a4:	0324      	lsls	r4, r4, #12
    72a6:	0b23      	lsrs	r3, r4, #12
    72a8:	0d0c      	lsrs	r4, r1, #20
    72aa:	4a7e      	ldr	r2, [pc, #504]	; (74a4 <__aeabi_dsub+0x34c>)
    72ac:	0524      	lsls	r4, r4, #20
    72ae:	431c      	orrs	r4, r3
    72b0:	4014      	ands	r4, r2
    72b2:	0533      	lsls	r3, r6, #20
    72b4:	4323      	orrs	r3, r4
    72b6:	005b      	lsls	r3, r3, #1
    72b8:	07ed      	lsls	r5, r5, #31
    72ba:	085b      	lsrs	r3, r3, #1
    72bc:	432b      	orrs	r3, r5
    72be:	0038      	movs	r0, r7
    72c0:	0019      	movs	r1, r3
    72c2:	bc1c      	pop	{r2, r3, r4}
    72c4:	4690      	mov	r8, r2
    72c6:	4699      	mov	r9, r3
    72c8:	46a2      	mov	sl, r4
    72ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72cc:	2501      	movs	r5, #1
    72ce:	4643      	mov	r3, r8
    72d0:	0762      	lsls	r2, r4, #29
    72d2:	08ff      	lsrs	r7, r7, #3
    72d4:	4317      	orrs	r7, r2
    72d6:	08e4      	lsrs	r4, r4, #3
    72d8:	401d      	ands	r5, r3
    72da:	4b70      	ldr	r3, [pc, #448]	; (749c <__aeabi_dsub+0x344>)
    72dc:	429e      	cmp	r6, r3
    72de:	d036      	beq.n	734e <__aeabi_dsub+0x1f6>
    72e0:	0324      	lsls	r4, r4, #12
    72e2:	0576      	lsls	r6, r6, #21
    72e4:	0b24      	lsrs	r4, r4, #12
    72e6:	0d76      	lsrs	r6, r6, #21
    72e8:	e7db      	b.n	72a2 <__aeabi_dsub+0x14a>
    72ea:	4663      	mov	r3, ip
    72ec:	1af3      	subs	r3, r6, r3
    72ee:	2b00      	cmp	r3, #0
    72f0:	dc00      	bgt.n	72f4 <__aeabi_dsub+0x19c>
    72f2:	e094      	b.n	741e <__aeabi_dsub+0x2c6>
    72f4:	4660      	mov	r0, ip
    72f6:	2800      	cmp	r0, #0
    72f8:	d035      	beq.n	7366 <__aeabi_dsub+0x20e>
    72fa:	4868      	ldr	r0, [pc, #416]	; (749c <__aeabi_dsub+0x344>)
    72fc:	4286      	cmp	r6, r0
    72fe:	d0b1      	beq.n	7264 <__aeabi_dsub+0x10c>
    7300:	2780      	movs	r7, #128	; 0x80
    7302:	043f      	lsls	r7, r7, #16
    7304:	4339      	orrs	r1, r7
    7306:	2b38      	cmp	r3, #56	; 0x38
    7308:	dc00      	bgt.n	730c <__aeabi_dsub+0x1b4>
    730a:	e0fd      	b.n	7508 <__aeabi_dsub+0x3b0>
    730c:	430a      	orrs	r2, r1
    730e:	0017      	movs	r7, r2
    7310:	2100      	movs	r1, #0
    7312:	1e7a      	subs	r2, r7, #1
    7314:	4197      	sbcs	r7, r2
    7316:	4457      	add	r7, sl
    7318:	4557      	cmp	r7, sl
    731a:	4180      	sbcs	r0, r0
    731c:	1909      	adds	r1, r1, r4
    731e:	4244      	negs	r4, r0
    7320:	190c      	adds	r4, r1, r4
    7322:	0223      	lsls	r3, r4, #8
    7324:	d53a      	bpl.n	739c <__aeabi_dsub+0x244>
    7326:	4b5d      	ldr	r3, [pc, #372]	; (749c <__aeabi_dsub+0x344>)
    7328:	3601      	adds	r6, #1
    732a:	429e      	cmp	r6, r3
    732c:	d100      	bne.n	7330 <__aeabi_dsub+0x1d8>
    732e:	e14b      	b.n	75c8 <__aeabi_dsub+0x470>
    7330:	2201      	movs	r2, #1
    7332:	4b5b      	ldr	r3, [pc, #364]	; (74a0 <__aeabi_dsub+0x348>)
    7334:	401c      	ands	r4, r3
    7336:	087b      	lsrs	r3, r7, #1
    7338:	4017      	ands	r7, r2
    733a:	431f      	orrs	r7, r3
    733c:	07e2      	lsls	r2, r4, #31
    733e:	4317      	orrs	r7, r2
    7340:	0864      	lsrs	r4, r4, #1
    7342:	e78f      	b.n	7264 <__aeabi_dsub+0x10c>
    7344:	0008      	movs	r0, r1
    7346:	4310      	orrs	r0, r2
    7348:	d000      	beq.n	734c <__aeabi_dsub+0x1f4>
    734a:	e724      	b.n	7196 <__aeabi_dsub+0x3e>
    734c:	e721      	b.n	7192 <__aeabi_dsub+0x3a>
    734e:	0023      	movs	r3, r4
    7350:	433b      	orrs	r3, r7
    7352:	d100      	bne.n	7356 <__aeabi_dsub+0x1fe>
    7354:	e1b9      	b.n	76ca <__aeabi_dsub+0x572>
    7356:	2280      	movs	r2, #128	; 0x80
    7358:	0312      	lsls	r2, r2, #12
    735a:	4314      	orrs	r4, r2
    735c:	0324      	lsls	r4, r4, #12
    735e:	0b24      	lsrs	r4, r4, #12
    7360:	e79f      	b.n	72a2 <__aeabi_dsub+0x14a>
    7362:	002e      	movs	r6, r5
    7364:	e77e      	b.n	7264 <__aeabi_dsub+0x10c>
    7366:	0008      	movs	r0, r1
    7368:	4310      	orrs	r0, r2
    736a:	d100      	bne.n	736e <__aeabi_dsub+0x216>
    736c:	e0ca      	b.n	7504 <__aeabi_dsub+0x3ac>
    736e:	1e58      	subs	r0, r3, #1
    7370:	4684      	mov	ip, r0
    7372:	2800      	cmp	r0, #0
    7374:	d000      	beq.n	7378 <__aeabi_dsub+0x220>
    7376:	e0e7      	b.n	7548 <__aeabi_dsub+0x3f0>
    7378:	4452      	add	r2, sl
    737a:	4552      	cmp	r2, sl
    737c:	4180      	sbcs	r0, r0
    737e:	1864      	adds	r4, r4, r1
    7380:	4240      	negs	r0, r0
    7382:	1824      	adds	r4, r4, r0
    7384:	0017      	movs	r7, r2
    7386:	2601      	movs	r6, #1
    7388:	0223      	lsls	r3, r4, #8
    738a:	d507      	bpl.n	739c <__aeabi_dsub+0x244>
    738c:	2602      	movs	r6, #2
    738e:	e7cf      	b.n	7330 <__aeabi_dsub+0x1d8>
    7390:	4664      	mov	r4, ip
    7392:	432c      	orrs	r4, r5
    7394:	d100      	bne.n	7398 <__aeabi_dsub+0x240>
    7396:	e1b3      	b.n	7700 <__aeabi_dsub+0x5a8>
    7398:	002c      	movs	r4, r5
    739a:	4667      	mov	r7, ip
    739c:	077b      	lsls	r3, r7, #29
    739e:	d000      	beq.n	73a2 <__aeabi_dsub+0x24a>
    73a0:	e762      	b.n	7268 <__aeabi_dsub+0x110>
    73a2:	0763      	lsls	r3, r4, #29
    73a4:	08ff      	lsrs	r7, r7, #3
    73a6:	431f      	orrs	r7, r3
    73a8:	2501      	movs	r5, #1
    73aa:	4643      	mov	r3, r8
    73ac:	08e4      	lsrs	r4, r4, #3
    73ae:	401d      	ands	r5, r3
    73b0:	e793      	b.n	72da <__aeabi_dsub+0x182>
    73b2:	2d00      	cmp	r5, #0
    73b4:	d178      	bne.n	74a8 <__aeabi_dsub+0x350>
    73b6:	1c75      	adds	r5, r6, #1
    73b8:	056d      	lsls	r5, r5, #21
    73ba:	0d6d      	lsrs	r5, r5, #21
    73bc:	2d01      	cmp	r5, #1
    73be:	dc00      	bgt.n	73c2 <__aeabi_dsub+0x26a>
    73c0:	e0f2      	b.n	75a8 <__aeabi_dsub+0x450>
    73c2:	4650      	mov	r0, sl
    73c4:	1a80      	subs	r0, r0, r2
    73c6:	4582      	cmp	sl, r0
    73c8:	41bf      	sbcs	r7, r7
    73ca:	1a65      	subs	r5, r4, r1
    73cc:	427f      	negs	r7, r7
    73ce:	1bed      	subs	r5, r5, r7
    73d0:	4684      	mov	ip, r0
    73d2:	0228      	lsls	r0, r5, #8
    73d4:	d400      	bmi.n	73d8 <__aeabi_dsub+0x280>
    73d6:	e08c      	b.n	74f2 <__aeabi_dsub+0x39a>
    73d8:	4650      	mov	r0, sl
    73da:	1a17      	subs	r7, r2, r0
    73dc:	42ba      	cmp	r2, r7
    73de:	4192      	sbcs	r2, r2
    73e0:	1b0c      	subs	r4, r1, r4
    73e2:	4255      	negs	r5, r2
    73e4:	1b65      	subs	r5, r4, r5
    73e6:	4698      	mov	r8, r3
    73e8:	e714      	b.n	7214 <__aeabi_dsub+0xbc>
    73ea:	2501      	movs	r5, #1
    73ec:	4643      	mov	r3, r8
    73ee:	2400      	movs	r4, #0
    73f0:	401d      	ands	r5, r3
    73f2:	2700      	movs	r7, #0
    73f4:	e755      	b.n	72a2 <__aeabi_dsub+0x14a>
    73f6:	4c2a      	ldr	r4, [pc, #168]	; (74a0 <__aeabi_dsub+0x348>)
    73f8:	1af6      	subs	r6, r6, r3
    73fa:	402c      	ands	r4, r5
    73fc:	e732      	b.n	7264 <__aeabi_dsub+0x10c>
    73fe:	003d      	movs	r5, r7
    7400:	3828      	subs	r0, #40	; 0x28
    7402:	4085      	lsls	r5, r0
    7404:	2700      	movs	r7, #0
    7406:	e717      	b.n	7238 <__aeabi_dsub+0xe0>
    7408:	0038      	movs	r0, r7
    740a:	f000 fa89 	bl	7920 <__clzsi2>
    740e:	3020      	adds	r0, #32
    7410:	e706      	b.n	7220 <__aeabi_dsub+0xc8>
    7412:	430a      	orrs	r2, r1
    7414:	0017      	movs	r7, r2
    7416:	2100      	movs	r1, #0
    7418:	1e7a      	subs	r2, r7, #1
    741a:	4197      	sbcs	r7, r2
    741c:	e6ee      	b.n	71fc <__aeabi_dsub+0xa4>
    741e:	2b00      	cmp	r3, #0
    7420:	d000      	beq.n	7424 <__aeabi_dsub+0x2cc>
    7422:	e0e5      	b.n	75f0 <__aeabi_dsub+0x498>
    7424:	1c73      	adds	r3, r6, #1
    7426:	469c      	mov	ip, r3
    7428:	055b      	lsls	r3, r3, #21
    742a:	0d5b      	lsrs	r3, r3, #21
    742c:	2b01      	cmp	r3, #1
    742e:	dc00      	bgt.n	7432 <__aeabi_dsub+0x2da>
    7430:	e09f      	b.n	7572 <__aeabi_dsub+0x41a>
    7432:	4b1a      	ldr	r3, [pc, #104]	; (749c <__aeabi_dsub+0x344>)
    7434:	459c      	cmp	ip, r3
    7436:	d100      	bne.n	743a <__aeabi_dsub+0x2e2>
    7438:	e0c5      	b.n	75c6 <__aeabi_dsub+0x46e>
    743a:	4452      	add	r2, sl
    743c:	4552      	cmp	r2, sl
    743e:	4180      	sbcs	r0, r0
    7440:	1864      	adds	r4, r4, r1
    7442:	4240      	negs	r0, r0
    7444:	1824      	adds	r4, r4, r0
    7446:	07e7      	lsls	r7, r4, #31
    7448:	0852      	lsrs	r2, r2, #1
    744a:	4317      	orrs	r7, r2
    744c:	0864      	lsrs	r4, r4, #1
    744e:	4666      	mov	r6, ip
    7450:	e708      	b.n	7264 <__aeabi_dsub+0x10c>
    7452:	4812      	ldr	r0, [pc, #72]	; (749c <__aeabi_dsub+0x344>)
    7454:	4285      	cmp	r5, r0
    7456:	d100      	bne.n	745a <__aeabi_dsub+0x302>
    7458:	e085      	b.n	7566 <__aeabi_dsub+0x40e>
    745a:	001d      	movs	r5, r3
    745c:	e6bc      	b.n	71d8 <__aeabi_dsub+0x80>
    745e:	0029      	movs	r1, r5
    7460:	3e1f      	subs	r6, #31
    7462:	40f1      	lsrs	r1, r6
    7464:	2b20      	cmp	r3, #32
    7466:	d100      	bne.n	746a <__aeabi_dsub+0x312>
    7468:	e07f      	b.n	756a <__aeabi_dsub+0x412>
    746a:	2240      	movs	r2, #64	; 0x40
    746c:	1ad3      	subs	r3, r2, r3
    746e:	409d      	lsls	r5, r3
    7470:	432f      	orrs	r7, r5
    7472:	1e7d      	subs	r5, r7, #1
    7474:	41af      	sbcs	r7, r5
    7476:	2400      	movs	r4, #0
    7478:	430f      	orrs	r7, r1
    747a:	2600      	movs	r6, #0
    747c:	e78e      	b.n	739c <__aeabi_dsub+0x244>
    747e:	002b      	movs	r3, r5
    7480:	000f      	movs	r7, r1
    7482:	3b20      	subs	r3, #32
    7484:	40df      	lsrs	r7, r3
    7486:	2d20      	cmp	r5, #32
    7488:	d071      	beq.n	756e <__aeabi_dsub+0x416>
    748a:	2340      	movs	r3, #64	; 0x40
    748c:	1b5d      	subs	r5, r3, r5
    748e:	40a9      	lsls	r1, r5
    7490:	430a      	orrs	r2, r1
    7492:	1e51      	subs	r1, r2, #1
    7494:	418a      	sbcs	r2, r1
    7496:	2100      	movs	r1, #0
    7498:	4317      	orrs	r7, r2
    749a:	e6af      	b.n	71fc <__aeabi_dsub+0xa4>
    749c:	000007ff 	.word	0x000007ff
    74a0:	ff7fffff 	.word	0xff7fffff
    74a4:	800fffff 	.word	0x800fffff
    74a8:	2e00      	cmp	r6, #0
    74aa:	d03e      	beq.n	752a <__aeabi_dsub+0x3d2>
    74ac:	4eb3      	ldr	r6, [pc, #716]	; (777c <__aeabi_dsub+0x624>)
    74ae:	45b4      	cmp	ip, r6
    74b0:	d045      	beq.n	753e <__aeabi_dsub+0x3e6>
    74b2:	2680      	movs	r6, #128	; 0x80
    74b4:	0436      	lsls	r6, r6, #16
    74b6:	426d      	negs	r5, r5
    74b8:	4334      	orrs	r4, r6
    74ba:	2d38      	cmp	r5, #56	; 0x38
    74bc:	dd00      	ble.n	74c0 <__aeabi_dsub+0x368>
    74be:	e0a8      	b.n	7612 <__aeabi_dsub+0x4ba>
    74c0:	2d1f      	cmp	r5, #31
    74c2:	dd00      	ble.n	74c6 <__aeabi_dsub+0x36e>
    74c4:	e11f      	b.n	7706 <__aeabi_dsub+0x5ae>
    74c6:	2620      	movs	r6, #32
    74c8:	0027      	movs	r7, r4
    74ca:	4650      	mov	r0, sl
    74cc:	1b76      	subs	r6, r6, r5
    74ce:	40b7      	lsls	r7, r6
    74d0:	40e8      	lsrs	r0, r5
    74d2:	4307      	orrs	r7, r0
    74d4:	4650      	mov	r0, sl
    74d6:	40b0      	lsls	r0, r6
    74d8:	1e46      	subs	r6, r0, #1
    74da:	41b0      	sbcs	r0, r6
    74dc:	40ec      	lsrs	r4, r5
    74de:	4338      	orrs	r0, r7
    74e0:	1a17      	subs	r7, r2, r0
    74e2:	42ba      	cmp	r2, r7
    74e4:	4192      	sbcs	r2, r2
    74e6:	1b0c      	subs	r4, r1, r4
    74e8:	4252      	negs	r2, r2
    74ea:	1aa4      	subs	r4, r4, r2
    74ec:	4666      	mov	r6, ip
    74ee:	4698      	mov	r8, r3
    74f0:	e68b      	b.n	720a <__aeabi_dsub+0xb2>
    74f2:	4664      	mov	r4, ip
    74f4:	4667      	mov	r7, ip
    74f6:	432c      	orrs	r4, r5
    74f8:	d000      	beq.n	74fc <__aeabi_dsub+0x3a4>
    74fa:	e68b      	b.n	7214 <__aeabi_dsub+0xbc>
    74fc:	2500      	movs	r5, #0
    74fe:	2600      	movs	r6, #0
    7500:	2700      	movs	r7, #0
    7502:	e6ea      	b.n	72da <__aeabi_dsub+0x182>
    7504:	001e      	movs	r6, r3
    7506:	e6ad      	b.n	7264 <__aeabi_dsub+0x10c>
    7508:	2b1f      	cmp	r3, #31
    750a:	dc60      	bgt.n	75ce <__aeabi_dsub+0x476>
    750c:	2720      	movs	r7, #32
    750e:	1af8      	subs	r0, r7, r3
    7510:	000f      	movs	r7, r1
    7512:	4684      	mov	ip, r0
    7514:	4087      	lsls	r7, r0
    7516:	0010      	movs	r0, r2
    7518:	40d8      	lsrs	r0, r3
    751a:	4307      	orrs	r7, r0
    751c:	4660      	mov	r0, ip
    751e:	4082      	lsls	r2, r0
    7520:	1e50      	subs	r0, r2, #1
    7522:	4182      	sbcs	r2, r0
    7524:	40d9      	lsrs	r1, r3
    7526:	4317      	orrs	r7, r2
    7528:	e6f5      	b.n	7316 <__aeabi_dsub+0x1be>
    752a:	0026      	movs	r6, r4
    752c:	4650      	mov	r0, sl
    752e:	4306      	orrs	r6, r0
    7530:	d005      	beq.n	753e <__aeabi_dsub+0x3e6>
    7532:	43ed      	mvns	r5, r5
    7534:	2d00      	cmp	r5, #0
    7536:	d0d3      	beq.n	74e0 <__aeabi_dsub+0x388>
    7538:	4e90      	ldr	r6, [pc, #576]	; (777c <__aeabi_dsub+0x624>)
    753a:	45b4      	cmp	ip, r6
    753c:	d1bd      	bne.n	74ba <__aeabi_dsub+0x362>
    753e:	000c      	movs	r4, r1
    7540:	0017      	movs	r7, r2
    7542:	4666      	mov	r6, ip
    7544:	4698      	mov	r8, r3
    7546:	e68d      	b.n	7264 <__aeabi_dsub+0x10c>
    7548:	488c      	ldr	r0, [pc, #560]	; (777c <__aeabi_dsub+0x624>)
    754a:	4283      	cmp	r3, r0
    754c:	d00b      	beq.n	7566 <__aeabi_dsub+0x40e>
    754e:	4663      	mov	r3, ip
    7550:	e6d9      	b.n	7306 <__aeabi_dsub+0x1ae>
    7552:	2d00      	cmp	r5, #0
    7554:	d000      	beq.n	7558 <__aeabi_dsub+0x400>
    7556:	e096      	b.n	7686 <__aeabi_dsub+0x52e>
    7558:	0008      	movs	r0, r1
    755a:	4310      	orrs	r0, r2
    755c:	d100      	bne.n	7560 <__aeabi_dsub+0x408>
    755e:	e0e2      	b.n	7726 <__aeabi_dsub+0x5ce>
    7560:	000c      	movs	r4, r1
    7562:	0017      	movs	r7, r2
    7564:	4698      	mov	r8, r3
    7566:	4e85      	ldr	r6, [pc, #532]	; (777c <__aeabi_dsub+0x624>)
    7568:	e67c      	b.n	7264 <__aeabi_dsub+0x10c>
    756a:	2500      	movs	r5, #0
    756c:	e780      	b.n	7470 <__aeabi_dsub+0x318>
    756e:	2100      	movs	r1, #0
    7570:	e78e      	b.n	7490 <__aeabi_dsub+0x338>
    7572:	0023      	movs	r3, r4
    7574:	4650      	mov	r0, sl
    7576:	4303      	orrs	r3, r0
    7578:	2e00      	cmp	r6, #0
    757a:	d000      	beq.n	757e <__aeabi_dsub+0x426>
    757c:	e0a8      	b.n	76d0 <__aeabi_dsub+0x578>
    757e:	2b00      	cmp	r3, #0
    7580:	d100      	bne.n	7584 <__aeabi_dsub+0x42c>
    7582:	e0de      	b.n	7742 <__aeabi_dsub+0x5ea>
    7584:	000b      	movs	r3, r1
    7586:	4313      	orrs	r3, r2
    7588:	d100      	bne.n	758c <__aeabi_dsub+0x434>
    758a:	e66b      	b.n	7264 <__aeabi_dsub+0x10c>
    758c:	4452      	add	r2, sl
    758e:	4552      	cmp	r2, sl
    7590:	4180      	sbcs	r0, r0
    7592:	1864      	adds	r4, r4, r1
    7594:	4240      	negs	r0, r0
    7596:	1824      	adds	r4, r4, r0
    7598:	0017      	movs	r7, r2
    759a:	0223      	lsls	r3, r4, #8
    759c:	d400      	bmi.n	75a0 <__aeabi_dsub+0x448>
    759e:	e6fd      	b.n	739c <__aeabi_dsub+0x244>
    75a0:	4b77      	ldr	r3, [pc, #476]	; (7780 <__aeabi_dsub+0x628>)
    75a2:	4666      	mov	r6, ip
    75a4:	401c      	ands	r4, r3
    75a6:	e65d      	b.n	7264 <__aeabi_dsub+0x10c>
    75a8:	0025      	movs	r5, r4
    75aa:	4650      	mov	r0, sl
    75ac:	4305      	orrs	r5, r0
    75ae:	2e00      	cmp	r6, #0
    75b0:	d1cf      	bne.n	7552 <__aeabi_dsub+0x3fa>
    75b2:	2d00      	cmp	r5, #0
    75b4:	d14f      	bne.n	7656 <__aeabi_dsub+0x4fe>
    75b6:	000c      	movs	r4, r1
    75b8:	4314      	orrs	r4, r2
    75ba:	d100      	bne.n	75be <__aeabi_dsub+0x466>
    75bc:	e0a0      	b.n	7700 <__aeabi_dsub+0x5a8>
    75be:	000c      	movs	r4, r1
    75c0:	0017      	movs	r7, r2
    75c2:	4698      	mov	r8, r3
    75c4:	e64e      	b.n	7264 <__aeabi_dsub+0x10c>
    75c6:	4666      	mov	r6, ip
    75c8:	2400      	movs	r4, #0
    75ca:	2700      	movs	r7, #0
    75cc:	e685      	b.n	72da <__aeabi_dsub+0x182>
    75ce:	001f      	movs	r7, r3
    75d0:	0008      	movs	r0, r1
    75d2:	3f20      	subs	r7, #32
    75d4:	40f8      	lsrs	r0, r7
    75d6:	0007      	movs	r7, r0
    75d8:	2b20      	cmp	r3, #32
    75da:	d100      	bne.n	75de <__aeabi_dsub+0x486>
    75dc:	e08e      	b.n	76fc <__aeabi_dsub+0x5a4>
    75de:	2040      	movs	r0, #64	; 0x40
    75e0:	1ac3      	subs	r3, r0, r3
    75e2:	4099      	lsls	r1, r3
    75e4:	430a      	orrs	r2, r1
    75e6:	1e51      	subs	r1, r2, #1
    75e8:	418a      	sbcs	r2, r1
    75ea:	2100      	movs	r1, #0
    75ec:	4317      	orrs	r7, r2
    75ee:	e692      	b.n	7316 <__aeabi_dsub+0x1be>
    75f0:	2e00      	cmp	r6, #0
    75f2:	d114      	bne.n	761e <__aeabi_dsub+0x4c6>
    75f4:	0026      	movs	r6, r4
    75f6:	4650      	mov	r0, sl
    75f8:	4306      	orrs	r6, r0
    75fa:	d062      	beq.n	76c2 <__aeabi_dsub+0x56a>
    75fc:	43db      	mvns	r3, r3
    75fe:	2b00      	cmp	r3, #0
    7600:	d15c      	bne.n	76bc <__aeabi_dsub+0x564>
    7602:	1887      	adds	r7, r0, r2
    7604:	4297      	cmp	r7, r2
    7606:	4192      	sbcs	r2, r2
    7608:	1864      	adds	r4, r4, r1
    760a:	4252      	negs	r2, r2
    760c:	18a4      	adds	r4, r4, r2
    760e:	4666      	mov	r6, ip
    7610:	e687      	b.n	7322 <__aeabi_dsub+0x1ca>
    7612:	4650      	mov	r0, sl
    7614:	4320      	orrs	r0, r4
    7616:	1e44      	subs	r4, r0, #1
    7618:	41a0      	sbcs	r0, r4
    761a:	2400      	movs	r4, #0
    761c:	e760      	b.n	74e0 <__aeabi_dsub+0x388>
    761e:	4e57      	ldr	r6, [pc, #348]	; (777c <__aeabi_dsub+0x624>)
    7620:	45b4      	cmp	ip, r6
    7622:	d04e      	beq.n	76c2 <__aeabi_dsub+0x56a>
    7624:	2680      	movs	r6, #128	; 0x80
    7626:	0436      	lsls	r6, r6, #16
    7628:	425b      	negs	r3, r3
    762a:	4334      	orrs	r4, r6
    762c:	2b38      	cmp	r3, #56	; 0x38
    762e:	dd00      	ble.n	7632 <__aeabi_dsub+0x4da>
    7630:	e07f      	b.n	7732 <__aeabi_dsub+0x5da>
    7632:	2b1f      	cmp	r3, #31
    7634:	dd00      	ble.n	7638 <__aeabi_dsub+0x4e0>
    7636:	e08b      	b.n	7750 <__aeabi_dsub+0x5f8>
    7638:	2620      	movs	r6, #32
    763a:	0027      	movs	r7, r4
    763c:	4650      	mov	r0, sl
    763e:	1af6      	subs	r6, r6, r3
    7640:	40b7      	lsls	r7, r6
    7642:	40d8      	lsrs	r0, r3
    7644:	4307      	orrs	r7, r0
    7646:	4650      	mov	r0, sl
    7648:	40b0      	lsls	r0, r6
    764a:	1e46      	subs	r6, r0, #1
    764c:	41b0      	sbcs	r0, r6
    764e:	4307      	orrs	r7, r0
    7650:	40dc      	lsrs	r4, r3
    7652:	18bf      	adds	r7, r7, r2
    7654:	e7d6      	b.n	7604 <__aeabi_dsub+0x4ac>
    7656:	000d      	movs	r5, r1
    7658:	4315      	orrs	r5, r2
    765a:	d100      	bne.n	765e <__aeabi_dsub+0x506>
    765c:	e602      	b.n	7264 <__aeabi_dsub+0x10c>
    765e:	4650      	mov	r0, sl
    7660:	1a80      	subs	r0, r0, r2
    7662:	4582      	cmp	sl, r0
    7664:	41bf      	sbcs	r7, r7
    7666:	1a65      	subs	r5, r4, r1
    7668:	427f      	negs	r7, r7
    766a:	1bed      	subs	r5, r5, r7
    766c:	4684      	mov	ip, r0
    766e:	0228      	lsls	r0, r5, #8
    7670:	d400      	bmi.n	7674 <__aeabi_dsub+0x51c>
    7672:	e68d      	b.n	7390 <__aeabi_dsub+0x238>
    7674:	4650      	mov	r0, sl
    7676:	1a17      	subs	r7, r2, r0
    7678:	42ba      	cmp	r2, r7
    767a:	4192      	sbcs	r2, r2
    767c:	1b0c      	subs	r4, r1, r4
    767e:	4252      	negs	r2, r2
    7680:	1aa4      	subs	r4, r4, r2
    7682:	4698      	mov	r8, r3
    7684:	e5ee      	b.n	7264 <__aeabi_dsub+0x10c>
    7686:	000d      	movs	r5, r1
    7688:	4315      	orrs	r5, r2
    768a:	d100      	bne.n	768e <__aeabi_dsub+0x536>
    768c:	e76b      	b.n	7566 <__aeabi_dsub+0x40e>
    768e:	4650      	mov	r0, sl
    7690:	0767      	lsls	r7, r4, #29
    7692:	08c0      	lsrs	r0, r0, #3
    7694:	4307      	orrs	r7, r0
    7696:	2080      	movs	r0, #128	; 0x80
    7698:	08e4      	lsrs	r4, r4, #3
    769a:	0300      	lsls	r0, r0, #12
    769c:	4204      	tst	r4, r0
    769e:	d007      	beq.n	76b0 <__aeabi_dsub+0x558>
    76a0:	08cd      	lsrs	r5, r1, #3
    76a2:	4205      	tst	r5, r0
    76a4:	d104      	bne.n	76b0 <__aeabi_dsub+0x558>
    76a6:	002c      	movs	r4, r5
    76a8:	4698      	mov	r8, r3
    76aa:	08d7      	lsrs	r7, r2, #3
    76ac:	0749      	lsls	r1, r1, #29
    76ae:	430f      	orrs	r7, r1
    76b0:	0f7b      	lsrs	r3, r7, #29
    76b2:	00e4      	lsls	r4, r4, #3
    76b4:	431c      	orrs	r4, r3
    76b6:	00ff      	lsls	r7, r7, #3
    76b8:	4e30      	ldr	r6, [pc, #192]	; (777c <__aeabi_dsub+0x624>)
    76ba:	e5d3      	b.n	7264 <__aeabi_dsub+0x10c>
    76bc:	4e2f      	ldr	r6, [pc, #188]	; (777c <__aeabi_dsub+0x624>)
    76be:	45b4      	cmp	ip, r6
    76c0:	d1b4      	bne.n	762c <__aeabi_dsub+0x4d4>
    76c2:	000c      	movs	r4, r1
    76c4:	0017      	movs	r7, r2
    76c6:	4666      	mov	r6, ip
    76c8:	e5cc      	b.n	7264 <__aeabi_dsub+0x10c>
    76ca:	2700      	movs	r7, #0
    76cc:	2400      	movs	r4, #0
    76ce:	e5e8      	b.n	72a2 <__aeabi_dsub+0x14a>
    76d0:	2b00      	cmp	r3, #0
    76d2:	d039      	beq.n	7748 <__aeabi_dsub+0x5f0>
    76d4:	000b      	movs	r3, r1
    76d6:	4313      	orrs	r3, r2
    76d8:	d100      	bne.n	76dc <__aeabi_dsub+0x584>
    76da:	e744      	b.n	7566 <__aeabi_dsub+0x40e>
    76dc:	08c0      	lsrs	r0, r0, #3
    76de:	0767      	lsls	r7, r4, #29
    76e0:	4307      	orrs	r7, r0
    76e2:	2080      	movs	r0, #128	; 0x80
    76e4:	08e4      	lsrs	r4, r4, #3
    76e6:	0300      	lsls	r0, r0, #12
    76e8:	4204      	tst	r4, r0
    76ea:	d0e1      	beq.n	76b0 <__aeabi_dsub+0x558>
    76ec:	08cb      	lsrs	r3, r1, #3
    76ee:	4203      	tst	r3, r0
    76f0:	d1de      	bne.n	76b0 <__aeabi_dsub+0x558>
    76f2:	08d7      	lsrs	r7, r2, #3
    76f4:	0749      	lsls	r1, r1, #29
    76f6:	430f      	orrs	r7, r1
    76f8:	001c      	movs	r4, r3
    76fa:	e7d9      	b.n	76b0 <__aeabi_dsub+0x558>
    76fc:	2100      	movs	r1, #0
    76fe:	e771      	b.n	75e4 <__aeabi_dsub+0x48c>
    7700:	2500      	movs	r5, #0
    7702:	2700      	movs	r7, #0
    7704:	e5e9      	b.n	72da <__aeabi_dsub+0x182>
    7706:	002e      	movs	r6, r5
    7708:	0027      	movs	r7, r4
    770a:	3e20      	subs	r6, #32
    770c:	40f7      	lsrs	r7, r6
    770e:	2d20      	cmp	r5, #32
    7710:	d02f      	beq.n	7772 <__aeabi_dsub+0x61a>
    7712:	2640      	movs	r6, #64	; 0x40
    7714:	1b75      	subs	r5, r6, r5
    7716:	40ac      	lsls	r4, r5
    7718:	4650      	mov	r0, sl
    771a:	4320      	orrs	r0, r4
    771c:	1e44      	subs	r4, r0, #1
    771e:	41a0      	sbcs	r0, r4
    7720:	2400      	movs	r4, #0
    7722:	4338      	orrs	r0, r7
    7724:	e6dc      	b.n	74e0 <__aeabi_dsub+0x388>
    7726:	2480      	movs	r4, #128	; 0x80
    7728:	2500      	movs	r5, #0
    772a:	0324      	lsls	r4, r4, #12
    772c:	4e13      	ldr	r6, [pc, #76]	; (777c <__aeabi_dsub+0x624>)
    772e:	2700      	movs	r7, #0
    7730:	e5d3      	b.n	72da <__aeabi_dsub+0x182>
    7732:	4650      	mov	r0, sl
    7734:	4320      	orrs	r0, r4
    7736:	0007      	movs	r7, r0
    7738:	1e78      	subs	r0, r7, #1
    773a:	4187      	sbcs	r7, r0
    773c:	2400      	movs	r4, #0
    773e:	18bf      	adds	r7, r7, r2
    7740:	e760      	b.n	7604 <__aeabi_dsub+0x4ac>
    7742:	000c      	movs	r4, r1
    7744:	0017      	movs	r7, r2
    7746:	e58d      	b.n	7264 <__aeabi_dsub+0x10c>
    7748:	000c      	movs	r4, r1
    774a:	0017      	movs	r7, r2
    774c:	4e0b      	ldr	r6, [pc, #44]	; (777c <__aeabi_dsub+0x624>)
    774e:	e589      	b.n	7264 <__aeabi_dsub+0x10c>
    7750:	001e      	movs	r6, r3
    7752:	0027      	movs	r7, r4
    7754:	3e20      	subs	r6, #32
    7756:	40f7      	lsrs	r7, r6
    7758:	2b20      	cmp	r3, #32
    775a:	d00c      	beq.n	7776 <__aeabi_dsub+0x61e>
    775c:	2640      	movs	r6, #64	; 0x40
    775e:	1af3      	subs	r3, r6, r3
    7760:	409c      	lsls	r4, r3
    7762:	4650      	mov	r0, sl
    7764:	4320      	orrs	r0, r4
    7766:	1e44      	subs	r4, r0, #1
    7768:	41a0      	sbcs	r0, r4
    776a:	4307      	orrs	r7, r0
    776c:	2400      	movs	r4, #0
    776e:	18bf      	adds	r7, r7, r2
    7770:	e748      	b.n	7604 <__aeabi_dsub+0x4ac>
    7772:	2400      	movs	r4, #0
    7774:	e7d0      	b.n	7718 <__aeabi_dsub+0x5c0>
    7776:	2400      	movs	r4, #0
    7778:	e7f3      	b.n	7762 <__aeabi_dsub+0x60a>
    777a:	46c0      	nop			; (mov r8, r8)
    777c:	000007ff 	.word	0x000007ff
    7780:	ff7fffff 	.word	0xff7fffff

00007784 <__aeabi_dcmpun>:
    7784:	b570      	push	{r4, r5, r6, lr}
    7786:	4e0e      	ldr	r6, [pc, #56]	; (77c0 <__aeabi_dcmpun+0x3c>)
    7788:	030d      	lsls	r5, r1, #12
    778a:	031c      	lsls	r4, r3, #12
    778c:	0049      	lsls	r1, r1, #1
    778e:	005b      	lsls	r3, r3, #1
    7790:	0b2d      	lsrs	r5, r5, #12
    7792:	0d49      	lsrs	r1, r1, #21
    7794:	0b24      	lsrs	r4, r4, #12
    7796:	0d5b      	lsrs	r3, r3, #21
    7798:	42b1      	cmp	r1, r6
    779a:	d004      	beq.n	77a6 <__aeabi_dcmpun+0x22>
    779c:	4908      	ldr	r1, [pc, #32]	; (77c0 <__aeabi_dcmpun+0x3c>)
    779e:	2000      	movs	r0, #0
    77a0:	428b      	cmp	r3, r1
    77a2:	d008      	beq.n	77b6 <__aeabi_dcmpun+0x32>
    77a4:	bd70      	pop	{r4, r5, r6, pc}
    77a6:	4305      	orrs	r5, r0
    77a8:	2001      	movs	r0, #1
    77aa:	2d00      	cmp	r5, #0
    77ac:	d1fa      	bne.n	77a4 <__aeabi_dcmpun+0x20>
    77ae:	4904      	ldr	r1, [pc, #16]	; (77c0 <__aeabi_dcmpun+0x3c>)
    77b0:	2000      	movs	r0, #0
    77b2:	428b      	cmp	r3, r1
    77b4:	d1f6      	bne.n	77a4 <__aeabi_dcmpun+0x20>
    77b6:	4314      	orrs	r4, r2
    77b8:	0020      	movs	r0, r4
    77ba:	1e44      	subs	r4, r0, #1
    77bc:	41a0      	sbcs	r0, r4
    77be:	e7f1      	b.n	77a4 <__aeabi_dcmpun+0x20>
    77c0:	000007ff 	.word	0x000007ff

000077c4 <__aeabi_d2iz>:
    77c4:	b530      	push	{r4, r5, lr}
    77c6:	4d13      	ldr	r5, [pc, #76]	; (7814 <__aeabi_d2iz+0x50>)
    77c8:	030a      	lsls	r2, r1, #12
    77ca:	004b      	lsls	r3, r1, #1
    77cc:	0b12      	lsrs	r2, r2, #12
    77ce:	0d5b      	lsrs	r3, r3, #21
    77d0:	0fc9      	lsrs	r1, r1, #31
    77d2:	2400      	movs	r4, #0
    77d4:	42ab      	cmp	r3, r5
    77d6:	dd10      	ble.n	77fa <__aeabi_d2iz+0x36>
    77d8:	4c0f      	ldr	r4, [pc, #60]	; (7818 <__aeabi_d2iz+0x54>)
    77da:	42a3      	cmp	r3, r4
    77dc:	dc0f      	bgt.n	77fe <__aeabi_d2iz+0x3a>
    77de:	2480      	movs	r4, #128	; 0x80
    77e0:	4d0e      	ldr	r5, [pc, #56]	; (781c <__aeabi_d2iz+0x58>)
    77e2:	0364      	lsls	r4, r4, #13
    77e4:	4322      	orrs	r2, r4
    77e6:	1aed      	subs	r5, r5, r3
    77e8:	2d1f      	cmp	r5, #31
    77ea:	dd0b      	ble.n	7804 <__aeabi_d2iz+0x40>
    77ec:	480c      	ldr	r0, [pc, #48]	; (7820 <__aeabi_d2iz+0x5c>)
    77ee:	1ac3      	subs	r3, r0, r3
    77f0:	40da      	lsrs	r2, r3
    77f2:	4254      	negs	r4, r2
    77f4:	2900      	cmp	r1, #0
    77f6:	d100      	bne.n	77fa <__aeabi_d2iz+0x36>
    77f8:	0014      	movs	r4, r2
    77fa:	0020      	movs	r0, r4
    77fc:	bd30      	pop	{r4, r5, pc}
    77fe:	4b09      	ldr	r3, [pc, #36]	; (7824 <__aeabi_d2iz+0x60>)
    7800:	18cc      	adds	r4, r1, r3
    7802:	e7fa      	b.n	77fa <__aeabi_d2iz+0x36>
    7804:	4c08      	ldr	r4, [pc, #32]	; (7828 <__aeabi_d2iz+0x64>)
    7806:	40e8      	lsrs	r0, r5
    7808:	46a4      	mov	ip, r4
    780a:	4463      	add	r3, ip
    780c:	409a      	lsls	r2, r3
    780e:	4302      	orrs	r2, r0
    7810:	e7ef      	b.n	77f2 <__aeabi_d2iz+0x2e>
    7812:	46c0      	nop			; (mov r8, r8)
    7814:	000003fe 	.word	0x000003fe
    7818:	0000041d 	.word	0x0000041d
    781c:	00000433 	.word	0x00000433
    7820:	00000413 	.word	0x00000413
    7824:	7fffffff 	.word	0x7fffffff
    7828:	fffffbed 	.word	0xfffffbed

0000782c <__aeabi_i2d>:
    782c:	b570      	push	{r4, r5, r6, lr}
    782e:	2800      	cmp	r0, #0
    7830:	d030      	beq.n	7894 <__aeabi_i2d+0x68>
    7832:	17c3      	asrs	r3, r0, #31
    7834:	18c4      	adds	r4, r0, r3
    7836:	405c      	eors	r4, r3
    7838:	0fc5      	lsrs	r5, r0, #31
    783a:	0020      	movs	r0, r4
    783c:	f000 f870 	bl	7920 <__clzsi2>
    7840:	4b17      	ldr	r3, [pc, #92]	; (78a0 <__aeabi_i2d+0x74>)
    7842:	4a18      	ldr	r2, [pc, #96]	; (78a4 <__aeabi_i2d+0x78>)
    7844:	1a1b      	subs	r3, r3, r0
    7846:	1ad2      	subs	r2, r2, r3
    7848:	2a1f      	cmp	r2, #31
    784a:	dd18      	ble.n	787e <__aeabi_i2d+0x52>
    784c:	4a16      	ldr	r2, [pc, #88]	; (78a8 <__aeabi_i2d+0x7c>)
    784e:	1ad2      	subs	r2, r2, r3
    7850:	4094      	lsls	r4, r2
    7852:	2200      	movs	r2, #0
    7854:	0324      	lsls	r4, r4, #12
    7856:	055b      	lsls	r3, r3, #21
    7858:	0b24      	lsrs	r4, r4, #12
    785a:	0d5b      	lsrs	r3, r3, #21
    785c:	2100      	movs	r1, #0
    785e:	0010      	movs	r0, r2
    7860:	0324      	lsls	r4, r4, #12
    7862:	0d0a      	lsrs	r2, r1, #20
    7864:	0b24      	lsrs	r4, r4, #12
    7866:	0512      	lsls	r2, r2, #20
    7868:	4322      	orrs	r2, r4
    786a:	4c10      	ldr	r4, [pc, #64]	; (78ac <__aeabi_i2d+0x80>)
    786c:	051b      	lsls	r3, r3, #20
    786e:	4022      	ands	r2, r4
    7870:	4313      	orrs	r3, r2
    7872:	005b      	lsls	r3, r3, #1
    7874:	07ed      	lsls	r5, r5, #31
    7876:	085b      	lsrs	r3, r3, #1
    7878:	432b      	orrs	r3, r5
    787a:	0019      	movs	r1, r3
    787c:	bd70      	pop	{r4, r5, r6, pc}
    787e:	0021      	movs	r1, r4
    7880:	4091      	lsls	r1, r2
    7882:	000a      	movs	r2, r1
    7884:	210b      	movs	r1, #11
    7886:	1a08      	subs	r0, r1, r0
    7888:	40c4      	lsrs	r4, r0
    788a:	055b      	lsls	r3, r3, #21
    788c:	0324      	lsls	r4, r4, #12
    788e:	0b24      	lsrs	r4, r4, #12
    7890:	0d5b      	lsrs	r3, r3, #21
    7892:	e7e3      	b.n	785c <__aeabi_i2d+0x30>
    7894:	2500      	movs	r5, #0
    7896:	2300      	movs	r3, #0
    7898:	2400      	movs	r4, #0
    789a:	2200      	movs	r2, #0
    789c:	e7de      	b.n	785c <__aeabi_i2d+0x30>
    789e:	46c0      	nop			; (mov r8, r8)
    78a0:	0000041e 	.word	0x0000041e
    78a4:	00000433 	.word	0x00000433
    78a8:	00000413 	.word	0x00000413
    78ac:	800fffff 	.word	0x800fffff

000078b0 <__aeabi_ui2d>:
    78b0:	b510      	push	{r4, lr}
    78b2:	1e04      	subs	r4, r0, #0
    78b4:	d028      	beq.n	7908 <__aeabi_ui2d+0x58>
    78b6:	f000 f833 	bl	7920 <__clzsi2>
    78ba:	4b15      	ldr	r3, [pc, #84]	; (7910 <__aeabi_ui2d+0x60>)
    78bc:	4a15      	ldr	r2, [pc, #84]	; (7914 <__aeabi_ui2d+0x64>)
    78be:	1a1b      	subs	r3, r3, r0
    78c0:	1ad2      	subs	r2, r2, r3
    78c2:	2a1f      	cmp	r2, #31
    78c4:	dd15      	ble.n	78f2 <__aeabi_ui2d+0x42>
    78c6:	4a14      	ldr	r2, [pc, #80]	; (7918 <__aeabi_ui2d+0x68>)
    78c8:	1ad2      	subs	r2, r2, r3
    78ca:	4094      	lsls	r4, r2
    78cc:	2200      	movs	r2, #0
    78ce:	0324      	lsls	r4, r4, #12
    78d0:	055b      	lsls	r3, r3, #21
    78d2:	0b24      	lsrs	r4, r4, #12
    78d4:	0d5b      	lsrs	r3, r3, #21
    78d6:	2100      	movs	r1, #0
    78d8:	0010      	movs	r0, r2
    78da:	0324      	lsls	r4, r4, #12
    78dc:	0d0a      	lsrs	r2, r1, #20
    78de:	0b24      	lsrs	r4, r4, #12
    78e0:	0512      	lsls	r2, r2, #20
    78e2:	4322      	orrs	r2, r4
    78e4:	4c0d      	ldr	r4, [pc, #52]	; (791c <__aeabi_ui2d+0x6c>)
    78e6:	051b      	lsls	r3, r3, #20
    78e8:	4022      	ands	r2, r4
    78ea:	4313      	orrs	r3, r2
    78ec:	005b      	lsls	r3, r3, #1
    78ee:	0859      	lsrs	r1, r3, #1
    78f0:	bd10      	pop	{r4, pc}
    78f2:	0021      	movs	r1, r4
    78f4:	4091      	lsls	r1, r2
    78f6:	000a      	movs	r2, r1
    78f8:	210b      	movs	r1, #11
    78fa:	1a08      	subs	r0, r1, r0
    78fc:	40c4      	lsrs	r4, r0
    78fe:	055b      	lsls	r3, r3, #21
    7900:	0324      	lsls	r4, r4, #12
    7902:	0b24      	lsrs	r4, r4, #12
    7904:	0d5b      	lsrs	r3, r3, #21
    7906:	e7e6      	b.n	78d6 <__aeabi_ui2d+0x26>
    7908:	2300      	movs	r3, #0
    790a:	2400      	movs	r4, #0
    790c:	2200      	movs	r2, #0
    790e:	e7e2      	b.n	78d6 <__aeabi_ui2d+0x26>
    7910:	0000041e 	.word	0x0000041e
    7914:	00000433 	.word	0x00000433
    7918:	00000413 	.word	0x00000413
    791c:	800fffff 	.word	0x800fffff

00007920 <__clzsi2>:
    7920:	211c      	movs	r1, #28
    7922:	2301      	movs	r3, #1
    7924:	041b      	lsls	r3, r3, #16
    7926:	4298      	cmp	r0, r3
    7928:	d301      	bcc.n	792e <__clzsi2+0xe>
    792a:	0c00      	lsrs	r0, r0, #16
    792c:	3910      	subs	r1, #16
    792e:	0a1b      	lsrs	r3, r3, #8
    7930:	4298      	cmp	r0, r3
    7932:	d301      	bcc.n	7938 <__clzsi2+0x18>
    7934:	0a00      	lsrs	r0, r0, #8
    7936:	3908      	subs	r1, #8
    7938:	091b      	lsrs	r3, r3, #4
    793a:	4298      	cmp	r0, r3
    793c:	d301      	bcc.n	7942 <__clzsi2+0x22>
    793e:	0900      	lsrs	r0, r0, #4
    7940:	3904      	subs	r1, #4
    7942:	a202      	add	r2, pc, #8	; (adr r2, 794c <__clzsi2+0x2c>)
    7944:	5c10      	ldrb	r0, [r2, r0]
    7946:	1840      	adds	r0, r0, r1
    7948:	4770      	bx	lr
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	02020304 	.word	0x02020304
    7950:	01010101 	.word	0x01010101
	...
    795c:	682f2e2e 	.word	0x682f2e2e
    7960:	732f6c61 	.word	0x732f6c61
    7964:	682f6372 	.word	0x682f6372
    7968:	615f6c61 	.word	0x615f6c61
    796c:	615f6364 	.word	0x615f6364
    7970:	636e7973 	.word	0x636e7973
    7974:	0000632e 	.word	0x0000632e
    7978:	682f2e2e 	.word	0x682f2e2e
    797c:	732f6c61 	.word	0x732f6c61
    7980:	682f6372 	.word	0x682f6372
    7984:	695f6c61 	.word	0x695f6c61
    7988:	6d5f6332 	.word	0x6d5f6332
    798c:	6e79735f 	.word	0x6e79735f
    7990:	00632e63 	.word	0x00632e63
    7994:	682f2e2e 	.word	0x682f2e2e
    7998:	732f6c61 	.word	0x732f6c61
    799c:	682f6372 	.word	0x682f6372
    79a0:	695f6c61 	.word	0x695f6c61
    79a4:	00632e6f 	.word	0x00632e6f
    79a8:	682f2e2e 	.word	0x682f2e2e
    79ac:	732f6c61 	.word	0x732f6c61
    79b0:	682f6372 	.word	0x682f6372
    79b4:	735f6c61 	.word	0x735f6c61
    79b8:	735f6970 	.word	0x735f6970
    79bc:	7973615f 	.word	0x7973615f
    79c0:	632e636e 	.word	0x632e636e
    79c4:	00000000 	.word	0x00000000
    79c8:	682f2e2e 	.word	0x682f2e2e
    79cc:	732f6c61 	.word	0x732f6c61
    79d0:	682f6372 	.word	0x682f6372
    79d4:	745f6c61 	.word	0x745f6c61
    79d8:	72656d69 	.word	0x72656d69
    79dc:	0000632e 	.word	0x0000632e
    79e0:	682f2e2e 	.word	0x682f2e2e
    79e4:	732f6c61 	.word	0x732f6c61
    79e8:	682f6372 	.word	0x682f6372
    79ec:	755f6c61 	.word	0x755f6c61
    79f0:	74726173 	.word	0x74726173
    79f4:	6e79735f 	.word	0x6e79735f
    79f8:	00632e63 	.word	0x00632e63
    79fc:	682f2e2e 	.word	0x682f2e2e
    7a00:	752f6c61 	.word	0x752f6c61
    7a04:	736c6974 	.word	0x736c6974
    7a08:	6372732f 	.word	0x6372732f
    7a0c:	6974752f 	.word	0x6974752f
    7a10:	6c5f736c 	.word	0x6c5f736c
    7a14:	2e747369 	.word	0x2e747369
    7a18:	00000063 	.word	0x00000063
    7a1c:	682f2e2e 	.word	0x682f2e2e
    7a20:	752f6c61 	.word	0x752f6c61
    7a24:	736c6974 	.word	0x736c6974
    7a28:	6372732f 	.word	0x6372732f
    7a2c:	6974752f 	.word	0x6974752f
    7a30:	725f736c 	.word	0x725f736c
    7a34:	62676e69 	.word	0x62676e69
    7a38:	65666675 	.word	0x65666675
    7a3c:	00632e72 	.word	0x00632e72

00007a40 <_adcs>:
    7a40:	00040200 00000000 00000000 00001800     ................
	...
    7a5c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    7a6c:	632e6364 00000000                       dc.c....

00007a74 <_i2cms>:
    7a74:	00000001 00200014 00000100 000000ff     ...... .........
    7a84:	00d70000 000f4240 00000002 00200014     ....@B........ .
    7a94:	00000100 000000ff 00d70000 000f4240     ............@B..
    7aa4:	00000003 00200014 00000100 000000ff     ...... .........
    7ab4:	00d70000 000f4240 682f2e2e 732f6c70     ....@B..../hpl/s
    7ac4:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    7ad4:	0000632e                                .c..

00007ad8 <_tcs>:
    7ad8:	03680003 00000000 00000000 0000007d     ..h.........}...
    7ae8:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    7af8:	63745f6c 0000632e 0d216968 00000000     l_tc.c..hi!.....
    7b08:	20434441 3a776152 25783020 0d583430     ADC Raw: 0x%04X.
    7b18:	0000000a 20434441 766e6f43 65747265     ....ADC Converte
    7b28:	25203a64 0d66322e 0000000a 676e6952     d: %.2f.....Ring
    7b38:	66756220 20726566 6c6c7566 6769202c      buffer full, ig
    7b48:	69726f6e 7720676e 65746972 0d0a2173     noring writes!..
    7b58:	00000000 68746f4e 20676e69 72206f74     ....Nothing to r
    7b68:	2e646165 0d0a2e2e 00000000 6f437872     ead.........rxCo
    7b78:	3a746e75 756c2520 43787409 746e756f     unt: %lu.txCount
    7b88:	6c25203a 000a0d75 78740a0d 6f6c6c41     : %lu.....txAllo
    7b98:	3a646577 00692520 78720a0d 64616568     wed: %i...rxhead
    7ba8:	65646e49 25203a78 09090969 65687872     Index: %i...rxhe
    7bb8:	6e496461 3a786564 0d692520 0000000a     adIndex: %i.....
    7bc8:	61747872 6e496c69 3a786564 09692520     rxtailIndex: %i.
    7bd8:	78740909 6c696174 65646e49 25203a78     ..txtailIndex: %
    7be8:	000a0d69 79427872 52736574 69616d65     i...rxBytesRemai
    7bf8:	676e696e 6925203a 78740909 65747942     ning: %i..txByte
    7c08:	6d655273 696e6961 2520676e 000a0d69     sRemaining %i...
    7c18:	61447872 255b6174 5d693230 7830203a     rxData[%02i]: 0x
    7c28:	58323025 78740909 61746144 3230255b     %02X..txData[%02
    7c38:	203a5d69 30257830 0a0d5832 00000000     i]: 0x%02X......
    7c48:	6f422d5a 20647261 69676572 72657473     Z-Board register
    7c58:	766e6920 64696c61 0000000d 64726148      invalid....Hard
    7c68:	65726177 746e6920 61667265 6e206563     ware interface n
    7c78:	7620746f 64696c61 0000000d 36312f38     ot valid....8/16
    7c88:	74696220 74616420 656c2061 6874676e      bit data length
    7c98:	766e6920 64696c61 0000000d               invalid....

00007ca4 <_global_impure_ptr>:
    7ca4:	20000004 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    7cb4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    7cc4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    7cd4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    7ce4:	4e614e00 00000000                       .NaN....

00007cec <__sf_fake_stderr>:
	...

00007d0c <__sf_fake_stdin>:
	...

00007d2c <__sf_fake_stdout>:
	...

00007d50 <__mprec_bigtens>:
    7d50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7d60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7d70:	7f73bf3c 75154fdd                       <.s..O.u

00007d78 <__mprec_tens>:
    7d78:	00000000 3ff00000 00000000 40240000     .......?......$@
    7d88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    7d98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    7da8:	00000000 412e8480 00000000 416312d0     .......A......cA
    7db8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    7dc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    7dd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    7de8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    7df8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    7e08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7e18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7e28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7e38:	79d99db4 44ea7843                       ...yCx.D

00007e40 <p05.6047>:
    7e40:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    7e50:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    7e60:	5849534f 00002e00                                OSIX...

00007e67 <_ctype_>:
    7e67:	20202000 20202020 28282020 20282828     .         ((((( 
    7e77:	20202020 20202020 20202020 20202020                     
    7e87:	10108820 10101010 10101010 10101010      ...............
    7e97:	04040410 04040404 10040404 10101010     ................
    7ea7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    7eb7:	01010101 01010101 01010101 10101010     ................
    7ec7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7ed7:	02020202 02020202 02020202 10101010     ................
    7ee7:	00000020 00000000 00000000 00000000      ...............
	...
    7f67:	0065e800 0065ca00 00658400 0064a200     ..e...e...e...d.
    7f77:	00658400 0065bc00 00658400 0064a200     ..e...e...e...d.
    7f87:	0065ca00 0065ca00 0065bc00 0064a200     ..e...e...e...d.
    7f97:	00649a00 00649a00 00649a00 00680000     ..d...d...d...h.
    7fa7:	006e4800 006d0800 006d0800 006d0400     .Hn...m...m...m.
    7fb7:	006e2000 006e2000 006e1200 006d0400     . n.. n...n...m.
    7fc7:	006e2000 006e1200 006e2000 006d0400     . n...n.. n...m.
    7fd7:	006e2800 006e2800 006e2800 00702c00     .(n..(n..(n..,p.
	...

00007fe8 <_init>:
    7fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fea:	46c0      	nop			; (mov r8, r8)
    7fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7fee:	bc08      	pop	{r3}
    7ff0:	469e      	mov	lr, r3
    7ff2:	4770      	bx	lr

00007ff4 <__init_array_start>:
    7ff4:	000000e1 	.word	0x000000e1

00007ff8 <_fini>:
    7ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ffa:	46c0      	nop			; (mov r8, r8)
    7ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7ffe:	bc08      	pop	{r3}
    8000:	469e      	mov	lr, r3
    8002:	4770      	bx	lr

00008004 <__fini_array_start>:
    8004:	000000b9 	.word	0x000000b9
